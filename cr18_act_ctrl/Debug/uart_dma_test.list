
uart_dma_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002c6c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  08002d78  08002d78  00012d78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000084  08002df0  08002df0  00012df0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM          00000130  08002e74  08002e74  00012e74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .init_array   00000008  08002fa4  08002fa4  00012fa4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .fini_array   00000004  08002fac  08002fac  00012fac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .data         00000100  20000000  08002fb0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .bss          00000534  20000100  080030b0  00020100  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  20000634  080030b0  00020634  2**0
                  ALLOC
 10 .ARM.attributes 00000029  00000000  00000000  00020100  2**0
                  CONTENTS, READONLY
 11 .debug_info   0001138b  00000000  00000000  00020129  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 000022fd  00000000  00000000  000314b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 000008f8  00000000  00000000  000337b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000a88  00000000  00000000  000340b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   000046ec  00000000  00000000  00034b38  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    0000376b  00000000  00000000  00039224  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  0003c98f  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00002124  00000000  00000000  0003ca0c  2**2
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_loc    00005f90  00000000  00000000  0003eb30  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .stab         0000003c  00000000  00000000  00044ac0  2**2
                  CONTENTS, READONLY, DEBUGGING
 21 .stabstr      00000076  00000000  00000000  00044afc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000100 	.word	0x20000100
 8000128:	00000000 	.word	0x00000000
 800012c:	08002d60 	.word	0x08002d60

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000104 	.word	0x20000104
 8000148:	08002d60 	.word	0x08002d60

0800014c <selfrel_offset31>:
 800014c:	6803      	ldr	r3, [r0, #0]
 800014e:	005a      	lsls	r2, r3, #1
 8000150:	bf4c      	ite	mi
 8000152:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8000156:	f023 4300 	bicpl.w	r3, r3, #2147483648	; 0x80000000
 800015a:	4418      	add	r0, r3
 800015c:	4770      	bx	lr
 800015e:	bf00      	nop

08000160 <search_EIT_table>:
 8000160:	b361      	cbz	r1, 80001bc <search_EIT_table+0x5c>
 8000162:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000166:	f101 3aff 	add.w	sl, r1, #4294967295	; 0xffffffff
 800016a:	4690      	mov	r8, r2
 800016c:	4606      	mov	r6, r0
 800016e:	46d1      	mov	r9, sl
 8000170:	2700      	movs	r7, #0
 8000172:	eb07 0409 	add.w	r4, r7, r9
 8000176:	eb04 74d4 	add.w	r4, r4, r4, lsr #31
 800017a:	1064      	asrs	r4, r4, #1
 800017c:	00e5      	lsls	r5, r4, #3
 800017e:	1971      	adds	r1, r6, r5
 8000180:	4608      	mov	r0, r1
 8000182:	f7ff ffe3 	bl	800014c <selfrel_offset31>
 8000186:	45a2      	cmp	sl, r4
 8000188:	4683      	mov	fp, r0
 800018a:	f105 0008 	add.w	r0, r5, #8
 800018e:	4430      	add	r0, r6
 8000190:	d009      	beq.n	80001a6 <search_EIT_table+0x46>
 8000192:	f7ff ffdb 	bl	800014c <selfrel_offset31>
 8000196:	45c3      	cmp	fp, r8
 8000198:	f100 30ff 	add.w	r0, r0, #4294967295	; 0xffffffff
 800019c:	d805      	bhi.n	80001aa <search_EIT_table+0x4a>
 800019e:	4540      	cmp	r0, r8
 80001a0:	d209      	bcs.n	80001b6 <search_EIT_table+0x56>
 80001a2:	1c67      	adds	r7, r4, #1
 80001a4:	e7e5      	b.n	8000172 <search_EIT_table+0x12>
 80001a6:	45c3      	cmp	fp, r8
 80001a8:	d905      	bls.n	80001b6 <search_EIT_table+0x56>
 80001aa:	42a7      	cmp	r7, r4
 80001ac:	d002      	beq.n	80001b4 <search_EIT_table+0x54>
 80001ae:	f104 39ff 	add.w	r9, r4, #4294967295	; 0xffffffff
 80001b2:	e7de      	b.n	8000172 <search_EIT_table+0x12>
 80001b4:	2100      	movs	r1, #0
 80001b6:	4608      	mov	r0, r1
 80001b8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80001bc:	4608      	mov	r0, r1
 80001be:	4770      	bx	lr

080001c0 <__gnu_unwind_get_pr_addr>:
 80001c0:	2801      	cmp	r0, #1
 80001c2:	d007      	beq.n	80001d4 <__gnu_unwind_get_pr_addr+0x14>
 80001c4:	2802      	cmp	r0, #2
 80001c6:	d007      	beq.n	80001d8 <__gnu_unwind_get_pr_addr+0x18>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__gnu_unwind_get_pr_addr+0x1c>)
 80001ca:	2800      	cmp	r0, #0
 80001cc:	bf0c      	ite	eq
 80001ce:	4618      	moveq	r0, r3
 80001d0:	2000      	movne	r0, #0
 80001d2:	4770      	bx	lr
 80001d4:	4802      	ldr	r0, [pc, #8]	; (80001e0 <__gnu_unwind_get_pr_addr+0x20>)
 80001d6:	4770      	bx	lr
 80001d8:	4802      	ldr	r0, [pc, #8]	; (80001e4 <__gnu_unwind_get_pr_addr+0x24>)
 80001da:	4770      	bx	lr
 80001dc:	080008d1 	.word	0x080008d1
 80001e0:	080008d5 	.word	0x080008d5
 80001e4:	080008d9 	.word	0x080008d9

080001e8 <get_eit_entry>:
 80001e8:	b530      	push	{r4, r5, lr}
 80001ea:	4b25      	ldr	r3, [pc, #148]	; (8000280 <get_eit_entry+0x98>)
 80001ec:	b083      	sub	sp, #12
 80001ee:	4604      	mov	r4, r0
 80001f0:	1e8d      	subs	r5, r1, #2
 80001f2:	b373      	cbz	r3, 8000252 <get_eit_entry+0x6a>
 80001f4:	a901      	add	r1, sp, #4
 80001f6:	4628      	mov	r0, r5
 80001f8:	f3af 8000 	nop.w
 80001fc:	b318      	cbz	r0, 8000246 <get_eit_entry+0x5e>
 80001fe:	9901      	ldr	r1, [sp, #4]
 8000200:	462a      	mov	r2, r5
 8000202:	f7ff ffad 	bl	8000160 <search_EIT_table>
 8000206:	4601      	mov	r1, r0
 8000208:	b1e8      	cbz	r0, 8000246 <get_eit_entry+0x5e>
 800020a:	f7ff ff9f 	bl	800014c <selfrel_offset31>
 800020e:	684b      	ldr	r3, [r1, #4]
 8000210:	64a0      	str	r0, [r4, #72]	; 0x48
 8000212:	2b01      	cmp	r3, #1
 8000214:	d011      	beq.n	800023a <get_eit_entry+0x52>
 8000216:	2b00      	cmp	r3, #0
 8000218:	db22      	blt.n	8000260 <get_eit_entry+0x78>
 800021a:	1d08      	adds	r0, r1, #4
 800021c:	f7ff ff96 	bl	800014c <selfrel_offset31>
 8000220:	2300      	movs	r3, #0
 8000222:	64e0      	str	r0, [r4, #76]	; 0x4c
 8000224:	6523      	str	r3, [r4, #80]	; 0x50
 8000226:	6803      	ldr	r3, [r0, #0]
 8000228:	2b00      	cmp	r3, #0
 800022a:	db1e      	blt.n	800026a <get_eit_entry+0x82>
 800022c:	f7ff ff8e 	bl	800014c <selfrel_offset31>
 8000230:	2300      	movs	r3, #0
 8000232:	6120      	str	r0, [r4, #16]
 8000234:	4618      	mov	r0, r3
 8000236:	b003      	add	sp, #12
 8000238:	bd30      	pop	{r4, r5, pc}
 800023a:	2305      	movs	r3, #5
 800023c:	2200      	movs	r2, #0
 800023e:	4618      	mov	r0, r3
 8000240:	6122      	str	r2, [r4, #16]
 8000242:	b003      	add	sp, #12
 8000244:	bd30      	pop	{r4, r5, pc}
 8000246:	2309      	movs	r3, #9
 8000248:	2200      	movs	r2, #0
 800024a:	4618      	mov	r0, r3
 800024c:	6122      	str	r2, [r4, #16]
 800024e:	b003      	add	sp, #12
 8000250:	bd30      	pop	{r4, r5, pc}
 8000252:	4b0c      	ldr	r3, [pc, #48]	; (8000284 <get_eit_entry+0x9c>)
 8000254:	490c      	ldr	r1, [pc, #48]	; (8000288 <get_eit_entry+0xa0>)
 8000256:	4618      	mov	r0, r3
 8000258:	1ac9      	subs	r1, r1, r3
 800025a:	10c9      	asrs	r1, r1, #3
 800025c:	9101      	str	r1, [sp, #4]
 800025e:	e7cf      	b.n	8000200 <get_eit_entry+0x18>
 8000260:	2301      	movs	r3, #1
 8000262:	1d08      	adds	r0, r1, #4
 8000264:	64e0      	str	r0, [r4, #76]	; 0x4c
 8000266:	6523      	str	r3, [r4, #80]	; 0x50
 8000268:	e7dd      	b.n	8000226 <get_eit_entry+0x3e>
 800026a:	f3c3 6003 	ubfx	r0, r3, #24, #4
 800026e:	f7ff ffa7 	bl	80001c0 <__gnu_unwind_get_pr_addr>
 8000272:	2800      	cmp	r0, #0
 8000274:	6120      	str	r0, [r4, #16]
 8000276:	bf14      	ite	ne
 8000278:	2300      	movne	r3, #0
 800027a:	2309      	moveq	r3, #9
 800027c:	e7da      	b.n	8000234 <get_eit_entry+0x4c>
 800027e:	bf00      	nop
 8000280:	00000000 	.word	0x00000000
 8000284:	08002e74 	.word	0x08002e74
 8000288:	08002fa4 	.word	0x08002fa4

0800028c <restore_non_core_regs>:
 800028c:	6803      	ldr	r3, [r0, #0]
 800028e:	b510      	push	{r4, lr}
 8000290:	07da      	lsls	r2, r3, #31
 8000292:	4604      	mov	r4, r0
 8000294:	d406      	bmi.n	80002a4 <restore_non_core_regs+0x18>
 8000296:	079b      	lsls	r3, r3, #30
 8000298:	f100 0048 	add.w	r0, r0, #72	; 0x48
 800029c:	d509      	bpl.n	80002b2 <restore_non_core_regs+0x26>
 800029e:	f000 fc57 	bl	8000b50 <__gnu_Unwind_Restore_VFP_D>
 80002a2:	6823      	ldr	r3, [r4, #0]
 80002a4:	0759      	lsls	r1, r3, #29
 80002a6:	d509      	bpl.n	80002bc <restore_non_core_regs+0x30>
 80002a8:	071a      	lsls	r2, r3, #28
 80002aa:	d50e      	bpl.n	80002ca <restore_non_core_regs+0x3e>
 80002ac:	06db      	lsls	r3, r3, #27
 80002ae:	d513      	bpl.n	80002d8 <restore_non_core_regs+0x4c>
 80002b0:	bd10      	pop	{r4, pc}
 80002b2:	f000 fc45 	bl	8000b40 <__gnu_Unwind_Restore_VFP>
 80002b6:	6823      	ldr	r3, [r4, #0]
 80002b8:	0759      	lsls	r1, r3, #29
 80002ba:	d4f5      	bmi.n	80002a8 <restore_non_core_regs+0x1c>
 80002bc:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80002c0:	f000 fc4e 	bl	8000b60 <__gnu_Unwind_Restore_VFP_D_16_to_31>
 80002c4:	6823      	ldr	r3, [r4, #0]
 80002c6:	071a      	lsls	r2, r3, #28
 80002c8:	d4f0      	bmi.n	80002ac <restore_non_core_regs+0x20>
 80002ca:	f504 70a8 	add.w	r0, r4, #336	; 0x150
 80002ce:	f000 fc4f 	bl	8000b70 <__gnu_Unwind_Restore_WMMXD>
 80002d2:	6823      	ldr	r3, [r4, #0]
 80002d4:	06db      	lsls	r3, r3, #27
 80002d6:	d4eb      	bmi.n	80002b0 <restore_non_core_regs+0x24>
 80002d8:	f504 70e8 	add.w	r0, r4, #464	; 0x1d0
 80002dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80002e0:	f000 bc8a 	b.w	8000bf8 <__gnu_Unwind_Restore_WMMXC>

080002e4 <_Unwind_decode_typeinfo_ptr.isra.0>:
 80002e4:	6803      	ldr	r3, [r0, #0]
 80002e6:	b103      	cbz	r3, 80002ea <_Unwind_decode_typeinfo_ptr.isra.0+0x6>
 80002e8:	4403      	add	r3, r0
 80002ea:	4618      	mov	r0, r3
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__gnu_unwind_24bit.isra.1>:
 80002f0:	2009      	movs	r0, #9
 80002f2:	4770      	bx	lr

080002f4 <_Unwind_DebugHook>:
 80002f4:	4770      	bx	lr
 80002f6:	bf00      	nop

080002f8 <unwind_phase2>:
 80002f8:	b570      	push	{r4, r5, r6, lr}
 80002fa:	4604      	mov	r4, r0
 80002fc:	460d      	mov	r5, r1
 80002fe:	e008      	b.n	8000312 <unwind_phase2+0x1a>
 8000300:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8000302:	6923      	ldr	r3, [r4, #16]
 8000304:	6162      	str	r2, [r4, #20]
 8000306:	4621      	mov	r1, r4
 8000308:	462a      	mov	r2, r5
 800030a:	2001      	movs	r0, #1
 800030c:	4798      	blx	r3
 800030e:	2808      	cmp	r0, #8
 8000310:	d108      	bne.n	8000324 <unwind_phase2+0x2c>
 8000312:	6c29      	ldr	r1, [r5, #64]	; 0x40
 8000314:	4620      	mov	r0, r4
 8000316:	f7ff ff67 	bl	80001e8 <get_eit_entry>
 800031a:	4606      	mov	r6, r0
 800031c:	2800      	cmp	r0, #0
 800031e:	d0ef      	beq.n	8000300 <unwind_phase2+0x8>
 8000320:	f002 fcb6 	bl	8002c90 <abort>
 8000324:	2807      	cmp	r0, #7
 8000326:	d1fb      	bne.n	8000320 <unwind_phase2+0x28>
 8000328:	4630      	mov	r0, r6
 800032a:	6c29      	ldr	r1, [r5, #64]	; 0x40
 800032c:	f7ff ffe2 	bl	80002f4 <_Unwind_DebugHook>
 8000330:	1d28      	adds	r0, r5, #4
 8000332:	f000 fbf9 	bl	8000b28 <__restore_core_regs>
 8000336:	bf00      	nop

08000338 <unwind_phase2_forced>:
 8000338:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800033c:	4605      	mov	r5, r0
 800033e:	2700      	movs	r7, #0
 8000340:	f5ad 7d72 	sub.w	sp, sp, #968	; 0x3c8
 8000344:	ac03      	add	r4, sp, #12
 8000346:	1d0e      	adds	r6, r1, #4
 8000348:	4692      	mov	sl, r2
 800034a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800034c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800034e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000350:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000352:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000354:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000356:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800035a:	f8d5 800c 	ldr.w	r8, [r5, #12]
 800035e:	f8d5 9018 	ldr.w	r9, [r5, #24]
 8000362:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8000366:	ac02      	add	r4, sp, #8
 8000368:	4628      	mov	r0, r5
 800036a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800036c:	6027      	str	r7, [r4, #0]
 800036e:	f7ff ff3b 	bl	80001e8 <get_eit_entry>
 8000372:	f1ba 0f00 	cmp.w	sl, #0
 8000376:	4607      	mov	r7, r0
 8000378:	bf14      	ite	ne
 800037a:	260a      	movne	r6, #10
 800037c:	2609      	moveq	r6, #9
 800037e:	b17f      	cbz	r7, 80003a0 <unwind_phase2_forced+0x68>
 8000380:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8000382:	f046 0110 	orr.w	r1, r6, #16
 8000386:	e88d 0210 	stmia.w	sp, {r4, r9}
 800038a:	462a      	mov	r2, r5
 800038c:	6463      	str	r3, [r4, #68]	; 0x44
 800038e:	2001      	movs	r0, #1
 8000390:	462b      	mov	r3, r5
 8000392:	47c0      	blx	r8
 8000394:	bb78      	cbnz	r0, 80003f6 <unwind_phase2_forced+0xbe>
 8000396:	4638      	mov	r0, r7
 8000398:	f50d 7d72 	add.w	sp, sp, #968	; 0x3c8
 800039c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80003a2:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80003a6:	616b      	str	r3, [r5, #20]
 80003a8:	4621      	mov	r1, r4
 80003aa:	a87a      	add	r0, sp, #488	; 0x1e8
 80003ac:	f002 fc77 	bl	8002c9e <memcpy>
 80003b0:	692b      	ldr	r3, [r5, #16]
 80003b2:	aa7a      	add	r2, sp, #488	; 0x1e8
 80003b4:	4629      	mov	r1, r5
 80003b6:	4630      	mov	r0, r6
 80003b8:	4798      	blx	r3
 80003ba:	9b88      	ldr	r3, [sp, #544]	; 0x220
 80003bc:	4682      	mov	sl, r0
 80003be:	e88d 0210 	stmia.w	sp, {r4, r9}
 80003c2:	4631      	mov	r1, r6
 80003c4:	6463      	str	r3, [r4, #68]	; 0x44
 80003c6:	462a      	mov	r2, r5
 80003c8:	462b      	mov	r3, r5
 80003ca:	2001      	movs	r0, #1
 80003cc:	47c0      	blx	r8
 80003ce:	b990      	cbnz	r0, 80003f6 <unwind_phase2_forced+0xbe>
 80003d0:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80003d4:	a97a      	add	r1, sp, #488	; 0x1e8
 80003d6:	4620      	mov	r0, r4
 80003d8:	f002 fc61 	bl	8002c9e <memcpy>
 80003dc:	f1ba 0f08 	cmp.w	sl, #8
 80003e0:	d106      	bne.n	80003f0 <unwind_phase2_forced+0xb8>
 80003e2:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80003e4:	4628      	mov	r0, r5
 80003e6:	f7ff feff 	bl	80001e8 <get_eit_entry>
 80003ea:	2609      	movs	r6, #9
 80003ec:	4607      	mov	r7, r0
 80003ee:	e7c6      	b.n	800037e <unwind_phase2_forced+0x46>
 80003f0:	f1ba 0f07 	cmp.w	sl, #7
 80003f4:	d005      	beq.n	8000402 <unwind_phase2_forced+0xca>
 80003f6:	2709      	movs	r7, #9
 80003f8:	4638      	mov	r0, r7
 80003fa:	f50d 7d72 	add.w	sp, sp, #968	; 0x3c8
 80003fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000402:	4638      	mov	r0, r7
 8000404:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8000406:	f7ff ff75 	bl	80002f4 <_Unwind_DebugHook>
 800040a:	a803      	add	r0, sp, #12
 800040c:	f000 fb8c 	bl	8000b28 <__restore_core_regs>

08000410 <_Unwind_GetCFA>:
 8000410:	6c40      	ldr	r0, [r0, #68]	; 0x44
 8000412:	4770      	bx	lr

08000414 <__gnu_Unwind_RaiseException>:
 8000414:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000416:	f04f 3eff 	mov.w	lr, #4294967295	; 0xffffffff
 800041a:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 800041c:	b0f9      	sub	sp, #484	; 0x1e4
 800041e:	640b      	str	r3, [r1, #64]	; 0x40
 8000420:	1d0e      	adds	r6, r1, #4
 8000422:	ad01      	add	r5, sp, #4
 8000424:	460f      	mov	r7, r1
 8000426:	4604      	mov	r4, r0
 8000428:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800042a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800042c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800042e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000430:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000432:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000434:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000438:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 800043c:	f8cd e000 	str.w	lr, [sp]
 8000440:	e006      	b.n	8000450 <__gnu_Unwind_RaiseException+0x3c>
 8000442:	6923      	ldr	r3, [r4, #16]
 8000444:	466a      	mov	r2, sp
 8000446:	4621      	mov	r1, r4
 8000448:	4798      	blx	r3
 800044a:	2808      	cmp	r0, #8
 800044c:	4605      	mov	r5, r0
 800044e:	d108      	bne.n	8000462 <__gnu_Unwind_RaiseException+0x4e>
 8000450:	9910      	ldr	r1, [sp, #64]	; 0x40
 8000452:	4620      	mov	r0, r4
 8000454:	f7ff fec8 	bl	80001e8 <get_eit_entry>
 8000458:	2800      	cmp	r0, #0
 800045a:	d0f2      	beq.n	8000442 <__gnu_Unwind_RaiseException+0x2e>
 800045c:	2009      	movs	r0, #9
 800045e:	b079      	add	sp, #484	; 0x1e4
 8000460:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000462:	4668      	mov	r0, sp
 8000464:	f7ff ff12 	bl	800028c <restore_non_core_regs>
 8000468:	2d06      	cmp	r5, #6
 800046a:	d1f7      	bne.n	800045c <__gnu_Unwind_RaiseException+0x48>
 800046c:	4639      	mov	r1, r7
 800046e:	4620      	mov	r0, r4
 8000470:	f7ff ff42 	bl	80002f8 <unwind_phase2>

08000474 <__gnu_Unwind_ForcedUnwind>:
 8000474:	b430      	push	{r4, r5}
 8000476:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 8000478:	60c1      	str	r1, [r0, #12]
 800047a:	6182      	str	r2, [r0, #24]
 800047c:	4619      	mov	r1, r3
 800047e:	641d      	str	r5, [r3, #64]	; 0x40
 8000480:	2200      	movs	r2, #0
 8000482:	bc30      	pop	{r4, r5}
 8000484:	e758      	b.n	8000338 <unwind_phase2_forced>
 8000486:	bf00      	nop

08000488 <__gnu_Unwind_Resume>:
 8000488:	b570      	push	{r4, r5, r6, lr}
 800048a:	6943      	ldr	r3, [r0, #20]
 800048c:	68c6      	ldr	r6, [r0, #12]
 800048e:	640b      	str	r3, [r1, #64]	; 0x40
 8000490:	b126      	cbz	r6, 800049c <__gnu_Unwind_Resume+0x14>
 8000492:	2201      	movs	r2, #1
 8000494:	f7ff ff50 	bl	8000338 <unwind_phase2_forced>
 8000498:	f002 fbfa 	bl	8002c90 <abort>
 800049c:	6903      	ldr	r3, [r0, #16]
 800049e:	460a      	mov	r2, r1
 80004a0:	4604      	mov	r4, r0
 80004a2:	460d      	mov	r5, r1
 80004a4:	4601      	mov	r1, r0
 80004a6:	2002      	movs	r0, #2
 80004a8:	4798      	blx	r3
 80004aa:	2807      	cmp	r0, #7
 80004ac:	d007      	beq.n	80004be <__gnu_Unwind_Resume+0x36>
 80004ae:	2808      	cmp	r0, #8
 80004b0:	d103      	bne.n	80004ba <__gnu_Unwind_Resume+0x32>
 80004b2:	4629      	mov	r1, r5
 80004b4:	4620      	mov	r0, r4
 80004b6:	f7ff ff1f 	bl	80002f8 <unwind_phase2>
 80004ba:	f002 fbe9 	bl	8002c90 <abort>
 80004be:	4630      	mov	r0, r6
 80004c0:	6c29      	ldr	r1, [r5, #64]	; 0x40
 80004c2:	f7ff ff17 	bl	80002f4 <_Unwind_DebugHook>
 80004c6:	1d28      	adds	r0, r5, #4
 80004c8:	f000 fb2e 	bl	8000b28 <__restore_core_regs>

080004cc <__gnu_Unwind_Resume_or_Rethrow>:
 80004cc:	68c2      	ldr	r2, [r0, #12]
 80004ce:	b12a      	cbz	r2, 80004dc <__gnu_Unwind_Resume_or_Rethrow+0x10>
 80004d0:	b410      	push	{r4}
 80004d2:	6bcc      	ldr	r4, [r1, #60]	; 0x3c
 80004d4:	2200      	movs	r2, #0
 80004d6:	640c      	str	r4, [r1, #64]	; 0x40
 80004d8:	bc10      	pop	{r4}
 80004da:	e72d      	b.n	8000338 <unwind_phase2_forced>
 80004dc:	e79a      	b.n	8000414 <__gnu_Unwind_RaiseException>
 80004de:	bf00      	nop

080004e0 <_Unwind_Complete>:
 80004e0:	4770      	bx	lr
 80004e2:	bf00      	nop

080004e4 <_Unwind_DeleteException>:
 80004e4:	6883      	ldr	r3, [r0, #8]
 80004e6:	b113      	cbz	r3, 80004ee <_Unwind_DeleteException+0xa>
 80004e8:	4601      	mov	r1, r0
 80004ea:	2001      	movs	r0, #1
 80004ec:	4718      	bx	r3
 80004ee:	4770      	bx	lr

080004f0 <_Unwind_VRS_Get>:
 80004f0:	b500      	push	{lr}
 80004f2:	2904      	cmp	r1, #4
 80004f4:	d807      	bhi.n	8000506 <_Unwind_VRS_Get+0x16>
 80004f6:	e8df f001 	tbb	[pc, r1]
 80004fa:	0903      	.short	0x0903
 80004fc:	0906      	.short	0x0906
 80004fe:	09          	.byte	0x09
 80004ff:	00          	.byte	0x00
 8000500:	b90b      	cbnz	r3, 8000506 <_Unwind_VRS_Get+0x16>
 8000502:	2a0f      	cmp	r2, #15
 8000504:	d905      	bls.n	8000512 <_Unwind_VRS_Get+0x22>
 8000506:	2002      	movs	r0, #2
 8000508:	f85d fb04 	ldr.w	pc, [sp], #4
 800050c:	2001      	movs	r0, #1
 800050e:	f85d fb04 	ldr.w	pc, [sp], #4
 8000512:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8000516:	6852      	ldr	r2, [r2, #4]
 8000518:	4618      	mov	r0, r3
 800051a:	9b01      	ldr	r3, [sp, #4]
 800051c:	601a      	str	r2, [r3, #0]
 800051e:	f85d fb04 	ldr.w	pc, [sp], #4
 8000522:	bf00      	nop

08000524 <_Unwind_GetGR>:
 8000524:	2300      	movs	r3, #0
 8000526:	b510      	push	{r4, lr}
 8000528:	b084      	sub	sp, #16
 800052a:	ac03      	add	r4, sp, #12
 800052c:	460a      	mov	r2, r1
 800052e:	9400      	str	r4, [sp, #0]
 8000530:	4619      	mov	r1, r3
 8000532:	f7ff ffdd 	bl	80004f0 <_Unwind_VRS_Get>
 8000536:	9803      	ldr	r0, [sp, #12]
 8000538:	b004      	add	sp, #16
 800053a:	bd10      	pop	{r4, pc}

0800053c <_Unwind_VRS_Set>:
 800053c:	b500      	push	{lr}
 800053e:	2904      	cmp	r1, #4
 8000540:	d807      	bhi.n	8000552 <_Unwind_VRS_Set+0x16>
 8000542:	e8df f001 	tbb	[pc, r1]
 8000546:	0903      	.short	0x0903
 8000548:	0906      	.short	0x0906
 800054a:	09          	.byte	0x09
 800054b:	00          	.byte	0x00
 800054c:	b90b      	cbnz	r3, 8000552 <_Unwind_VRS_Set+0x16>
 800054e:	2a0f      	cmp	r2, #15
 8000550:	d905      	bls.n	800055e <_Unwind_VRS_Set+0x22>
 8000552:	2002      	movs	r0, #2
 8000554:	f85d fb04 	ldr.w	pc, [sp], #4
 8000558:	2001      	movs	r0, #1
 800055a:	f85d fb04 	ldr.w	pc, [sp], #4
 800055e:	9901      	ldr	r1, [sp, #4]
 8000560:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8000564:	6809      	ldr	r1, [r1, #0]
 8000566:	4618      	mov	r0, r3
 8000568:	6051      	str	r1, [r2, #4]
 800056a:	f85d fb04 	ldr.w	pc, [sp], #4
 800056e:	bf00      	nop

08000570 <_Unwind_SetGR>:
 8000570:	2300      	movs	r3, #0
 8000572:	b510      	push	{r4, lr}
 8000574:	b084      	sub	sp, #16
 8000576:	ac04      	add	r4, sp, #16
 8000578:	f844 2d04 	str.w	r2, [r4, #-4]!
 800057c:	9400      	str	r4, [sp, #0]
 800057e:	460a      	mov	r2, r1
 8000580:	4619      	mov	r1, r3
 8000582:	f7ff ffdb 	bl	800053c <_Unwind_VRS_Set>
 8000586:	b004      	add	sp, #16
 8000588:	bd10      	pop	{r4, pc}
 800058a:	bf00      	nop

0800058c <__gnu_Unwind_Backtrace>:
 800058c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800058e:	f04f 3eff 	mov.w	lr, #4294967295	; 0xffffffff
 8000592:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 8000594:	f5ad 7d0f 	sub.w	sp, sp, #572	; 0x23c
 8000598:	6413      	str	r3, [r2, #64]	; 0x40
 800059a:	1d15      	adds	r5, r2, #4
 800059c:	ac17      	add	r4, sp, #92	; 0x5c
 800059e:	4607      	mov	r7, r0
 80005a0:	460e      	mov	r6, r1
 80005a2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005a4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005a6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005a8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005aa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005ac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005ae:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80005b2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80005b6:	f8cd e058 	str.w	lr, [sp, #88]	; 0x58
 80005ba:	e012      	b.n	80005e2 <__gnu_Unwind_Backtrace+0x56>
 80005bc:	210c      	movs	r1, #12
 80005be:	a816      	add	r0, sp, #88	; 0x58
 80005c0:	466a      	mov	r2, sp
 80005c2:	f7ff ffd5 	bl	8000570 <_Unwind_SetGR>
 80005c6:	4631      	mov	r1, r6
 80005c8:	a816      	add	r0, sp, #88	; 0x58
 80005ca:	47b8      	blx	r7
 80005cc:	b978      	cbnz	r0, 80005ee <__gnu_Unwind_Backtrace+0x62>
 80005ce:	9b04      	ldr	r3, [sp, #16]
 80005d0:	aa16      	add	r2, sp, #88	; 0x58
 80005d2:	4669      	mov	r1, sp
 80005d4:	2008      	movs	r0, #8
 80005d6:	4798      	blx	r3
 80005d8:	2805      	cmp	r0, #5
 80005da:	4604      	mov	r4, r0
 80005dc:	d008      	beq.n	80005f0 <__gnu_Unwind_Backtrace+0x64>
 80005de:	2809      	cmp	r0, #9
 80005e0:	d005      	beq.n	80005ee <__gnu_Unwind_Backtrace+0x62>
 80005e2:	9926      	ldr	r1, [sp, #152]	; 0x98
 80005e4:	4668      	mov	r0, sp
 80005e6:	f7ff fdff 	bl	80001e8 <get_eit_entry>
 80005ea:	2800      	cmp	r0, #0
 80005ec:	d0e6      	beq.n	80005bc <__gnu_Unwind_Backtrace+0x30>
 80005ee:	2409      	movs	r4, #9
 80005f0:	a816      	add	r0, sp, #88	; 0x58
 80005f2:	f7ff fe4b 	bl	800028c <restore_non_core_regs>
 80005f6:	4620      	mov	r0, r4
 80005f8:	f50d 7d0f 	add.w	sp, sp, #572	; 0x23c
 80005fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005fe:	bf00      	nop

08000600 <__gnu_unwind_pr_common>:
 8000600:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000604:	6ccc      	ldr	r4, [r1, #76]	; 0x4c
 8000606:	4691      	mov	r9, r2
 8000608:	6822      	ldr	r2, [r4, #0]
 800060a:	b08b      	sub	sp, #44	; 0x2c
 800060c:	3404      	adds	r4, #4
 800060e:	460d      	mov	r5, r1
 8000610:	9207      	str	r2, [sp, #28]
 8000612:	9408      	str	r4, [sp, #32]
 8000614:	f000 0b03 	and.w	fp, r0, #3
 8000618:	461e      	mov	r6, r3
 800061a:	2b00      	cmp	r3, #0
 800061c:	d160      	bne.n	80006e0 <__gnu_unwind_pr_common+0xe0>
 800061e:	2303      	movs	r3, #3
 8000620:	0212      	lsls	r2, r2, #8
 8000622:	9207      	str	r2, [sp, #28]
 8000624:	f88d 6025 	strb.w	r6, [sp, #37]	; 0x25
 8000628:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 800062c:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 800062e:	f1bb 0f02 	cmp.w	fp, #2
 8000632:	bf08      	it	eq
 8000634:	6bac      	ldreq	r4, [r5, #56]	; 0x38
 8000636:	f013 0301 	ands.w	r3, r3, #1
 800063a:	d140      	bne.n	80006be <__gnu_unwind_pr_common+0xbe>
 800063c:	9301      	str	r3, [sp, #4]
 800063e:	f000 0308 	and.w	r3, r0, #8
 8000642:	9303      	str	r3, [sp, #12]
 8000644:	f8d4 8000 	ldr.w	r8, [r4]
 8000648:	f1b8 0f00 	cmp.w	r8, #0
 800064c:	d039      	beq.n	80006c2 <__gnu_unwind_pr_common+0xc2>
 800064e:	2e02      	cmp	r6, #2
 8000650:	d043      	beq.n	80006da <__gnu_unwind_pr_common+0xda>
 8000652:	f8b4 8000 	ldrh.w	r8, [r4]
 8000656:	8867      	ldrh	r7, [r4, #2]
 8000658:	3404      	adds	r4, #4
 800065a:	6cab      	ldr	r3, [r5, #72]	; 0x48
 800065c:	f027 0a01 	bic.w	sl, r7, #1
 8000660:	210f      	movs	r1, #15
 8000662:	4648      	mov	r0, r9
 8000664:	449a      	add	sl, r3
 8000666:	f7ff ff5d 	bl	8000524 <_Unwind_GetGR>
 800066a:	4582      	cmp	sl, r0
 800066c:	d833      	bhi.n	80006d6 <__gnu_unwind_pr_common+0xd6>
 800066e:	f028 0301 	bic.w	r3, r8, #1
 8000672:	449a      	add	sl, r3
 8000674:	4550      	cmp	r0, sl
 8000676:	bf2c      	ite	cs
 8000678:	2000      	movcs	r0, #0
 800067a:	2001      	movcc	r0, #1
 800067c:	007f      	lsls	r7, r7, #1
 800067e:	f007 0702 	and.w	r7, r7, #2
 8000682:	f008 0801 	and.w	r8, r8, #1
 8000686:	ea47 0708 	orr.w	r7, r7, r8
 800068a:	2f01      	cmp	r7, #1
 800068c:	d03e      	beq.n	800070c <__gnu_unwind_pr_common+0x10c>
 800068e:	d335      	bcc.n	80006fc <__gnu_unwind_pr_common+0xfc>
 8000690:	2f02      	cmp	r7, #2
 8000692:	d11c      	bne.n	80006ce <__gnu_unwind_pr_common+0xce>
 8000694:	6823      	ldr	r3, [r4, #0]
 8000696:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800069a:	9202      	str	r2, [sp, #8]
 800069c:	f1bb 0f00 	cmp.w	fp, #0
 80006a0:	d176      	bne.n	8000790 <__gnu_unwind_pr_common+0x190>
 80006a2:	b128      	cbz	r0, 80006b0 <__gnu_unwind_pr_common+0xb0>
 80006a4:	9903      	ldr	r1, [sp, #12]
 80006a6:	2900      	cmp	r1, #0
 80006a8:	d07e      	beq.n	80007a8 <__gnu_unwind_pr_common+0x1a8>
 80006aa:	2a00      	cmp	r2, #0
 80006ac:	f000 80a6 	beq.w	80007fc <__gnu_unwind_pr_common+0x1fc>
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	db77      	blt.n	80007a4 <__gnu_unwind_pr_common+0x1a4>
 80006b4:	9b02      	ldr	r3, [sp, #8]
 80006b6:	3301      	adds	r3, #1
 80006b8:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 80006bc:	e7c2      	b.n	8000644 <__gnu_unwind_pr_common+0x44>
 80006be:	2300      	movs	r3, #0
 80006c0:	9301      	str	r3, [sp, #4]
 80006c2:	2e02      	cmp	r6, #2
 80006c4:	dd3e      	ble.n	8000744 <__gnu_unwind_pr_common+0x144>
 80006c6:	f7ff fe13 	bl	80002f0 <__gnu_unwind_24bit.isra.1>
 80006ca:	2800      	cmp	r0, #0
 80006cc:	d040      	beq.n	8000750 <__gnu_unwind_pr_common+0x150>
 80006ce:	2009      	movs	r0, #9
 80006d0:	b00b      	add	sp, #44	; 0x2c
 80006d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80006d6:	2000      	movs	r0, #0
 80006d8:	e7d0      	b.n	800067c <__gnu_unwind_pr_common+0x7c>
 80006da:	6867      	ldr	r7, [r4, #4]
 80006dc:	3408      	adds	r4, #8
 80006de:	e7bc      	b.n	800065a <__gnu_unwind_pr_common+0x5a>
 80006e0:	2b02      	cmp	r3, #2
 80006e2:	dca3      	bgt.n	800062c <__gnu_unwind_pr_common+0x2c>
 80006e4:	2102      	movs	r1, #2
 80006e6:	0c13      	lsrs	r3, r2, #16
 80006e8:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
 80006ec:	0412      	lsls	r2, r2, #16
 80006ee:	b2db      	uxtb	r3, r3
 80006f0:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 80006f4:	9207      	str	r2, [sp, #28]
 80006f6:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 80006fa:	e797      	b.n	800062c <__gnu_unwind_pr_common+0x2c>
 80006fc:	f1bb 0f00 	cmp.w	fp, #0
 8000700:	d002      	beq.n	8000708 <__gnu_unwind_pr_common+0x108>
 8000702:	2800      	cmp	r0, #0
 8000704:	f040 80bd 	bne.w	8000882 <__gnu_unwind_pr_common+0x282>
 8000708:	3404      	adds	r4, #4
 800070a:	e79b      	b.n	8000644 <__gnu_unwind_pr_common+0x44>
 800070c:	f1bb 0f00 	cmp.w	fp, #0
 8000710:	d125      	bne.n	800075e <__gnu_unwind_pr_common+0x15e>
 8000712:	b1a8      	cbz	r0, 8000740 <__gnu_unwind_pr_common+0x140>
 8000714:	e894 000c 	ldmia.w	r4, {r2, r3}
 8000718:	1c99      	adds	r1, r3, #2
 800071a:	ea4f 72d2 	mov.w	r2, r2, lsr #31
 800071e:	d0d6      	beq.n	80006ce <__gnu_unwind_pr_common+0xce>
 8000720:	f105 0158 	add.w	r1, r5, #88	; 0x58
 8000724:	3301      	adds	r3, #1
 8000726:	9106      	str	r1, [sp, #24]
 8000728:	f000 80a3 	beq.w	8000872 <__gnu_unwind_pr_common+0x272>
 800072c:	1d20      	adds	r0, r4, #4
 800072e:	f7ff fdd9 	bl	80002e4 <_Unwind_decode_typeinfo_ptr.isra.0>
 8000732:	ab06      	add	r3, sp, #24
 8000734:	4601      	mov	r1, r0
 8000736:	4628      	mov	r0, r5
 8000738:	f3af 8000 	nop.w
 800073c:	2800      	cmp	r0, #0
 800073e:	d177      	bne.n	8000830 <__gnu_unwind_pr_common+0x230>
 8000740:	3408      	adds	r4, #8
 8000742:	e77f      	b.n	8000644 <__gnu_unwind_pr_common+0x44>
 8000744:	a907      	add	r1, sp, #28
 8000746:	4648      	mov	r0, r9
 8000748:	f000 faf0 	bl	8000d2c <__gnu_unwind_execute>
 800074c:	2800      	cmp	r0, #0
 800074e:	d1be      	bne.n	80006ce <__gnu_unwind_pr_common+0xce>
 8000750:	9b01      	ldr	r3, [sp, #4]
 8000752:	2b00      	cmp	r3, #0
 8000754:	d15c      	bne.n	8000810 <__gnu_unwind_pr_common+0x210>
 8000756:	2008      	movs	r0, #8
 8000758:	b00b      	add	sp, #44	; 0x2c
 800075a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800075e:	210d      	movs	r1, #13
 8000760:	4648      	mov	r0, r9
 8000762:	6a2f      	ldr	r7, [r5, #32]
 8000764:	f7ff fede 	bl	8000524 <_Unwind_GetGR>
 8000768:	4287      	cmp	r7, r0
 800076a:	d1e9      	bne.n	8000740 <__gnu_unwind_pr_common+0x140>
 800076c:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800076e:	429c      	cmp	r4, r3
 8000770:	d1e6      	bne.n	8000740 <__gnu_unwind_pr_common+0x140>
 8000772:	4620      	mov	r0, r4
 8000774:	f7ff fcea 	bl	800014c <selfrel_offset31>
 8000778:	210f      	movs	r1, #15
 800077a:	4602      	mov	r2, r0
 800077c:	4648      	mov	r0, r9
 800077e:	f7ff fef7 	bl	8000570 <_Unwind_SetGR>
 8000782:	4648      	mov	r0, r9
 8000784:	462a      	mov	r2, r5
 8000786:	2100      	movs	r1, #0
 8000788:	f7ff fef2 	bl	8000570 <_Unwind_SetGR>
 800078c:	2007      	movs	r0, #7
 800078e:	e79f      	b.n	80006d0 <__gnu_unwind_pr_common+0xd0>
 8000790:	210d      	movs	r1, #13
 8000792:	4648      	mov	r0, r9
 8000794:	6a2f      	ldr	r7, [r5, #32]
 8000796:	f7ff fec5 	bl	8000524 <_Unwind_GetGR>
 800079a:	4287      	cmp	r7, r0
 800079c:	d058      	beq.n	8000850 <__gnu_unwind_pr_common+0x250>
 800079e:	6823      	ldr	r3, [r4, #0]
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	da87      	bge.n	80006b4 <__gnu_unwind_pr_common+0xb4>
 80007a4:	3404      	adds	r4, #4
 80007a6:	e785      	b.n	80006b4 <__gnu_unwind_pr_common+0xb4>
 80007a8:	9b02      	ldr	r3, [sp, #8]
 80007aa:	b33b      	cbz	r3, 80007fc <__gnu_unwind_pr_common+0x1fc>
 80007ac:	f105 0358 	add.w	r3, r5, #88	; 0x58
 80007b0:	1d27      	adds	r7, r4, #4
 80007b2:	f8cd b010 	str.w	fp, [sp, #16]
 80007b6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80007ba:	46a3      	mov	fp, r4
 80007bc:	f8dd a008 	ldr.w	sl, [sp, #8]
 80007c0:	461c      	mov	r4, r3
 80007c2:	9605      	str	r6, [sp, #20]
 80007c4:	e002      	b.n	80007cc <__gnu_unwind_pr_common+0x1cc>
 80007c6:	45b2      	cmp	sl, r6
 80007c8:	46b0      	mov	r8, r6
 80007ca:	d016      	beq.n	80007fa <__gnu_unwind_pr_common+0x1fa>
 80007cc:	4638      	mov	r0, r7
 80007ce:	9406      	str	r4, [sp, #24]
 80007d0:	f7ff fd88 	bl	80002e4 <_Unwind_decode_typeinfo_ptr.isra.0>
 80007d4:	ab06      	add	r3, sp, #24
 80007d6:	4601      	mov	r1, r0
 80007d8:	2200      	movs	r2, #0
 80007da:	4628      	mov	r0, r5
 80007dc:	f3af 8000 	nop.w
 80007e0:	f108 0601 	add.w	r6, r8, #1
 80007e4:	3704      	adds	r7, #4
 80007e6:	2800      	cmp	r0, #0
 80007e8:	d0ed      	beq.n	80007c6 <__gnu_unwind_pr_common+0x1c6>
 80007ea:	9b02      	ldr	r3, [sp, #8]
 80007ec:	465c      	mov	r4, fp
 80007ee:	4543      	cmp	r3, r8
 80007f0:	f8dd b010 	ldr.w	fp, [sp, #16]
 80007f4:	9e05      	ldr	r6, [sp, #20]
 80007f6:	d1d2      	bne.n	800079e <__gnu_unwind_pr_common+0x19e>
 80007f8:	e000      	b.n	80007fc <__gnu_unwind_pr_common+0x1fc>
 80007fa:	465c      	mov	r4, fp
 80007fc:	4648      	mov	r0, r9
 80007fe:	210d      	movs	r1, #13
 8000800:	f7ff fe90 	bl	8000524 <_Unwind_GetGR>
 8000804:	9b06      	ldr	r3, [sp, #24]
 8000806:	6228      	str	r0, [r5, #32]
 8000808:	62ac      	str	r4, [r5, #40]	; 0x28
 800080a:	626b      	str	r3, [r5, #36]	; 0x24
 800080c:	2006      	movs	r0, #6
 800080e:	e75f      	b.n	80006d0 <__gnu_unwind_pr_common+0xd0>
 8000810:	210f      	movs	r1, #15
 8000812:	4648      	mov	r0, r9
 8000814:	f7ff fe86 	bl	8000524 <_Unwind_GetGR>
 8000818:	210e      	movs	r1, #14
 800081a:	4602      	mov	r2, r0
 800081c:	4648      	mov	r0, r9
 800081e:	f7ff fea7 	bl	8000570 <_Unwind_SetGR>
 8000822:	4648      	mov	r0, r9
 8000824:	4a29      	ldr	r2, [pc, #164]	; (80008cc <__gnu_unwind_pr_common+0x2cc>)
 8000826:	210f      	movs	r1, #15
 8000828:	f7ff fea2 	bl	8000570 <_Unwind_SetGR>
 800082c:	2007      	movs	r0, #7
 800082e:	e74f      	b.n	80006d0 <__gnu_unwind_pr_common+0xd0>
 8000830:	4607      	mov	r7, r0
 8000832:	210d      	movs	r1, #13
 8000834:	4648      	mov	r0, r9
 8000836:	f7ff fe75 	bl	8000524 <_Unwind_GetGR>
 800083a:	2f02      	cmp	r7, #2
 800083c:	6228      	str	r0, [r5, #32]
 800083e:	d11d      	bne.n	800087c <__gnu_unwind_pr_common+0x27c>
 8000840:	462b      	mov	r3, r5
 8000842:	9a06      	ldr	r2, [sp, #24]
 8000844:	f843 2f2c 	str.w	r2, [r3, #44]!
 8000848:	626b      	str	r3, [r5, #36]	; 0x24
 800084a:	62ac      	str	r4, [r5, #40]	; 0x28
 800084c:	2006      	movs	r0, #6
 800084e:	e73f      	b.n	80006d0 <__gnu_unwind_pr_common+0xd0>
 8000850:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8000852:	429c      	cmp	r4, r3
 8000854:	d1a3      	bne.n	800079e <__gnu_unwind_pr_common+0x19e>
 8000856:	2204      	movs	r2, #4
 8000858:	2700      	movs	r7, #0
 800085a:	9902      	ldr	r1, [sp, #8]
 800085c:	18a3      	adds	r3, r4, r2
 800085e:	62a9      	str	r1, [r5, #40]	; 0x28
 8000860:	62ef      	str	r7, [r5, #44]	; 0x2c
 8000862:	632a      	str	r2, [r5, #48]	; 0x30
 8000864:	636b      	str	r3, [r5, #52]	; 0x34
 8000866:	6823      	ldr	r3, [r4, #0]
 8000868:	42bb      	cmp	r3, r7
 800086a:	db1d      	blt.n	80008a8 <__gnu_unwind_pr_common+0x2a8>
 800086c:	2301      	movs	r3, #1
 800086e:	9301      	str	r3, [sp, #4]
 8000870:	e720      	b.n	80006b4 <__gnu_unwind_pr_common+0xb4>
 8000872:	4648      	mov	r0, r9
 8000874:	210d      	movs	r1, #13
 8000876:	f7ff fe55 	bl	8000524 <_Unwind_GetGR>
 800087a:	6228      	str	r0, [r5, #32]
 800087c:	9b06      	ldr	r3, [sp, #24]
 800087e:	626b      	str	r3, [r5, #36]	; 0x24
 8000880:	e7e3      	b.n	800084a <__gnu_unwind_pr_common+0x24a>
 8000882:	4620      	mov	r0, r4
 8000884:	f7ff fc62 	bl	800014c <selfrel_offset31>
 8000888:	3404      	adds	r4, #4
 800088a:	4606      	mov	r6, r0
 800088c:	63ac      	str	r4, [r5, #56]	; 0x38
 800088e:	4628      	mov	r0, r5
 8000890:	f3af 8000 	nop.w
 8000894:	2800      	cmp	r0, #0
 8000896:	f43f af1a 	beq.w	80006ce <__gnu_unwind_pr_common+0xce>
 800089a:	4648      	mov	r0, r9
 800089c:	4632      	mov	r2, r6
 800089e:	210f      	movs	r1, #15
 80008a0:	f7ff fe66 	bl	8000570 <_Unwind_SetGR>
 80008a4:	2007      	movs	r0, #7
 80008a6:	e713      	b.n	80006d0 <__gnu_unwind_pr_common+0xd0>
 80008a8:	4608      	mov	r0, r1
 80008aa:	3001      	adds	r0, #1
 80008ac:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 80008b0:	f7ff fc4c 	bl	800014c <selfrel_offset31>
 80008b4:	210f      	movs	r1, #15
 80008b6:	4602      	mov	r2, r0
 80008b8:	4648      	mov	r0, r9
 80008ba:	f7ff fe59 	bl	8000570 <_Unwind_SetGR>
 80008be:	4648      	mov	r0, r9
 80008c0:	462a      	mov	r2, r5
 80008c2:	4639      	mov	r1, r7
 80008c4:	f7ff fe54 	bl	8000570 <_Unwind_SetGR>
 80008c8:	2007      	movs	r0, #7
 80008ca:	e701      	b.n	80006d0 <__gnu_unwind_pr_common+0xd0>
 80008cc:	00000000 	.word	0x00000000

080008d0 <__aeabi_unwind_cpp_pr0>:
 80008d0:	2300      	movs	r3, #0
 80008d2:	e695      	b.n	8000600 <__gnu_unwind_pr_common>

080008d4 <__aeabi_unwind_cpp_pr1>:
 80008d4:	2301      	movs	r3, #1
 80008d6:	e693      	b.n	8000600 <__gnu_unwind_pr_common>

080008d8 <__aeabi_unwind_cpp_pr2>:
 80008d8:	2302      	movs	r3, #2
 80008da:	e691      	b.n	8000600 <__gnu_unwind_pr_common>

080008dc <_Unwind_VRS_Pop>:
 80008dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80008de:	4604      	mov	r4, r0
 80008e0:	b0c5      	sub	sp, #276	; 0x114
 80008e2:	2904      	cmp	r1, #4
 80008e4:	d80d      	bhi.n	8000902 <_Unwind_VRS_Pop+0x26>
 80008e6:	e8df f001 	tbb	[pc, r1]
 80008ea:	0355      	.short	0x0355
 80008ec:	310c      	.short	0x310c
 80008ee:	0f          	.byte	0x0f
 80008ef:	00          	.byte	0x00
 80008f0:	2b01      	cmp	r3, #1
 80008f2:	ea4f 4612 	mov.w	r6, r2, lsr #16
 80008f6:	b295      	uxth	r5, r2
 80008f8:	d164      	bne.n	80009c4 <_Unwind_VRS_Pop+0xe8>
 80008fa:	1972      	adds	r2, r6, r5
 80008fc:	2a10      	cmp	r2, #16
 80008fe:	f240 809d 	bls.w	8000a3c <_Unwind_VRS_Pop+0x160>
 8000902:	2002      	movs	r0, #2
 8000904:	b045      	add	sp, #276	; 0x114
 8000906:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000908:	2b00      	cmp	r3, #0
 800090a:	d1fa      	bne.n	8000902 <_Unwind_VRS_Pop+0x26>
 800090c:	2a10      	cmp	r2, #16
 800090e:	d8f8      	bhi.n	8000902 <_Unwind_VRS_Pop+0x26>
 8000910:	6823      	ldr	r3, [r4, #0]
 8000912:	06d8      	lsls	r0, r3, #27
 8000914:	f100 80c8 	bmi.w	8000aa8 <_Unwind_VRS_Pop+0x1cc>
 8000918:	ae22      	add	r6, sp, #136	; 0x88
 800091a:	4630      	mov	r0, r6
 800091c:	9201      	str	r2, [sp, #4]
 800091e:	2501      	movs	r5, #1
 8000920:	f000 f974 	bl	8000c0c <__gnu_Unwind_Save_WMMXC>
 8000924:	2300      	movs	r3, #0
 8000926:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8000928:	9a01      	ldr	r2, [sp, #4]
 800092a:	fa05 f103 	lsl.w	r1, r5, r3
 800092e:	4211      	tst	r1, r2
 8000930:	d003      	beq.n	800093a <_Unwind_VRS_Pop+0x5e>
 8000932:	6801      	ldr	r1, [r0, #0]
 8000934:	3004      	adds	r0, #4
 8000936:	f846 1023 	str.w	r1, [r6, r3, lsl #2]
 800093a:	3301      	adds	r3, #1
 800093c:	2b04      	cmp	r3, #4
 800093e:	d1f4      	bne.n	800092a <_Unwind_VRS_Pop+0x4e>
 8000940:	63a0      	str	r0, [r4, #56]	; 0x38
 8000942:	4630      	mov	r0, r6
 8000944:	f000 f958 	bl	8000bf8 <__gnu_Unwind_Restore_WMMXC>
 8000948:	2000      	movs	r0, #0
 800094a:	e7db      	b.n	8000904 <_Unwind_VRS_Pop+0x28>
 800094c:	2b03      	cmp	r3, #3
 800094e:	d1d8      	bne.n	8000902 <_Unwind_VRS_Pop+0x26>
 8000950:	0c15      	lsrs	r5, r2, #16
 8000952:	b297      	uxth	r7, r2
 8000954:	19eb      	adds	r3, r5, r7
 8000956:	2b10      	cmp	r3, #16
 8000958:	d8d3      	bhi.n	8000902 <_Unwind_VRS_Pop+0x26>
 800095a:	6823      	ldr	r3, [r4, #0]
 800095c:	071e      	lsls	r6, r3, #28
 800095e:	f100 80b7 	bmi.w	8000ad0 <_Unwind_VRS_Pop+0x1f4>
 8000962:	ae22      	add	r6, sp, #136	; 0x88
 8000964:	4630      	mov	r0, r6
 8000966:	f000 f925 	bl	8000bb4 <__gnu_Unwind_Save_WMMXD>
 800096a:	00ed      	lsls	r5, r5, #3
 800096c:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800096e:	b15f      	cbz	r7, 8000988 <_Unwind_VRS_Pop+0xac>
 8000970:	3d04      	subs	r5, #4
 8000972:	4603      	mov	r3, r0
 8000974:	1971      	adds	r1, r6, r5
 8000976:	eb00 00c7 	add.w	r0, r0, r7, lsl #3
 800097a:	f853 2b04 	ldr.w	r2, [r3], #4
 800097e:	4283      	cmp	r3, r0
 8000980:	f841 2f04 	str.w	r2, [r1, #4]!
 8000984:	d1f9      	bne.n	800097a <_Unwind_VRS_Pop+0x9e>
 8000986:	4618      	mov	r0, r3
 8000988:	63a0      	str	r0, [r4, #56]	; 0x38
 800098a:	4630      	mov	r0, r6
 800098c:	f000 f8f0 	bl	8000b70 <__gnu_Unwind_Restore_WMMXD>
 8000990:	2000      	movs	r0, #0
 8000992:	e7b7      	b.n	8000904 <_Unwind_VRS_Pop+0x28>
 8000994:	2b00      	cmp	r3, #0
 8000996:	d1b4      	bne.n	8000902 <_Unwind_VRS_Pop+0x26>
 8000998:	2701      	movs	r7, #1
 800099a:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 800099c:	b296      	uxth	r6, r2
 800099e:	1d20      	adds	r0, r4, #4
 80009a0:	fa07 f103 	lsl.w	r1, r7, r3
 80009a4:	4231      	tst	r1, r6
 80009a6:	f103 0301 	add.w	r3, r3, #1
 80009aa:	d002      	beq.n	80009b2 <_Unwind_VRS_Pop+0xd6>
 80009ac:	6829      	ldr	r1, [r5, #0]
 80009ae:	3504      	adds	r5, #4
 80009b0:	6001      	str	r1, [r0, #0]
 80009b2:	2b10      	cmp	r3, #16
 80009b4:	f100 0004 	add.w	r0, r0, #4
 80009b8:	d1f2      	bne.n	80009a0 <_Unwind_VRS_Pop+0xc4>
 80009ba:	f412 5000 	ands.w	r0, r2, #8192	; 0x2000
 80009be:	d13b      	bne.n	8000a38 <_Unwind_VRS_Pop+0x15c>
 80009c0:	63a5      	str	r5, [r4, #56]	; 0x38
 80009c2:	e79f      	b.n	8000904 <_Unwind_VRS_Pop+0x28>
 80009c4:	2b05      	cmp	r3, #5
 80009c6:	d19c      	bne.n	8000902 <_Unwind_VRS_Pop+0x26>
 80009c8:	1977      	adds	r7, r6, r5
 80009ca:	2f20      	cmp	r7, #32
 80009cc:	d899      	bhi.n	8000902 <_Unwind_VRS_Pop+0x26>
 80009ce:	2e0f      	cmp	r6, #15
 80009d0:	d966      	bls.n	8000aa0 <_Unwind_VRS_Pop+0x1c4>
 80009d2:	462f      	mov	r7, r5
 80009d4:	2d00      	cmp	r5, #0
 80009d6:	d13a      	bne.n	8000a4e <_Unwind_VRS_Pop+0x172>
 80009d8:	462a      	mov	r2, r5
 80009da:	2700      	movs	r7, #0
 80009dc:	2a00      	cmp	r2, #0
 80009de:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80009e0:	dd72      	ble.n	8000ac8 <_Unwind_VRS_Pop+0x1ec>
 80009e2:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
 80009e6:	4601      	mov	r1, r0
 80009e8:	a844      	add	r0, sp, #272	; 0x110
 80009ea:	eb00 00c6 	add.w	r0, r0, r6, lsl #3
 80009ee:	388c      	subs	r0, #140	; 0x8c
 80009f0:	f851 5b04 	ldr.w	r5, [r1], #4
 80009f4:	4291      	cmp	r1, r2
 80009f6:	f840 5f04 	str.w	r5, [r0, #4]!
 80009fa:	d1f9      	bne.n	80009f0 <_Unwind_VRS_Pop+0x114>
 80009fc:	4608      	mov	r0, r1
 80009fe:	b197      	cbz	r7, 8000a26 <_Unwind_VRS_Pop+0x14a>
 8000a00:	2e10      	cmp	r6, #16
 8000a02:	4632      	mov	r2, r6
 8000a04:	bf38      	it	cc
 8000a06:	2210      	movcc	r2, #16
 8000a08:	a944      	add	r1, sp, #272	; 0x110
 8000a0a:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 8000a0e:	f5a2 72c4 	sub.w	r2, r2, #392	; 0x188
 8000a12:	0079      	lsls	r1, r7, #1
 8000a14:	3a04      	subs	r2, #4
 8000a16:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8000a1a:	f850 5b04 	ldr.w	r5, [r0], #4
 8000a1e:	4288      	cmp	r0, r1
 8000a20:	f842 5f04 	str.w	r5, [r2, #4]!
 8000a24:	d1f9      	bne.n	8000a1a <_Unwind_VRS_Pop+0x13e>
 8000a26:	2b01      	cmp	r3, #1
 8000a28:	d048      	beq.n	8000abc <_Unwind_VRS_Pop+0x1e0>
 8000a2a:	2e0f      	cmp	r6, #15
 8000a2c:	63a1      	str	r1, [r4, #56]	; 0x38
 8000a2e:	d933      	bls.n	8000a98 <_Unwind_VRS_Pop+0x1bc>
 8000a30:	b117      	cbz	r7, 8000a38 <_Unwind_VRS_Pop+0x15c>
 8000a32:	a802      	add	r0, sp, #8
 8000a34:	f000 f894 	bl	8000b60 <__gnu_Unwind_Restore_VFP_D_16_to_31>
 8000a38:	2000      	movs	r0, #0
 8000a3a:	e763      	b.n	8000904 <_Unwind_VRS_Pop+0x28>
 8000a3c:	2e0f      	cmp	r6, #15
 8000a3e:	f63f af60 	bhi.w	8000902 <_Unwind_VRS_Pop+0x26>
 8000a42:	2700      	movs	r7, #0
 8000a44:	6822      	ldr	r2, [r4, #0]
 8000a46:	07d1      	lsls	r1, r2, #31
 8000a48:	d417      	bmi.n	8000a7a <_Unwind_VRS_Pop+0x19e>
 8000a4a:	2f00      	cmp	r7, #0
 8000a4c:	d060      	beq.n	8000b10 <_Unwind_VRS_Pop+0x234>
 8000a4e:	6822      	ldr	r2, [r4, #0]
 8000a50:	0751      	lsls	r1, r2, #29
 8000a52:	d445      	bmi.n	8000ae0 <_Unwind_VRS_Pop+0x204>
 8000a54:	2b01      	cmp	r3, #1
 8000a56:	d04d      	beq.n	8000af4 <_Unwind_VRS_Pop+0x218>
 8000a58:	2e0f      	cmp	r6, #15
 8000a5a:	d806      	bhi.n	8000a6a <_Unwind_VRS_Pop+0x18e>
 8000a5c:	a822      	add	r0, sp, #136	; 0x88
 8000a5e:	9301      	str	r3, [sp, #4]
 8000a60:	f000 f87a 	bl	8000b58 <__gnu_Unwind_Save_VFP_D>
 8000a64:	9b01      	ldr	r3, [sp, #4]
 8000a66:	2f00      	cmp	r7, #0
 8000a68:	d0b6      	beq.n	80009d8 <_Unwind_VRS_Pop+0xfc>
 8000a6a:	a802      	add	r0, sp, #8
 8000a6c:	9301      	str	r3, [sp, #4]
 8000a6e:	f000 f87b 	bl	8000b68 <__gnu_Unwind_Save_VFP_D_16_to_31>
 8000a72:	9b01      	ldr	r3, [sp, #4]
 8000a74:	f1c6 0210 	rsb	r2, r6, #16
 8000a78:	e7b0      	b.n	80009dc <_Unwind_VRS_Pop+0x100>
 8000a7a:	f022 0101 	bic.w	r1, r2, #1
 8000a7e:	2b05      	cmp	r3, #5
 8000a80:	6021      	str	r1, [r4, #0]
 8000a82:	9301      	str	r3, [sp, #4]
 8000a84:	4620      	mov	r0, r4
 8000a86:	d03b      	beq.n	8000b00 <_Unwind_VRS_Pop+0x224>
 8000a88:	f022 0203 	bic.w	r2, r2, #3
 8000a8c:	f840 2b48 	str.w	r2, [r0], #72
 8000a90:	f000 f85a 	bl	8000b48 <__gnu_Unwind_Save_VFP>
 8000a94:	9b01      	ldr	r3, [sp, #4]
 8000a96:	e7d8      	b.n	8000a4a <_Unwind_VRS_Pop+0x16e>
 8000a98:	a822      	add	r0, sp, #136	; 0x88
 8000a9a:	f000 f859 	bl	8000b50 <__gnu_Unwind_Restore_VFP_D>
 8000a9e:	e7c7      	b.n	8000a30 <_Unwind_VRS_Pop+0x154>
 8000aa0:	2f10      	cmp	r7, #16
 8000aa2:	d9ce      	bls.n	8000a42 <_Unwind_VRS_Pop+0x166>
 8000aa4:	3f10      	subs	r7, #16
 8000aa6:	e7cd      	b.n	8000a44 <_Unwind_VRS_Pop+0x168>
 8000aa8:	f023 0310 	bic.w	r3, r3, #16
 8000aac:	6023      	str	r3, [r4, #0]
 8000aae:	f504 70e8 	add.w	r0, r4, #464	; 0x1d0
 8000ab2:	9201      	str	r2, [sp, #4]
 8000ab4:	f000 f8aa 	bl	8000c0c <__gnu_Unwind_Save_WMMXC>
 8000ab8:	9a01      	ldr	r2, [sp, #4]
 8000aba:	e72d      	b.n	8000918 <_Unwind_VRS_Pop+0x3c>
 8000abc:	3104      	adds	r1, #4
 8000abe:	63a1      	str	r1, [r4, #56]	; 0x38
 8000ac0:	a822      	add	r0, sp, #136	; 0x88
 8000ac2:	f000 f83d 	bl	8000b40 <__gnu_Unwind_Restore_VFP>
 8000ac6:	e7b7      	b.n	8000a38 <_Unwind_VRS_Pop+0x15c>
 8000ac8:	2f00      	cmp	r7, #0
 8000aca:	d199      	bne.n	8000a00 <_Unwind_VRS_Pop+0x124>
 8000acc:	4601      	mov	r1, r0
 8000ace:	e7aa      	b.n	8000a26 <_Unwind_VRS_Pop+0x14a>
 8000ad0:	f023 0308 	bic.w	r3, r3, #8
 8000ad4:	6023      	str	r3, [r4, #0]
 8000ad6:	f504 70a8 	add.w	r0, r4, #336	; 0x150
 8000ada:	f000 f86b 	bl	8000bb4 <__gnu_Unwind_Save_WMMXD>
 8000ade:	e740      	b.n	8000962 <_Unwind_VRS_Pop+0x86>
 8000ae0:	4620      	mov	r0, r4
 8000ae2:	f022 0204 	bic.w	r2, r2, #4
 8000ae6:	f840 2bd0 	str.w	r2, [r0], #208
 8000aea:	9301      	str	r3, [sp, #4]
 8000aec:	f000 f83c 	bl	8000b68 <__gnu_Unwind_Save_VFP_D_16_to_31>
 8000af0:	9b01      	ldr	r3, [sp, #4]
 8000af2:	e7af      	b.n	8000a54 <_Unwind_VRS_Pop+0x178>
 8000af4:	a822      	add	r0, sp, #136	; 0x88
 8000af6:	9301      	str	r3, [sp, #4]
 8000af8:	f000 f826 	bl	8000b48 <__gnu_Unwind_Save_VFP>
 8000afc:	9b01      	ldr	r3, [sp, #4]
 8000afe:	e7b9      	b.n	8000a74 <_Unwind_VRS_Pop+0x198>
 8000b00:	f041 0102 	orr.w	r1, r1, #2
 8000b04:	f840 1b48 	str.w	r1, [r0], #72
 8000b08:	f000 f826 	bl	8000b58 <__gnu_Unwind_Save_VFP_D>
 8000b0c:	9b01      	ldr	r3, [sp, #4]
 8000b0e:	e79c      	b.n	8000a4a <_Unwind_VRS_Pop+0x16e>
 8000b10:	2b01      	cmp	r3, #1
 8000b12:	d003      	beq.n	8000b1c <_Unwind_VRS_Pop+0x240>
 8000b14:	2e0f      	cmp	r6, #15
 8000b16:	f63f af5f 	bhi.w	80009d8 <_Unwind_VRS_Pop+0xfc>
 8000b1a:	e79f      	b.n	8000a5c <_Unwind_VRS_Pop+0x180>
 8000b1c:	a822      	add	r0, sp, #136	; 0x88
 8000b1e:	9301      	str	r3, [sp, #4]
 8000b20:	f000 f812 	bl	8000b48 <__gnu_Unwind_Save_VFP>
 8000b24:	9b01      	ldr	r3, [sp, #4]
 8000b26:	e757      	b.n	80009d8 <_Unwind_VRS_Pop+0xfc>

08000b28 <__restore_core_regs>:
 8000b28:	f100 0134 	add.w	r1, r0, #52	; 0x34
 8000b2c:	e891 0038 	ldmia.w	r1, {r3, r4, r5}
 8000b30:	469c      	mov	ip, r3
 8000b32:	46a6      	mov	lr, r4
 8000b34:	f84c 5d04 	str.w	r5, [ip, #-4]!
 8000b38:	e890 0fff 	ldmia.w	r0, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 8000b3c:	46e5      	mov	sp, ip
 8000b3e:	bd00      	pop	{pc}

08000b40 <__gnu_Unwind_Restore_VFP>:
 8000b40:	ec90 0b21 	fldmiax	r0, {d0-d15}	;@ Deprecated
 8000b44:	4770      	bx	lr
 8000b46:	bf00      	nop

08000b48 <__gnu_Unwind_Save_VFP>:
 8000b48:	ec80 0b21 	fstmiax	r0, {d0-d15}	;@ Deprecated
 8000b4c:	4770      	bx	lr
 8000b4e:	bf00      	nop

08000b50 <__gnu_Unwind_Restore_VFP_D>:
 8000b50:	ec90 0b20 	vldmia	r0, {d0-d15}
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop

08000b58 <__gnu_Unwind_Save_VFP_D>:
 8000b58:	ec80 0b20 	vstmia	r0, {d0-d15}
 8000b5c:	4770      	bx	lr
 8000b5e:	bf00      	nop

08000b60 <__gnu_Unwind_Restore_VFP_D_16_to_31>:
 8000b60:	ecd0 0b20 	vldmia	r0, {d16-d31}
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__gnu_Unwind_Save_VFP_D_16_to_31>:
 8000b68:	ecc0 0b20 	vstmia	r0, {d16-d31}
 8000b6c:	4770      	bx	lr
 8000b6e:	bf00      	nop

08000b70 <__gnu_Unwind_Restore_WMMXD>:
 8000b70:	ecf0 0102 	ldfe	f0, [r0], #8
 8000b74:	ecf0 1102 	ldfe	f1, [r0], #8
 8000b78:	ecf0 2102 	ldfe	f2, [r0], #8
 8000b7c:	ecf0 3102 	ldfe	f3, [r0], #8
 8000b80:	ecf0 4102 	ldfe	f4, [r0], #8
 8000b84:	ecf0 5102 	ldfe	f5, [r0], #8
 8000b88:	ecf0 6102 	ldfe	f6, [r0], #8
 8000b8c:	ecf0 7102 	ldfe	f7, [r0], #8
 8000b90:	ecf0 8102 	ldfp	f0, [r0], #8
 8000b94:	ecf0 9102 	ldfp	f1, [r0], #8
 8000b98:	ecf0 a102 	ldfp	f2, [r0], #8
 8000b9c:	ecf0 b102 	ldfp	f3, [r0], #8
 8000ba0:	ecf0 c102 	ldfp	f4, [r0], #8
 8000ba4:	ecf0 d102 	ldfp	f5, [r0], #8
 8000ba8:	ecf0 e102 	ldfp	f6, [r0], #8
 8000bac:	ecf0 f102 	ldfp	f7, [r0], #8
 8000bb0:	4770      	bx	lr
 8000bb2:	bf00      	nop

08000bb4 <__gnu_Unwind_Save_WMMXD>:
 8000bb4:	ece0 0102 	stfe	f0, [r0], #8
 8000bb8:	ece0 1102 	stfe	f1, [r0], #8
 8000bbc:	ece0 2102 	stfe	f2, [r0], #8
 8000bc0:	ece0 3102 	stfe	f3, [r0], #8
 8000bc4:	ece0 4102 	stfe	f4, [r0], #8
 8000bc8:	ece0 5102 	stfe	f5, [r0], #8
 8000bcc:	ece0 6102 	stfe	f6, [r0], #8
 8000bd0:	ece0 7102 	stfe	f7, [r0], #8
 8000bd4:	ece0 8102 	stfp	f0, [r0], #8
 8000bd8:	ece0 9102 	stfp	f1, [r0], #8
 8000bdc:	ece0 a102 	stfp	f2, [r0], #8
 8000be0:	ece0 b102 	stfp	f3, [r0], #8
 8000be4:	ece0 c102 	stfp	f4, [r0], #8
 8000be8:	ece0 d102 	stfp	f5, [r0], #8
 8000bec:	ece0 e102 	stfp	f6, [r0], #8
 8000bf0:	ece0 f102 	stfp	f7, [r0], #8
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__gnu_Unwind_Restore_WMMXC>:
 8000bf8:	fcb0 8101 	ldc2	1, cr8, [r0], #4
 8000bfc:	fcb0 9101 	ldc2	1, cr9, [r0], #4
 8000c00:	fcb0 a101 	ldc2	1, cr10, [r0], #4
 8000c04:	fcb0 b101 	ldc2	1, cr11, [r0], #4
 8000c08:	4770      	bx	lr
 8000c0a:	bf00      	nop

08000c0c <__gnu_Unwind_Save_WMMXC>:
 8000c0c:	fca0 8101 	stc2	1, cr8, [r0], #4
 8000c10:	fca0 9101 	stc2	1, cr9, [r0], #4
 8000c14:	fca0 a101 	stc2	1, cr10, [r0], #4
 8000c18:	fca0 b101 	stc2	1, cr11, [r0], #4
 8000c1c:	4770      	bx	lr
 8000c1e:	bf00      	nop

08000c20 <_Unwind_RaiseException>:
 8000c20:	46ec      	mov	ip, sp
 8000c22:	b500      	push	{lr}
 8000c24:	e92d 5000 	stmdb	sp!, {ip, lr}
 8000c28:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8000c2c:	f04f 0300 	mov.w	r3, #0
 8000c30:	e92d 000c 	stmdb	sp!, {r2, r3}
 8000c34:	a901      	add	r1, sp, #4
 8000c36:	f7ff fbed 	bl	8000414 <__gnu_Unwind_RaiseException>
 8000c3a:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8000c3e:	b012      	add	sp, #72	; 0x48
 8000c40:	4770      	bx	lr
 8000c42:	bf00      	nop

08000c44 <_Unwind_Resume>:
 8000c44:	46ec      	mov	ip, sp
 8000c46:	b500      	push	{lr}
 8000c48:	e92d 5000 	stmdb	sp!, {ip, lr}
 8000c4c:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8000c50:	f04f 0300 	mov.w	r3, #0
 8000c54:	e92d 000c 	stmdb	sp!, {r2, r3}
 8000c58:	a901      	add	r1, sp, #4
 8000c5a:	f7ff fc15 	bl	8000488 <__gnu_Unwind_Resume>
 8000c5e:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8000c62:	b012      	add	sp, #72	; 0x48
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop

08000c68 <_Unwind_Resume_or_Rethrow>:
 8000c68:	46ec      	mov	ip, sp
 8000c6a:	b500      	push	{lr}
 8000c6c:	e92d 5000 	stmdb	sp!, {ip, lr}
 8000c70:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8000c74:	f04f 0300 	mov.w	r3, #0
 8000c78:	e92d 000c 	stmdb	sp!, {r2, r3}
 8000c7c:	a901      	add	r1, sp, #4
 8000c7e:	f7ff fc25 	bl	80004cc <__gnu_Unwind_Resume_or_Rethrow>
 8000c82:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8000c86:	b012      	add	sp, #72	; 0x48
 8000c88:	4770      	bx	lr
 8000c8a:	bf00      	nop

08000c8c <_Unwind_ForcedUnwind>:
 8000c8c:	46ec      	mov	ip, sp
 8000c8e:	b500      	push	{lr}
 8000c90:	e92d 5000 	stmdb	sp!, {ip, lr}
 8000c94:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8000c98:	f04f 0300 	mov.w	r3, #0
 8000c9c:	e92d 000c 	stmdb	sp!, {r2, r3}
 8000ca0:	ab01      	add	r3, sp, #4
 8000ca2:	f7ff fbe7 	bl	8000474 <__gnu_Unwind_ForcedUnwind>
 8000ca6:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8000caa:	b012      	add	sp, #72	; 0x48
 8000cac:	4770      	bx	lr
 8000cae:	bf00      	nop

08000cb0 <_Unwind_Backtrace>:
 8000cb0:	46ec      	mov	ip, sp
 8000cb2:	b500      	push	{lr}
 8000cb4:	e92d 5000 	stmdb	sp!, {ip, lr}
 8000cb8:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8000cbc:	f04f 0300 	mov.w	r3, #0
 8000cc0:	e92d 000c 	stmdb	sp!, {r2, r3}
 8000cc4:	aa01      	add	r2, sp, #4
 8000cc6:	f7ff fc61 	bl	800058c <__gnu_Unwind_Backtrace>
 8000cca:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8000cce:	b012      	add	sp, #72	; 0x48
 8000cd0:	4770      	bx	lr
 8000cd2:	bf00      	nop

08000cd4 <next_unwind_byte>:
 8000cd4:	7a02      	ldrb	r2, [r0, #8]
 8000cd6:	b91a      	cbnz	r2, 8000ce0 <next_unwind_byte+0xc>
 8000cd8:	7a43      	ldrb	r3, [r0, #9]
 8000cda:	b943      	cbnz	r3, 8000cee <next_unwind_byte+0x1a>
 8000cdc:	20b0      	movs	r0, #176	; 0xb0
 8000cde:	4770      	bx	lr
 8000ce0:	6803      	ldr	r3, [r0, #0]
 8000ce2:	3a01      	subs	r2, #1
 8000ce4:	7202      	strb	r2, [r0, #8]
 8000ce6:	021a      	lsls	r2, r3, #8
 8000ce8:	6002      	str	r2, [r0, #0]
 8000cea:	0e18      	lsrs	r0, r3, #24
 8000cec:	4770      	bx	lr
 8000cee:	2103      	movs	r1, #3
 8000cf0:	6842      	ldr	r2, [r0, #4]
 8000cf2:	3b01      	subs	r3, #1
 8000cf4:	b410      	push	{r4}
 8000cf6:	7243      	strb	r3, [r0, #9]
 8000cf8:	6813      	ldr	r3, [r2, #0]
 8000cfa:	1d14      	adds	r4, r2, #4
 8000cfc:	7201      	strb	r1, [r0, #8]
 8000cfe:	021a      	lsls	r2, r3, #8
 8000d00:	6044      	str	r4, [r0, #4]
 8000d02:	6002      	str	r2, [r0, #0]
 8000d04:	bc10      	pop	{r4}
 8000d06:	0e18      	lsrs	r0, r3, #24
 8000d08:	4770      	bx	lr
 8000d0a:	bf00      	nop

08000d0c <_Unwind_GetGR.constprop.0>:
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	b500      	push	{lr}
 8000d10:	b085      	sub	sp, #20
 8000d12:	aa03      	add	r2, sp, #12
 8000d14:	9200      	str	r2, [sp, #0]
 8000d16:	4619      	mov	r1, r3
 8000d18:	220c      	movs	r2, #12
 8000d1a:	f7ff fbe9 	bl	80004f0 <_Unwind_VRS_Get>
 8000d1e:	9803      	ldr	r0, [sp, #12]
 8000d20:	b005      	add	sp, #20
 8000d22:	f85d fb04 	ldr.w	pc, [sp], #4
 8000d26:	bf00      	nop

08000d28 <unwind_UCB_from_context>:
 8000d28:	e7f0      	b.n	8000d0c <_Unwind_GetGR.constprop.0>
 8000d2a:	bf00      	nop

08000d2c <__gnu_unwind_execute>:
 8000d2c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000d30:	4606      	mov	r6, r0
 8000d32:	460f      	mov	r7, r1
 8000d34:	f04f 0800 	mov.w	r8, #0
 8000d38:	b085      	sub	sp, #20
 8000d3a:	4638      	mov	r0, r7
 8000d3c:	f7ff ffca 	bl	8000cd4 <next_unwind_byte>
 8000d40:	28b0      	cmp	r0, #176	; 0xb0
 8000d42:	4604      	mov	r4, r0
 8000d44:	d023      	beq.n	8000d8e <__gnu_unwind_execute+0x62>
 8000d46:	0605      	lsls	r5, r0, #24
 8000d48:	d427      	bmi.n	8000d9a <__gnu_unwind_execute+0x6e>
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	f10d 090c 	add.w	r9, sp, #12
 8000d50:	4619      	mov	r1, r3
 8000d52:	0085      	lsls	r5, r0, #2
 8000d54:	220d      	movs	r2, #13
 8000d56:	f8cd 9000 	str.w	r9, [sp]
 8000d5a:	4630      	mov	r0, r6
 8000d5c:	f7ff fbc8 	bl	80004f0 <_Unwind_VRS_Get>
 8000d60:	b2ed      	uxtb	r5, r5
 8000d62:	9b03      	ldr	r3, [sp, #12]
 8000d64:	0660      	lsls	r0, r4, #25
 8000d66:	f105 0504 	add.w	r5, r5, #4
 8000d6a:	bf4c      	ite	mi
 8000d6c:	1b5d      	submi	r5, r3, r5
 8000d6e:	18ed      	addpl	r5, r5, r3
 8000d70:	2300      	movs	r3, #0
 8000d72:	220d      	movs	r2, #13
 8000d74:	4619      	mov	r1, r3
 8000d76:	f8cd 9000 	str.w	r9, [sp]
 8000d7a:	4630      	mov	r0, r6
 8000d7c:	9503      	str	r5, [sp, #12]
 8000d7e:	f7ff fbdd 	bl	800053c <_Unwind_VRS_Set>
 8000d82:	4638      	mov	r0, r7
 8000d84:	f7ff ffa6 	bl	8000cd4 <next_unwind_byte>
 8000d88:	28b0      	cmp	r0, #176	; 0xb0
 8000d8a:	4604      	mov	r4, r0
 8000d8c:	d1db      	bne.n	8000d46 <__gnu_unwind_execute+0x1a>
 8000d8e:	f1b8 0f00 	cmp.w	r8, #0
 8000d92:	f000 8094 	beq.w	8000ebe <__gnu_unwind_execute+0x192>
 8000d96:	2000      	movs	r0, #0
 8000d98:	e01c      	b.n	8000dd4 <__gnu_unwind_execute+0xa8>
 8000d9a:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
 8000d9e:	2b80      	cmp	r3, #128	; 0x80
 8000da0:	d05c      	beq.n	8000e5c <__gnu_unwind_execute+0x130>
 8000da2:	2b90      	cmp	r3, #144	; 0x90
 8000da4:	d019      	beq.n	8000dda <__gnu_unwind_execute+0xae>
 8000da6:	2ba0      	cmp	r3, #160	; 0xa0
 8000da8:	d02c      	beq.n	8000e04 <__gnu_unwind_execute+0xd8>
 8000daa:	2bb0      	cmp	r3, #176	; 0xb0
 8000dac:	d03e      	beq.n	8000e2c <__gnu_unwind_execute+0x100>
 8000dae:	2bc0      	cmp	r3, #192	; 0xc0
 8000db0:	d06b      	beq.n	8000e8a <__gnu_unwind_execute+0x15e>
 8000db2:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
 8000db6:	2bd0      	cmp	r3, #208	; 0xd0
 8000db8:	d10b      	bne.n	8000dd2 <__gnu_unwind_execute+0xa6>
 8000dba:	f000 0207 	and.w	r2, r0, #7
 8000dbe:	3201      	adds	r2, #1
 8000dc0:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8000dc4:	2305      	movs	r3, #5
 8000dc6:	2101      	movs	r1, #1
 8000dc8:	4630      	mov	r0, r6
 8000dca:	f7ff fd87 	bl	80008dc <_Unwind_VRS_Pop>
 8000dce:	2800      	cmp	r0, #0
 8000dd0:	d0b3      	beq.n	8000d3a <__gnu_unwind_execute+0xe>
 8000dd2:	2009      	movs	r0, #9
 8000dd4:	b005      	add	sp, #20
 8000dd6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000dda:	f000 030d 	and.w	r3, r0, #13
 8000dde:	2b0d      	cmp	r3, #13
 8000de0:	d0f7      	beq.n	8000dd2 <__gnu_unwind_execute+0xa6>
 8000de2:	2300      	movs	r3, #0
 8000de4:	ad03      	add	r5, sp, #12
 8000de6:	f000 020f 	and.w	r2, r0, #15
 8000dea:	4619      	mov	r1, r3
 8000dec:	9500      	str	r5, [sp, #0]
 8000dee:	4630      	mov	r0, r6
 8000df0:	f7ff fb7e 	bl	80004f0 <_Unwind_VRS_Get>
 8000df4:	2300      	movs	r3, #0
 8000df6:	9500      	str	r5, [sp, #0]
 8000df8:	4619      	mov	r1, r3
 8000dfa:	220d      	movs	r2, #13
 8000dfc:	4630      	mov	r0, r6
 8000dfe:	f7ff fb9d 	bl	800053c <_Unwind_VRS_Set>
 8000e02:	e79a      	b.n	8000d3a <__gnu_unwind_execute+0xe>
 8000e04:	43c3      	mvns	r3, r0
 8000e06:	f44f 627f 	mov.w	r2, #4080	; 0xff0
 8000e0a:	f003 0307 	and.w	r3, r3, #7
 8000e0e:	411a      	asrs	r2, r3
 8000e10:	2300      	movs	r3, #0
 8000e12:	0701      	lsls	r1, r0, #28
 8000e14:	f402 627f 	and.w	r2, r2, #4080	; 0xff0
 8000e18:	bf48      	it	mi
 8000e1a:	f442 4280 	orrmi.w	r2, r2, #16384	; 0x4000
 8000e1e:	4619      	mov	r1, r3
 8000e20:	4630      	mov	r0, r6
 8000e22:	f7ff fd5b 	bl	80008dc <_Unwind_VRS_Pop>
 8000e26:	2800      	cmp	r0, #0
 8000e28:	d1d3      	bne.n	8000dd2 <__gnu_unwind_execute+0xa6>
 8000e2a:	e786      	b.n	8000d3a <__gnu_unwind_execute+0xe>
 8000e2c:	28b1      	cmp	r0, #177	; 0xb1
 8000e2e:	d057      	beq.n	8000ee0 <__gnu_unwind_execute+0x1b4>
 8000e30:	28b2      	cmp	r0, #178	; 0xb2
 8000e32:	d068      	beq.n	8000f06 <__gnu_unwind_execute+0x1da>
 8000e34:	28b3      	cmp	r0, #179	; 0xb3
 8000e36:	f000 8095 	beq.w	8000f64 <__gnu_unwind_execute+0x238>
 8000e3a:	f000 03fc 	and.w	r3, r0, #252	; 0xfc
 8000e3e:	2bb4      	cmp	r3, #180	; 0xb4
 8000e40:	d0c7      	beq.n	8000dd2 <__gnu_unwind_execute+0xa6>
 8000e42:	2301      	movs	r3, #1
 8000e44:	f000 0207 	and.w	r2, r0, #7
 8000e48:	441a      	add	r2, r3
 8000e4a:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8000e4e:	4619      	mov	r1, r3
 8000e50:	4630      	mov	r0, r6
 8000e52:	f7ff fd43 	bl	80008dc <_Unwind_VRS_Pop>
 8000e56:	2800      	cmp	r0, #0
 8000e58:	d1bb      	bne.n	8000dd2 <__gnu_unwind_execute+0xa6>
 8000e5a:	e76e      	b.n	8000d3a <__gnu_unwind_execute+0xe>
 8000e5c:	4638      	mov	r0, r7
 8000e5e:	f7ff ff39 	bl	8000cd4 <next_unwind_byte>
 8000e62:	0224      	lsls	r4, r4, #8
 8000e64:	4304      	orrs	r4, r0
 8000e66:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
 8000e6a:	d0b2      	beq.n	8000dd2 <__gnu_unwind_execute+0xa6>
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	0124      	lsls	r4, r4, #4
 8000e70:	b2a2      	uxth	r2, r4
 8000e72:	4619      	mov	r1, r3
 8000e74:	4630      	mov	r0, r6
 8000e76:	f7ff fd31 	bl	80008dc <_Unwind_VRS_Pop>
 8000e7a:	2800      	cmp	r0, #0
 8000e7c:	d1a9      	bne.n	8000dd2 <__gnu_unwind_execute+0xa6>
 8000e7e:	f414 4f00 	tst.w	r4, #32768	; 0x8000
 8000e82:	bf18      	it	ne
 8000e84:	f04f 0801 	movne.w	r8, #1
 8000e88:	e757      	b.n	8000d3a <__gnu_unwind_execute+0xe>
 8000e8a:	28c6      	cmp	r0, #198	; 0xc6
 8000e8c:	d07d      	beq.n	8000f8a <__gnu_unwind_execute+0x25e>
 8000e8e:	28c7      	cmp	r0, #199	; 0xc7
 8000e90:	f000 8086 	beq.w	8000fa0 <__gnu_unwind_execute+0x274>
 8000e94:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
 8000e98:	2bc0      	cmp	r3, #192	; 0xc0
 8000e9a:	f000 8094 	beq.w	8000fc6 <__gnu_unwind_execute+0x29a>
 8000e9e:	28c8      	cmp	r0, #200	; 0xc8
 8000ea0:	f000 809f 	beq.w	8000fe2 <__gnu_unwind_execute+0x2b6>
 8000ea4:	28c9      	cmp	r0, #201	; 0xc9
 8000ea6:	d194      	bne.n	8000dd2 <__gnu_unwind_execute+0xa6>
 8000ea8:	4638      	mov	r0, r7
 8000eaa:	f7ff ff13 	bl	8000cd4 <next_unwind_byte>
 8000eae:	0302      	lsls	r2, r0, #12
 8000eb0:	f000 000f 	and.w	r0, r0, #15
 8000eb4:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
 8000eb8:	3001      	adds	r0, #1
 8000eba:	4302      	orrs	r2, r0
 8000ebc:	e782      	b.n	8000dc4 <__gnu_unwind_execute+0x98>
 8000ebe:	ac03      	add	r4, sp, #12
 8000ec0:	4643      	mov	r3, r8
 8000ec2:	220e      	movs	r2, #14
 8000ec4:	4641      	mov	r1, r8
 8000ec6:	9400      	str	r4, [sp, #0]
 8000ec8:	4630      	mov	r0, r6
 8000eca:	f7ff fb11 	bl	80004f0 <_Unwind_VRS_Get>
 8000ece:	9400      	str	r4, [sp, #0]
 8000ed0:	4630      	mov	r0, r6
 8000ed2:	4643      	mov	r3, r8
 8000ed4:	220f      	movs	r2, #15
 8000ed6:	4641      	mov	r1, r8
 8000ed8:	f7ff fb30 	bl	800053c <_Unwind_VRS_Set>
 8000edc:	4640      	mov	r0, r8
 8000ede:	e779      	b.n	8000dd4 <__gnu_unwind_execute+0xa8>
 8000ee0:	4638      	mov	r0, r7
 8000ee2:	f7ff fef7 	bl	8000cd4 <next_unwind_byte>
 8000ee6:	2800      	cmp	r0, #0
 8000ee8:	f43f af73 	beq.w	8000dd2 <__gnu_unwind_execute+0xa6>
 8000eec:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
 8000ef0:	f47f af6f 	bne.w	8000dd2 <__gnu_unwind_execute+0xa6>
 8000ef4:	4602      	mov	r2, r0
 8000ef6:	4619      	mov	r1, r3
 8000ef8:	4630      	mov	r0, r6
 8000efa:	f7ff fcef 	bl	80008dc <_Unwind_VRS_Pop>
 8000efe:	2800      	cmp	r0, #0
 8000f00:	f47f af67 	bne.w	8000dd2 <__gnu_unwind_execute+0xa6>
 8000f04:	e719      	b.n	8000d3a <__gnu_unwind_execute+0xe>
 8000f06:	2300      	movs	r3, #0
 8000f08:	f10d 090c 	add.w	r9, sp, #12
 8000f0c:	220d      	movs	r2, #13
 8000f0e:	4619      	mov	r1, r3
 8000f10:	f8cd 9000 	str.w	r9, [sp]
 8000f14:	4630      	mov	r0, r6
 8000f16:	f7ff faeb 	bl	80004f0 <_Unwind_VRS_Get>
 8000f1a:	4638      	mov	r0, r7
 8000f1c:	f7ff feda 	bl	8000cd4 <next_unwind_byte>
 8000f20:	0602      	lsls	r2, r0, #24
 8000f22:	f04f 0402 	mov.w	r4, #2
 8000f26:	d50c      	bpl.n	8000f42 <__gnu_unwind_execute+0x216>
 8000f28:	9b03      	ldr	r3, [sp, #12]
 8000f2a:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8000f2e:	40a0      	lsls	r0, r4
 8000f30:	4403      	add	r3, r0
 8000f32:	4638      	mov	r0, r7
 8000f34:	9303      	str	r3, [sp, #12]
 8000f36:	f7ff fecd 	bl	8000cd4 <next_unwind_byte>
 8000f3a:	0603      	lsls	r3, r0, #24
 8000f3c:	f104 0407 	add.w	r4, r4, #7
 8000f40:	d4f2      	bmi.n	8000f28 <__gnu_unwind_execute+0x1fc>
 8000f42:	2300      	movs	r3, #0
 8000f44:	9903      	ldr	r1, [sp, #12]
 8000f46:	f000 027f 	and.w	r2, r0, #127	; 0x7f
 8000f4a:	40a2      	lsls	r2, r4
 8000f4c:	f501 7101 	add.w	r1, r1, #516	; 0x204
 8000f50:	188c      	adds	r4, r1, r2
 8000f52:	f8cd 9000 	str.w	r9, [sp]
 8000f56:	4619      	mov	r1, r3
 8000f58:	220d      	movs	r2, #13
 8000f5a:	4630      	mov	r0, r6
 8000f5c:	9403      	str	r4, [sp, #12]
 8000f5e:	f7ff faed 	bl	800053c <_Unwind_VRS_Set>
 8000f62:	e6ea      	b.n	8000d3a <__gnu_unwind_execute+0xe>
 8000f64:	4638      	mov	r0, r7
 8000f66:	f7ff feb5 	bl	8000cd4 <next_unwind_byte>
 8000f6a:	2301      	movs	r3, #1
 8000f6c:	0301      	lsls	r1, r0, #12
 8000f6e:	f000 000f 	and.w	r0, r0, #15
 8000f72:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
 8000f76:	18c2      	adds	r2, r0, r3
 8000f78:	430a      	orrs	r2, r1
 8000f7a:	4630      	mov	r0, r6
 8000f7c:	4619      	mov	r1, r3
 8000f7e:	f7ff fcad 	bl	80008dc <_Unwind_VRS_Pop>
 8000f82:	2800      	cmp	r0, #0
 8000f84:	f47f af25 	bne.w	8000dd2 <__gnu_unwind_execute+0xa6>
 8000f88:	e6d7      	b.n	8000d3a <__gnu_unwind_execute+0xe>
 8000f8a:	4638      	mov	r0, r7
 8000f8c:	f7ff fea2 	bl	8000cd4 <next_unwind_byte>
 8000f90:	0301      	lsls	r1, r0, #12
 8000f92:	f000 000f 	and.w	r0, r0, #15
 8000f96:	2303      	movs	r3, #3
 8000f98:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
 8000f9c:	1c42      	adds	r2, r0, #1
 8000f9e:	e7eb      	b.n	8000f78 <__gnu_unwind_execute+0x24c>
 8000fa0:	4638      	mov	r0, r7
 8000fa2:	f7ff fe97 	bl	8000cd4 <next_unwind_byte>
 8000fa6:	2800      	cmp	r0, #0
 8000fa8:	f43f af13 	beq.w	8000dd2 <__gnu_unwind_execute+0xa6>
 8000fac:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
 8000fb0:	f47f af0f 	bne.w	8000dd2 <__gnu_unwind_execute+0xa6>
 8000fb4:	4602      	mov	r2, r0
 8000fb6:	2104      	movs	r1, #4
 8000fb8:	4630      	mov	r0, r6
 8000fba:	f7ff fc8f 	bl	80008dc <_Unwind_VRS_Pop>
 8000fbe:	2800      	cmp	r0, #0
 8000fc0:	f47f af07 	bne.w	8000dd2 <__gnu_unwind_execute+0xa6>
 8000fc4:	e6b9      	b.n	8000d3a <__gnu_unwind_execute+0xe>
 8000fc6:	2303      	movs	r3, #3
 8000fc8:	f000 020f 	and.w	r2, r0, #15
 8000fcc:	3201      	adds	r2, #1
 8000fce:	f442 2220 	orr.w	r2, r2, #655360	; 0xa0000
 8000fd2:	4619      	mov	r1, r3
 8000fd4:	4630      	mov	r0, r6
 8000fd6:	f7ff fc81 	bl	80008dc <_Unwind_VRS_Pop>
 8000fda:	2800      	cmp	r0, #0
 8000fdc:	f47f aef9 	bne.w	8000dd2 <__gnu_unwind_execute+0xa6>
 8000fe0:	e6ab      	b.n	8000d3a <__gnu_unwind_execute+0xe>
 8000fe2:	4638      	mov	r0, r7
 8000fe4:	f7ff fe76 	bl	8000cd4 <next_unwind_byte>
 8000fe8:	f000 02f0 	and.w	r2, r0, #240	; 0xf0
 8000fec:	f000 030f 	and.w	r3, r0, #15
 8000ff0:	3210      	adds	r2, #16
 8000ff2:	3301      	adds	r3, #1
 8000ff4:	ea43 3202 	orr.w	r2, r3, r2, lsl #12
 8000ff8:	e6e4      	b.n	8000dc4 <__gnu_unwind_execute+0x98>
 8000ffa:	bf00      	nop

08000ffc <__gnu_unwind_frame>:
 8000ffc:	b530      	push	{r4, r5, lr}
 8000ffe:	2403      	movs	r4, #3
 8001000:	460d      	mov	r5, r1
 8001002:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8001004:	b085      	sub	sp, #20
 8001006:	685a      	ldr	r2, [r3, #4]
 8001008:	f88d 400c 	strb.w	r4, [sp, #12]
 800100c:	79dc      	ldrb	r4, [r3, #7]
 800100e:	0212      	lsls	r2, r2, #8
 8001010:	3308      	adds	r3, #8
 8001012:	a901      	add	r1, sp, #4
 8001014:	4628      	mov	r0, r5
 8001016:	9201      	str	r2, [sp, #4]
 8001018:	f88d 400d 	strb.w	r4, [sp, #13]
 800101c:	9302      	str	r3, [sp, #8]
 800101e:	f7ff fe85 	bl	8000d2c <__gnu_unwind_execute>
 8001022:	b005      	add	sp, #20
 8001024:	bd30      	pop	{r4, r5, pc}
 8001026:	bf00      	nop

08001028 <_Unwind_GetRegionStart>:
 8001028:	b508      	push	{r3, lr}
 800102a:	f7ff fe7d 	bl	8000d28 <unwind_UCB_from_context>
 800102e:	6c80      	ldr	r0, [r0, #72]	; 0x48
 8001030:	bd08      	pop	{r3, pc}
 8001032:	bf00      	nop

08001034 <_Unwind_GetLanguageSpecificData>:
 8001034:	b508      	push	{r3, lr}
 8001036:	f7ff fe77 	bl	8000d28 <unwind_UCB_from_context>
 800103a:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 800103c:	79c3      	ldrb	r3, [r0, #7]
 800103e:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8001042:	3008      	adds	r0, #8
 8001044:	bd08      	pop	{r3, pc}
 8001046:	bf00      	nop

08001048 <_Unwind_GetTextRelBase>:
 8001048:	b508      	push	{r3, lr}
 800104a:	f001 fe21 	bl	8002c90 <abort>
 800104e:	bf00      	nop

08001050 <_Unwind_GetDataRelBase>:
 8001050:	b508      	push	{r3, lr}
 8001052:	f7ff fff9 	bl	8001048 <_Unwind_GetTextRelBase>
 8001056:	bf00      	nop

08001058 <_ZN11SerialClassC1ER18UART_HandleTypeDef>:
	bool tx_cplt = true;
	uint16_t rx_tail = 0;
	UART_HandleTypeDef &huart;

public:
	SerialClass(UART_HandleTypeDef &huart) : huart(huart)
 8001058:	b480      	push	{r7}
 800105a:	b083      	sub	sp, #12
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
 8001060:	6039      	str	r1, [r7, #0]
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	2201      	movs	r2, #1
 8001066:	f883 2400 	strb.w	r2, [r3, #1024]	; 0x400
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	2200      	movs	r2, #0
 800106e:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	683a      	ldr	r2, [r7, #0]
 8001076:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
	{
		//this->huart = huart;
	}
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	4618      	mov	r0, r3
 800107e:	370c      	adds	r7, #12
 8001080:	46bd      	mov	sp, r7
 8001082:	bc80      	pop	{r7}
 8001084:	4770      	bx	lr

08001086 <_ZN11SerialClass10get_handleEv>:

	inline UART_HandleTypeDef * const get_handle(void)
 8001086:	b480      	push	{r7}
 8001088:	b083      	sub	sp, #12
 800108a:	af00      	add	r7, sp, #0
 800108c:	6078      	str	r0, [r7, #4]
	{
		return &huart;
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
	}
 8001094:	4618      	mov	r0, r3
 8001096:	370c      	adds	r7, #12
 8001098:	46bd      	mov	sp, r7
 800109a:	bc80      	pop	{r7}
 800109c:	4770      	bx	lr

0800109e <_ZN11SerialClass9start_dmaEv>:

	inline void start_dma(void)
 800109e:	b580      	push	{r7, lr}
 80010a0:	b082      	sub	sp, #8
 80010a2:	af00      	add	r7, sp, #0
 80010a4:	6078      	str	r0, [r7, #4]
	{
		tx_cplt = true;
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	2201      	movs	r2, #1
 80010aa:	f883 2400 	strb.w	r2, [r3, #1024]	; 0x400
		rx_tail = 0;
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	2200      	movs	r2, #0
 80010b2:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
		HAL_UART_Receive_DMA(&huart, (uint8_t *) rx_buf, BUF_SIZE);
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80010c2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80010c6:	4619      	mov	r1, r3
 80010c8:	f001 fc02 	bl	80028d0 <HAL_UART_Receive_DMA>
	}
 80010cc:	bf00      	nop
 80010ce:	3708      	adds	r7, #8
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bd80      	pop	{r7, pc}

080010d4 <_ZN11SerialClass5writeEPKhi>:
		int c = (int) rx_buf[rx_tail++];
		rx_tail &= buf_mask;
		return c;
	}

	inline void write(const uint8_t * const c, const int length)
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b086      	sub	sp, #24
 80010d8:	af00      	add	r7, sp, #0
 80010da:	60f8      	str	r0, [r7, #12]
 80010dc:	60b9      	str	r1, [r7, #8]
 80010de:	607a      	str	r2, [r7, #4]
	{
		if (!tx_cplt || length > BUF_SIZE || length < 1)
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	f893 3400 	ldrb.w	r3, [r3, #1024]	; 0x400
 80010e6:	f083 0301 	eor.w	r3, r3, #1
 80010ea:	b2db      	uxtb	r3, r3
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d127      	bne.n	8001140 <_ZN11SerialClass5writeEPKhi+0x6c>
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80010f6:	dc23      	bgt.n	8001140 <_ZN11SerialClass5writeEPKhi+0x6c>
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	dd20      	ble.n	8001140 <_ZN11SerialClass5writeEPKhi+0x6c>
		{
			return;
		}

		tx_cplt = false;
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	2200      	movs	r2, #0
 8001102:	f883 2400 	strb.w	r2, [r3, #1024]	; 0x400

		for (int i = 0; i < length; i++)
 8001106:	2300      	movs	r3, #0
 8001108:	617b      	str	r3, [r7, #20]
 800110a:	697a      	ldr	r2, [r7, #20]
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	429a      	cmp	r2, r3
 8001110:	da0c      	bge.n	800112c <_ZN11SerialClass5writeEPKhi+0x58>
		{
			tx_buf[i] = c[i];
 8001112:	697b      	ldr	r3, [r7, #20]
 8001114:	68ba      	ldr	r2, [r7, #8]
 8001116:	4413      	add	r3, r2
 8001118:	7819      	ldrb	r1, [r3, #0]
 800111a:	68fa      	ldr	r2, [r7, #12]
 800111c:	697b      	ldr	r3, [r7, #20]
 800111e:	4413      	add	r3, r2
 8001120:	460a      	mov	r2, r1
 8001122:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < length; i++)
 8001124:	697b      	ldr	r3, [r7, #20]
 8001126:	3301      	adds	r3, #1
 8001128:	617b      	str	r3, [r7, #20]
 800112a:	e7ee      	b.n	800110a <_ZN11SerialClass5writeEPKhi+0x36>
		}

		HAL_UART_Transmit_DMA(&huart, tx_buf, length);
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8001132:	68f9      	ldr	r1, [r7, #12]
 8001134:	687a      	ldr	r2, [r7, #4]
 8001136:	b292      	uxth	r2, r2
 8001138:	4618      	mov	r0, r3
 800113a:	f001 fb8f 	bl	800285c <HAL_UART_Transmit_DMA>
 800113e:	e000      	b.n	8001142 <_ZN11SerialClass5writeEPKhi+0x6e>
			return;
 8001140:	bf00      	nop
	}
 8001142:	3718      	adds	r7, #24
 8001144:	46bd      	mov	sp, r7
 8001146:	bd80      	pop	{r7, pc}

08001148 <_ZN11SerialClass16tx_cplt_callbackEv>:

	inline void tx_cplt_callback(void)
 8001148:	b480      	push	{r7}
 800114a:	b083      	sub	sp, #12
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
	{
		tx_cplt = true;
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	2201      	movs	r2, #1
 8001154:	f883 2400 	strb.w	r2, [r3, #1024]	; 0x400
	}
 8001158:	bf00      	nop
 800115a:	370c      	adds	r7, #12
 800115c:	46bd      	mov	sp, r7
 800115e:	bc80      	pop	{r7}
 8001160:	4770      	bx	lr
	...

08001164 <HAL_UART_TxCpltCallback>:
};

SerialClass serial(huart1);

extern "C" void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001164:	b590      	push	{r4, r7, lr}
 8001166:	b083      	sub	sp, #12
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
	// comparing pointer
	if (huart->Instance == serial.get_handle()->Instance)
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681c      	ldr	r4, [r3, #0]
 8001170:	4809      	ldr	r0, [pc, #36]	; (8001198 <HAL_UART_TxCpltCallback+0x34>)
 8001172:	f7ff ff88 	bl	8001086 <_ZN11SerialClass10get_handleEv>
 8001176:	4603      	mov	r3, r0
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	429c      	cmp	r4, r3
 800117c:	bf0c      	ite	eq
 800117e:	2301      	moveq	r3, #1
 8001180:	2300      	movne	r3, #0
 8001182:	b2db      	uxtb	r3, r3
 8001184:	2b00      	cmp	r3, #0
 8001186:	d002      	beq.n	800118e <HAL_UART_TxCpltCallback+0x2a>
	{
		serial.tx_cplt_callback();
 8001188:	4803      	ldr	r0, [pc, #12]	; (8001198 <HAL_UART_TxCpltCallback+0x34>)
 800118a:	f7ff ffdd 	bl	8001148 <_ZN11SerialClass16tx_cplt_callbackEv>
	}
}
 800118e:	bf00      	nop
 8001190:	370c      	adds	r7, #12
 8001192:	46bd      	mov	sp, r7
 8001194:	bd90      	pop	{r4, r7, pc}
 8001196:	bf00      	nop
 8001198:	20000224 	.word	0x20000224

0800119c <main>:
 * @brief  The application entry point.
 *
 * @retval None
 */
int main(void)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b082      	sub	sp, #8
 80011a0:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration----------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80011a2:	f000 fb4d 	bl	8001840 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80011a6:	f000 f817 	bl	80011d8 <_Z18SystemClock_Configv>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80011aa:	f000 f927 	bl	80013fc <_ZL12MX_GPIO_Initv>
	MX_DMA_Init();
 80011ae:	f000 f8ff 	bl	80013b0 <_ZL11MX_DMA_Initv>
	MX_USART1_UART_Init();
 80011b2:	f000 f8c9 	bl	8001348 <_ZL19MX_USART1_UART_Initv>
	MX_TIM3_Init();
 80011b6:	f000 f86b 	bl	8001290 <_ZL12MX_TIM3_Initv>

	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	serial.start_dma();
 80011ba:	4805      	ldr	r0, [pc, #20]	; (80011d0 <main+0x34>)
 80011bc:	f7ff ff6f 	bl	800109e <_ZN11SerialClass9start_dmaEv>

	const char * buf = "Hello World!!";
 80011c0:	4b04      	ldr	r3, [pc, #16]	; (80011d4 <main+0x38>)
 80011c2:	607b      	str	r3, [r7, #4]
		 {}
		 USART1->DR = c;
		 //HAL_UART_Transmit(&huart1, &ch, 1, 10);
		 }
		 */
		serial.write((const uint8_t *) buf, 13);
 80011c4:	220d      	movs	r2, #13
 80011c6:	6879      	ldr	r1, [r7, #4]
 80011c8:	4801      	ldr	r0, [pc, #4]	; (80011d0 <main+0x34>)
 80011ca:	f7ff ff83 	bl	80010d4 <_ZN11SerialClass5writeEPKhi>
 80011ce:	e7f9      	b.n	80011c4 <main+0x28>
 80011d0:	20000224 	.word	0x20000224
 80011d4:	08002d7c 	.word	0x08002d7c

080011d8 <_Z18SystemClock_Configv>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b090      	sub	sp, #64	; 0x40
 80011dc:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct;
	RCC_ClkInitTypeDef RCC_ClkInitStruct;

	/**Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80011de:	2301      	movs	r3, #1
 80011e0:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80011e2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80011e6:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80011e8:	2300      	movs	r3, #0
 80011ea:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80011ec:	2301      	movs	r3, #1
 80011ee:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011f0:	2302      	movs	r3, #2
 80011f2:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80011f4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80011f8:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80011fa:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80011fe:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001200:	f107 0318 	add.w	r3, r7, #24
 8001204:	4618      	mov	r0, r3
 8001206:	f000 fde7 	bl	8001dd8 <HAL_RCC_OscConfig>
 800120a:	4603      	mov	r3, r0
 800120c:	2b00      	cmp	r3, #0
 800120e:	bf14      	ite	ne
 8001210:	2301      	movne	r3, #1
 8001212:	2300      	moveq	r3, #0
 8001214:	b2db      	uxtb	r3, r3
 8001216:	2b00      	cmp	r3, #0
 8001218:	d003      	beq.n	8001222 <_Z18SystemClock_Configv+0x4a>
	{
		_Error_Handler(__FILE__, __LINE__);
 800121a:	21ec      	movs	r1, #236	; 0xec
 800121c:	481a      	ldr	r0, [pc, #104]	; (8001288 <_Z18SystemClock_Configv+0xb0>)
 800121e:	f000 f91b 	bl	8001458 <_Error_Handler>
	}

	/**Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001222:	230f      	movs	r3, #15
 8001224:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001226:	2302      	movs	r3, #2
 8001228:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800122a:	2300      	movs	r3, #0
 800122c:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800122e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001232:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001234:	2300      	movs	r3, #0
 8001236:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001238:	1d3b      	adds	r3, r7, #4
 800123a:	2102      	movs	r1, #2
 800123c:	4618      	mov	r0, r3
 800123e:	f000 ff93 	bl	8002168 <HAL_RCC_ClockConfig>
 8001242:	4603      	mov	r3, r0
 8001244:	2b00      	cmp	r3, #0
 8001246:	bf14      	ite	ne
 8001248:	2301      	movne	r3, #1
 800124a:	2300      	moveq	r3, #0
 800124c:	b2db      	uxtb	r3, r3
 800124e:	2b00      	cmp	r3, #0
 8001250:	d003      	beq.n	800125a <_Z18SystemClock_Configv+0x82>
	{
		_Error_Handler(__FILE__, __LINE__);
 8001252:	21fa      	movs	r1, #250	; 0xfa
 8001254:	480c      	ldr	r0, [pc, #48]	; (8001288 <_Z18SystemClock_Configv+0xb0>)
 8001256:	f000 f8ff 	bl	8001458 <_Error_Handler>
	}

	/**Configure the Systick interrupt time
	 */
	HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / 1000);
 800125a:	f001 f829 	bl	80022b0 <HAL_RCC_GetHCLKFreq>
 800125e:	4602      	mov	r2, r0
 8001260:	4b0a      	ldr	r3, [pc, #40]	; (800128c <_Z18SystemClock_Configv+0xb4>)
 8001262:	fba3 2302 	umull	r2, r3, r3, r2
 8001266:	099b      	lsrs	r3, r3, #6
 8001268:	4618      	mov	r0, r3
 800126a:	f000 fb5f 	bl	800192c <HAL_SYSTICK_Config>

	/**Configure the Systick
	 */
	HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 800126e:	2004      	movs	r0, #4
 8001270:	f000 fb72 	bl	8001958 <HAL_SYSTICK_CLKSourceConfig>

	/* SysTick_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8001274:	2200      	movs	r2, #0
 8001276:	2100      	movs	r1, #0
 8001278:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800127c:	f000 fb16 	bl	80018ac <HAL_NVIC_SetPriority>
}
 8001280:	bf00      	nop
 8001282:	3740      	adds	r7, #64	; 0x40
 8001284:	46bd      	mov	sp, r7
 8001286:	bd80      	pop	{r7, pc}
 8001288:	08002d8c 	.word	0x08002d8c
 800128c:	10624dd3 	.word	0x10624dd3

08001290 <_ZL12MX_TIM3_Initv>:

/* TIM3 init function */
static void MX_TIM3_Init(void)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b086      	sub	sp, #24
 8001294:	af00      	add	r7, sp, #0

	TIM_ClockConfigTypeDef sClockSourceConfig;
	TIM_MasterConfigTypeDef sMasterConfig;

	htim3.Instance = TIM3;
 8001296:	4b29      	ldr	r3, [pc, #164]	; (800133c <_ZL12MX_TIM3_Initv+0xac>)
 8001298:	4a29      	ldr	r2, [pc, #164]	; (8001340 <_ZL12MX_TIM3_Initv+0xb0>)
 800129a:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 72 - 1;
 800129c:	4b27      	ldr	r3, [pc, #156]	; (800133c <_ZL12MX_TIM3_Initv+0xac>)
 800129e:	2247      	movs	r2, #71	; 0x47
 80012a0:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012a2:	4b26      	ldr	r3, [pc, #152]	; (800133c <_ZL12MX_TIM3_Initv+0xac>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 2000 - 1;
 80012a8:	4b24      	ldr	r3, [pc, #144]	; (800133c <_ZL12MX_TIM3_Initv+0xac>)
 80012aa:	f240 72cf 	movw	r2, #1999	; 0x7cf
 80012ae:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012b0:	4b22      	ldr	r3, [pc, #136]	; (800133c <_ZL12MX_TIM3_Initv+0xac>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012b6:	4b21      	ldr	r3, [pc, #132]	; (800133c <_ZL12MX_TIM3_Initv+0xac>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80012bc:	481f      	ldr	r0, [pc, #124]	; (800133c <_ZL12MX_TIM3_Initv+0xac>)
 80012be:	f001 f9b5 	bl	800262c <HAL_TIM_Base_Init>
 80012c2:	4603      	mov	r3, r0
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	bf14      	ite	ne
 80012c8:	2301      	movne	r3, #1
 80012ca:	2300      	moveq	r3, #0
 80012cc:	b2db      	uxtb	r3, r3
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d004      	beq.n	80012dc <_ZL12MX_TIM3_Initv+0x4c>
	{
		_Error_Handler(__FILE__, __LINE__);
 80012d2:	f44f 718c 	mov.w	r1, #280	; 0x118
 80012d6:	481b      	ldr	r0, [pc, #108]	; (8001344 <_ZL12MX_TIM3_Initv+0xb4>)
 80012d8:	f000 f8be 	bl	8001458 <_Error_Handler>
	}

	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012e0:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80012e2:	f107 0308 	add.w	r3, r7, #8
 80012e6:	4619      	mov	r1, r3
 80012e8:	4814      	ldr	r0, [pc, #80]	; (800133c <_ZL12MX_TIM3_Initv+0xac>)
 80012ea:	f001 f807 	bl	80022fc <HAL_TIM_ConfigClockSource>
 80012ee:	4603      	mov	r3, r0
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	bf14      	ite	ne
 80012f4:	2301      	movne	r3, #1
 80012f6:	2300      	moveq	r3, #0
 80012f8:	b2db      	uxtb	r3, r3
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d004      	beq.n	8001308 <_ZL12MX_TIM3_Initv+0x78>
	{
		_Error_Handler(__FILE__, __LINE__);
 80012fe:	f44f 718f 	mov.w	r1, #286	; 0x11e
 8001302:	4810      	ldr	r0, [pc, #64]	; (8001344 <_ZL12MX_TIM3_Initv+0xb4>)
 8001304:	f000 f8a8 	bl	8001458 <_Error_Handler>
	}

	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001308:	2300      	movs	r3, #0
 800130a:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800130c:	2300      	movs	r3, #0
 800130e:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001310:	463b      	mov	r3, r7
 8001312:	4619      	mov	r1, r3
 8001314:	4809      	ldr	r0, [pc, #36]	; (800133c <_ZL12MX_TIM3_Initv+0xac>)
 8001316:	f001 f9a3 	bl	8002660 <HAL_TIMEx_MasterConfigSynchronization>
 800131a:	4603      	mov	r3, r0
 800131c:	2b00      	cmp	r3, #0
 800131e:	bf14      	ite	ne
 8001320:	2301      	movne	r3, #1
 8001322:	2300      	moveq	r3, #0
 8001324:	b2db      	uxtb	r3, r3
 8001326:	2b00      	cmp	r3, #0
 8001328:	d004      	beq.n	8001334 <_ZL12MX_TIM3_Initv+0xa4>
	{
		_Error_Handler(__FILE__, __LINE__);
 800132a:	f240 1125 	movw	r1, #293	; 0x125
 800132e:	4805      	ldr	r0, [pc, #20]	; (8001344 <_ZL12MX_TIM3_Initv+0xb4>)
 8001330:	f000 f892 	bl	8001458 <_Error_Handler>
	}

}
 8001334:	bf00      	nop
 8001336:	3718      	adds	r7, #24
 8001338:	46bd      	mov	sp, r7
 800133a:	bd80      	pop	{r7, pc}
 800133c:	2000011c 	.word	0x2000011c
 8001340:	40000400 	.word	0x40000400
 8001344:	08002d8c 	.word	0x08002d8c

08001348 <_ZL19MX_USART1_UART_Initv>:

/* USART1 init function */
static void MX_USART1_UART_Init(void)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	af00      	add	r7, sp, #0

	huart1.Instance = USART1;
 800134c:	4b15      	ldr	r3, [pc, #84]	; (80013a4 <_ZL19MX_USART1_UART_Initv+0x5c>)
 800134e:	4a16      	ldr	r2, [pc, #88]	; (80013a8 <_ZL19MX_USART1_UART_Initv+0x60>)
 8001350:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 460800;
 8001352:	4b14      	ldr	r3, [pc, #80]	; (80013a4 <_ZL19MX_USART1_UART_Initv+0x5c>)
 8001354:	f44f 22e1 	mov.w	r2, #460800	; 0x70800
 8001358:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800135a:	4b12      	ldr	r3, [pc, #72]	; (80013a4 <_ZL19MX_USART1_UART_Initv+0x5c>)
 800135c:	2200      	movs	r2, #0
 800135e:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8001360:	4b10      	ldr	r3, [pc, #64]	; (80013a4 <_ZL19MX_USART1_UART_Initv+0x5c>)
 8001362:	2200      	movs	r2, #0
 8001364:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8001366:	4b0f      	ldr	r3, [pc, #60]	; (80013a4 <_ZL19MX_USART1_UART_Initv+0x5c>)
 8001368:	2200      	movs	r2, #0
 800136a:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 800136c:	4b0d      	ldr	r3, [pc, #52]	; (80013a4 <_ZL19MX_USART1_UART_Initv+0x5c>)
 800136e:	220c      	movs	r2, #12
 8001370:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001372:	4b0c      	ldr	r3, [pc, #48]	; (80013a4 <_ZL19MX_USART1_UART_Initv+0x5c>)
 8001374:	2200      	movs	r2, #0
 8001376:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001378:	4b0a      	ldr	r3, [pc, #40]	; (80013a4 <_ZL19MX_USART1_UART_Initv+0x5c>)
 800137a:	2200      	movs	r2, #0
 800137c:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK)
 800137e:	4809      	ldr	r0, [pc, #36]	; (80013a4 <_ZL19MX_USART1_UART_Initv+0x5c>)
 8001380:	f001 fa3e 	bl	8002800 <HAL_UART_Init>
 8001384:	4603      	mov	r3, r0
 8001386:	2b00      	cmp	r3, #0
 8001388:	bf14      	ite	ne
 800138a:	2301      	movne	r3, #1
 800138c:	2300      	moveq	r3, #0
 800138e:	b2db      	uxtb	r3, r3
 8001390:	2b00      	cmp	r3, #0
 8001392:	d004      	beq.n	800139e <_ZL19MX_USART1_UART_Initv+0x56>
	{
		_Error_Handler(__FILE__, __LINE__);
 8001394:	f44f 719c 	mov.w	r1, #312	; 0x138
 8001398:	4804      	ldr	r0, [pc, #16]	; (80013ac <_ZL19MX_USART1_UART_Initv+0x64>)
 800139a:	f000 f85d 	bl	8001458 <_Error_Handler>
	}

}
 800139e:	bf00      	nop
 80013a0:	bd80      	pop	{r7, pc}
 80013a2:	bf00      	nop
 80013a4:	2000015c 	.word	0x2000015c
 80013a8:	40013800 	.word	0x40013800
 80013ac:	08002d8c 	.word	0x08002d8c

080013b0 <_ZL11MX_DMA_Initv>:

/** 
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b082      	sub	sp, #8
 80013b4:	af00      	add	r7, sp, #0
	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE()
 80013b6:	4a10      	ldr	r2, [pc, #64]	; (80013f8 <_ZL11MX_DMA_Initv+0x48>)
 80013b8:	4b0f      	ldr	r3, [pc, #60]	; (80013f8 <_ZL11MX_DMA_Initv+0x48>)
 80013ba:	695b      	ldr	r3, [r3, #20]
 80013bc:	f043 0301 	orr.w	r3, r3, #1
 80013c0:	6153      	str	r3, [r2, #20]
 80013c2:	4b0d      	ldr	r3, [pc, #52]	; (80013f8 <_ZL11MX_DMA_Initv+0x48>)
 80013c4:	695b      	ldr	r3, [r3, #20]
 80013c6:	f003 0301 	and.w	r3, r3, #1
 80013ca:	607b      	str	r3, [r7, #4]
 80013cc:	687b      	ldr	r3, [r7, #4]
	;

	/* DMA interrupt init */
	/* DMA1_Channel4_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 80013ce:	2200      	movs	r2, #0
 80013d0:	2100      	movs	r1, #0
 80013d2:	200e      	movs	r0, #14
 80013d4:	f000 fa6a 	bl	80018ac <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 80013d8:	200e      	movs	r0, #14
 80013da:	f000 fa9b 	bl	8001914 <HAL_NVIC_EnableIRQ>
	/* DMA1_Channel5_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 80013de:	2200      	movs	r2, #0
 80013e0:	2100      	movs	r1, #0
 80013e2:	200f      	movs	r0, #15
 80013e4:	f000 fa62 	bl	80018ac <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80013e8:	200f      	movs	r0, #15
 80013ea:	f000 fa93 	bl	8001914 <HAL_NVIC_EnableIRQ>

}
 80013ee:	bf00      	nop
 80013f0:	3708      	adds	r7, #8
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	bf00      	nop
 80013f8:	40021000 	.word	0x40021000

080013fc <_ZL12MX_GPIO_Initv>:
 * Output
 * EVENT_OUT
 * EXTI
 */
static void MX_GPIO_Init(void)
{
 80013fc:	b480      	push	{r7}
 80013fe:	b085      	sub	sp, #20
 8001400:	af00      	add	r7, sp, #0

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE()
 8001402:	4a14      	ldr	r2, [pc, #80]	; (8001454 <_ZL12MX_GPIO_Initv+0x58>)
 8001404:	4b13      	ldr	r3, [pc, #76]	; (8001454 <_ZL12MX_GPIO_Initv+0x58>)
 8001406:	699b      	ldr	r3, [r3, #24]
 8001408:	f043 0310 	orr.w	r3, r3, #16
 800140c:	6193      	str	r3, [r2, #24]
 800140e:	4b11      	ldr	r3, [pc, #68]	; (8001454 <_ZL12MX_GPIO_Initv+0x58>)
 8001410:	699b      	ldr	r3, [r3, #24]
 8001412:	f003 0310 	and.w	r3, r3, #16
 8001416:	60fb      	str	r3, [r7, #12]
 8001418:	68fb      	ldr	r3, [r7, #12]
	;
	__HAL_RCC_GPIOD_CLK_ENABLE()
 800141a:	4a0e      	ldr	r2, [pc, #56]	; (8001454 <_ZL12MX_GPIO_Initv+0x58>)
 800141c:	4b0d      	ldr	r3, [pc, #52]	; (8001454 <_ZL12MX_GPIO_Initv+0x58>)
 800141e:	699b      	ldr	r3, [r3, #24]
 8001420:	f043 0320 	orr.w	r3, r3, #32
 8001424:	6193      	str	r3, [r2, #24]
 8001426:	4b0b      	ldr	r3, [pc, #44]	; (8001454 <_ZL12MX_GPIO_Initv+0x58>)
 8001428:	699b      	ldr	r3, [r3, #24]
 800142a:	f003 0320 	and.w	r3, r3, #32
 800142e:	60bb      	str	r3, [r7, #8]
 8001430:	68bb      	ldr	r3, [r7, #8]
	;
	__HAL_RCC_GPIOA_CLK_ENABLE()
 8001432:	4a08      	ldr	r2, [pc, #32]	; (8001454 <_ZL12MX_GPIO_Initv+0x58>)
 8001434:	4b07      	ldr	r3, [pc, #28]	; (8001454 <_ZL12MX_GPIO_Initv+0x58>)
 8001436:	699b      	ldr	r3, [r3, #24]
 8001438:	f043 0304 	orr.w	r3, r3, #4
 800143c:	6193      	str	r3, [r2, #24]
 800143e:	4b05      	ldr	r3, [pc, #20]	; (8001454 <_ZL12MX_GPIO_Initv+0x58>)
 8001440:	699b      	ldr	r3, [r3, #24]
 8001442:	f003 0304 	and.w	r3, r3, #4
 8001446:	607b      	str	r3, [r7, #4]
 8001448:	687b      	ldr	r3, [r7, #4]
	;

}
 800144a:	bf00      	nop
 800144c:	3714      	adds	r7, #20
 800144e:	46bd      	mov	sp, r7
 8001450:	bc80      	pop	{r7}
 8001452:	4770      	bx	lr
 8001454:	40021000 	.word	0x40021000

08001458 <_Error_Handler>:
 * @param  file: The file name as string.
 * @param  line: The line in file as a number.
 * @retval None
 */
void _Error_Handler(char *file, int line)
{
 8001458:	b480      	push	{r7}
 800145a:	b083      	sub	sp, #12
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
 8001460:	6039      	str	r1, [r7, #0]
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	while (1)
 8001462:	e7fe      	b.n	8001462 <_Error_Handler+0xa>

08001464 <_Z41__static_initialization_and_destruction_0ii>:
	{
	}
	/* USER CODE END Error_Handler_Debug */
}
 8001464:	b580      	push	{r7, lr}
 8001466:	b082      	sub	sp, #8
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
 800146c:	6039      	str	r1, [r7, #0]
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	2b01      	cmp	r3, #1
 8001472:	d108      	bne.n	8001486 <_Z41__static_initialization_and_destruction_0ii+0x22>
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800147a:	4293      	cmp	r3, r2
 800147c:	d103      	bne.n	8001486 <_Z41__static_initialization_and_destruction_0ii+0x22>
SerialClass serial(huart1);
 800147e:	4904      	ldr	r1, [pc, #16]	; (8001490 <_Z41__static_initialization_and_destruction_0ii+0x2c>)
 8001480:	4804      	ldr	r0, [pc, #16]	; (8001494 <_Z41__static_initialization_and_destruction_0ii+0x30>)
 8001482:	f7ff fde9 	bl	8001058 <_ZN11SerialClassC1ER18UART_HandleTypeDef>
}
 8001486:	bf00      	nop
 8001488:	3708      	adds	r7, #8
 800148a:	46bd      	mov	sp, r7
 800148c:	bd80      	pop	{r7, pc}
 800148e:	bf00      	nop
 8001490:	2000015c 	.word	0x2000015c
 8001494:	20000224 	.word	0x20000224

08001498 <_GLOBAL__sub_I_htim3>:
 8001498:	b580      	push	{r7, lr}
 800149a:	af00      	add	r7, sp, #0
 800149c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80014a0:	2001      	movs	r0, #1
 80014a2:	f7ff ffdf 	bl	8001464 <_Z41__static_initialization_and_destruction_0ii>
 80014a6:	bd80      	pop	{r7, pc}

080014a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
 * Initializes the Global MSP.
 */
void HAL_MspInit(void)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b084      	sub	sp, #16
 80014ac:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MspInit 0 */

	/* USER CODE END MspInit 0 */

	__HAL_RCC_AFIO_CLK_ENABLE()
 80014ae:	4a2b      	ldr	r2, [pc, #172]	; (800155c <HAL_MspInit+0xb4>)
 80014b0:	4b2a      	ldr	r3, [pc, #168]	; (800155c <HAL_MspInit+0xb4>)
 80014b2:	699b      	ldr	r3, [r3, #24]
 80014b4:	f043 0301 	orr.w	r3, r3, #1
 80014b8:	6193      	str	r3, [r2, #24]
 80014ba:	4b28      	ldr	r3, [pc, #160]	; (800155c <HAL_MspInit+0xb4>)
 80014bc:	699b      	ldr	r3, [r3, #24]
 80014be:	f003 0301 	and.w	r3, r3, #1
 80014c2:	60bb      	str	r3, [r7, #8]
 80014c4:	68bb      	ldr	r3, [r7, #8]
	;
	__HAL_RCC_PWR_CLK_ENABLE()
 80014c6:	4a25      	ldr	r2, [pc, #148]	; (800155c <HAL_MspInit+0xb4>)
 80014c8:	4b24      	ldr	r3, [pc, #144]	; (800155c <HAL_MspInit+0xb4>)
 80014ca:	69db      	ldr	r3, [r3, #28]
 80014cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014d0:	61d3      	str	r3, [r2, #28]
 80014d2:	4b22      	ldr	r3, [pc, #136]	; (800155c <HAL_MspInit+0xb4>)
 80014d4:	69db      	ldr	r3, [r3, #28]
 80014d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014da:	607b      	str	r3, [r7, #4]
 80014dc:	687b      	ldr	r3, [r7, #4]
	;

	HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014de:	2003      	movs	r0, #3
 80014e0:	f000 f9d2 	bl	8001888 <HAL_NVIC_SetPriorityGrouping>

	/* System interrupt init*/
	/* MemoryManagement_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 80014e4:	2200      	movs	r2, #0
 80014e6:	2100      	movs	r1, #0
 80014e8:	f06f 000b 	mvn.w	r0, #11
 80014ec:	f000 f9de 	bl	80018ac <HAL_NVIC_SetPriority>
	/* BusFault_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 80014f0:	2200      	movs	r2, #0
 80014f2:	2100      	movs	r1, #0
 80014f4:	f06f 000a 	mvn.w	r0, #10
 80014f8:	f000 f9d8 	bl	80018ac <HAL_NVIC_SetPriority>
	/* UsageFault_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 80014fc:	2200      	movs	r2, #0
 80014fe:	2100      	movs	r1, #0
 8001500:	f06f 0009 	mvn.w	r0, #9
 8001504:	f000 f9d2 	bl	80018ac <HAL_NVIC_SetPriority>
	/* SVCall_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8001508:	2200      	movs	r2, #0
 800150a:	2100      	movs	r1, #0
 800150c:	f06f 0004 	mvn.w	r0, #4
 8001510:	f000 f9cc 	bl	80018ac <HAL_NVIC_SetPriority>
	/* DebugMonitor_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8001514:	2200      	movs	r2, #0
 8001516:	2100      	movs	r1, #0
 8001518:	f06f 0003 	mvn.w	r0, #3
 800151c:	f000 f9c6 	bl	80018ac <HAL_NVIC_SetPriority>
	/* PendSV_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8001520:	2200      	movs	r2, #0
 8001522:	2100      	movs	r1, #0
 8001524:	f06f 0001 	mvn.w	r0, #1
 8001528:	f000 f9c0 	bl	80018ac <HAL_NVIC_SetPriority>
	/* SysTick_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800152c:	2200      	movs	r2, #0
 800152e:	2100      	movs	r1, #0
 8001530:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001534:	f000 f9ba 	bl	80018ac <HAL_NVIC_SetPriority>

	/**NOJTAG: JTAG-DP Disabled and SW-DP Enabled
	 */
	__HAL_AFIO_REMAP_SWJ_NOJTAG()
 8001538:	4b09      	ldr	r3, [pc, #36]	; (8001560 <HAL_MspInit+0xb8>)
 800153a:	685b      	ldr	r3, [r3, #4]
 800153c:	60fb      	str	r3, [r7, #12]
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001544:	60fb      	str	r3, [r7, #12]
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800154c:	60fb      	str	r3, [r7, #12]
 800154e:	4a04      	ldr	r2, [pc, #16]	; (8001560 <HAL_MspInit+0xb8>)
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	6053      	str	r3, [r2, #4]
	;

	/* USER CODE BEGIN MspInit 1 */

	/* USER CODE END MspInit 1 */
}
 8001554:	bf00      	nop
 8001556:	3710      	adds	r7, #16
 8001558:	46bd      	mov	sp, r7
 800155a:	bd80      	pop	{r7, pc}
 800155c:	40021000 	.word	0x40021000
 8001560:	40010000 	.word	0x40010000

08001564 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b084      	sub	sp, #16
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
	if (htim_base->Instance == TIM3)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	4a0d      	ldr	r2, [pc, #52]	; (80015a8 <HAL_TIM_Base_MspInit+0x44>)
 8001572:	4293      	cmp	r3, r2
 8001574:	d113      	bne.n	800159e <HAL_TIM_Base_MspInit+0x3a>
	{
		/* USER CODE BEGIN TIM3_MspInit 0 */

		/* USER CODE END TIM3_MspInit 0 */
		/* Peripheral clock enable */
		__HAL_RCC_TIM3_CLK_ENABLE()
 8001576:	4a0d      	ldr	r2, [pc, #52]	; (80015ac <HAL_TIM_Base_MspInit+0x48>)
 8001578:	4b0c      	ldr	r3, [pc, #48]	; (80015ac <HAL_TIM_Base_MspInit+0x48>)
 800157a:	69db      	ldr	r3, [r3, #28]
 800157c:	f043 0302 	orr.w	r3, r3, #2
 8001580:	61d3      	str	r3, [r2, #28]
 8001582:	4b0a      	ldr	r3, [pc, #40]	; (80015ac <HAL_TIM_Base_MspInit+0x48>)
 8001584:	69db      	ldr	r3, [r3, #28]
 8001586:	f003 0302 	and.w	r3, r3, #2
 800158a:	60fb      	str	r3, [r7, #12]
 800158c:	68fb      	ldr	r3, [r7, #12]
		;
		/* TIM3 interrupt Init */
		HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800158e:	2200      	movs	r2, #0
 8001590:	2100      	movs	r1, #0
 8001592:	201d      	movs	r0, #29
 8001594:	f000 f98a 	bl	80018ac <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001598:	201d      	movs	r0, #29
 800159a:	f000 f9bb 	bl	8001914 <HAL_NVIC_EnableIRQ>
		/* USER CODE BEGIN TIM3_MspInit 1 */

		/* USER CODE END TIM3_MspInit 1 */
	}
}
 800159e:	bf00      	nop
 80015a0:	3710      	adds	r7, #16
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd80      	pop	{r7, pc}
 80015a6:	bf00      	nop
 80015a8:	40000400 	.word	0x40000400
 80015ac:	40021000 	.word	0x40021000

080015b0 <HAL_UART_MspInit>:
		/* USER CODE END TIM3_MspDeInit 1 */
	}
}

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b088      	sub	sp, #32
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct;
	if (huart->Instance == USART1)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	4a49      	ldr	r2, [pc, #292]	; (80016e4 <HAL_UART_MspInit+0x134>)
 80015be:	4293      	cmp	r3, r2
 80015c0:	f040 808b 	bne.w	80016da <HAL_UART_MspInit+0x12a>
	{
		/* USER CODE BEGIN USART1_MspInit 0 */

		/* USER CODE END USART1_MspInit 0 */
		/* Peripheral clock enable */
		__HAL_RCC_USART1_CLK_ENABLE();
 80015c4:	4a48      	ldr	r2, [pc, #288]	; (80016e8 <HAL_UART_MspInit+0x138>)
 80015c6:	4b48      	ldr	r3, [pc, #288]	; (80016e8 <HAL_UART_MspInit+0x138>)
 80015c8:	699b      	ldr	r3, [r3, #24]
 80015ca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015ce:	6193      	str	r3, [r2, #24]
 80015d0:	4b45      	ldr	r3, [pc, #276]	; (80016e8 <HAL_UART_MspInit+0x138>)
 80015d2:	699b      	ldr	r3, [r3, #24]
 80015d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015d8:	60fb      	str	r3, [r7, #12]
 80015da:	68fb      	ldr	r3, [r7, #12]

		/**USART1 GPIO Configuration
		 PA9     ------> USART1_TX
		 PA10     ------> USART1_RX
		 */
		GPIO_InitStruct.Pin = GPIO_PIN_9;
 80015dc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80015e0:	613b      	str	r3, [r7, #16]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015e2:	2302      	movs	r3, #2
 80015e4:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80015e6:	2303      	movs	r3, #3
 80015e8:	61fb      	str	r3, [r7, #28]
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015ea:	f107 0310 	add.w	r3, r7, #16
 80015ee:	4619      	mov	r1, r3
 80015f0:	483e      	ldr	r0, [pc, #248]	; (80016ec <HAL_UART_MspInit+0x13c>)
 80015f2:	f000 fb11 	bl	8001c18 <HAL_GPIO_Init>

		GPIO_InitStruct.Pin = GPIO_PIN_10;
 80015f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80015fa:	613b      	str	r3, [r7, #16]
		GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015fc:	2300      	movs	r3, #0
 80015fe:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001600:	2300      	movs	r3, #0
 8001602:	61bb      	str	r3, [r7, #24]
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001604:	f107 0310 	add.w	r3, r7, #16
 8001608:	4619      	mov	r1, r3
 800160a:	4838      	ldr	r0, [pc, #224]	; (80016ec <HAL_UART_MspInit+0x13c>)
 800160c:	f000 fb04 	bl	8001c18 <HAL_GPIO_Init>

		/* USART1 DMA Init */
		/* USART1_RX Init */
		hdma_usart1_rx.Instance = DMA1_Channel5;
 8001610:	4b37      	ldr	r3, [pc, #220]	; (80016f0 <HAL_UART_MspInit+0x140>)
 8001612:	4a38      	ldr	r2, [pc, #224]	; (80016f4 <HAL_UART_MspInit+0x144>)
 8001614:	601a      	str	r2, [r3, #0]
		hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001616:	4b36      	ldr	r3, [pc, #216]	; (80016f0 <HAL_UART_MspInit+0x140>)
 8001618:	2200      	movs	r2, #0
 800161a:	605a      	str	r2, [r3, #4]
		hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800161c:	4b34      	ldr	r3, [pc, #208]	; (80016f0 <HAL_UART_MspInit+0x140>)
 800161e:	2200      	movs	r2, #0
 8001620:	609a      	str	r2, [r3, #8]
		hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001622:	4b33      	ldr	r3, [pc, #204]	; (80016f0 <HAL_UART_MspInit+0x140>)
 8001624:	2280      	movs	r2, #128	; 0x80
 8001626:	60da      	str	r2, [r3, #12]
		hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001628:	4b31      	ldr	r3, [pc, #196]	; (80016f0 <HAL_UART_MspInit+0x140>)
 800162a:	2200      	movs	r2, #0
 800162c:	611a      	str	r2, [r3, #16]
		hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800162e:	4b30      	ldr	r3, [pc, #192]	; (80016f0 <HAL_UART_MspInit+0x140>)
 8001630:	2200      	movs	r2, #0
 8001632:	615a      	str	r2, [r3, #20]
		hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8001634:	4b2e      	ldr	r3, [pc, #184]	; (80016f0 <HAL_UART_MspInit+0x140>)
 8001636:	2220      	movs	r2, #32
 8001638:	619a      	str	r2, [r3, #24]
		hdma_usart1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 800163a:	4b2d      	ldr	r3, [pc, #180]	; (80016f0 <HAL_UART_MspInit+0x140>)
 800163c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001640:	61da      	str	r2, [r3, #28]
		if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001642:	482b      	ldr	r0, [pc, #172]	; (80016f0 <HAL_UART_MspInit+0x140>)
 8001644:	f000 f99a 	bl	800197c <HAL_DMA_Init>
 8001648:	4603      	mov	r3, r0
 800164a:	2b00      	cmp	r3, #0
 800164c:	bf14      	ite	ne
 800164e:	2301      	movne	r3, #1
 8001650:	2300      	moveq	r3, #0
 8001652:	b2db      	uxtb	r3, r3
 8001654:	2b00      	cmp	r3, #0
 8001656:	d003      	beq.n	8001660 <HAL_UART_MspInit+0xb0>
		{
			_Error_Handler(__FILE__, __LINE__);
 8001658:	21a6      	movs	r1, #166	; 0xa6
 800165a:	4827      	ldr	r0, [pc, #156]	; (80016f8 <HAL_UART_MspInit+0x148>)
 800165c:	f7ff fefc 	bl	8001458 <_Error_Handler>
		}

		__HAL_LINKDMA(huart, hdmarx, hdma_usart1_rx);
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	4a23      	ldr	r2, [pc, #140]	; (80016f0 <HAL_UART_MspInit+0x140>)
 8001664:	635a      	str	r2, [r3, #52]	; 0x34
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	4a21      	ldr	r2, [pc, #132]	; (80016f0 <HAL_UART_MspInit+0x140>)
 800166a:	6253      	str	r3, [r2, #36]	; 0x24

		/* USART1_TX Init */
		hdma_usart1_tx.Instance = DMA1_Channel4;
 800166c:	4b23      	ldr	r3, [pc, #140]	; (80016fc <HAL_UART_MspInit+0x14c>)
 800166e:	4a24      	ldr	r2, [pc, #144]	; (8001700 <HAL_UART_MspInit+0x150>)
 8001670:	601a      	str	r2, [r3, #0]
		hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001672:	4b22      	ldr	r3, [pc, #136]	; (80016fc <HAL_UART_MspInit+0x14c>)
 8001674:	2210      	movs	r2, #16
 8001676:	605a      	str	r2, [r3, #4]
		hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001678:	4b20      	ldr	r3, [pc, #128]	; (80016fc <HAL_UART_MspInit+0x14c>)
 800167a:	2200      	movs	r2, #0
 800167c:	609a      	str	r2, [r3, #8]
		hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800167e:	4b1f      	ldr	r3, [pc, #124]	; (80016fc <HAL_UART_MspInit+0x14c>)
 8001680:	2280      	movs	r2, #128	; 0x80
 8001682:	60da      	str	r2, [r3, #12]
		hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001684:	4b1d      	ldr	r3, [pc, #116]	; (80016fc <HAL_UART_MspInit+0x14c>)
 8001686:	f44f 7200 	mov.w	r2, #512	; 0x200
 800168a:	611a      	str	r2, [r3, #16]
		hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800168c:	4b1b      	ldr	r3, [pc, #108]	; (80016fc <HAL_UART_MspInit+0x14c>)
 800168e:	2200      	movs	r2, #0
 8001690:	615a      	str	r2, [r3, #20]
		hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8001692:	4b1a      	ldr	r3, [pc, #104]	; (80016fc <HAL_UART_MspInit+0x14c>)
 8001694:	2200      	movs	r2, #0
 8001696:	619a      	str	r2, [r3, #24]
		hdma_usart1_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001698:	4b18      	ldr	r3, [pc, #96]	; (80016fc <HAL_UART_MspInit+0x14c>)
 800169a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800169e:	61da      	str	r2, [r3, #28]
		if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80016a0:	4816      	ldr	r0, [pc, #88]	; (80016fc <HAL_UART_MspInit+0x14c>)
 80016a2:	f000 f96b 	bl	800197c <HAL_DMA_Init>
 80016a6:	4603      	mov	r3, r0
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	bf14      	ite	ne
 80016ac:	2301      	movne	r3, #1
 80016ae:	2300      	moveq	r3, #0
 80016b0:	b2db      	uxtb	r3, r3
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d003      	beq.n	80016be <HAL_UART_MspInit+0x10e>
		{
			_Error_Handler(__FILE__, __LINE__);
 80016b6:	21b6      	movs	r1, #182	; 0xb6
 80016b8:	480f      	ldr	r0, [pc, #60]	; (80016f8 <HAL_UART_MspInit+0x148>)
 80016ba:	f7ff fecd 	bl	8001458 <_Error_Handler>
		}

		__HAL_LINKDMA(huart, hdmatx, hdma_usart1_tx);
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	4a0e      	ldr	r2, [pc, #56]	; (80016fc <HAL_UART_MspInit+0x14c>)
 80016c2:	631a      	str	r2, [r3, #48]	; 0x30
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	4a0d      	ldr	r2, [pc, #52]	; (80016fc <HAL_UART_MspInit+0x14c>)
 80016c8:	6253      	str	r3, [r2, #36]	; 0x24

		/* USER CODE BEGIN USART1_MspInit 1 */

		HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80016ca:	2200      	movs	r2, #0
 80016cc:	2100      	movs	r1, #0
 80016ce:	2025      	movs	r0, #37	; 0x25
 80016d0:	f000 f8ec 	bl	80018ac <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(USART1_IRQn);
 80016d4:	2025      	movs	r0, #37	; 0x25
 80016d6:	f000 f91d 	bl	8001914 <HAL_NVIC_EnableIRQ>

		/* USER CODE END USART1_MspInit 1 */
	}
}
 80016da:	bf00      	nop
 80016dc:	3720      	adds	r7, #32
 80016de:	46bd      	mov	sp, r7
 80016e0:	bd80      	pop	{r7, pc}
 80016e2:	bf00      	nop
 80016e4:	40013800 	.word	0x40013800
 80016e8:	40021000 	.word	0x40021000
 80016ec:	40010800 	.word	0x40010800
 80016f0:	2000019c 	.word	0x2000019c
 80016f4:	40020058 	.word	0x40020058
 80016f8:	08002da4 	.word	0x08002da4
 80016fc:	200001e0 	.word	0x200001e0
 8001700:	40020044 	.word	0x40020044

08001704 <NMI_Handler>:

/**
* @brief This function handles Non maskable interrupt.
*/
void NMI_Handler(void)
{
 8001704:	b480      	push	{r7}
 8001706:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001708:	bf00      	nop
 800170a:	46bd      	mov	sp, r7
 800170c:	bc80      	pop	{r7}
 800170e:	4770      	bx	lr

08001710 <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 8001710:	b480      	push	{r7}
 8001712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001714:	e7fe      	b.n	8001714 <HardFault_Handler+0x4>

08001716 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 8001716:	b480      	push	{r7}
 8001718:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800171a:	e7fe      	b.n	800171a <MemManage_Handler+0x4>

0800171c <BusFault_Handler>:

/**
* @brief This function handles Prefetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 800171c:	b480      	push	{r7}
 800171e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001720:	e7fe      	b.n	8001720 <BusFault_Handler+0x4>

08001722 <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 8001722:	b480      	push	{r7}
 8001724:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001726:	e7fe      	b.n	8001726 <UsageFault_Handler+0x4>

08001728 <SVC_Handler>:

/**
* @brief This function handles System service call via SWI instruction.
*/
void SVC_Handler(void)
{
 8001728:	b480      	push	{r7}
 800172a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800172c:	bf00      	nop
 800172e:	46bd      	mov	sp, r7
 8001730:	bc80      	pop	{r7}
 8001732:	4770      	bx	lr

08001734 <DebugMon_Handler>:

/**
* @brief This function handles Debug monitor.
*/
void DebugMon_Handler(void)
{
 8001734:	b480      	push	{r7}
 8001736:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001738:	bf00      	nop
 800173a:	46bd      	mov	sp, r7
 800173c:	bc80      	pop	{r7}
 800173e:	4770      	bx	lr

08001740 <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 8001740:	b480      	push	{r7}
 8001742:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001744:	bf00      	nop
 8001746:	46bd      	mov	sp, r7
 8001748:	bc80      	pop	{r7}
 800174a:	4770      	bx	lr

0800174c <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001750:	f000 f888 	bl	8001864 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
 8001754:	f000 f90d 	bl	8001972 <HAL_SYSTICK_IRQHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001758:	bf00      	nop
 800175a:	bd80      	pop	{r7, pc}

0800175c <DMA1_Channel4_IRQHandler>:

/**
* @brief This function handles DMA1 channel4 global interrupt.
*/
void DMA1_Channel4_IRQHandler(void)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001760:	4802      	ldr	r0, [pc, #8]	; (800176c <DMA1_Channel4_IRQHandler+0x10>)
 8001762:	f000 f9c5 	bl	8001af0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8001766:	bf00      	nop
 8001768:	bd80      	pop	{r7, pc}
 800176a:	bf00      	nop
 800176c:	200001e0 	.word	0x200001e0

08001770 <DMA1_Channel5_IRQHandler>:

/**
* @brief This function handles DMA1 channel5 global interrupt.
*/
void DMA1_Channel5_IRQHandler(void)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001774:	4802      	ldr	r0, [pc, #8]	; (8001780 <DMA1_Channel5_IRQHandler+0x10>)
 8001776:	f000 f9bb 	bl	8001af0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 800177a:	bf00      	nop
 800177c:	bd80      	pop	{r7, pc}
 800177e:	bf00      	nop
 8001780:	2000019c 	.word	0x2000019c

08001784 <TIM3_IRQHandler>:

/**
* @brief This function handles TIM3 global interrupt.
*/
void TIM3_IRQHandler(void)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001788:	4802      	ldr	r0, [pc, #8]	; (8001794 <TIM3_IRQHandler+0x10>)
 800178a:	f000 fe75 	bl	8002478 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800178e:	bf00      	nop
 8001790:	bd80      	pop	{r7, pc}
 8001792:	bf00      	nop
 8001794:	2000011c 	.word	0x2000011c

08001798 <USART1_IRQHandler>:

/* USER CODE BEGIN 1 */

void USART1_IRQHandler(void)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	af00      	add	r7, sp, #0
	HAL_UART_IRQHandler(&huart1);
 800179c:	4802      	ldr	r0, [pc, #8]	; (80017a8 <USART1_IRQHandler+0x10>)
 800179e:	f001 f985 	bl	8002aac <HAL_UART_IRQHandler>
}
 80017a2:	bf00      	nop
 80017a4:	bd80      	pop	{r7, pc}
 80017a6:	bf00      	nop
 80017a8:	2000015c 	.word	0x2000015c

080017ac <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80017ac:	4b0f      	ldr	r3, [pc, #60]	; (80017ec <SystemInit+0x40>)
 80017ae:	681a      	ldr	r2, [r3, #0]
 80017b0:	f042 0201 	orr.w	r2, r2, #1
 80017b4:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 80017b6:	6859      	ldr	r1, [r3, #4]
 80017b8:	4a0d      	ldr	r2, [pc, #52]	; (80017f0 <SystemInit+0x44>)
 80017ba:	400a      	ands	r2, r1
 80017bc:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80017be:	681a      	ldr	r2, [r3, #0]
 80017c0:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 80017c4:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80017c8:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80017ca:	681a      	ldr	r2, [r3, #0]
 80017cc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80017d0:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80017d2:	685a      	ldr	r2, [r3, #4]
 80017d4:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 80017d8:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 80017da:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80017de:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80017e0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80017e4:	4b03      	ldr	r3, [pc, #12]	; (80017f4 <SystemInit+0x48>)
 80017e6:	609a      	str	r2, [r3, #8]
 80017e8:	4770      	bx	lr
 80017ea:	bf00      	nop
 80017ec:	40021000 	.word	0x40021000
 80017f0:	f8ff0000 	.word	0xf8ff0000
 80017f4:	e000ed00 	.word	0xe000ed00

080017f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017f8:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80017fa:	4b0e      	ldr	r3, [pc, #56]	; (8001834 <HAL_InitTick+0x3c>)
{
 80017fc:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80017fe:	7818      	ldrb	r0, [r3, #0]
 8001800:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001804:	fbb3 f3f0 	udiv	r3, r3, r0
 8001808:	4a0b      	ldr	r2, [pc, #44]	; (8001838 <HAL_InitTick+0x40>)
 800180a:	6810      	ldr	r0, [r2, #0]
 800180c:	fbb0 f0f3 	udiv	r0, r0, r3
 8001810:	f000 f88c 	bl	800192c <HAL_SYSTICK_Config>
 8001814:	4604      	mov	r4, r0
 8001816:	b958      	cbnz	r0, 8001830 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001818:	2d0f      	cmp	r5, #15
 800181a:	d809      	bhi.n	8001830 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800181c:	4602      	mov	r2, r0
 800181e:	4629      	mov	r1, r5
 8001820:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001824:	f000 f842 	bl	80018ac <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001828:	4b04      	ldr	r3, [pc, #16]	; (800183c <HAL_InitTick+0x44>)
 800182a:	4620      	mov	r0, r4
 800182c:	601d      	str	r5, [r3, #0]
 800182e:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8001830:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8001832:	bd38      	pop	{r3, r4, r5, pc}
 8001834:	20000004 	.word	0x20000004
 8001838:	20000000 	.word	0x20000000
 800183c:	20000008 	.word	0x20000008

08001840 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001840:	4a07      	ldr	r2, [pc, #28]	; (8001860 <HAL_Init+0x20>)
{
 8001842:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001844:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001846:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001848:	f043 0310 	orr.w	r3, r3, #16
 800184c:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800184e:	f000 f81b 	bl	8001888 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8001852:	2000      	movs	r0, #0
 8001854:	f7ff ffd0 	bl	80017f8 <HAL_InitTick>
  HAL_MspInit();
 8001858:	f7ff fe26 	bl	80014a8 <HAL_MspInit>
}
 800185c:	2000      	movs	r0, #0
 800185e:	bd08      	pop	{r3, pc}
 8001860:	40022000 	.word	0x40022000

08001864 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8001864:	4a03      	ldr	r2, [pc, #12]	; (8001874 <HAL_IncTick+0x10>)
 8001866:	4b04      	ldr	r3, [pc, #16]	; (8001878 <HAL_IncTick+0x14>)
 8001868:	6811      	ldr	r1, [r2, #0]
 800186a:	781b      	ldrb	r3, [r3, #0]
 800186c:	440b      	add	r3, r1
 800186e:	6013      	str	r3, [r2, #0]
 8001870:	4770      	bx	lr
 8001872:	bf00      	nop
 8001874:	2000062c 	.word	0x2000062c
 8001878:	20000004 	.word	0x20000004

0800187c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800187c:	4b01      	ldr	r3, [pc, #4]	; (8001884 <HAL_GetTick+0x8>)
 800187e:	6818      	ldr	r0, [r3, #0]
}
 8001880:	4770      	bx	lr
 8001882:	bf00      	nop
 8001884:	2000062c 	.word	0x2000062c

08001888 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001888:	4a07      	ldr	r2, [pc, #28]	; (80018a8 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 800188a:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800188c:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 800188e:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001892:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001896:	041b      	lsls	r3, r3, #16
 8001898:	0c1b      	lsrs	r3, r3, #16
 800189a:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800189e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 80018a2:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 80018a4:	60d3      	str	r3, [r2, #12]
 80018a6:	4770      	bx	lr
 80018a8:	e000ed00 	.word	0xe000ed00

080018ac <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018ac:	4b17      	ldr	r3, [pc, #92]	; (800190c <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80018ae:	b530      	push	{r4, r5, lr}
 80018b0:	68dc      	ldr	r4, [r3, #12]
 80018b2:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018b6:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018ba:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018bc:	2b04      	cmp	r3, #4
 80018be:	bf28      	it	cs
 80018c0:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018c2:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018c4:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018c8:	bf98      	it	ls
 80018ca:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018cc:	fa05 f303 	lsl.w	r3, r5, r3
 80018d0:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018d4:	bf88      	it	hi
 80018d6:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018d8:	4019      	ands	r1, r3
 80018da:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018dc:	fa05 f404 	lsl.w	r4, r5, r4
 80018e0:	3c01      	subs	r4, #1
 80018e2:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 80018e4:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018e6:	ea42 0201 	orr.w	r2, r2, r1
 80018ea:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018ee:	bfaf      	iteee	ge
 80018f0:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018f4:	4b06      	ldrlt	r3, [pc, #24]	; (8001910 <HAL_NVIC_SetPriority+0x64>)
 80018f6:	f000 000f 	andlt.w	r0, r0, #15
 80018fa:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018fc:	bfa5      	ittet	ge
 80018fe:	b2d2      	uxtbge	r2, r2
 8001900:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001904:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001906:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 800190a:	bd30      	pop	{r4, r5, pc}
 800190c:	e000ed00 	.word	0xe000ed00
 8001910:	e000ed14 	.word	0xe000ed14

08001914 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8001914:	2301      	movs	r3, #1
 8001916:	0942      	lsrs	r2, r0, #5
 8001918:	f000 001f 	and.w	r0, r0, #31
 800191c:	fa03 f000 	lsl.w	r0, r3, r0
 8001920:	4b01      	ldr	r3, [pc, #4]	; (8001928 <HAL_NVIC_EnableIRQ+0x14>)
 8001922:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8001926:	4770      	bx	lr
 8001928:	e000e100 	.word	0xe000e100

0800192c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800192c:	3801      	subs	r0, #1
 800192e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8001932:	d20a      	bcs.n	800194a <HAL_SYSTICK_Config+0x1e>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001934:	21f0      	movs	r1, #240	; 0xf0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001936:	4b06      	ldr	r3, [pc, #24]	; (8001950 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001938:	4a06      	ldr	r2, [pc, #24]	; (8001954 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800193a:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800193c:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001940:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001942:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001944:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001946:	601a      	str	r2, [r3, #0]
 8001948:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800194a:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800194c:	4770      	bx	lr
 800194e:	bf00      	nop
 8001950:	e000e010 	.word	0xe000e010
 8001954:	e000ed00 	.word	0xe000ed00

08001958 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8001958:	4b04      	ldr	r3, [pc, #16]	; (800196c <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 800195a:	2804      	cmp	r0, #4
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 800195c:	681a      	ldr	r2, [r3, #0]
 800195e:	bf0c      	ite	eq
 8001960:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8001964:	f022 0204 	bicne.w	r2, r2, #4
 8001968:	601a      	str	r2, [r3, #0]
 800196a:	4770      	bx	lr
 800196c:	e000e010 	.word	0xe000e010

08001970 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8001970:	4770      	bx	lr

08001972 <HAL_SYSTICK_IRQHandler>:
{
 8001972:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 8001974:	f7ff fffc 	bl	8001970 <HAL_SYSTICK_Callback>
 8001978:	bd08      	pop	{r3, pc}
	...

0800197c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800197c:	b510      	push	{r4, lr}
  uint32_t tmp = 0U;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800197e:	b350      	cbz	r0, 80019d6 <HAL_DMA_Init+0x5a>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001980:	2214      	movs	r2, #20
 8001982:	6801      	ldr	r1, [r0, #0]
 8001984:	4b15      	ldr	r3, [pc, #84]	; (80019dc <HAL_DMA_Init+0x60>)
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001986:	6884      	ldr	r4, [r0, #8]
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001988:	440b      	add	r3, r1
 800198a:	fbb3 f3f2 	udiv	r3, r3, r2
 800198e:	009b      	lsls	r3, r3, #2
 8001990:	6403      	str	r3, [r0, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8001992:	4b13      	ldr	r3, [pc, #76]	; (80019e0 <HAL_DMA_Init+0x64>)
  tmp = hdma->Instance->CCR;
 8001994:	680a      	ldr	r2, [r1, #0]
  hdma->DmaBaseAddress = DMA1;
 8001996:	63c3      	str	r3, [r0, #60]	; 0x3c
  tmp |=  hdma->Init.Direction        |
 8001998:	6843      	ldr	r3, [r0, #4]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800199a:	f422 527f 	bic.w	r2, r2, #16320	; 0x3fc0
  tmp |=  hdma->Init.Direction        |
 800199e:	4323      	orrs	r3, r4
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80019a0:	68c4      	ldr	r4, [r0, #12]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80019a2:	f022 0230 	bic.w	r2, r2, #48	; 0x30
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80019a6:	4323      	orrs	r3, r4
 80019a8:	6904      	ldr	r4, [r0, #16]
 80019aa:	4323      	orrs	r3, r4
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80019ac:	6944      	ldr	r4, [r0, #20]
 80019ae:	4323      	orrs	r3, r4
 80019b0:	6984      	ldr	r4, [r0, #24]
 80019b2:	4323      	orrs	r3, r4
          hdma->Init.Mode                | hdma->Init.Priority;
 80019b4:	69c4      	ldr	r4, [r0, #28]
 80019b6:	4323      	orrs	r3, r4
  tmp |=  hdma->Init.Direction        |
 80019b8:	4313      	orrs	r3, r2

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80019ba:	600b      	str	r3, [r1, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80019bc:	2201      	movs	r2, #1
  hdma->XferCpltCallback = NULL;
 80019be:	2300      	movs	r3, #0
  hdma->State = HAL_DMA_STATE_READY;
 80019c0:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
  hdma->XferCpltCallback = NULL;
 80019c4:	6283      	str	r3, [r0, #40]	; 0x28
  hdma->XferHalfCpltCallback = NULL;
 80019c6:	62c3      	str	r3, [r0, #44]	; 0x2c
  hdma->XferErrorCallback = NULL;
 80019c8:	6303      	str	r3, [r0, #48]	; 0x30
  hdma->XferAbortCallback = NULL;
 80019ca:	6343      	str	r3, [r0, #52]	; 0x34
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80019cc:	6383      	str	r3, [r0, #56]	; 0x38
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80019ce:	f880 3020 	strb.w	r3, [r0, #32]
  
  return HAL_OK;
 80019d2:	4618      	mov	r0, r3
 80019d4:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80019d6:	2001      	movs	r0, #1
}
 80019d8:	bd10      	pop	{r4, pc}
 80019da:	bf00      	nop
 80019dc:	bffdfff8 	.word	0xbffdfff8
 80019e0:	40020000 	.word	0x40020000

080019e4 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80019e4:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80019e6:	f890 4020 	ldrb.w	r4, [r0, #32]
 80019ea:	2c01      	cmp	r4, #1
 80019ec:	d035      	beq.n	8001a5a <HAL_DMA_Start_IT+0x76>
 80019ee:	2401      	movs	r4, #1
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80019f0:	f890 5021 	ldrb.w	r5, [r0, #33]	; 0x21
  __HAL_LOCK(hdma);
 80019f4:	f880 4020 	strb.w	r4, [r0, #32]
  if(HAL_DMA_STATE_READY == hdma->State)
 80019f8:	42a5      	cmp	r5, r4
 80019fa:	f04f 0600 	mov.w	r6, #0
 80019fe:	f04f 0402 	mov.w	r4, #2
 8001a02:	d128      	bne.n	8001a56 <HAL_DMA_Start_IT+0x72>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001a04:	f880 4021 	strb.w	r4, [r0, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001a08:	6804      	ldr	r4, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001a0a:	6386      	str	r6, [r0, #56]	; 0x38
    __HAL_DMA_DISABLE(hdma);
 8001a0c:	6826      	ldr	r6, [r4, #0]
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001a0e:	6c07      	ldr	r7, [r0, #64]	; 0x40
    __HAL_DMA_DISABLE(hdma);
 8001a10:	f026 0601 	bic.w	r6, r6, #1
 8001a14:	6026      	str	r6, [r4, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001a16:	6bc6      	ldr	r6, [r0, #60]	; 0x3c
 8001a18:	40bd      	lsls	r5, r7
 8001a1a:	6075      	str	r5, [r6, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001a1c:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001a1e:	6843      	ldr	r3, [r0, #4]
 8001a20:	6805      	ldr	r5, [r0, #0]
 8001a22:	2b10      	cmp	r3, #16
    if(NULL != hdma->XferHalfCpltCallback)
 8001a24:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001a26:	bf0b      	itete	eq
 8001a28:	60a2      	streq	r2, [r4, #8]
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8001a2a:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 8001a2c:	60e1      	streq	r1, [r4, #12]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8001a2e:	60e2      	strne	r2, [r4, #12]
    if(NULL != hdma->XferHalfCpltCallback)
 8001a30:	b14b      	cbz	r3, 8001a46 <HAL_DMA_Start_IT+0x62>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001a32:	6823      	ldr	r3, [r4, #0]
 8001a34:	f043 030e 	orr.w	r3, r3, #14
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001a38:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 8001a3a:	682b      	ldr	r3, [r5, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001a3c:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 8001a3e:	f043 0301 	orr.w	r3, r3, #1
 8001a42:	602b      	str	r3, [r5, #0]
 8001a44:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001a46:	6823      	ldr	r3, [r4, #0]
 8001a48:	f023 0304 	bic.w	r3, r3, #4
 8001a4c:	6023      	str	r3, [r4, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001a4e:	6823      	ldr	r3, [r4, #0]
 8001a50:	f043 030a 	orr.w	r3, r3, #10
 8001a54:	e7f0      	b.n	8001a38 <HAL_DMA_Start_IT+0x54>
    __HAL_UNLOCK(hdma); 
 8001a56:	f880 6020 	strb.w	r6, [r0, #32]
  __HAL_LOCK(hdma);
 8001a5a:	2002      	movs	r0, #2
}
 8001a5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08001a60 <HAL_DMA_Abort_IT>:
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001a60:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
{  
 8001a64:	b510      	push	{r4, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001a66:	2b02      	cmp	r3, #2
 8001a68:	d003      	beq.n	8001a72 <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001a6a:	2304      	movs	r3, #4
 8001a6c:	6383      	str	r3, [r0, #56]	; 0x38
    status = HAL_ERROR;
 8001a6e:	2001      	movs	r0, #1
 8001a70:	bd10      	pop	{r4, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001a72:	6803      	ldr	r3, [r0, #0]
 8001a74:	681a      	ldr	r2, [r3, #0]
 8001a76:	f022 020e 	bic.w	r2, r2, #14
 8001a7a:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 8001a7c:	681a      	ldr	r2, [r3, #0]
 8001a7e:	f022 0201 	bic.w	r2, r2, #1
 8001a82:	601a      	str	r2, [r3, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001a84:	4a18      	ldr	r2, [pc, #96]	; (8001ae8 <HAL_DMA_Abort_IT+0x88>)
 8001a86:	4293      	cmp	r3, r2
 8001a88:	d01f      	beq.n	8001aca <HAL_DMA_Abort_IT+0x6a>
 8001a8a:	3214      	adds	r2, #20
 8001a8c:	4293      	cmp	r3, r2
 8001a8e:	d01e      	beq.n	8001ace <HAL_DMA_Abort_IT+0x6e>
 8001a90:	3214      	adds	r2, #20
 8001a92:	4293      	cmp	r3, r2
 8001a94:	d01d      	beq.n	8001ad2 <HAL_DMA_Abort_IT+0x72>
 8001a96:	3214      	adds	r2, #20
 8001a98:	4293      	cmp	r3, r2
 8001a9a:	d01d      	beq.n	8001ad8 <HAL_DMA_Abort_IT+0x78>
 8001a9c:	3214      	adds	r2, #20
 8001a9e:	4293      	cmp	r3, r2
 8001aa0:	d01d      	beq.n	8001ade <HAL_DMA_Abort_IT+0x7e>
 8001aa2:	3214      	adds	r2, #20
 8001aa4:	4293      	cmp	r3, r2
 8001aa6:	bf0c      	ite	eq
 8001aa8:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
 8001aac:	f04f 7380 	movne.w	r3, #16777216	; 0x1000000
 8001ab0:	4a0e      	ldr	r2, [pc, #56]	; (8001aec <HAL_DMA_Abort_IT+0x8c>)
    __HAL_UNLOCK(hdma);
 8001ab2:	2400      	movs	r4, #0
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001ab4:	6053      	str	r3, [r2, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8001ab6:	2301      	movs	r3, #1
 8001ab8:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    if(hdma->XferAbortCallback != NULL)
 8001abc:	6b43      	ldr	r3, [r0, #52]	; 0x34
    __HAL_UNLOCK(hdma);
 8001abe:	f880 4020 	strb.w	r4, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 8001ac2:	b17b      	cbz	r3, 8001ae4 <HAL_DMA_Abort_IT+0x84>
      hdma->XferAbortCallback(hdma);
 8001ac4:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8001ac6:	4620      	mov	r0, r4
 8001ac8:	bd10      	pop	{r4, pc}
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001aca:	2301      	movs	r3, #1
 8001acc:	e7f0      	b.n	8001ab0 <HAL_DMA_Abort_IT+0x50>
 8001ace:	2310      	movs	r3, #16
 8001ad0:	e7ee      	b.n	8001ab0 <HAL_DMA_Abort_IT+0x50>
 8001ad2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001ad6:	e7eb      	b.n	8001ab0 <HAL_DMA_Abort_IT+0x50>
 8001ad8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001adc:	e7e8      	b.n	8001ab0 <HAL_DMA_Abort_IT+0x50>
 8001ade:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001ae2:	e7e5      	b.n	8001ab0 <HAL_DMA_Abort_IT+0x50>
  HAL_StatusTypeDef status = HAL_OK;
 8001ae4:	4618      	mov	r0, r3
}
 8001ae6:	bd10      	pop	{r4, pc}
 8001ae8:	40020008 	.word	0x40020008
 8001aec:	40020000 	.word	0x40020000

08001af0 <HAL_DMA_IRQHandler>:
{
 8001af0:	b470      	push	{r4, r5, r6}
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001af2:	2504      	movs	r5, #4
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001af4:	6bc6      	ldr	r6, [r0, #60]	; 0x3c
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001af6:	6c02      	ldr	r2, [r0, #64]	; 0x40
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001af8:	6834      	ldr	r4, [r6, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8001afa:	6803      	ldr	r3, [r0, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001afc:	4095      	lsls	r5, r2
 8001afe:	4225      	tst	r5, r4
  uint32_t source_it = hdma->Instance->CCR;
 8001b00:	6819      	ldr	r1, [r3, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001b02:	d032      	beq.n	8001b6a <HAL_DMA_IRQHandler+0x7a>
 8001b04:	074d      	lsls	r5, r1, #29
 8001b06:	d530      	bpl.n	8001b6a <HAL_DMA_IRQHandler+0x7a>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001b08:	681a      	ldr	r2, [r3, #0]
 8001b0a:	0696      	lsls	r6, r2, #26
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001b0c:	bf5e      	ittt	pl
 8001b0e:	681a      	ldrpl	r2, [r3, #0]
 8001b10:	f022 0204 	bicpl.w	r2, r2, #4
 8001b14:	601a      	strpl	r2, [r3, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001b16:	4a3e      	ldr	r2, [pc, #248]	; (8001c10 <HAL_DMA_IRQHandler+0x120>)
 8001b18:	4293      	cmp	r3, r2
 8001b1a:	d019      	beq.n	8001b50 <HAL_DMA_IRQHandler+0x60>
 8001b1c:	3214      	adds	r2, #20
 8001b1e:	4293      	cmp	r3, r2
 8001b20:	d018      	beq.n	8001b54 <HAL_DMA_IRQHandler+0x64>
 8001b22:	3214      	adds	r2, #20
 8001b24:	4293      	cmp	r3, r2
 8001b26:	d017      	beq.n	8001b58 <HAL_DMA_IRQHandler+0x68>
 8001b28:	3214      	adds	r2, #20
 8001b2a:	4293      	cmp	r3, r2
 8001b2c:	d017      	beq.n	8001b5e <HAL_DMA_IRQHandler+0x6e>
 8001b2e:	3214      	adds	r2, #20
 8001b30:	4293      	cmp	r3, r2
 8001b32:	d017      	beq.n	8001b64 <HAL_DMA_IRQHandler+0x74>
 8001b34:	3214      	adds	r2, #20
 8001b36:	4293      	cmp	r3, r2
 8001b38:	bf0c      	ite	eq
 8001b3a:	f44f 0380 	moveq.w	r3, #4194304	; 0x400000
 8001b3e:	f04f 6380 	movne.w	r3, #67108864	; 0x4000000
 8001b42:	4a34      	ldr	r2, [pc, #208]	; (8001c14 <HAL_DMA_IRQHandler+0x124>)
 8001b44:	6053      	str	r3, [r2, #4]
    if(hdma->XferHalfCpltCallback != NULL)
 8001b46:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    if (hdma->XferErrorCallback != NULL)
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d05e      	beq.n	8001c0a <HAL_DMA_IRQHandler+0x11a>
}
 8001b4c:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 8001b4e:	4718      	bx	r3
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001b50:	2304      	movs	r3, #4
 8001b52:	e7f6      	b.n	8001b42 <HAL_DMA_IRQHandler+0x52>
 8001b54:	2340      	movs	r3, #64	; 0x40
 8001b56:	e7f4      	b.n	8001b42 <HAL_DMA_IRQHandler+0x52>
 8001b58:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001b5c:	e7f1      	b.n	8001b42 <HAL_DMA_IRQHandler+0x52>
 8001b5e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001b62:	e7ee      	b.n	8001b42 <HAL_DMA_IRQHandler+0x52>
 8001b64:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001b68:	e7eb      	b.n	8001b42 <HAL_DMA_IRQHandler+0x52>
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001b6a:	2502      	movs	r5, #2
 8001b6c:	4095      	lsls	r5, r2
 8001b6e:	4225      	tst	r5, r4
 8001b70:	d035      	beq.n	8001bde <HAL_DMA_IRQHandler+0xee>
 8001b72:	078d      	lsls	r5, r1, #30
 8001b74:	d533      	bpl.n	8001bde <HAL_DMA_IRQHandler+0xee>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001b76:	681a      	ldr	r2, [r3, #0]
 8001b78:	0694      	lsls	r4, r2, #26
 8001b7a:	d406      	bmi.n	8001b8a <HAL_DMA_IRQHandler+0x9a>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001b7c:	681a      	ldr	r2, [r3, #0]
 8001b7e:	f022 020a 	bic.w	r2, r2, #10
 8001b82:	601a      	str	r2, [r3, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8001b84:	2201      	movs	r2, #1
 8001b86:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001b8a:	4a21      	ldr	r2, [pc, #132]	; (8001c10 <HAL_DMA_IRQHandler+0x120>)
 8001b8c:	4293      	cmp	r3, r2
 8001b8e:	d019      	beq.n	8001bc4 <HAL_DMA_IRQHandler+0xd4>
 8001b90:	3214      	adds	r2, #20
 8001b92:	4293      	cmp	r3, r2
 8001b94:	d018      	beq.n	8001bc8 <HAL_DMA_IRQHandler+0xd8>
 8001b96:	3214      	adds	r2, #20
 8001b98:	4293      	cmp	r3, r2
 8001b9a:	d017      	beq.n	8001bcc <HAL_DMA_IRQHandler+0xdc>
 8001b9c:	3214      	adds	r2, #20
 8001b9e:	4293      	cmp	r3, r2
 8001ba0:	d017      	beq.n	8001bd2 <HAL_DMA_IRQHandler+0xe2>
 8001ba2:	3214      	adds	r2, #20
 8001ba4:	4293      	cmp	r3, r2
 8001ba6:	d017      	beq.n	8001bd8 <HAL_DMA_IRQHandler+0xe8>
 8001ba8:	3214      	adds	r2, #20
 8001baa:	4293      	cmp	r3, r2
 8001bac:	bf0c      	ite	eq
 8001bae:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
 8001bb2:	f04f 7300 	movne.w	r3, #33554432	; 0x2000000
 8001bb6:	4a17      	ldr	r2, [pc, #92]	; (8001c14 <HAL_DMA_IRQHandler+0x124>)
 8001bb8:	6053      	str	r3, [r2, #4]
    __HAL_UNLOCK(hdma);
 8001bba:	2300      	movs	r3, #0
 8001bbc:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferCpltCallback != NULL)
 8001bc0:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8001bc2:	e7c1      	b.n	8001b48 <HAL_DMA_IRQHandler+0x58>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001bc4:	2302      	movs	r3, #2
 8001bc6:	e7f6      	b.n	8001bb6 <HAL_DMA_IRQHandler+0xc6>
 8001bc8:	2320      	movs	r3, #32
 8001bca:	e7f4      	b.n	8001bb6 <HAL_DMA_IRQHandler+0xc6>
 8001bcc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001bd0:	e7f1      	b.n	8001bb6 <HAL_DMA_IRQHandler+0xc6>
 8001bd2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001bd6:	e7ee      	b.n	8001bb6 <HAL_DMA_IRQHandler+0xc6>
 8001bd8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001bdc:	e7eb      	b.n	8001bb6 <HAL_DMA_IRQHandler+0xc6>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001bde:	2508      	movs	r5, #8
 8001be0:	4095      	lsls	r5, r2
 8001be2:	4225      	tst	r5, r4
 8001be4:	d011      	beq.n	8001c0a <HAL_DMA_IRQHandler+0x11a>
 8001be6:	0709      	lsls	r1, r1, #28
 8001be8:	d50f      	bpl.n	8001c0a <HAL_DMA_IRQHandler+0x11a>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001bea:	6819      	ldr	r1, [r3, #0]
 8001bec:	f021 010e 	bic.w	r1, r1, #14
 8001bf0:	6019      	str	r1, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001bf2:	2301      	movs	r3, #1
 8001bf4:	fa03 f202 	lsl.w	r2, r3, r2
 8001bf8:	6072      	str	r2, [r6, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001bfa:	6383      	str	r3, [r0, #56]	; 0x38
    hdma->State = HAL_DMA_STATE_READY;
 8001bfc:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 8001c00:	2300      	movs	r3, #0
 8001c02:	f880 3020 	strb.w	r3, [r0, #32]
    if (hdma->XferErrorCallback != NULL)
 8001c06:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8001c08:	e79e      	b.n	8001b48 <HAL_DMA_IRQHandler+0x58>
}
 8001c0a:	bc70      	pop	{r4, r5, r6}
 8001c0c:	4770      	bx	lr
 8001c0e:	bf00      	nop
 8001c10:	40020008 	.word	0x40020008
 8001c14:	40020000 	.word	0x40020000

08001c18 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c18:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position;
  uint32_t ioposition = 0x00U;
  uint32_t iocurrent = 0x00U;
  uint32_t temp = 0x00U;
  uint32_t config = 0x00U;
 8001c1c:	2200      	movs	r2, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 8001c1e:	4616      	mov	r6, r2
 8001c20:	4b65      	ldr	r3, [pc, #404]	; (8001db8 <HAL_GPIO_Init+0x1a0>)
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001c22:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 8001dc8 <HAL_GPIO_Init+0x1b0>
 8001c26:	f8df c1a4 	ldr.w	ip, [pc, #420]	; 8001dcc <HAL_GPIO_Init+0x1b4>
    ioposition = (0x01U << position);
 8001c2a:	f04f 0801 	mov.w	r8, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c2e:	680c      	ldr	r4, [r1, #0]
    ioposition = (0x01U << position);
 8001c30:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c34:	ea08 0404 	and.w	r4, r8, r4
    if (iocurrent == ioposition)
 8001c38:	45a0      	cmp	r8, r4
 8001c3a:	d17f      	bne.n	8001d3c <HAL_GPIO_Init+0x124>
      switch (GPIO_Init->Mode)
 8001c3c:	684d      	ldr	r5, [r1, #4]
 8001c3e:	2d12      	cmp	r5, #18
 8001c40:	f000 80af 	beq.w	8001da2 <HAL_GPIO_Init+0x18a>
 8001c44:	f200 8088 	bhi.w	8001d58 <HAL_GPIO_Init+0x140>
 8001c48:	2d02      	cmp	r5, #2
 8001c4a:	f000 80a7 	beq.w	8001d9c <HAL_GPIO_Init+0x184>
 8001c4e:	d87c      	bhi.n	8001d4a <HAL_GPIO_Init+0x132>
 8001c50:	2d00      	cmp	r5, #0
 8001c52:	f000 808e 	beq.w	8001d72 <HAL_GPIO_Init+0x15a>
 8001c56:	2d01      	cmp	r5, #1
 8001c58:	f000 809e 	beq.w	8001d98 <HAL_GPIO_Init+0x180>
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001c5c:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001c60:	2cff      	cmp	r4, #255	; 0xff
 8001c62:	bf93      	iteet	ls
 8001c64:	4682      	movls	sl, r0
 8001c66:	f106 4580 	addhi.w	r5, r6, #1073741824	; 0x40000000
 8001c6a:	3d08      	subhi	r5, #8
 8001c6c:	f8d0 b000 	ldrls.w	fp, [r0]
 8001c70:	bf92      	itee	ls
 8001c72:	00b5      	lslls	r5, r6, #2
 8001c74:	f8d0 b004 	ldrhi.w	fp, [r0, #4]
 8001c78:	00ad      	lslhi	r5, r5, #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001c7a:	fa09 f805 	lsl.w	r8, r9, r5
 8001c7e:	ea2b 0808 	bic.w	r8, fp, r8
 8001c82:	fa02 f505 	lsl.w	r5, r2, r5
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001c86:	bf88      	it	hi
 8001c88:	f100 0a04 	addhi.w	sl, r0, #4
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001c8c:	ea48 0505 	orr.w	r5, r8, r5
 8001c90:	f8ca 5000 	str.w	r5, [sl]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001c94:	f8d1 a004 	ldr.w	sl, [r1, #4]
 8001c98:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 8001c9c:	d04e      	beq.n	8001d3c <HAL_GPIO_Init+0x124>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001c9e:	4d47      	ldr	r5, [pc, #284]	; (8001dbc <HAL_GPIO_Init+0x1a4>)
 8001ca0:	4f46      	ldr	r7, [pc, #280]	; (8001dbc <HAL_GPIO_Init+0x1a4>)
 8001ca2:	69ad      	ldr	r5, [r5, #24]
 8001ca4:	f026 0803 	bic.w	r8, r6, #3
 8001ca8:	f045 0501 	orr.w	r5, r5, #1
 8001cac:	61bd      	str	r5, [r7, #24]
 8001cae:	69bd      	ldr	r5, [r7, #24]
 8001cb0:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 8001cb4:	f005 0501 	and.w	r5, r5, #1
 8001cb8:	9501      	str	r5, [sp, #4]
 8001cba:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
        temp = AFIO->EXTICR[position >> 2U];
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8001cbe:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001cc2:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8001cc4:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2U];
 8001cc8:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8001ccc:	fa09 f90b 	lsl.w	r9, r9, fp
 8001cd0:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001cd4:	4d3a      	ldr	r5, [pc, #232]	; (8001dc0 <HAL_GPIO_Init+0x1a8>)
 8001cd6:	42a8      	cmp	r0, r5
 8001cd8:	d068      	beq.n	8001dac <HAL_GPIO_Init+0x194>
 8001cda:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001cde:	42a8      	cmp	r0, r5
 8001ce0:	d066      	beq.n	8001db0 <HAL_GPIO_Init+0x198>
 8001ce2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001ce6:	42a8      	cmp	r0, r5
 8001ce8:	d064      	beq.n	8001db4 <HAL_GPIO_Init+0x19c>
 8001cea:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001cee:	42a8      	cmp	r0, r5
 8001cf0:	bf0c      	ite	eq
 8001cf2:	2503      	moveq	r5, #3
 8001cf4:	2504      	movne	r5, #4
 8001cf6:	fa05 f50b 	lsl.w	r5, r5, fp
 8001cfa:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2U] = temp;
 8001cfe:	f8c8 5008 	str.w	r5, [r8, #8]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001d02:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001d04:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 8001d08:	bf14      	ite	ne
 8001d0a:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001d0c:	43a5      	biceq	r5, r4
 8001d0e:	601d      	str	r5, [r3, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001d10:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001d12:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 8001d16:	bf14      	ite	ne
 8001d18:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001d1a:	43a5      	biceq	r5, r4
 8001d1c:	605d      	str	r5, [r3, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001d1e:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001d20:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 8001d24:	bf14      	ite	ne
 8001d26:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001d28:	43a5      	biceq	r5, r4
 8001d2a:	609d      	str	r5, [r3, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001d2c:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001d2e:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 8001d32:	bf14      	ite	ne
 8001d34:	432c      	orrne	r4, r5
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001d36:	ea25 0404 	biceq.w	r4, r5, r4
 8001d3a:	60dc      	str	r4, [r3, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 8001d3c:	3601      	adds	r6, #1
 8001d3e:	2e10      	cmp	r6, #16
 8001d40:	f47f af73 	bne.w	8001c2a <HAL_GPIO_Init+0x12>
        }
      }
    }
  }
}
 8001d44:	b003      	add	sp, #12
 8001d46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      switch (GPIO_Init->Mode)
 8001d4a:	2d03      	cmp	r5, #3
 8001d4c:	d022      	beq.n	8001d94 <HAL_GPIO_Init+0x17c>
 8001d4e:	2d11      	cmp	r5, #17
 8001d50:	d184      	bne.n	8001c5c <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001d52:	68ca      	ldr	r2, [r1, #12]
 8001d54:	3204      	adds	r2, #4
          break;
 8001d56:	e781      	b.n	8001c5c <HAL_GPIO_Init+0x44>
      switch (GPIO_Init->Mode)
 8001d58:	4f1a      	ldr	r7, [pc, #104]	; (8001dc4 <HAL_GPIO_Init+0x1ac>)
 8001d5a:	42bd      	cmp	r5, r7
 8001d5c:	d009      	beq.n	8001d72 <HAL_GPIO_Init+0x15a>
 8001d5e:	d812      	bhi.n	8001d86 <HAL_GPIO_Init+0x16e>
 8001d60:	f8df 906c 	ldr.w	r9, [pc, #108]	; 8001dd0 <HAL_GPIO_Init+0x1b8>
 8001d64:	454d      	cmp	r5, r9
 8001d66:	d004      	beq.n	8001d72 <HAL_GPIO_Init+0x15a>
 8001d68:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 8001d6c:	454d      	cmp	r5, r9
 8001d6e:	f47f af75 	bne.w	8001c5c <HAL_GPIO_Init+0x44>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001d72:	688a      	ldr	r2, [r1, #8]
 8001d74:	b1c2      	cbz	r2, 8001da8 <HAL_GPIO_Init+0x190>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001d76:	2a01      	cmp	r2, #1
            GPIOx->BSRR = ioposition;
 8001d78:	bf0c      	ite	eq
 8001d7a:	f8c0 8010 	streq.w	r8, [r0, #16]
            GPIOx->BRR = ioposition;
 8001d7e:	f8c0 8014 	strne.w	r8, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001d82:	2208      	movs	r2, #8
 8001d84:	e76a      	b.n	8001c5c <HAL_GPIO_Init+0x44>
      switch (GPIO_Init->Mode)
 8001d86:	4575      	cmp	r5, lr
 8001d88:	d0f3      	beq.n	8001d72 <HAL_GPIO_Init+0x15a>
 8001d8a:	4565      	cmp	r5, ip
 8001d8c:	d0f1      	beq.n	8001d72 <HAL_GPIO_Init+0x15a>
 8001d8e:	f8df 9044 	ldr.w	r9, [pc, #68]	; 8001dd4 <HAL_GPIO_Init+0x1bc>
 8001d92:	e7eb      	b.n	8001d6c <HAL_GPIO_Init+0x154>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001d94:	2200      	movs	r2, #0
 8001d96:	e761      	b.n	8001c5c <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001d98:	68ca      	ldr	r2, [r1, #12]
          break;
 8001d9a:	e75f      	b.n	8001c5c <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001d9c:	68ca      	ldr	r2, [r1, #12]
 8001d9e:	3208      	adds	r2, #8
          break;
 8001da0:	e75c      	b.n	8001c5c <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001da2:	68ca      	ldr	r2, [r1, #12]
 8001da4:	320c      	adds	r2, #12
          break;
 8001da6:	e759      	b.n	8001c5c <HAL_GPIO_Init+0x44>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001da8:	2204      	movs	r2, #4
 8001daa:	e757      	b.n	8001c5c <HAL_GPIO_Init+0x44>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001dac:	2500      	movs	r5, #0
 8001dae:	e7a2      	b.n	8001cf6 <HAL_GPIO_Init+0xde>
 8001db0:	2501      	movs	r5, #1
 8001db2:	e7a0      	b.n	8001cf6 <HAL_GPIO_Init+0xde>
 8001db4:	2502      	movs	r5, #2
 8001db6:	e79e      	b.n	8001cf6 <HAL_GPIO_Init+0xde>
 8001db8:	40010400 	.word	0x40010400
 8001dbc:	40021000 	.word	0x40021000
 8001dc0:	40010800 	.word	0x40010800
 8001dc4:	10210000 	.word	0x10210000
 8001dc8:	10310000 	.word	0x10310000
 8001dcc:	10320000 	.word	0x10320000
 8001dd0:	10110000 	.word	0x10110000
 8001dd4:	10220000 	.word	0x10220000

08001dd8 <HAL_RCC_OscConfig>:
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001dd8:	6803      	ldr	r3, [r0, #0]
{
 8001dda:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001dde:	07db      	lsls	r3, r3, #31
{
 8001de0:	4605      	mov	r5, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001de2:	d410      	bmi.n	8001e06 <HAL_RCC_OscConfig+0x2e>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001de4:	682b      	ldr	r3, [r5, #0]
 8001de6:	079f      	lsls	r7, r3, #30
 8001de8:	d45e      	bmi.n	8001ea8 <HAL_RCC_OscConfig+0xd0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001dea:	682b      	ldr	r3, [r5, #0]
 8001dec:	0719      	lsls	r1, r3, #28
 8001dee:	f100 8095 	bmi.w	8001f1c <HAL_RCC_OscConfig+0x144>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001df2:	682b      	ldr	r3, [r5, #0]
 8001df4:	075a      	lsls	r2, r3, #29
 8001df6:	f100 80bf 	bmi.w	8001f78 <HAL_RCC_OscConfig+0x1a0>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001dfa:	69ea      	ldr	r2, [r5, #28]
 8001dfc:	2a00      	cmp	r2, #0
 8001dfe:	f040 812d 	bne.w	800205c <HAL_RCC_OscConfig+0x284>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 8001e02:	2000      	movs	r0, #0
 8001e04:	e014      	b.n	8001e30 <HAL_RCC_OscConfig+0x58>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001e06:	4c90      	ldr	r4, [pc, #576]	; (8002048 <HAL_RCC_OscConfig+0x270>)
 8001e08:	6863      	ldr	r3, [r4, #4]
 8001e0a:	f003 030c 	and.w	r3, r3, #12
 8001e0e:	2b04      	cmp	r3, #4
 8001e10:	d007      	beq.n	8001e22 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001e12:	6863      	ldr	r3, [r4, #4]
 8001e14:	f003 030c 	and.w	r3, r3, #12
 8001e18:	2b08      	cmp	r3, #8
 8001e1a:	d10c      	bne.n	8001e36 <HAL_RCC_OscConfig+0x5e>
 8001e1c:	6863      	ldr	r3, [r4, #4]
 8001e1e:	03de      	lsls	r6, r3, #15
 8001e20:	d509      	bpl.n	8001e36 <HAL_RCC_OscConfig+0x5e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e22:	6823      	ldr	r3, [r4, #0]
 8001e24:	039c      	lsls	r4, r3, #14
 8001e26:	d5dd      	bpl.n	8001de4 <HAL_RCC_OscConfig+0xc>
 8001e28:	686b      	ldr	r3, [r5, #4]
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d1da      	bne.n	8001de4 <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 8001e2e:	2001      	movs	r0, #1
}
 8001e30:	b002      	add	sp, #8
 8001e32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e36:	686b      	ldr	r3, [r5, #4]
 8001e38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e3c:	d110      	bne.n	8001e60 <HAL_RCC_OscConfig+0x88>
 8001e3e:	6823      	ldr	r3, [r4, #0]
 8001e40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e44:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001e46:	f7ff fd19 	bl	800187c <HAL_GetTick>
 8001e4a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e4c:	6823      	ldr	r3, [r4, #0]
 8001e4e:	0398      	lsls	r0, r3, #14
 8001e50:	d4c8      	bmi.n	8001de4 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e52:	f7ff fd13 	bl	800187c <HAL_GetTick>
 8001e56:	1b80      	subs	r0, r0, r6
 8001e58:	2864      	cmp	r0, #100	; 0x64
 8001e5a:	d9f7      	bls.n	8001e4c <HAL_RCC_OscConfig+0x74>
            return HAL_TIMEOUT;
 8001e5c:	2003      	movs	r0, #3
 8001e5e:	e7e7      	b.n	8001e30 <HAL_RCC_OscConfig+0x58>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e60:	b99b      	cbnz	r3, 8001e8a <HAL_RCC_OscConfig+0xb2>
 8001e62:	6823      	ldr	r3, [r4, #0]
 8001e64:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e68:	6023      	str	r3, [r4, #0]
 8001e6a:	6823      	ldr	r3, [r4, #0]
 8001e6c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e70:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001e72:	f7ff fd03 	bl	800187c <HAL_GetTick>
 8001e76:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e78:	6823      	ldr	r3, [r4, #0]
 8001e7a:	0399      	lsls	r1, r3, #14
 8001e7c:	d5b2      	bpl.n	8001de4 <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e7e:	f7ff fcfd 	bl	800187c <HAL_GetTick>
 8001e82:	1b80      	subs	r0, r0, r6
 8001e84:	2864      	cmp	r0, #100	; 0x64
 8001e86:	d9f7      	bls.n	8001e78 <HAL_RCC_OscConfig+0xa0>
 8001e88:	e7e8      	b.n	8001e5c <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e8a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001e8e:	6823      	ldr	r3, [r4, #0]
 8001e90:	d103      	bne.n	8001e9a <HAL_RCC_OscConfig+0xc2>
 8001e92:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e96:	6023      	str	r3, [r4, #0]
 8001e98:	e7d1      	b.n	8001e3e <HAL_RCC_OscConfig+0x66>
 8001e9a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e9e:	6023      	str	r3, [r4, #0]
 8001ea0:	6823      	ldr	r3, [r4, #0]
 8001ea2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ea6:	e7cd      	b.n	8001e44 <HAL_RCC_OscConfig+0x6c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001ea8:	4c67      	ldr	r4, [pc, #412]	; (8002048 <HAL_RCC_OscConfig+0x270>)
 8001eaa:	6863      	ldr	r3, [r4, #4]
 8001eac:	f013 0f0c 	tst.w	r3, #12
 8001eb0:	d007      	beq.n	8001ec2 <HAL_RCC_OscConfig+0xea>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001eb2:	6863      	ldr	r3, [r4, #4]
 8001eb4:	f003 030c 	and.w	r3, r3, #12
 8001eb8:	2b08      	cmp	r3, #8
 8001eba:	d110      	bne.n	8001ede <HAL_RCC_OscConfig+0x106>
 8001ebc:	6863      	ldr	r3, [r4, #4]
 8001ebe:	03da      	lsls	r2, r3, #15
 8001ec0:	d40d      	bmi.n	8001ede <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ec2:	6823      	ldr	r3, [r4, #0]
 8001ec4:	079b      	lsls	r3, r3, #30
 8001ec6:	d502      	bpl.n	8001ece <HAL_RCC_OscConfig+0xf6>
 8001ec8:	692b      	ldr	r3, [r5, #16]
 8001eca:	2b01      	cmp	r3, #1
 8001ecc:	d1af      	bne.n	8001e2e <HAL_RCC_OscConfig+0x56>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ece:	6823      	ldr	r3, [r4, #0]
 8001ed0:	696a      	ldr	r2, [r5, #20]
 8001ed2:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001ed6:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001eda:	6023      	str	r3, [r4, #0]
 8001edc:	e785      	b.n	8001dea <HAL_RCC_OscConfig+0x12>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001ede:	692a      	ldr	r2, [r5, #16]
 8001ee0:	4b5a      	ldr	r3, [pc, #360]	; (800204c <HAL_RCC_OscConfig+0x274>)
 8001ee2:	b16a      	cbz	r2, 8001f00 <HAL_RCC_OscConfig+0x128>
        __HAL_RCC_HSI_ENABLE();
 8001ee4:	2201      	movs	r2, #1
 8001ee6:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001ee8:	f7ff fcc8 	bl	800187c <HAL_GetTick>
 8001eec:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001eee:	6823      	ldr	r3, [r4, #0]
 8001ef0:	079f      	lsls	r7, r3, #30
 8001ef2:	d4ec      	bmi.n	8001ece <HAL_RCC_OscConfig+0xf6>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ef4:	f7ff fcc2 	bl	800187c <HAL_GetTick>
 8001ef8:	1b80      	subs	r0, r0, r6
 8001efa:	2802      	cmp	r0, #2
 8001efc:	d9f7      	bls.n	8001eee <HAL_RCC_OscConfig+0x116>
 8001efe:	e7ad      	b.n	8001e5c <HAL_RCC_OscConfig+0x84>
        __HAL_RCC_HSI_DISABLE();
 8001f00:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001f02:	f7ff fcbb 	bl	800187c <HAL_GetTick>
 8001f06:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f08:	6823      	ldr	r3, [r4, #0]
 8001f0a:	0798      	lsls	r0, r3, #30
 8001f0c:	f57f af6d 	bpl.w	8001dea <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f10:	f7ff fcb4 	bl	800187c <HAL_GetTick>
 8001f14:	1b80      	subs	r0, r0, r6
 8001f16:	2802      	cmp	r0, #2
 8001f18:	d9f6      	bls.n	8001f08 <HAL_RCC_OscConfig+0x130>
 8001f1a:	e79f      	b.n	8001e5c <HAL_RCC_OscConfig+0x84>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001f1c:	69aa      	ldr	r2, [r5, #24]
 8001f1e:	4c4a      	ldr	r4, [pc, #296]	; (8002048 <HAL_RCC_OscConfig+0x270>)
 8001f20:	4b4b      	ldr	r3, [pc, #300]	; (8002050 <HAL_RCC_OscConfig+0x278>)
 8001f22:	b1da      	cbz	r2, 8001f5c <HAL_RCC_OscConfig+0x184>
      __HAL_RCC_LSI_ENABLE();
 8001f24:	2201      	movs	r2, #1
 8001f26:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001f28:	f7ff fca8 	bl	800187c <HAL_GetTick>
 8001f2c:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f2e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001f30:	079b      	lsls	r3, r3, #30
 8001f32:	d50d      	bpl.n	8001f50 <HAL_RCC_OscConfig+0x178>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001f34:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8001f38:	4b46      	ldr	r3, [pc, #280]	; (8002054 <HAL_RCC_OscConfig+0x27c>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	fbb3 f3f2 	udiv	r3, r3, r2
 8001f40:	9301      	str	r3, [sp, #4]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 8001f42:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 8001f44:	9b01      	ldr	r3, [sp, #4]
 8001f46:	1e5a      	subs	r2, r3, #1
 8001f48:	9201      	str	r2, [sp, #4]
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d1f9      	bne.n	8001f42 <HAL_RCC_OscConfig+0x16a>
 8001f4e:	e750      	b.n	8001df2 <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f50:	f7ff fc94 	bl	800187c <HAL_GetTick>
 8001f54:	1b80      	subs	r0, r0, r6
 8001f56:	2802      	cmp	r0, #2
 8001f58:	d9e9      	bls.n	8001f2e <HAL_RCC_OscConfig+0x156>
 8001f5a:	e77f      	b.n	8001e5c <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_LSI_DISABLE();
 8001f5c:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001f5e:	f7ff fc8d 	bl	800187c <HAL_GetTick>
 8001f62:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f64:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001f66:	079f      	lsls	r7, r3, #30
 8001f68:	f57f af43 	bpl.w	8001df2 <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f6c:	f7ff fc86 	bl	800187c <HAL_GetTick>
 8001f70:	1b80      	subs	r0, r0, r6
 8001f72:	2802      	cmp	r0, #2
 8001f74:	d9f6      	bls.n	8001f64 <HAL_RCC_OscConfig+0x18c>
 8001f76:	e771      	b.n	8001e5c <HAL_RCC_OscConfig+0x84>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f78:	4c33      	ldr	r4, [pc, #204]	; (8002048 <HAL_RCC_OscConfig+0x270>)
 8001f7a:	69e3      	ldr	r3, [r4, #28]
 8001f7c:	00d8      	lsls	r0, r3, #3
 8001f7e:	d424      	bmi.n	8001fca <HAL_RCC_OscConfig+0x1f2>
      pwrclkchanged = SET;
 8001f80:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f82:	69e3      	ldr	r3, [r4, #28]
 8001f84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f88:	61e3      	str	r3, [r4, #28]
 8001f8a:	69e3      	ldr	r3, [r4, #28]
 8001f8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f90:	9300      	str	r3, [sp, #0]
 8001f92:	9b00      	ldr	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f94:	4e30      	ldr	r6, [pc, #192]	; (8002058 <HAL_RCC_OscConfig+0x280>)
 8001f96:	6833      	ldr	r3, [r6, #0]
 8001f98:	05d9      	lsls	r1, r3, #23
 8001f9a:	d518      	bpl.n	8001fce <HAL_RCC_OscConfig+0x1f6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f9c:	68eb      	ldr	r3, [r5, #12]
 8001f9e:	2b01      	cmp	r3, #1
 8001fa0:	d126      	bne.n	8001ff0 <HAL_RCC_OscConfig+0x218>
 8001fa2:	6a23      	ldr	r3, [r4, #32]
 8001fa4:	f043 0301 	orr.w	r3, r3, #1
 8001fa8:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8001faa:	f7ff fc67 	bl	800187c <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001fae:	f241 3688 	movw	r6, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8001fb2:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fb4:	6a23      	ldr	r3, [r4, #32]
 8001fb6:	079b      	lsls	r3, r3, #30
 8001fb8:	d53f      	bpl.n	800203a <HAL_RCC_OscConfig+0x262>
    if(pwrclkchanged == SET)
 8001fba:	2f00      	cmp	r7, #0
 8001fbc:	f43f af1d 	beq.w	8001dfa <HAL_RCC_OscConfig+0x22>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001fc0:	69e3      	ldr	r3, [r4, #28]
 8001fc2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001fc6:	61e3      	str	r3, [r4, #28]
 8001fc8:	e717      	b.n	8001dfa <HAL_RCC_OscConfig+0x22>
    FlagStatus       pwrclkchanged = RESET;
 8001fca:	2700      	movs	r7, #0
 8001fcc:	e7e2      	b.n	8001f94 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001fce:	6833      	ldr	r3, [r6, #0]
 8001fd0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fd4:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8001fd6:	f7ff fc51 	bl	800187c <HAL_GetTick>
 8001fda:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fdc:	6833      	ldr	r3, [r6, #0]
 8001fde:	05da      	lsls	r2, r3, #23
 8001fe0:	d4dc      	bmi.n	8001f9c <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001fe2:	f7ff fc4b 	bl	800187c <HAL_GetTick>
 8001fe6:	eba0 0008 	sub.w	r0, r0, r8
 8001fea:	2864      	cmp	r0, #100	; 0x64
 8001fec:	d9f6      	bls.n	8001fdc <HAL_RCC_OscConfig+0x204>
 8001fee:	e735      	b.n	8001e5c <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ff0:	b9ab      	cbnz	r3, 800201e <HAL_RCC_OscConfig+0x246>
 8001ff2:	6a23      	ldr	r3, [r4, #32]
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ff4:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ff8:	f023 0301 	bic.w	r3, r3, #1
 8001ffc:	6223      	str	r3, [r4, #32]
 8001ffe:	6a23      	ldr	r3, [r4, #32]
 8002000:	f023 0304 	bic.w	r3, r3, #4
 8002004:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8002006:	f7ff fc39 	bl	800187c <HAL_GetTick>
 800200a:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800200c:	6a23      	ldr	r3, [r4, #32]
 800200e:	0798      	lsls	r0, r3, #30
 8002010:	d5d3      	bpl.n	8001fba <HAL_RCC_OscConfig+0x1e2>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002012:	f7ff fc33 	bl	800187c <HAL_GetTick>
 8002016:	1b80      	subs	r0, r0, r6
 8002018:	4540      	cmp	r0, r8
 800201a:	d9f7      	bls.n	800200c <HAL_RCC_OscConfig+0x234>
 800201c:	e71e      	b.n	8001e5c <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800201e:	2b05      	cmp	r3, #5
 8002020:	6a23      	ldr	r3, [r4, #32]
 8002022:	d103      	bne.n	800202c <HAL_RCC_OscConfig+0x254>
 8002024:	f043 0304 	orr.w	r3, r3, #4
 8002028:	6223      	str	r3, [r4, #32]
 800202a:	e7ba      	b.n	8001fa2 <HAL_RCC_OscConfig+0x1ca>
 800202c:	f023 0301 	bic.w	r3, r3, #1
 8002030:	6223      	str	r3, [r4, #32]
 8002032:	6a23      	ldr	r3, [r4, #32]
 8002034:	f023 0304 	bic.w	r3, r3, #4
 8002038:	e7b6      	b.n	8001fa8 <HAL_RCC_OscConfig+0x1d0>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800203a:	f7ff fc1f 	bl	800187c <HAL_GetTick>
 800203e:	eba0 0008 	sub.w	r0, r0, r8
 8002042:	42b0      	cmp	r0, r6
 8002044:	d9b6      	bls.n	8001fb4 <HAL_RCC_OscConfig+0x1dc>
 8002046:	e709      	b.n	8001e5c <HAL_RCC_OscConfig+0x84>
 8002048:	40021000 	.word	0x40021000
 800204c:	42420000 	.word	0x42420000
 8002050:	42420480 	.word	0x42420480
 8002054:	20000000 	.word	0x20000000
 8002058:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800205c:	4c22      	ldr	r4, [pc, #136]	; (80020e8 <HAL_RCC_OscConfig+0x310>)
 800205e:	6863      	ldr	r3, [r4, #4]
 8002060:	f003 030c 	and.w	r3, r3, #12
 8002064:	2b08      	cmp	r3, #8
 8002066:	f43f aee2 	beq.w	8001e2e <HAL_RCC_OscConfig+0x56>
 800206a:	2300      	movs	r3, #0
 800206c:	4e1f      	ldr	r6, [pc, #124]	; (80020ec <HAL_RCC_OscConfig+0x314>)
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800206e:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8002070:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002072:	d12b      	bne.n	80020cc <HAL_RCC_OscConfig+0x2f4>
        tickstart = HAL_GetTick();
 8002074:	f7ff fc02 	bl	800187c <HAL_GetTick>
 8002078:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800207a:	6823      	ldr	r3, [r4, #0]
 800207c:	0199      	lsls	r1, r3, #6
 800207e:	d41f      	bmi.n	80020c0 <HAL_RCC_OscConfig+0x2e8>
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002080:	6a2b      	ldr	r3, [r5, #32]
 8002082:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002086:	d105      	bne.n	8002094 <HAL_RCC_OscConfig+0x2bc>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002088:	6862      	ldr	r2, [r4, #4]
 800208a:	68a9      	ldr	r1, [r5, #8]
 800208c:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8002090:	430a      	orrs	r2, r1
 8002092:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002094:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8002096:	6862      	ldr	r2, [r4, #4]
 8002098:	430b      	orrs	r3, r1
 800209a:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 800209e:	4313      	orrs	r3, r2
 80020a0:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 80020a2:	2301      	movs	r3, #1
 80020a4:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 80020a6:	f7ff fbe9 	bl	800187c <HAL_GetTick>
 80020aa:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80020ac:	6823      	ldr	r3, [r4, #0]
 80020ae:	019a      	lsls	r2, r3, #6
 80020b0:	f53f aea7 	bmi.w	8001e02 <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80020b4:	f7ff fbe2 	bl	800187c <HAL_GetTick>
 80020b8:	1b40      	subs	r0, r0, r5
 80020ba:	2802      	cmp	r0, #2
 80020bc:	d9f6      	bls.n	80020ac <HAL_RCC_OscConfig+0x2d4>
 80020be:	e6cd      	b.n	8001e5c <HAL_RCC_OscConfig+0x84>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80020c0:	f7ff fbdc 	bl	800187c <HAL_GetTick>
 80020c4:	1bc0      	subs	r0, r0, r7
 80020c6:	2802      	cmp	r0, #2
 80020c8:	d9d7      	bls.n	800207a <HAL_RCC_OscConfig+0x2a2>
 80020ca:	e6c7      	b.n	8001e5c <HAL_RCC_OscConfig+0x84>
        tickstart = HAL_GetTick();
 80020cc:	f7ff fbd6 	bl	800187c <HAL_GetTick>
 80020d0:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020d2:	6823      	ldr	r3, [r4, #0]
 80020d4:	019b      	lsls	r3, r3, #6
 80020d6:	f57f ae94 	bpl.w	8001e02 <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80020da:	f7ff fbcf 	bl	800187c <HAL_GetTick>
 80020de:	1b40      	subs	r0, r0, r5
 80020e0:	2802      	cmp	r0, #2
 80020e2:	d9f6      	bls.n	80020d2 <HAL_RCC_OscConfig+0x2fa>
 80020e4:	e6ba      	b.n	8001e5c <HAL_RCC_OscConfig+0x84>
 80020e6:	bf00      	nop
 80020e8:	40021000 	.word	0x40021000
 80020ec:	42420060 	.word	0x42420060

080020f0 <HAL_RCC_GetSysClockFreq>:
{
 80020f0:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80020f2:	4b19      	ldr	r3, [pc, #100]	; (8002158 <HAL_RCC_GetSysClockFreq+0x68>)
{
 80020f4:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80020f6:	ac02      	add	r4, sp, #8
 80020f8:	f103 0510 	add.w	r5, r3, #16
 80020fc:	4622      	mov	r2, r4
 80020fe:	6818      	ldr	r0, [r3, #0]
 8002100:	6859      	ldr	r1, [r3, #4]
 8002102:	3308      	adds	r3, #8
 8002104:	c203      	stmia	r2!, {r0, r1}
 8002106:	42ab      	cmp	r3, r5
 8002108:	4614      	mov	r4, r2
 800210a:	d1f7      	bne.n	80020fc <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800210c:	2301      	movs	r3, #1
 800210e:	f88d 3004 	strb.w	r3, [sp, #4]
 8002112:	2302      	movs	r3, #2
  tmpreg = RCC->CFGR;
 8002114:	4911      	ldr	r1, [pc, #68]	; (800215c <HAL_RCC_GetSysClockFreq+0x6c>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002116:	f88d 3005 	strb.w	r3, [sp, #5]
  tmpreg = RCC->CFGR;
 800211a:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 800211c:	f003 020c 	and.w	r2, r3, #12
 8002120:	2a08      	cmp	r2, #8
 8002122:	d117      	bne.n	8002154 <HAL_RCC_GetSysClockFreq+0x64>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002124:	f3c3 4283 	ubfx	r2, r3, #18, #4
 8002128:	a806      	add	r0, sp, #24
 800212a:	4402      	add	r2, r0
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800212c:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800212e:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002132:	d50c      	bpl.n	800214e <HAL_RCC_GetSysClockFreq+0x5e>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002134:	684b      	ldr	r3, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002136:	480a      	ldr	r0, [pc, #40]	; (8002160 <HAL_RCC_GetSysClockFreq+0x70>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002138:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800213c:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800213e:	aa06      	add	r2, sp, #24
 8002140:	4413      	add	r3, r2
 8002142:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002146:	fbb0 f0f3 	udiv	r0, r0, r3
}
 800214a:	b007      	add	sp, #28
 800214c:	bd30      	pop	{r4, r5, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800214e:	4805      	ldr	r0, [pc, #20]	; (8002164 <HAL_RCC_GetSysClockFreq+0x74>)
 8002150:	4350      	muls	r0, r2
 8002152:	e7fa      	b.n	800214a <HAL_RCC_GetSysClockFreq+0x5a>
      sysclockfreq = HSE_VALUE;
 8002154:	4802      	ldr	r0, [pc, #8]	; (8002160 <HAL_RCC_GetSysClockFreq+0x70>)
  return sysclockfreq;
 8002156:	e7f8      	b.n	800214a <HAL_RCC_GetSysClockFreq+0x5a>
 8002158:	08002dc6 	.word	0x08002dc6
 800215c:	40021000 	.word	0x40021000
 8002160:	007a1200 	.word	0x007a1200
 8002164:	003d0900 	.word	0x003d0900

08002168 <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8002168:	4a4d      	ldr	r2, [pc, #308]	; (80022a0 <HAL_RCC_ClockConfig+0x138>)
{
 800216a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 800216e:	6813      	ldr	r3, [r2, #0]
{
 8002170:	4605      	mov	r5, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8002172:	f003 0307 	and.w	r3, r3, #7
 8002176:	428b      	cmp	r3, r1
{
 8002178:	460e      	mov	r6, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 800217a:	d328      	bcc.n	80021ce <HAL_RCC_ClockConfig+0x66>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800217c:	682a      	ldr	r2, [r5, #0]
 800217e:	0791      	lsls	r1, r2, #30
 8002180:	d432      	bmi.n	80021e8 <HAL_RCC_ClockConfig+0x80>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002182:	07d2      	lsls	r2, r2, #31
 8002184:	d438      	bmi.n	80021f8 <HAL_RCC_ClockConfig+0x90>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8002186:	4a46      	ldr	r2, [pc, #280]	; (80022a0 <HAL_RCC_ClockConfig+0x138>)
 8002188:	6813      	ldr	r3, [r2, #0]
 800218a:	f003 0307 	and.w	r3, r3, #7
 800218e:	429e      	cmp	r6, r3
 8002190:	d373      	bcc.n	800227a <HAL_RCC_ClockConfig+0x112>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002192:	682a      	ldr	r2, [r5, #0]
 8002194:	4c43      	ldr	r4, [pc, #268]	; (80022a4 <HAL_RCC_ClockConfig+0x13c>)
 8002196:	f012 0f04 	tst.w	r2, #4
 800219a:	d179      	bne.n	8002290 <HAL_RCC_ClockConfig+0x128>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800219c:	0713      	lsls	r3, r2, #28
 800219e:	d506      	bpl.n	80021ae <HAL_RCC_ClockConfig+0x46>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80021a0:	6863      	ldr	r3, [r4, #4]
 80021a2:	692a      	ldr	r2, [r5, #16]
 80021a4:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80021a8:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80021ac:	6063      	str	r3, [r4, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80021ae:	f7ff ff9f 	bl	80020f0 <HAL_RCC_GetSysClockFreq>
 80021b2:	6863      	ldr	r3, [r4, #4]
 80021b4:	4a3c      	ldr	r2, [pc, #240]	; (80022a8 <HAL_RCC_ClockConfig+0x140>)
 80021b6:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80021ba:	5cd3      	ldrb	r3, [r2, r3]
 80021bc:	40d8      	lsrs	r0, r3
 80021be:	4b3b      	ldr	r3, [pc, #236]	; (80022ac <HAL_RCC_ClockConfig+0x144>)
 80021c0:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 80021c2:	2000      	movs	r0, #0
 80021c4:	f7ff fb18 	bl	80017f8 <HAL_InitTick>
  return HAL_OK;
 80021c8:	2000      	movs	r0, #0
}
 80021ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021ce:	6813      	ldr	r3, [r2, #0]
 80021d0:	f023 0307 	bic.w	r3, r3, #7
 80021d4:	430b      	orrs	r3, r1
 80021d6:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80021d8:	6813      	ldr	r3, [r2, #0]
 80021da:	f003 0307 	and.w	r3, r3, #7
 80021de:	4299      	cmp	r1, r3
 80021e0:	d0cc      	beq.n	800217c <HAL_RCC_ClockConfig+0x14>
      return HAL_ERROR;
 80021e2:	2001      	movs	r0, #1
 80021e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80021e8:	492e      	ldr	r1, [pc, #184]	; (80022a4 <HAL_RCC_ClockConfig+0x13c>)
 80021ea:	68a8      	ldr	r0, [r5, #8]
 80021ec:	684b      	ldr	r3, [r1, #4]
 80021ee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80021f2:	4303      	orrs	r3, r0
 80021f4:	604b      	str	r3, [r1, #4]
 80021f6:	e7c4      	b.n	8002182 <HAL_RCC_ClockConfig+0x1a>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80021f8:	686a      	ldr	r2, [r5, #4]
 80021fa:	4c2a      	ldr	r4, [pc, #168]	; (80022a4 <HAL_RCC_ClockConfig+0x13c>)
 80021fc:	2a01      	cmp	r2, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021fe:	6823      	ldr	r3, [r4, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002200:	d11c      	bne.n	800223c <HAL_RCC_ClockConfig+0xd4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002202:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002206:	d0ec      	beq.n	80021e2 <HAL_RCC_ClockConfig+0x7a>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002208:	6863      	ldr	r3, [r4, #4]
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800220a:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800220e:	f023 0303 	bic.w	r3, r3, #3
 8002212:	4313      	orrs	r3, r2
 8002214:	6063      	str	r3, [r4, #4]
    tickstart = HAL_GetTick();
 8002216:	f7ff fb31 	bl	800187c <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800221a:	686b      	ldr	r3, [r5, #4]
    tickstart = HAL_GetTick();
 800221c:	4607      	mov	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800221e:	2b01      	cmp	r3, #1
 8002220:	d114      	bne.n	800224c <HAL_RCC_ClockConfig+0xe4>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002222:	6863      	ldr	r3, [r4, #4]
 8002224:	f003 030c 	and.w	r3, r3, #12
 8002228:	2b04      	cmp	r3, #4
 800222a:	d0ac      	beq.n	8002186 <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800222c:	f7ff fb26 	bl	800187c <HAL_GetTick>
 8002230:	1bc0      	subs	r0, r0, r7
 8002232:	4540      	cmp	r0, r8
 8002234:	d9f5      	bls.n	8002222 <HAL_RCC_ClockConfig+0xba>
          return HAL_TIMEOUT;
 8002236:	2003      	movs	r0, #3
 8002238:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800223c:	2a02      	cmp	r2, #2
 800223e:	d102      	bne.n	8002246 <HAL_RCC_ClockConfig+0xde>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002240:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002244:	e7df      	b.n	8002206 <HAL_RCC_ClockConfig+0x9e>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002246:	f013 0f02 	tst.w	r3, #2
 800224a:	e7dc      	b.n	8002206 <HAL_RCC_ClockConfig+0x9e>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800224c:	2b02      	cmp	r3, #2
 800224e:	d10f      	bne.n	8002270 <HAL_RCC_ClockConfig+0x108>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002250:	6863      	ldr	r3, [r4, #4]
 8002252:	f003 030c 	and.w	r3, r3, #12
 8002256:	2b08      	cmp	r3, #8
 8002258:	d095      	beq.n	8002186 <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800225a:	f7ff fb0f 	bl	800187c <HAL_GetTick>
 800225e:	1bc0      	subs	r0, r0, r7
 8002260:	4540      	cmp	r0, r8
 8002262:	d9f5      	bls.n	8002250 <HAL_RCC_ClockConfig+0xe8>
 8002264:	e7e7      	b.n	8002236 <HAL_RCC_ClockConfig+0xce>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002266:	f7ff fb09 	bl	800187c <HAL_GetTick>
 800226a:	1bc0      	subs	r0, r0, r7
 800226c:	4540      	cmp	r0, r8
 800226e:	d8e2      	bhi.n	8002236 <HAL_RCC_ClockConfig+0xce>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002270:	6863      	ldr	r3, [r4, #4]
 8002272:	f013 0f0c 	tst.w	r3, #12
 8002276:	d1f6      	bne.n	8002266 <HAL_RCC_ClockConfig+0xfe>
 8002278:	e785      	b.n	8002186 <HAL_RCC_ClockConfig+0x1e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800227a:	6813      	ldr	r3, [r2, #0]
 800227c:	f023 0307 	bic.w	r3, r3, #7
 8002280:	4333      	orrs	r3, r6
 8002282:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002284:	6813      	ldr	r3, [r2, #0]
 8002286:	f003 0307 	and.w	r3, r3, #7
 800228a:	429e      	cmp	r6, r3
 800228c:	d1a9      	bne.n	80021e2 <HAL_RCC_ClockConfig+0x7a>
 800228e:	e780      	b.n	8002192 <HAL_RCC_ClockConfig+0x2a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002290:	6863      	ldr	r3, [r4, #4]
 8002292:	68e9      	ldr	r1, [r5, #12]
 8002294:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002298:	430b      	orrs	r3, r1
 800229a:	6063      	str	r3, [r4, #4]
 800229c:	e77e      	b.n	800219c <HAL_RCC_ClockConfig+0x34>
 800229e:	bf00      	nop
 80022a0:	40022000 	.word	0x40022000
 80022a4:	40021000 	.word	0x40021000
 80022a8:	08002dd6 	.word	0x08002dd6
 80022ac:	20000000 	.word	0x20000000

080022b0 <HAL_RCC_GetHCLKFreq>:
}
 80022b0:	4b01      	ldr	r3, [pc, #4]	; (80022b8 <HAL_RCC_GetHCLKFreq+0x8>)
 80022b2:	6818      	ldr	r0, [r3, #0]
 80022b4:	4770      	bx	lr
 80022b6:	bf00      	nop
 80022b8:	20000000 	.word	0x20000000

080022bc <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80022bc:	4b04      	ldr	r3, [pc, #16]	; (80022d0 <HAL_RCC_GetPCLK1Freq+0x14>)
 80022be:	4a05      	ldr	r2, [pc, #20]	; (80022d4 <HAL_RCC_GetPCLK1Freq+0x18>)
 80022c0:	685b      	ldr	r3, [r3, #4]
 80022c2:	f3c3 2302 	ubfx	r3, r3, #8, #3
 80022c6:	5cd3      	ldrb	r3, [r2, r3]
 80022c8:	4a03      	ldr	r2, [pc, #12]	; (80022d8 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80022ca:	6810      	ldr	r0, [r2, #0]
}    
 80022cc:	40d8      	lsrs	r0, r3
 80022ce:	4770      	bx	lr
 80022d0:	40021000 	.word	0x40021000
 80022d4:	08002de6 	.word	0x08002de6
 80022d8:	20000000 	.word	0x20000000

080022dc <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80022dc:	4b04      	ldr	r3, [pc, #16]	; (80022f0 <HAL_RCC_GetPCLK2Freq+0x14>)
 80022de:	4a05      	ldr	r2, [pc, #20]	; (80022f4 <HAL_RCC_GetPCLK2Freq+0x18>)
 80022e0:	685b      	ldr	r3, [r3, #4]
 80022e2:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 80022e6:	5cd3      	ldrb	r3, [r2, r3]
 80022e8:	4a03      	ldr	r2, [pc, #12]	; (80022f8 <HAL_RCC_GetPCLK2Freq+0x1c>)
 80022ea:	6810      	ldr	r0, [r2, #0]
} 
 80022ec:	40d8      	lsrs	r0, r3
 80022ee:	4770      	bx	lr
 80022f0:	40021000 	.word	0x40021000
 80022f4:	08002de6 	.word	0x08002de6
 80022f8:	20000000 	.word	0x20000000

080022fc <HAL_TIM_ConfigClockSource>:
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef * sClockSourceConfig)
{
  uint32_t tmpsmcr = 0U;

  /* Process Locked */
  __HAL_LOCK(htim);
 80022fc:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8002300:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 8002302:	2b01      	cmp	r3, #1
 8002304:	f04f 0302 	mov.w	r3, #2
 8002308:	d01c      	beq.n	8002344 <HAL_TIM_ConfigClockSource+0x48>
 800230a:	2201      	movs	r2, #1

  htim->State = HAL_TIM_STATE_BUSY;
 800230c:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002310:	6803      	ldr	r3, [r0, #0]
  __HAL_LOCK(htim);
 8002312:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8002316:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002318:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 800231c:	f022 0277 	bic.w	r2, r2, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 8002320:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002322:	680a      	ldr	r2, [r1, #0]
 8002324:	2a40      	cmp	r2, #64	; 0x40
 8002326:	d079      	beq.n	800241c <HAL_TIM_ConfigClockSource+0x120>
 8002328:	d819      	bhi.n	800235e <HAL_TIM_ConfigClockSource+0x62>
 800232a:	2a10      	cmp	r2, #16
 800232c:	f000 8093 	beq.w	8002456 <HAL_TIM_ConfigClockSource+0x15a>
 8002330:	d80a      	bhi.n	8002348 <HAL_TIM_ConfigClockSource+0x4c>
 8002332:	2a00      	cmp	r2, #0
 8002334:	f000 8089 	beq.w	800244a <HAL_TIM_ConfigClockSource+0x14e>
    break;

  default:
    break;
  }
  htim->State = HAL_TIM_STATE_READY;
 8002338:	2301      	movs	r3, #1
 800233a:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800233e:	2300      	movs	r3, #0
 8002340:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 8002344:	4618      	mov	r0, r3

  return HAL_OK;
}
 8002346:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 8002348:	2a20      	cmp	r2, #32
 800234a:	f000 808a 	beq.w	8002462 <HAL_TIM_ConfigClockSource+0x166>
 800234e:	2a30      	cmp	r2, #48	; 0x30
 8002350:	d1f2      	bne.n	8002338 <HAL_TIM_ConfigClockSource+0x3c>
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t InputTriggerSource)
{
  uint32_t tmpsmcr = 0U;

   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 8002352:	689a      	ldr	r2, [r3, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 8002354:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8002358:	f042 0237 	orr.w	r2, r2, #55	; 0x37
 800235c:	e036      	b.n	80023cc <HAL_TIM_ConfigClockSource+0xd0>
  switch (sClockSourceConfig->ClockSource)
 800235e:	2a70      	cmp	r2, #112	; 0x70
 8002360:	d036      	beq.n	80023d0 <HAL_TIM_ConfigClockSource+0xd4>
 8002362:	d81b      	bhi.n	800239c <HAL_TIM_ConfigClockSource+0xa0>
 8002364:	2a50      	cmp	r2, #80	; 0x50
 8002366:	d042      	beq.n	80023ee <HAL_TIM_ConfigClockSource+0xf2>
 8002368:	2a60      	cmp	r2, #96	; 0x60
 800236a:	d1e5      	bne.n	8002338 <HAL_TIM_ConfigClockSource+0x3c>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800236c:	6a1c      	ldr	r4, [r3, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800236e:	684d      	ldr	r5, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002370:	f024 0410 	bic.w	r4, r4, #16
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002374:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002376:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002378:	6999      	ldr	r1, [r3, #24]
  tmpccer = TIMx->CCER;
 800237a:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800237c:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002380:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8002384:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002388:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 800238c:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 800238e:	621a      	str	r2, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 8002390:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8002392:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8002396:	f042 0267 	orr.w	r2, r2, #103	; 0x67
 800239a:	e017      	b.n	80023cc <HAL_TIM_ConfigClockSource+0xd0>
  switch (sClockSourceConfig->ClockSource)
 800239c:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 80023a0:	d011      	beq.n	80023c6 <HAL_TIM_ConfigClockSource+0xca>
 80023a2:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 80023a6:	d1c7      	bne.n	8002338 <HAL_TIM_ConfigClockSource+0x3c>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80023a8:	688a      	ldr	r2, [r1, #8]
 80023aa:	684d      	ldr	r5, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 80023ac:	689c      	ldr	r4, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80023ae:	68c9      	ldr	r1, [r1, #12]
 80023b0:	432a      	orrs	r2, r5
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80023b2:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80023b6:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80023ba:	4322      	orrs	r2, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80023bc:	609a      	str	r2, [r3, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80023be:	689a      	ldr	r2, [r3, #8]
 80023c0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80023c4:	e002      	b.n	80023cc <HAL_TIM_ConfigClockSource+0xd0>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 80023c6:	689a      	ldr	r2, [r3, #8]
 80023c8:	f022 0207 	bic.w	r2, r2, #7
   TIMx->SMCR = tmpsmcr;
 80023cc:	609a      	str	r2, [r3, #8]
 80023ce:	e7b3      	b.n	8002338 <HAL_TIM_ConfigClockSource+0x3c>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80023d0:	688a      	ldr	r2, [r1, #8]
 80023d2:	684d      	ldr	r5, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 80023d4:	689c      	ldr	r4, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80023d6:	68c9      	ldr	r1, [r1, #12]
 80023d8:	432a      	orrs	r2, r5
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80023da:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80023de:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80023e2:	4322      	orrs	r2, r4
  TIMx->SMCR = tmpsmcr;
 80023e4:	609a      	str	r2, [r3, #8]
      tmpsmcr = htim->Instance->SMCR;
 80023e6:	689a      	ldr	r2, [r3, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80023e8:	f042 0277 	orr.w	r2, r2, #119	; 0x77
 80023ec:	e7ee      	b.n	80023cc <HAL_TIM_ConfigClockSource+0xd0>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80023ee:	684c      	ldr	r4, [r1, #4]
 80023f0:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 80023f2:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80023f4:	6a1d      	ldr	r5, [r3, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80023f6:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80023fa:	f025 0501 	bic.w	r5, r5, #1
 80023fe:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002400:	699a      	ldr	r2, [r3, #24]
  tmpccer |= TIM_ICPolarity;
 8002402:	4321      	orrs	r1, r4
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002404:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002408:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 800240c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800240e:	6219      	str	r1, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 8002410:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8002412:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8002416:	f042 0257 	orr.w	r2, r2, #87	; 0x57
 800241a:	e7d7      	b.n	80023cc <HAL_TIM_ConfigClockSource+0xd0>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800241c:	684c      	ldr	r4, [r1, #4]
 800241e:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8002420:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002422:	6a1d      	ldr	r5, [r3, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002424:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002428:	f025 0501 	bic.w	r5, r5, #1
 800242c:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800242e:	699a      	ldr	r2, [r3, #24]
  tmpccer |= TIM_ICPolarity;
 8002430:	4321      	orrs	r1, r4
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002432:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002436:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 800243a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800243c:	6219      	str	r1, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 800243e:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8002440:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8002444:	f042 0247 	orr.w	r2, r2, #71	; 0x47
 8002448:	e7c0      	b.n	80023cc <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 800244a:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 800244c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8002450:	f042 0207 	orr.w	r2, r2, #7
 8002454:	e7ba      	b.n	80023cc <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 8002456:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8002458:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 800245c:	f042 0217 	orr.w	r2, r2, #23
 8002460:	e7b4      	b.n	80023cc <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 8002462:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8002464:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8002468:	f042 0227 	orr.w	r2, r2, #39	; 0x27
 800246c:	e7ae      	b.n	80023cc <HAL_TIM_ConfigClockSource+0xd0>

0800246e <HAL_TIM_PeriodElapsedCallback>:
 800246e:	4770      	bx	lr

08002470 <HAL_TIM_OC_DelayElapsedCallback>:
 8002470:	4770      	bx	lr

08002472 <HAL_TIM_IC_CaptureCallback>:
 8002472:	4770      	bx	lr

08002474 <HAL_TIM_PWM_PulseFinishedCallback>:
 8002474:	4770      	bx	lr

08002476 <HAL_TIM_TriggerCallback>:
 8002476:	4770      	bx	lr

08002478 <HAL_TIM_IRQHandler>:
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002478:	6803      	ldr	r3, [r0, #0]
{
 800247a:	b510      	push	{r4, lr}
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800247c:	691a      	ldr	r2, [r3, #16]
{
 800247e:	4604      	mov	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002480:	0791      	lsls	r1, r2, #30
 8002482:	d50e      	bpl.n	80024a2 <HAL_TIM_IRQHandler+0x2a>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8002484:	68da      	ldr	r2, [r3, #12]
 8002486:	0792      	lsls	r2, r2, #30
 8002488:	d50b      	bpl.n	80024a2 <HAL_TIM_IRQHandler+0x2a>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800248a:	f06f 0202 	mvn.w	r2, #2
 800248e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002490:	2201      	movs	r2, #1
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002492:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002494:	7702      	strb	r2, [r0, #28]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002496:	079b      	lsls	r3, r3, #30
 8002498:	d077      	beq.n	800258a <HAL_TIM_IRQHandler+0x112>
          HAL_TIM_IC_CaptureCallback(htim);
 800249a:	f7ff ffea 	bl	8002472 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800249e:	2300      	movs	r3, #0
 80024a0:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80024a2:	6823      	ldr	r3, [r4, #0]
 80024a4:	691a      	ldr	r2, [r3, #16]
 80024a6:	0750      	lsls	r0, r2, #29
 80024a8:	d510      	bpl.n	80024cc <HAL_TIM_IRQHandler+0x54>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 80024aa:	68da      	ldr	r2, [r3, #12]
 80024ac:	0751      	lsls	r1, r2, #29
 80024ae:	d50d      	bpl.n	80024cc <HAL_TIM_IRQHandler+0x54>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80024b0:	f06f 0204 	mvn.w	r2, #4
 80024b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80024b6:	2202      	movs	r2, #2
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80024b8:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80024ba:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80024bc:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 80024c0:	4620      	mov	r0, r4
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80024c2:	d068      	beq.n	8002596 <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 80024c4:	f7ff ffd5 	bl	8002472 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80024c8:	2300      	movs	r3, #0
 80024ca:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80024cc:	6823      	ldr	r3, [r4, #0]
 80024ce:	691a      	ldr	r2, [r3, #16]
 80024d0:	0712      	lsls	r2, r2, #28
 80024d2:	d50f      	bpl.n	80024f4 <HAL_TIM_IRQHandler+0x7c>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 80024d4:	68da      	ldr	r2, [r3, #12]
 80024d6:	0710      	lsls	r0, r2, #28
 80024d8:	d50c      	bpl.n	80024f4 <HAL_TIM_IRQHandler+0x7c>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80024da:	f06f 0208 	mvn.w	r2, #8
 80024de:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80024e0:	2204      	movs	r2, #4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80024e2:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80024e4:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80024e6:	0799      	lsls	r1, r3, #30
        HAL_TIM_IC_CaptureCallback(htim);
 80024e8:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80024ea:	d05a      	beq.n	80025a2 <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 80024ec:	f7ff ffc1 	bl	8002472 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80024f0:	2300      	movs	r3, #0
 80024f2:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80024f4:	6823      	ldr	r3, [r4, #0]
 80024f6:	691a      	ldr	r2, [r3, #16]
 80024f8:	06d2      	lsls	r2, r2, #27
 80024fa:	d510      	bpl.n	800251e <HAL_TIM_IRQHandler+0xa6>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 80024fc:	68da      	ldr	r2, [r3, #12]
 80024fe:	06d0      	lsls	r0, r2, #27
 8002500:	d50d      	bpl.n	800251e <HAL_TIM_IRQHandler+0xa6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002502:	f06f 0210 	mvn.w	r2, #16
 8002506:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002508:	2208      	movs	r2, #8
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800250a:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800250c:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800250e:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 8002512:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002514:	d04b      	beq.n	80025ae <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 8002516:	f7ff ffac 	bl	8002472 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800251a:	2300      	movs	r3, #0
 800251c:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800251e:	6823      	ldr	r3, [r4, #0]
 8002520:	691a      	ldr	r2, [r3, #16]
 8002522:	07d1      	lsls	r1, r2, #31
 8002524:	d508      	bpl.n	8002538 <HAL_TIM_IRQHandler+0xc0>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8002526:	68da      	ldr	r2, [r3, #12]
 8002528:	07d2      	lsls	r2, r2, #31
 800252a:	d505      	bpl.n	8002538 <HAL_TIM_IRQHandler+0xc0>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800252c:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 8002530:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002532:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8002534:	f7ff ff9b 	bl	800246e <HAL_TIM_PeriodElapsedCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002538:	6823      	ldr	r3, [r4, #0]
 800253a:	691a      	ldr	r2, [r3, #16]
 800253c:	0610      	lsls	r0, r2, #24
 800253e:	d508      	bpl.n	8002552 <HAL_TIM_IRQHandler+0xda>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8002540:	68da      	ldr	r2, [r3, #12]
 8002542:	0611      	lsls	r1, r2, #24
 8002544:	d505      	bpl.n	8002552 <HAL_TIM_IRQHandler+0xda>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002546:	f06f 0280 	mvn.w	r2, #128	; 0x80
      HAL_TIMEx_BreakCallback(htim);
 800254a:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800254c:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 800254e:	f000 f8aa 	bl	80026a6 <HAL_TIMEx_BreakCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002552:	6823      	ldr	r3, [r4, #0]
 8002554:	691a      	ldr	r2, [r3, #16]
 8002556:	0652      	lsls	r2, r2, #25
 8002558:	d508      	bpl.n	800256c <HAL_TIM_IRQHandler+0xf4>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 800255a:	68da      	ldr	r2, [r3, #12]
 800255c:	0650      	lsls	r0, r2, #25
 800255e:	d505      	bpl.n	800256c <HAL_TIM_IRQHandler+0xf4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002560:	f06f 0240 	mvn.w	r2, #64	; 0x40
      HAL_TIM_TriggerCallback(htim);
 8002564:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002566:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8002568:	f7ff ff85 	bl	8002476 <HAL_TIM_TriggerCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800256c:	6823      	ldr	r3, [r4, #0]
 800256e:	691a      	ldr	r2, [r3, #16]
 8002570:	0691      	lsls	r1, r2, #26
 8002572:	d522      	bpl.n	80025ba <HAL_TIM_IRQHandler+0x142>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8002574:	68da      	ldr	r2, [r3, #12]
 8002576:	0692      	lsls	r2, r2, #26
 8002578:	d51f      	bpl.n	80025ba <HAL_TIM_IRQHandler+0x142>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800257a:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutationCallback(htim);
 800257e:	4620      	mov	r0, r4
}
 8002580:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002584:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 8002586:	f000 b88d 	b.w	80026a4 <HAL_TIMEx_CommutationCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800258a:	f7ff ff71 	bl	8002470 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800258e:	4620      	mov	r0, r4
 8002590:	f7ff ff70 	bl	8002474 <HAL_TIM_PWM_PulseFinishedCallback>
 8002594:	e783      	b.n	800249e <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002596:	f7ff ff6b 	bl	8002470 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800259a:	4620      	mov	r0, r4
 800259c:	f7ff ff6a 	bl	8002474 <HAL_TIM_PWM_PulseFinishedCallback>
 80025a0:	e792      	b.n	80024c8 <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80025a2:	f7ff ff65 	bl	8002470 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025a6:	4620      	mov	r0, r4
 80025a8:	f7ff ff64 	bl	8002474 <HAL_TIM_PWM_PulseFinishedCallback>
 80025ac:	e7a0      	b.n	80024f0 <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80025ae:	f7ff ff5f 	bl	8002470 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025b2:	4620      	mov	r0, r4
 80025b4:	f7ff ff5e 	bl	8002474 <HAL_TIM_PWM_PulseFinishedCallback>
 80025b8:	e7af      	b.n	800251a <HAL_TIM_IRQHandler+0xa2>
 80025ba:	bd10      	pop	{r4, pc}

080025bc <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80025bc:	4a1a      	ldr	r2, [pc, #104]	; (8002628 <TIM_Base_SetConfig+0x6c>)
  tmpcr1 = TIMx->CR1;
 80025be:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80025c0:	4290      	cmp	r0, r2
 80025c2:	d00a      	beq.n	80025da <TIM_Base_SetConfig+0x1e>
 80025c4:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80025c8:	d007      	beq.n	80025da <TIM_Base_SetConfig+0x1e>
 80025ca:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80025ce:	4290      	cmp	r0, r2
 80025d0:	d003      	beq.n	80025da <TIM_Base_SetConfig+0x1e>
 80025d2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80025d6:	4290      	cmp	r0, r2
 80025d8:	d115      	bne.n	8002606 <TIM_Base_SetConfig+0x4a>
    tmpcr1 |= Structure->CounterMode;
 80025da:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80025dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80025e0:	4313      	orrs	r3, r2
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80025e2:	4a11      	ldr	r2, [pc, #68]	; (8002628 <TIM_Base_SetConfig+0x6c>)
 80025e4:	4290      	cmp	r0, r2
 80025e6:	d00a      	beq.n	80025fe <TIM_Base_SetConfig+0x42>
 80025e8:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80025ec:	d007      	beq.n	80025fe <TIM_Base_SetConfig+0x42>
 80025ee:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80025f2:	4290      	cmp	r0, r2
 80025f4:	d003      	beq.n	80025fe <TIM_Base_SetConfig+0x42>
 80025f6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80025fa:	4290      	cmp	r0, r2
 80025fc:	d103      	bne.n	8002606 <TIM_Base_SetConfig+0x4a>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80025fe:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8002600:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002604:	4313      	orrs	r3, r2
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 8002606:	694a      	ldr	r2, [r1, #20]
  tmpcr1 &= ~TIM_CR1_ARPE;
 8002608:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 800260c:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 800260e:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002610:	688b      	ldr	r3, [r1, #8]
 8002612:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8002614:	680b      	ldr	r3, [r1, #0]
 8002616:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002618:	4b03      	ldr	r3, [pc, #12]	; (8002628 <TIM_Base_SetConfig+0x6c>)
 800261a:	4298      	cmp	r0, r3
    TIMx->RCR = Structure->RepetitionCounter;
 800261c:	bf04      	itt	eq
 800261e:	690b      	ldreq	r3, [r1, #16]
 8002620:	6303      	streq	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8002622:	2301      	movs	r3, #1
 8002624:	6143      	str	r3, [r0, #20]
 8002626:	4770      	bx	lr
 8002628:	40012c00 	.word	0x40012c00

0800262c <HAL_TIM_Base_Init>:
{
 800262c:	b510      	push	{r4, lr}
  if(htim == NULL)
 800262e:	4604      	mov	r4, r0
 8002630:	b1a0      	cbz	r0, 800265c <HAL_TIM_Base_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 8002632:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002636:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800263a:	b91b      	cbnz	r3, 8002644 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 800263c:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8002640:	f7fe ff90 	bl	8001564 <HAL_TIM_Base_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 8002644:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002646:	6820      	ldr	r0, [r4, #0]
  htim->State= HAL_TIM_STATE_BUSY;
 8002648:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800264c:	1d21      	adds	r1, r4, #4
 800264e:	f7ff ffb5 	bl	80025bc <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8002652:	2301      	movs	r3, #1
  return HAL_OK;
 8002654:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 8002656:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800265a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800265c:	2001      	movs	r0, #1
}
 800265e:	bd10      	pop	{r4, pc}

08002660 <HAL_TIMEx_MasterConfigSynchronization>:
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  __HAL_LOCK(htim);
 8002660:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8002664:	b510      	push	{r4, lr}
  __HAL_LOCK(htim);
 8002666:	2b01      	cmp	r3, #1
 8002668:	f04f 0302 	mov.w	r3, #2
 800266c:	d018      	beq.n	80026a0 <HAL_TIMEx_MasterConfigSynchronization+0x40>

  htim->State = HAL_TIM_STATE_BUSY;
 800266e:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8002672:	6803      	ldr	r3, [r0, #0]
  /* Select the TRGO source */
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 8002674:	680c      	ldr	r4, [r1, #0]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8002676:	685a      	ldr	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8002678:	6849      	ldr	r1, [r1, #4]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 800267a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800267e:	605a      	str	r2, [r3, #4]
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 8002680:	685a      	ldr	r2, [r3, #4]
 8002682:	4322      	orrs	r2, r4
 8002684:	605a      	str	r2, [r3, #4]
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 8002686:	689a      	ldr	r2, [r3, #8]
 8002688:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800268c:	609a      	str	r2, [r3, #8]
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 800268e:	689a      	ldr	r2, [r3, #8]
 8002690:	430a      	orrs	r2, r1
 8002692:	609a      	str	r2, [r3, #8]

  htim->State = HAL_TIM_STATE_READY;
 8002694:	2301      	movs	r3, #1
 8002696:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800269a:	2300      	movs	r3, #0
 800269c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 80026a0:	4618      	mov	r0, r3

  return HAL_OK;
}
 80026a2:	bd10      	pop	{r4, pc}

080026a4 <HAL_TIMEx_CommutationCallback>:
 80026a4:	4770      	bx	lr

080026a6 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non blocking mode
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80026a6:	4770      	bx	lr

080026a8 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80026a8:	6803      	ldr	r3, [r0, #0]
 80026aa:	68da      	ldr	r2, [r3, #12]
 80026ac:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80026b0:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80026b2:	695a      	ldr	r2, [r3, #20]
 80026b4:	f022 0201 	bic.w	r2, r2, #1
 80026b8:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80026ba:	2320      	movs	r3, #32
 80026bc:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
 80026c0:	4770      	bx	lr
	...

080026c4 <UART_SetConfig>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80026c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*------- UART-associated USART registers setting : CR2 Configuration ------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according 
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80026c8:	6805      	ldr	r5, [r0, #0]
 80026ca:	68c2      	ldr	r2, [r0, #12]
 80026cc:	692b      	ldr	r3, [r5, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1, 
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8), 
             tmpreg);
#else
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80026ce:	6901      	ldr	r1, [r0, #16]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80026d0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80026d4:	4313      	orrs	r3, r2
 80026d6:	612b      	str	r3, [r5, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80026d8:	6883      	ldr	r3, [r0, #8]
  MODIFY_REG(huart->Instance->CR1, 
 80026da:	68ea      	ldr	r2, [r5, #12]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80026dc:	430b      	orrs	r3, r1
 80026de:	6941      	ldr	r1, [r0, #20]
  MODIFY_REG(huart->Instance->CR1, 
 80026e0:	f422 52b0 	bic.w	r2, r2, #5632	; 0x1600
 80026e4:	f022 020c 	bic.w	r2, r2, #12
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80026e8:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, 
 80026ea:	4313      	orrs	r3, r2
 80026ec:	60eb      	str	r3, [r5, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*------- UART-associated USART registers setting : CR3 Configuration ------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80026ee:	696b      	ldr	r3, [r5, #20]
 80026f0:	6982      	ldr	r2, [r0, #24]
 80026f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80026f6:	4313      	orrs	r3, r2
 80026f8:	616b      	str	r3, [r5, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 80026fa:	4b40      	ldr	r3, [pc, #256]	; (80027fc <UART_SetConfig+0x138>)
{
 80026fc:	4681      	mov	r9, r0
  if(huart->Instance == USART1)
 80026fe:	429d      	cmp	r5, r3
 8002700:	f04f 0419 	mov.w	r4, #25
 8002704:	d146      	bne.n	8002794 <UART_SetConfig+0xd0>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8002706:	f7ff fde9 	bl	80022dc <HAL_RCC_GetPCLK2Freq>
 800270a:	fb04 f300 	mul.w	r3, r4, r0
 800270e:	f8d9 6004 	ldr.w	r6, [r9, #4]
 8002712:	f04f 0864 	mov.w	r8, #100	; 0x64
 8002716:	00b6      	lsls	r6, r6, #2
 8002718:	fbb3 f3f6 	udiv	r3, r3, r6
 800271c:	fbb3 f3f8 	udiv	r3, r3, r8
 8002720:	011e      	lsls	r6, r3, #4
 8002722:	f7ff fddb 	bl	80022dc <HAL_RCC_GetPCLK2Freq>
 8002726:	4360      	muls	r0, r4
 8002728:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800272c:	009b      	lsls	r3, r3, #2
 800272e:	fbb0 f7f3 	udiv	r7, r0, r3
 8002732:	f7ff fdd3 	bl	80022dc <HAL_RCC_GetPCLK2Freq>
 8002736:	4360      	muls	r0, r4
 8002738:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800273c:	009b      	lsls	r3, r3, #2
 800273e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002742:	fbb3 f3f8 	udiv	r3, r3, r8
 8002746:	fb08 7313 	mls	r3, r8, r3, r7
 800274a:	011b      	lsls	r3, r3, #4
 800274c:	3332      	adds	r3, #50	; 0x32
 800274e:	fbb3 f3f8 	udiv	r3, r3, r8
 8002752:	f003 07f0 	and.w	r7, r3, #240	; 0xf0
 8002756:	f7ff fdc1 	bl	80022dc <HAL_RCC_GetPCLK2Freq>
 800275a:	4360      	muls	r0, r4
 800275c:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8002760:	0092      	lsls	r2, r2, #2
 8002762:	fbb0 faf2 	udiv	sl, r0, r2
 8002766:	f7ff fdb9 	bl	80022dc <HAL_RCC_GetPCLK2Freq>
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800276a:	4360      	muls	r0, r4
 800276c:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8002770:	009b      	lsls	r3, r3, #2
 8002772:	fbb0 f3f3 	udiv	r3, r0, r3
 8002776:	fbb3 f3f8 	udiv	r3, r3, r8
 800277a:	fb08 a313 	mls	r3, r8, r3, sl
 800277e:	011b      	lsls	r3, r3, #4
 8002780:	3332      	adds	r3, #50	; 0x32
 8002782:	fbb3 f3f8 	udiv	r3, r3, r8
 8002786:	f003 030f 	and.w	r3, r3, #15
 800278a:	433b      	orrs	r3, r7
 800278c:	4433      	add	r3, r6
 800278e:	60ab      	str	r3, [r5, #8]
 8002790:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002794:	f7ff fd92 	bl	80022bc <HAL_RCC_GetPCLK1Freq>
 8002798:	fb04 f300 	mul.w	r3, r4, r0
 800279c:	f8d9 6004 	ldr.w	r6, [r9, #4]
 80027a0:	f04f 0864 	mov.w	r8, #100	; 0x64
 80027a4:	00b6      	lsls	r6, r6, #2
 80027a6:	fbb3 f3f6 	udiv	r3, r3, r6
 80027aa:	fbb3 f3f8 	udiv	r3, r3, r8
 80027ae:	011e      	lsls	r6, r3, #4
 80027b0:	f7ff fd84 	bl	80022bc <HAL_RCC_GetPCLK1Freq>
 80027b4:	4360      	muls	r0, r4
 80027b6:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80027ba:	009b      	lsls	r3, r3, #2
 80027bc:	fbb0 f7f3 	udiv	r7, r0, r3
 80027c0:	f7ff fd7c 	bl	80022bc <HAL_RCC_GetPCLK1Freq>
 80027c4:	4360      	muls	r0, r4
 80027c6:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80027ca:	009b      	lsls	r3, r3, #2
 80027cc:	fbb0 f3f3 	udiv	r3, r0, r3
 80027d0:	fbb3 f3f8 	udiv	r3, r3, r8
 80027d4:	fb08 7313 	mls	r3, r8, r3, r7
 80027d8:	011b      	lsls	r3, r3, #4
 80027da:	3332      	adds	r3, #50	; 0x32
 80027dc:	fbb3 f3f8 	udiv	r3, r3, r8
 80027e0:	f003 07f0 	and.w	r7, r3, #240	; 0xf0
 80027e4:	f7ff fd6a 	bl	80022bc <HAL_RCC_GetPCLK1Freq>
 80027e8:	4360      	muls	r0, r4
 80027ea:	f8d9 2004 	ldr.w	r2, [r9, #4]
 80027ee:	0092      	lsls	r2, r2, #2
 80027f0:	fbb0 faf2 	udiv	sl, r0, r2
 80027f4:	f7ff fd62 	bl	80022bc <HAL_RCC_GetPCLK1Freq>
 80027f8:	e7b7      	b.n	800276a <UART_SetConfig+0xa6>
 80027fa:	bf00      	nop
 80027fc:	40013800 	.word	0x40013800

08002800 <HAL_UART_Init>:
{
 8002800:	b510      	push	{r4, lr}
  if(huart == NULL)
 8002802:	4604      	mov	r4, r0
 8002804:	b340      	cbz	r0, 8002858 <HAL_UART_Init+0x58>
  if(huart->gState == HAL_UART_STATE_RESET)
 8002806:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800280a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800280e:	b91b      	cbnz	r3, 8002818 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8002810:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8002814:	f7fe fecc 	bl	80015b0 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 8002818:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 800281a:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800281c:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8002820:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 8002822:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 8002824:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002828:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 800282a:	f7ff ff4b 	bl	80026c4 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800282e:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002830:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002832:	691a      	ldr	r2, [r3, #16]
 8002834:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002838:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800283a:	695a      	ldr	r2, [r3, #20]
 800283c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002840:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8002842:	68da      	ldr	r2, [r3, #12]
 8002844:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002848:	60da      	str	r2, [r3, #12]
  huart->gState= HAL_UART_STATE_READY;
 800284a:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800284c:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 800284e:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 8002852:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 8002856:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002858:	2001      	movs	r0, #1
}
 800285a:	bd10      	pop	{r4, pc}

0800285c <HAL_UART_Transmit_DMA>:
{
 800285c:	b538      	push	{r3, r4, r5, lr}
 800285e:	4604      	mov	r4, r0
 8002860:	4613      	mov	r3, r2
  if(huart->gState == HAL_UART_STATE_READY)
 8002862:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 8002866:	2a20      	cmp	r2, #32
 8002868:	d12a      	bne.n	80028c0 <HAL_UART_Transmit_DMA+0x64>
    if((pData == NULL) || (Size == 0U))
 800286a:	b339      	cbz	r1, 80028bc <HAL_UART_Transmit_DMA+0x60>
 800286c:	b333      	cbz	r3, 80028bc <HAL_UART_Transmit_DMA+0x60>
    __HAL_LOCK(huart);
 800286e:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
 8002872:	2a01      	cmp	r2, #1
 8002874:	d024      	beq.n	80028c0 <HAL_UART_Transmit_DMA+0x64>
 8002876:	2201      	movs	r2, #1
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002878:	2500      	movs	r5, #0
    __HAL_LOCK(huart);
 800287a:	f884 2038 	strb.w	r2, [r4, #56]	; 0x38
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800287e:	2221      	movs	r2, #33	; 0x21
    huart->TxXferCount = Size;
 8002880:	84e3      	strh	r3, [r4, #38]	; 0x26
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8002882:	6b20      	ldr	r0, [r4, #48]	; 0x30
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002884:	63e5      	str	r5, [r4, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002886:	f884 2039 	strb.w	r2, [r4, #57]	; 0x39
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800288a:	4a0e      	ldr	r2, [pc, #56]	; (80028c4 <HAL_UART_Transmit_DMA+0x68>)
    huart->TxXferSize = Size;
 800288c:	84a3      	strh	r3, [r4, #36]	; 0x24
    huart->pTxBuffPtr = pData;
 800288e:	6221      	str	r1, [r4, #32]
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8002890:	6282      	str	r2, [r0, #40]	; 0x28
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8002892:	4a0d      	ldr	r2, [pc, #52]	; (80028c8 <HAL_UART_Transmit_DMA+0x6c>)
    huart->hdmatx->XferAbortCallback = NULL;
 8002894:	6345      	str	r5, [r0, #52]	; 0x34
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8002896:	62c2      	str	r2, [r0, #44]	; 0x2c
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8002898:	4a0c      	ldr	r2, [pc, #48]	; (80028cc <HAL_UART_Transmit_DMA+0x70>)
 800289a:	6302      	str	r2, [r0, #48]	; 0x30
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t*)tmp, (uint32_t)&huart->Instance->DR, Size);
 800289c:	6822      	ldr	r2, [r4, #0]
 800289e:	3204      	adds	r2, #4
 80028a0:	f7ff f8a0 	bl	80019e4 <HAL_DMA_Start_IT>
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 80028a4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80028a8:	6823      	ldr	r3, [r4, #0]
    return HAL_OK;
 80028aa:	4628      	mov	r0, r5
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 80028ac:	601a      	str	r2, [r3, #0]
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80028ae:	695a      	ldr	r2, [r3, #20]
    __HAL_UNLOCK(huart);
 80028b0:	f884 5038 	strb.w	r5, [r4, #56]	; 0x38
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80028b4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80028b8:	615a      	str	r2, [r3, #20]
    return HAL_OK;
 80028ba:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_ERROR;
 80028bc:	2001      	movs	r0, #1
 80028be:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_BUSY;
 80028c0:	2002      	movs	r0, #2
}
 80028c2:	bd38      	pop	{r3, r4, r5, pc}
 80028c4:	08002961 	.word	0x08002961
 80028c8:	0800298f 	.word	0x0800298f
 80028cc:	08002a5d 	.word	0x08002a5d

080028d0 <HAL_UART_Receive_DMA>:
{
 80028d0:	4613      	mov	r3, r2
  if(huart->RxState == HAL_UART_STATE_READY) 
 80028d2:	f890 203a 	ldrb.w	r2, [r0, #58]	; 0x3a
{
 80028d6:	b573      	push	{r0, r1, r4, r5, r6, lr}
  if(huart->RxState == HAL_UART_STATE_READY) 
 80028d8:	2a20      	cmp	r2, #32
{
 80028da:	4605      	mov	r5, r0
  if(huart->RxState == HAL_UART_STATE_READY) 
 80028dc:	d138      	bne.n	8002950 <HAL_UART_Receive_DMA+0x80>
    if((pData == NULL) || (Size == 0U))
 80028de:	2900      	cmp	r1, #0
 80028e0:	d034      	beq.n	800294c <HAL_UART_Receive_DMA+0x7c>
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d032      	beq.n	800294c <HAL_UART_Receive_DMA+0x7c>
    __HAL_LOCK(huart);
 80028e6:	f890 2038 	ldrb.w	r2, [r0, #56]	; 0x38
 80028ea:	2a01      	cmp	r2, #1
 80028ec:	d030      	beq.n	8002950 <HAL_UART_Receive_DMA+0x80>
 80028ee:	2201      	movs	r2, #1
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80028f0:	2400      	movs	r4, #0
    __HAL_LOCK(huart);
 80028f2:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80028f6:	2222      	movs	r2, #34	; 0x22
    huart->pRxBuffPtr = pData;
 80028f8:	6281      	str	r1, [r0, #40]	; 0x28
    huart->RxXferSize = Size;
 80028fa:	8583      	strh	r3, [r0, #44]	; 0x2c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80028fc:	63c4      	str	r4, [r0, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80028fe:	f880 203a 	strb.w	r2, [r0, #58]	; 0x3a
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8002902:	6b40      	ldr	r0, [r0, #52]	; 0x34
 8002904:	4a13      	ldr	r2, [pc, #76]	; (8002954 <HAL_UART_Receive_DMA+0x84>)
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t*)tmp, Size);
 8002906:	682e      	ldr	r6, [r5, #0]
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8002908:	6282      	str	r2, [r0, #40]	; 0x28
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800290a:	4a13      	ldr	r2, [pc, #76]	; (8002958 <HAL_UART_Receive_DMA+0x88>)
    huart->hdmarx->XferAbortCallback = NULL;
 800290c:	6344      	str	r4, [r0, #52]	; 0x34
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800290e:	62c2      	str	r2, [r0, #44]	; 0x2c
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8002910:	4a12      	ldr	r2, [pc, #72]	; (800295c <HAL_UART_Receive_DMA+0x8c>)
 8002912:	6302      	str	r2, [r0, #48]	; 0x30
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t*)tmp, Size);
 8002914:	460a      	mov	r2, r1
 8002916:	1d31      	adds	r1, r6, #4
 8002918:	f7ff f864 	bl	80019e4 <HAL_DMA_Start_IT>
    return HAL_OK;
 800291c:	4620      	mov	r0, r4
    __HAL_UART_CLEAR_OREFLAG(huart);
 800291e:	682b      	ldr	r3, [r5, #0]
 8002920:	9401      	str	r4, [sp, #4]
 8002922:	681a      	ldr	r2, [r3, #0]
 8002924:	9201      	str	r2, [sp, #4]
 8002926:	685a      	ldr	r2, [r3, #4]
    __HAL_UNLOCK(huart);
 8002928:	f885 4038 	strb.w	r4, [r5, #56]	; 0x38
    __HAL_UART_CLEAR_OREFLAG(huart);
 800292c:	9201      	str	r2, [sp, #4]
 800292e:	9a01      	ldr	r2, [sp, #4]
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002930:	68da      	ldr	r2, [r3, #12]
 8002932:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002936:	60da      	str	r2, [r3, #12]
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002938:	695a      	ldr	r2, [r3, #20]
 800293a:	f042 0201 	orr.w	r2, r2, #1
 800293e:	615a      	str	r2, [r3, #20]
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002940:	695a      	ldr	r2, [r3, #20]
 8002942:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002946:	615a      	str	r2, [r3, #20]
}
 8002948:	b002      	add	sp, #8
 800294a:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 800294c:	2001      	movs	r0, #1
 800294e:	e7fb      	b.n	8002948 <HAL_UART_Receive_DMA+0x78>
    return HAL_BUSY;
 8002950:	2002      	movs	r0, #2
 8002952:	e7f9      	b.n	8002948 <HAL_UART_Receive_DMA+0x78>
 8002954:	0800299b 	.word	0x0800299b
 8002958:	08002a51 	.word	0x08002a51
 800295c:	08002a5d 	.word	0x08002a5d

08002960 <UART_DMATransmitCplt>:
{
 8002960:	b508      	push	{r3, lr}
  if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002962:	6803      	ldr	r3, [r0, #0]
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002964:	6a42      	ldr	r2, [r0, #36]	; 0x24
  if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f013 0320 	ands.w	r3, r3, #32
 800296c:	d10a      	bne.n	8002984 <UART_DMATransmitCplt+0x24>
    huart->TxXferCount = 0U;
 800296e:	84d3      	strh	r3, [r2, #38]	; 0x26
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8002970:	6813      	ldr	r3, [r2, #0]
 8002972:	695a      	ldr	r2, [r3, #20]
 8002974:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002978:	615a      	str	r2, [r3, #20]
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800297a:	68da      	ldr	r2, [r3, #12]
 800297c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002980:	60da      	str	r2, [r3, #12]
 8002982:	bd08      	pop	{r3, pc}
    HAL_UART_TxCpltCallback(huart);
 8002984:	4610      	mov	r0, r2
 8002986:	f7fe fbed 	bl	8001164 <HAL_UART_TxCpltCallback>
 800298a:	bd08      	pop	{r3, pc}

0800298c <HAL_UART_TxHalfCpltCallback>:
 800298c:	4770      	bx	lr

0800298e <UART_DMATxHalfCplt>:
{
 800298e:	b508      	push	{r3, lr}
  HAL_UART_TxHalfCpltCallback(huart);
 8002990:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8002992:	f7ff fffb 	bl	800298c <HAL_UART_TxHalfCpltCallback>
 8002996:	bd08      	pop	{r3, pc}

08002998 <HAL_UART_RxCpltCallback>:
 8002998:	4770      	bx	lr

0800299a <UART_DMAReceiveCplt>:
{
 800299a:	b508      	push	{r3, lr}
  if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800299c:	6803      	ldr	r3, [r0, #0]
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800299e:	6a42      	ldr	r2, [r0, #36]	; 0x24
  if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f013 0320 	ands.w	r3, r3, #32
 80029a6:	d110      	bne.n	80029ca <UART_DMAReceiveCplt+0x30>
    huart->RxXferCount = 0U;
 80029a8:	85d3      	strh	r3, [r2, #46]	; 0x2e
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80029aa:	6813      	ldr	r3, [r2, #0]
 80029ac:	68d9      	ldr	r1, [r3, #12]
 80029ae:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 80029b2:	60d9      	str	r1, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80029b4:	6959      	ldr	r1, [r3, #20]
 80029b6:	f021 0101 	bic.w	r1, r1, #1
 80029ba:	6159      	str	r1, [r3, #20]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80029bc:	6959      	ldr	r1, [r3, #20]
 80029be:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 80029c2:	6159      	str	r1, [r3, #20]
    huart->RxState = HAL_UART_STATE_READY;
 80029c4:	2320      	movs	r3, #32
 80029c6:	f882 303a 	strb.w	r3, [r2, #58]	; 0x3a
  HAL_UART_RxCpltCallback(huart);
 80029ca:	4610      	mov	r0, r2
 80029cc:	f7ff ffe4 	bl	8002998 <HAL_UART_RxCpltCallback>
 80029d0:	bd08      	pop	{r3, pc}

080029d2 <UART_Receive_IT>:
  if(huart->RxState == HAL_UART_STATE_BUSY_RX) 
 80029d2:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
{
 80029d6:	b510      	push	{r4, lr}
  if(huart->RxState == HAL_UART_STATE_BUSY_RX) 
 80029d8:	2b22      	cmp	r3, #34	; 0x22
 80029da:	d136      	bne.n	8002a4a <UART_Receive_IT+0x78>
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 80029dc:	6883      	ldr	r3, [r0, #8]
 80029de:	6901      	ldr	r1, [r0, #16]
 80029e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80029e4:	6802      	ldr	r2, [r0, #0]
 80029e6:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80029e8:	d123      	bne.n	8002a32 <UART_Receive_IT+0x60>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80029ea:	6852      	ldr	r2, [r2, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 80029ec:	b9e9      	cbnz	r1, 8002a2a <UART_Receive_IT+0x58>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80029ee:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80029f2:	f823 2b02 	strh.w	r2, [r3], #2
        huart->pRxBuffPtr += 1U;
 80029f6:	6283      	str	r3, [r0, #40]	; 0x28
    if(--huart->RxXferCount == 0U)
 80029f8:	8dc4      	ldrh	r4, [r0, #46]	; 0x2e
 80029fa:	3c01      	subs	r4, #1
 80029fc:	b2a4      	uxth	r4, r4
 80029fe:	85c4      	strh	r4, [r0, #46]	; 0x2e
 8002a00:	b98c      	cbnz	r4, 8002a26 <UART_Receive_IT+0x54>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002a02:	6803      	ldr	r3, [r0, #0]
 8002a04:	68da      	ldr	r2, [r3, #12]
 8002a06:	f022 0220 	bic.w	r2, r2, #32
 8002a0a:	60da      	str	r2, [r3, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002a0c:	68da      	ldr	r2, [r3, #12]
 8002a0e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002a12:	60da      	str	r2, [r3, #12]
        __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002a14:	695a      	ldr	r2, [r3, #20]
 8002a16:	f022 0201 	bic.w	r2, r2, #1
 8002a1a:	615a      	str	r2, [r3, #20]
      huart->RxState = HAL_UART_STATE_READY;
 8002a1c:	2320      	movs	r3, #32
 8002a1e:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
      HAL_UART_RxCpltCallback(huart);
 8002a22:	f7ff ffb9 	bl	8002998 <HAL_UART_RxCpltCallback>
    if(--huart->RxXferCount == 0U)
 8002a26:	2000      	movs	r0, #0
}
 8002a28:	bd10      	pop	{r4, pc}
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8002a2a:	b2d2      	uxtb	r2, r2
 8002a2c:	f823 2b01 	strh.w	r2, [r3], #1
 8002a30:	e7e1      	b.n	80029f6 <UART_Receive_IT+0x24>
      if(huart->Init.Parity == UART_PARITY_NONE)
 8002a32:	b921      	cbnz	r1, 8002a3e <UART_Receive_IT+0x6c>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002a34:	1c59      	adds	r1, r3, #1
 8002a36:	6852      	ldr	r2, [r2, #4]
 8002a38:	6281      	str	r1, [r0, #40]	; 0x28
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002a3a:	701a      	strb	r2, [r3, #0]
 8002a3c:	e7dc      	b.n	80029f8 <UART_Receive_IT+0x26>
 8002a3e:	6852      	ldr	r2, [r2, #4]
 8002a40:	1c59      	adds	r1, r3, #1
 8002a42:	6281      	str	r1, [r0, #40]	; 0x28
 8002a44:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002a48:	e7f7      	b.n	8002a3a <UART_Receive_IT+0x68>
    return HAL_BUSY;
 8002a4a:	2002      	movs	r0, #2
 8002a4c:	bd10      	pop	{r4, pc}

08002a4e <HAL_UART_RxHalfCpltCallback>:
 8002a4e:	4770      	bx	lr

08002a50 <UART_DMARxHalfCplt>:
{
 8002a50:	b508      	push	{r3, lr}
  HAL_UART_RxHalfCpltCallback(huart); 
 8002a52:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8002a54:	f7ff fffb 	bl	8002a4e <HAL_UART_RxHalfCpltCallback>
 8002a58:	bd08      	pop	{r3, pc}

08002a5a <HAL_UART_ErrorCallback>:
 8002a5a:	4770      	bx	lr

08002a5c <UART_DMAError>:
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002a5c:	6a41      	ldr	r1, [r0, #36]	; 0x24
{
 8002a5e:	b508      	push	{r3, lr}
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8002a60:	680b      	ldr	r3, [r1, #0]
 8002a62:	695a      	ldr	r2, [r3, #20]
  if((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8002a64:	f891 0039 	ldrb.w	r0, [r1, #57]	; 0x39
 8002a68:	2821      	cmp	r0, #33	; 0x21
 8002a6a:	d10a      	bne.n	8002a82 <UART_DMAError+0x26>
 8002a6c:	0612      	lsls	r2, r2, #24
 8002a6e:	d508      	bpl.n	8002a82 <UART_DMAError+0x26>
    huart->TxXferCount = 0U;
 8002a70:	2200      	movs	r2, #0
 8002a72:	84ca      	strh	r2, [r1, #38]	; 0x26
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8002a74:	68da      	ldr	r2, [r3, #12]
 8002a76:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8002a7a:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 8002a7c:	2220      	movs	r2, #32
 8002a7e:	f881 2039 	strb.w	r2, [r1, #57]	; 0x39
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR); 
 8002a82:	695b      	ldr	r3, [r3, #20]
  if((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8002a84:	f891 203a 	ldrb.w	r2, [r1, #58]	; 0x3a
 8002a88:	2a22      	cmp	r2, #34	; 0x22
 8002a8a:	d106      	bne.n	8002a9a <UART_DMAError+0x3e>
 8002a8c:	065b      	lsls	r3, r3, #25
 8002a8e:	d504      	bpl.n	8002a9a <UART_DMAError+0x3e>
    huart->RxXferCount = 0U;
 8002a90:	2300      	movs	r3, #0
    UART_EndRxTransfer(huart);
 8002a92:	4608      	mov	r0, r1
    huart->RxXferCount = 0U;
 8002a94:	85cb      	strh	r3, [r1, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8002a96:	f7ff fe07 	bl	80026a8 <UART_EndRxTransfer>
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8002a9a:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
  HAL_UART_ErrorCallback(huart);
 8002a9c:	4608      	mov	r0, r1
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8002a9e:	f043 0310 	orr.w	r3, r3, #16
 8002aa2:	63cb      	str	r3, [r1, #60]	; 0x3c
  HAL_UART_ErrorCallback(huart);
 8002aa4:	f7ff ffd9 	bl	8002a5a <HAL_UART_ErrorCallback>
 8002aa8:	bd08      	pop	{r3, pc}
	...

08002aac <HAL_UART_IRQHandler>:
   uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002aac:	6803      	ldr	r3, [r0, #0]
{
 8002aae:	b570      	push	{r4, r5, r6, lr}
   uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002ab0:	681a      	ldr	r2, [r3, #0]
{
 8002ab2:	4604      	mov	r4, r0
  if(errorflags == RESET)
 8002ab4:	0716      	lsls	r6, r2, #28
   uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002ab6:	68d9      	ldr	r1, [r3, #12]
   uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002ab8:	695d      	ldr	r5, [r3, #20]
  if(errorflags == RESET)
 8002aba:	d107      	bne.n	8002acc <HAL_UART_IRQHandler+0x20>
    if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002abc:	0696      	lsls	r6, r2, #26
 8002abe:	d55a      	bpl.n	8002b76 <HAL_UART_IRQHandler+0xca>
 8002ac0:	068d      	lsls	r5, r1, #26
 8002ac2:	d558      	bpl.n	8002b76 <HAL_UART_IRQHandler+0xca>
}
 8002ac4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      UART_Receive_IT(huart);
 8002ac8:	f7ff bf83 	b.w	80029d2 <UART_Receive_IT>
  if((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002acc:	f015 0501 	ands.w	r5, r5, #1
 8002ad0:	d102      	bne.n	8002ad8 <HAL_UART_IRQHandler+0x2c>
 8002ad2:	f411 7f90 	tst.w	r1, #288	; 0x120
 8002ad6:	d04e      	beq.n	8002b76 <HAL_UART_IRQHandler+0xca>
    if(((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002ad8:	07d3      	lsls	r3, r2, #31
 8002ada:	d505      	bpl.n	8002ae8 <HAL_UART_IRQHandler+0x3c>
 8002adc:	05ce      	lsls	r6, r1, #23
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002ade:	bf42      	ittt	mi
 8002ae0:	6be3      	ldrmi	r3, [r4, #60]	; 0x3c
 8002ae2:	f043 0301 	orrmi.w	r3, r3, #1
 8002ae6:	63e3      	strmi	r3, [r4, #60]	; 0x3c
    if(((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002ae8:	0750      	lsls	r0, r2, #29
 8002aea:	d504      	bpl.n	8002af6 <HAL_UART_IRQHandler+0x4a>
 8002aec:	b11d      	cbz	r5, 8002af6 <HAL_UART_IRQHandler+0x4a>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002aee:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002af0:	f043 0302 	orr.w	r3, r3, #2
 8002af4:	63e3      	str	r3, [r4, #60]	; 0x3c
    if(((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002af6:	0793      	lsls	r3, r2, #30
 8002af8:	d504      	bpl.n	8002b04 <HAL_UART_IRQHandler+0x58>
 8002afa:	b11d      	cbz	r5, 8002b04 <HAL_UART_IRQHandler+0x58>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002afc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002afe:	f043 0304 	orr.w	r3, r3, #4
 8002b02:	63e3      	str	r3, [r4, #60]	; 0x3c
    if(((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002b04:	0716      	lsls	r6, r2, #28
 8002b06:	d504      	bpl.n	8002b12 <HAL_UART_IRQHandler+0x66>
 8002b08:	b11d      	cbz	r5, 8002b12 <HAL_UART_IRQHandler+0x66>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002b0a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002b0c:	f043 0308 	orr.w	r3, r3, #8
 8002b10:	63e3      	str	r3, [r4, #60]	; 0x3c
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002b12:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d066      	beq.n	8002be6 <HAL_UART_IRQHandler+0x13a>
      if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002b18:	0695      	lsls	r5, r2, #26
 8002b1a:	d504      	bpl.n	8002b26 <HAL_UART_IRQHandler+0x7a>
 8002b1c:	0688      	lsls	r0, r1, #26
 8002b1e:	d502      	bpl.n	8002b26 <HAL_UART_IRQHandler+0x7a>
        UART_Receive_IT(huart);
 8002b20:	4620      	mov	r0, r4
 8002b22:	f7ff ff56 	bl	80029d2 <UART_Receive_IT>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002b26:	6823      	ldr	r3, [r4, #0]
        UART_EndRxTransfer(huart);
 8002b28:	4620      	mov	r0, r4
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002b2a:	695d      	ldr	r5, [r3, #20]
      if(((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002b2c:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8002b2e:	0711      	lsls	r1, r2, #28
 8002b30:	d402      	bmi.n	8002b38 <HAL_UART_IRQHandler+0x8c>
 8002b32:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 8002b36:	d01a      	beq.n	8002b6e <HAL_UART_IRQHandler+0xc2>
        UART_EndRxTransfer(huart);
 8002b38:	f7ff fdb6 	bl	80026a8 <UART_EndRxTransfer>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b3c:	6823      	ldr	r3, [r4, #0]
 8002b3e:	695a      	ldr	r2, [r3, #20]
 8002b40:	0652      	lsls	r2, r2, #25
 8002b42:	d510      	bpl.n	8002b66 <HAL_UART_IRQHandler+0xba>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002b44:	695a      	ldr	r2, [r3, #20]
          if(huart->hdmarx != NULL)
 8002b46:	6b60      	ldr	r0, [r4, #52]	; 0x34
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002b48:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002b4c:	615a      	str	r2, [r3, #20]
          if(huart->hdmarx != NULL)
 8002b4e:	b150      	cbz	r0, 8002b66 <HAL_UART_IRQHandler+0xba>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002b50:	4b25      	ldr	r3, [pc, #148]	; (8002be8 <HAL_UART_IRQHandler+0x13c>)
 8002b52:	6343      	str	r3, [r0, #52]	; 0x34
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002b54:	f7fe ff84 	bl	8001a60 <HAL_DMA_Abort_IT>
 8002b58:	2800      	cmp	r0, #0
 8002b5a:	d044      	beq.n	8002be6 <HAL_UART_IRQHandler+0x13a>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002b5c:	6b60      	ldr	r0, [r4, #52]	; 0x34
}
 8002b5e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002b62:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002b64:	4718      	bx	r3
            HAL_UART_ErrorCallback(huart);
 8002b66:	4620      	mov	r0, r4
 8002b68:	f7ff ff77 	bl	8002a5a <HAL_UART_ErrorCallback>
 8002b6c:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_ErrorCallback(huart);
 8002b6e:	f7ff ff74 	bl	8002a5a <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b72:	63e5      	str	r5, [r4, #60]	; 0x3c
 8002b74:	bd70      	pop	{r4, r5, r6, pc}
  if(((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002b76:	0616      	lsls	r6, r2, #24
 8002b78:	d527      	bpl.n	8002bca <HAL_UART_IRQHandler+0x11e>
 8002b7a:	060d      	lsls	r5, r1, #24
 8002b7c:	d525      	bpl.n	8002bca <HAL_UART_IRQHandler+0x11e>
  if(huart->gState == HAL_UART_STATE_BUSY_TX)
 8002b7e:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 8002b82:	2a21      	cmp	r2, #33	; 0x21
 8002b84:	d12f      	bne.n	8002be6 <HAL_UART_IRQHandler+0x13a>
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002b86:	68a2      	ldr	r2, [r4, #8]
 8002b88:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8002b8c:	6a22      	ldr	r2, [r4, #32]
 8002b8e:	d117      	bne.n	8002bc0 <HAL_UART_IRQHandler+0x114>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002b90:	8811      	ldrh	r1, [r2, #0]
 8002b92:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8002b96:	6059      	str	r1, [r3, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 8002b98:	6921      	ldr	r1, [r4, #16]
 8002b9a:	b979      	cbnz	r1, 8002bbc <HAL_UART_IRQHandler+0x110>
        huart->pTxBuffPtr += 2U;
 8002b9c:	3202      	adds	r2, #2
        huart->pTxBuffPtr += 1U;
 8002b9e:	6222      	str	r2, [r4, #32]
    if(--huart->TxXferCount == 0U)
 8002ba0:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 8002ba2:	3a01      	subs	r2, #1
 8002ba4:	b292      	uxth	r2, r2
 8002ba6:	84e2      	strh	r2, [r4, #38]	; 0x26
 8002ba8:	b9ea      	cbnz	r2, 8002be6 <HAL_UART_IRQHandler+0x13a>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002baa:	68da      	ldr	r2, [r3, #12]
 8002bac:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002bb0:	60da      	str	r2, [r3, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002bb2:	68da      	ldr	r2, [r3, #12]
 8002bb4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002bb8:	60da      	str	r2, [r3, #12]
 8002bba:	bd70      	pop	{r4, r5, r6, pc}
        huart->pTxBuffPtr += 1U;
 8002bbc:	3201      	adds	r2, #1
 8002bbe:	e7ee      	b.n	8002b9e <HAL_UART_IRQHandler+0xf2>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002bc0:	1c51      	adds	r1, r2, #1
 8002bc2:	6221      	str	r1, [r4, #32]
 8002bc4:	7812      	ldrb	r2, [r2, #0]
 8002bc6:	605a      	str	r2, [r3, #4]
 8002bc8:	e7ea      	b.n	8002ba0 <HAL_UART_IRQHandler+0xf4>
  if(((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002bca:	0650      	lsls	r0, r2, #25
 8002bcc:	d50b      	bpl.n	8002be6 <HAL_UART_IRQHandler+0x13a>
 8002bce:	064a      	lsls	r2, r1, #25
 8002bd0:	d509      	bpl.n	8002be6 <HAL_UART_IRQHandler+0x13a>
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002bd2:	68da      	ldr	r2, [r3, #12]
  HAL_UART_TxCpltCallback(huart);
 8002bd4:	4620      	mov	r0, r4
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002bd6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002bda:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 8002bdc:	2320      	movs	r3, #32
 8002bde:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 8002be2:	f7fe fabf 	bl	8001164 <HAL_UART_TxCpltCallback>
 8002be6:	bd70      	pop	{r4, r5, r6, pc}
 8002be8:	08002bed 	.word	0x08002bed

08002bec <UART_DMAAbortOnError>:
{
 8002bec:	b508      	push	{r3, lr}
  huart->RxXferCount = 0x00U;
 8002bee:	2300      	movs	r3, #0
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002bf0:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0x00U;
 8002bf2:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002bf4:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 8002bf6:	f7ff ff30 	bl	8002a5a <HAL_UART_ErrorCallback>
 8002bfa:	bd08      	pop	{r3, pc}

08002bfc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8002bfc:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8002bfe:	e003      	b.n	8002c08 <LoopCopyDataInit>

08002c00 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8002c00:	4b0b      	ldr	r3, [pc, #44]	; (8002c30 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8002c02:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8002c04:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8002c06:	3104      	adds	r1, #4

08002c08 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8002c08:	480a      	ldr	r0, [pc, #40]	; (8002c34 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8002c0a:	4b0b      	ldr	r3, [pc, #44]	; (8002c38 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8002c0c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8002c0e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8002c10:	d3f6      	bcc.n	8002c00 <CopyDataInit>
  ldr r2, =_sbss
 8002c12:	4a0a      	ldr	r2, [pc, #40]	; (8002c3c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8002c14:	e002      	b.n	8002c1c <LoopFillZerobss>

08002c16 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8002c16:	2300      	movs	r3, #0
  str r3, [r2], #4
 8002c18:	f842 3b04 	str.w	r3, [r2], #4

08002c1c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8002c1c:	4b08      	ldr	r3, [pc, #32]	; (8002c40 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8002c1e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8002c20:	d3f9      	bcc.n	8002c16 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002c22:	f7fe fdc3 	bl	80017ac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002c26:	f000 f80f 	bl	8002c48 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002c2a:	f7fe fab7 	bl	800119c <main>
  bx lr
 8002c2e:	4770      	bx	lr
  ldr r3, =_sidata
 8002c30:	08002fb0 	.word	0x08002fb0
  ldr r0, =_sdata
 8002c34:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8002c38:	20000100 	.word	0x20000100
  ldr r2, =_sbss
 8002c3c:	20000100 	.word	0x20000100
  ldr r3, = _ebss
 8002c40:	20000634 	.word	0x20000634

08002c44 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002c44:	e7fe      	b.n	8002c44 <ADC1_2_IRQHandler>
	...

08002c48 <__libc_init_array>:
 8002c48:	b570      	push	{r4, r5, r6, lr}
 8002c4a:	2500      	movs	r5, #0
 8002c4c:	4e0c      	ldr	r6, [pc, #48]	; (8002c80 <__libc_init_array+0x38>)
 8002c4e:	4c0d      	ldr	r4, [pc, #52]	; (8002c84 <__libc_init_array+0x3c>)
 8002c50:	1ba4      	subs	r4, r4, r6
 8002c52:	10a4      	asrs	r4, r4, #2
 8002c54:	42a5      	cmp	r5, r4
 8002c56:	d109      	bne.n	8002c6c <__libc_init_array+0x24>
 8002c58:	f000 f882 	bl	8002d60 <_init>
 8002c5c:	2500      	movs	r5, #0
 8002c5e:	4e0a      	ldr	r6, [pc, #40]	; (8002c88 <__libc_init_array+0x40>)
 8002c60:	4c0a      	ldr	r4, [pc, #40]	; (8002c8c <__libc_init_array+0x44>)
 8002c62:	1ba4      	subs	r4, r4, r6
 8002c64:	10a4      	asrs	r4, r4, #2
 8002c66:	42a5      	cmp	r5, r4
 8002c68:	d105      	bne.n	8002c76 <__libc_init_array+0x2e>
 8002c6a:	bd70      	pop	{r4, r5, r6, pc}
 8002c6c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002c70:	4798      	blx	r3
 8002c72:	3501      	adds	r5, #1
 8002c74:	e7ee      	b.n	8002c54 <__libc_init_array+0xc>
 8002c76:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002c7a:	4798      	blx	r3
 8002c7c:	3501      	adds	r5, #1
 8002c7e:	e7f2      	b.n	8002c66 <__libc_init_array+0x1e>
 8002c80:	08002fa4 	.word	0x08002fa4
 8002c84:	08002fa4 	.word	0x08002fa4
 8002c88:	08002fa4 	.word	0x08002fa4
 8002c8c:	08002fac 	.word	0x08002fac

08002c90 <abort>:
 8002c90:	b508      	push	{r3, lr}
 8002c92:	2006      	movs	r0, #6
 8002c94:	f000 f836 	bl	8002d04 <raise>
 8002c98:	2001      	movs	r0, #1
 8002c9a:	f000 f85f 	bl	8002d5c <_exit>

08002c9e <memcpy>:
 8002c9e:	b510      	push	{r4, lr}
 8002ca0:	1e43      	subs	r3, r0, #1
 8002ca2:	440a      	add	r2, r1
 8002ca4:	4291      	cmp	r1, r2
 8002ca6:	d100      	bne.n	8002caa <memcpy+0xc>
 8002ca8:	bd10      	pop	{r4, pc}
 8002caa:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002cae:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002cb2:	e7f7      	b.n	8002ca4 <memcpy+0x6>

08002cb4 <_raise_r>:
 8002cb4:	291f      	cmp	r1, #31
 8002cb6:	b538      	push	{r3, r4, r5, lr}
 8002cb8:	4604      	mov	r4, r0
 8002cba:	460d      	mov	r5, r1
 8002cbc:	d904      	bls.n	8002cc8 <_raise_r+0x14>
 8002cbe:	2316      	movs	r3, #22
 8002cc0:	6003      	str	r3, [r0, #0]
 8002cc2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002cc6:	bd38      	pop	{r3, r4, r5, pc}
 8002cc8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8002cca:	b112      	cbz	r2, 8002cd2 <_raise_r+0x1e>
 8002ccc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8002cd0:	b94b      	cbnz	r3, 8002ce6 <_raise_r+0x32>
 8002cd2:	4620      	mov	r0, r4
 8002cd4:	f000 f830 	bl	8002d38 <_getpid_r>
 8002cd8:	462a      	mov	r2, r5
 8002cda:	4601      	mov	r1, r0
 8002cdc:	4620      	mov	r0, r4
 8002cde:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002ce2:	f000 b817 	b.w	8002d14 <_kill_r>
 8002ce6:	2b01      	cmp	r3, #1
 8002ce8:	d00a      	beq.n	8002d00 <_raise_r+0x4c>
 8002cea:	1c59      	adds	r1, r3, #1
 8002cec:	d103      	bne.n	8002cf6 <_raise_r+0x42>
 8002cee:	2316      	movs	r3, #22
 8002cf0:	6003      	str	r3, [r0, #0]
 8002cf2:	2001      	movs	r0, #1
 8002cf4:	bd38      	pop	{r3, r4, r5, pc}
 8002cf6:	2400      	movs	r4, #0
 8002cf8:	4628      	mov	r0, r5
 8002cfa:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8002cfe:	4798      	blx	r3
 8002d00:	2000      	movs	r0, #0
 8002d02:	bd38      	pop	{r3, r4, r5, pc}

08002d04 <raise>:
 8002d04:	4b02      	ldr	r3, [pc, #8]	; (8002d10 <raise+0xc>)
 8002d06:	4601      	mov	r1, r0
 8002d08:	6818      	ldr	r0, [r3, #0]
 8002d0a:	f7ff bfd3 	b.w	8002cb4 <_raise_r>
 8002d0e:	bf00      	nop
 8002d10:	2000000c 	.word	0x2000000c

08002d14 <_kill_r>:
 8002d14:	b538      	push	{r3, r4, r5, lr}
 8002d16:	2300      	movs	r3, #0
 8002d18:	4c06      	ldr	r4, [pc, #24]	; (8002d34 <_kill_r+0x20>)
 8002d1a:	4605      	mov	r5, r0
 8002d1c:	4608      	mov	r0, r1
 8002d1e:	4611      	mov	r1, r2
 8002d20:	6023      	str	r3, [r4, #0]
 8002d22:	f000 f813 	bl	8002d4c <_kill>
 8002d26:	1c43      	adds	r3, r0, #1
 8002d28:	d102      	bne.n	8002d30 <_kill_r+0x1c>
 8002d2a:	6823      	ldr	r3, [r4, #0]
 8002d2c:	b103      	cbz	r3, 8002d30 <_kill_r+0x1c>
 8002d2e:	602b      	str	r3, [r5, #0]
 8002d30:	bd38      	pop	{r3, r4, r5, pc}
 8002d32:	bf00      	nop
 8002d34:	20000630 	.word	0x20000630

08002d38 <_getpid_r>:
 8002d38:	f000 b800 	b.w	8002d3c <_getpid>

08002d3c <_getpid>:
 8002d3c:	2258      	movs	r2, #88	; 0x58
 8002d3e:	4b02      	ldr	r3, [pc, #8]	; (8002d48 <_getpid+0xc>)
 8002d40:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002d44:	601a      	str	r2, [r3, #0]
 8002d46:	4770      	bx	lr
 8002d48:	20000630 	.word	0x20000630

08002d4c <_kill>:
 8002d4c:	2258      	movs	r2, #88	; 0x58
 8002d4e:	4b02      	ldr	r3, [pc, #8]	; (8002d58 <_kill+0xc>)
 8002d50:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002d54:	601a      	str	r2, [r3, #0]
 8002d56:	4770      	bx	lr
 8002d58:	20000630 	.word	0x20000630

08002d5c <_exit>:
 8002d5c:	e7fe      	b.n	8002d5c <_exit>
	...

08002d60 <_init>:
 8002d60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d62:	bf00      	nop
 8002d64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d66:	bc08      	pop	{r3}
 8002d68:	469e      	mov	lr, r3
 8002d6a:	4770      	bx	lr

08002d6c <_fini>:
 8002d6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d6e:	bf00      	nop
 8002d70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d72:	bc08      	pop	{r3}
 8002d74:	469e      	mov	lr, r3
 8002d76:	4770      	bx	lr
