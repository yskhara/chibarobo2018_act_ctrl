
cr18_act_ctrl.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bb98  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000086c  0800bca8  0800bca8  0001bca8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    000000a8  0800c514  0800c514  0001c514  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM          00000208  0800c5bc  0800c5bc  0001c5bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .init_array   00000008  0800c7c4  0800c7c4  0001c7c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .fini_array   00000004  0800c7cc  0800c7cc  0001c7cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .data         0000051c  20000000  0800c7d0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .bss          000016f8  20000520  0800ccec  00020520  2**3
                  ALLOC
  9 ._user_heap_stack 00000600  20001c18  0800ccec  00021c18  2**0
                  ALLOC
 10 .ARM.attributes 00000029  00000000  00000000  0002051c  2**0
                  CONTENTS, READONLY
 11 .debug_line   00006850  00000000  00000000  00020545  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    0000788c  00000000  00000000  00026d95  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .comment      0000007c  00000000  00000000  0002e621  2**0
                  CONTENTS, READONLY
 14 .debug_info   00021563  00000000  00000000  0002e69d  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_abbrev 00004289  00000000  00000000  0004fc00  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_loc    0000b2f8  00000000  00000000  00053e89  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_aranges 00000480  00000000  00000000  0005f188  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_ranges 000006d0  00000000  00000000  0005f608  2**3
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_frame  00003648  00000000  00000000  0005fcd8  2**2
                  CONTENTS, READONLY, DEBUGGING
 20 .stab         0000003c  00000000  00000000  00063320  2**2
                  CONTENTS, READONLY, DEBUGGING
 21 .stabstr      00000076  00000000  00000000  0006335c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000520 	.word	0x20000520
 800012c:	00000000 	.word	0x00000000
 8000130:	0800bc8c 	.word	0x0800bc8c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000524 	.word	0x20000524
 800014c:	0800bc8c 	.word	0x0800bc8c

08000150 <_Z22hand_cylinder_callbackRKN8std_msgs4BoolE>:
    last_cmd_time = HAL_GetTick();
}

void hand_cylinder_callback(const std_msgs::Bool& hand_cylinder_msg)
{
    if(!is_actuators_enabled)
 8000150:	4b07      	ldr	r3, [pc, #28]	; (8000170 <_Z22hand_cylinder_callbackRKN8std_msgs4BoolE+0x20>)
 8000152:	781b      	ldrb	r3, [r3, #0]
 8000154:	b12b      	cbz	r3, 8000162 <_Z22hand_cylinder_callbackRKN8std_msgs4BoolE+0x12>
    {
        return;
    }

    if(hand_cylinder_msg.data)
 8000156:	7903      	ldrb	r3, [r0, #4]
 8000158:	b923      	cbnz	r3, 8000164 <_Z22hand_cylinder_callbackRKN8std_msgs4BoolE+0x14>
    {
        GPIOB->BSRR = GPIO_BSRR_BS15;
    }
    else
    {
        GPIOB->BSRR = GPIO_BSRR_BR15;
 800015a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800015e:	4b05      	ldr	r3, [pc, #20]	; (8000174 <_Z22hand_cylinder_callbackRKN8std_msgs4BoolE+0x24>)
 8000160:	611a      	str	r2, [r3, #16]
 8000162:	4770      	bx	lr
        GPIOB->BSRR = GPIO_BSRR_BS15;
 8000164:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000168:	4b02      	ldr	r3, [pc, #8]	; (8000174 <_Z22hand_cylinder_callbackRKN8std_msgs4BoolE+0x24>)
 800016a:	611a      	str	r2, [r3, #16]
 800016c:	4770      	bx	lr
 800016e:	bf00      	nop
 8000170:	2000053c 	.word	0x2000053c
 8000174:	40010c00 	.word	0x40010c00

08000178 <_ZL12MX_GPIO_Initv>:
 * Output
 * EVENT_OUT
 * EXTI
 */
static void MX_GPIO_Init(void)
{
 8000178:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800017c:	b088      	sub	sp, #32

    /* GPIO Ports Clock Enable */
    __HAL_RCC_GPIOC_CLK_ENABLE()
 800017e:	4b3c      	ldr	r3, [pc, #240]	; (8000270 <_ZL12MX_GPIO_Initv+0xf8>)
 8000180:	699a      	ldr	r2, [r3, #24]
 8000182:	f042 0210 	orr.w	r2, r2, #16
 8000186:	619a      	str	r2, [r3, #24]
 8000188:	699a      	ldr	r2, [r3, #24]
 800018a:	f002 0210 	and.w	r2, r2, #16
 800018e:	9200      	str	r2, [sp, #0]
 8000190:	9a00      	ldr	r2, [sp, #0]
    ;
    __HAL_RCC_GPIOD_CLK_ENABLE()
 8000192:	699a      	ldr	r2, [r3, #24]
 8000194:	f042 0220 	orr.w	r2, r2, #32
 8000198:	619a      	str	r2, [r3, #24]
 800019a:	699a      	ldr	r2, [r3, #24]
 800019c:	f002 0220 	and.w	r2, r2, #32
 80001a0:	9201      	str	r2, [sp, #4]
 80001a2:	9a01      	ldr	r2, [sp, #4]
    ;
    __HAL_RCC_GPIOA_CLK_ENABLE()
 80001a4:	699a      	ldr	r2, [r3, #24]
 80001a6:	f042 0204 	orr.w	r2, r2, #4
 80001aa:	619a      	str	r2, [r3, #24]
 80001ac:	699a      	ldr	r2, [r3, #24]
 80001ae:	f002 0204 	and.w	r2, r2, #4
 80001b2:	9202      	str	r2, [sp, #8]
 80001b4:	9a02      	ldr	r2, [sp, #8]
    ;
    __HAL_RCC_GPIOB_CLK_ENABLE()
 80001b6:	699a      	ldr	r2, [r3, #24]
 80001b8:	f042 0208 	orr.w	r2, r2, #8
 80001bc:	619a      	str	r2, [r3, #24]
 80001be:	699b      	ldr	r3, [r3, #24]
 80001c0:	f003 0308 	and.w	r3, r3, #8
 80001c4:	9303      	str	r3, [sp, #12]
 80001c6:	9b03      	ldr	r3, [sp, #12]
    ;

    GPIO_InitTypeDef sGPIOConfig;

    // PA0 thru 8: stepper driver signal output
    sGPIOConfig.Mode = GPIO_MODE_OUTPUT_PP;
 80001c8:	2701      	movs	r7, #1
 80001ca:	9705      	str	r7, [sp, #20]
    sGPIOConfig.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7
 80001cc:	f240 13ff 	movw	r3, #511	; 0x1ff
 80001d0:	9304      	str	r3, [sp, #16]
            | GPIO_PIN_8;
    sGPIOConfig.Pull = GPIO_NOPULL;
 80001d2:	2500      	movs	r5, #0
 80001d4:	9506      	str	r5, [sp, #24]
    sGPIOConfig.Speed = GPIO_SPEED_FREQ_HIGH;
 80001d6:	2403      	movs	r4, #3
 80001d8:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(GPIOA, &sGPIOConfig);
 80001da:	a904      	add	r1, sp, #16
 80001dc:	4825      	ldr	r0, [pc, #148]	; (8000274 <_ZL12MX_GPIO_Initv+0xfc>)
 80001de:	f002 ff83 	bl	80030e8 <HAL_GPIO_Init>

    // PB0, PB1: LED output
    sGPIOConfig.Mode = GPIO_MODE_OUTPUT_PP;
 80001e2:	9705      	str	r7, [sp, #20]
    sGPIOConfig.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 80001e4:	9404      	str	r4, [sp, #16]
    sGPIOConfig.Pull = GPIO_NOPULL;
 80001e6:	9506      	str	r5, [sp, #24]
    sGPIOConfig.Speed = GPIO_SPEED_FREQ_HIGH;
 80001e8:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(GPIOB, &sGPIOConfig);
 80001ea:	f8df 8098 	ldr.w	r8, [pc, #152]	; 8000284 <_ZL12MX_GPIO_Initv+0x10c>
 80001ee:	a904      	add	r1, sp, #16
 80001f0:	4640      	mov	r0, r8
 80001f2:	f002 ff79 	bl	80030e8 <HAL_GPIO_Init>

    // PB3: nES input, active-L
    sGPIOConfig.Mode = GPIO_MODE_IT_RISING_FALLING;
 80001f6:	4b20      	ldr	r3, [pc, #128]	; (8000278 <_ZL12MX_GPIO_Initv+0x100>)
 80001f8:	9305      	str	r3, [sp, #20]
    sGPIOConfig.Pin = GPIO_PIN_3;
 80001fa:	2308      	movs	r3, #8
 80001fc:	9304      	str	r3, [sp, #16]
    sGPIOConfig.Pull = GPIO_PULLDOWN;
 80001fe:	2602      	movs	r6, #2
 8000200:	9606      	str	r6, [sp, #24]
    sGPIOConfig.Speed = GPIO_SPEED_FREQ_HIGH;
 8000202:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(GPIOB, &sGPIOConfig);
 8000204:	a904      	add	r1, sp, #16
 8000206:	4640      	mov	r0, r8
 8000208:	f002 ff6e 	bl	80030e8 <HAL_GPIO_Init>

    //  PB4: START input, active-H
    sGPIOConfig.Mode = GPIO_MODE_IT_RISING;
 800020c:	4b1b      	ldr	r3, [pc, #108]	; (800027c <_ZL12MX_GPIO_Initv+0x104>)
 800020e:	9305      	str	r3, [sp, #20]
    sGPIOConfig.Pin = GPIO_PIN_4;
 8000210:	2310      	movs	r3, #16
 8000212:	9304      	str	r3, [sp, #16]
    sGPIOConfig.Pull = GPIO_PULLDOWN;
 8000214:	9606      	str	r6, [sp, #24]
    sGPIOConfig.Speed = GPIO_SPEED_FREQ_HIGH;
 8000216:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(GPIOB, &sGPIOConfig);
 8000218:	eb0d 0103 	add.w	r1, sp, r3
 800021c:	4640      	mov	r0, r8
 800021e:	f002 ff63 	bl	80030e8 <HAL_GPIO_Init>

    //  PB15: pneumatic solenoid valve output
    sGPIOConfig.Mode = GPIO_MODE_OUTPUT_PP;
 8000222:	9705      	str	r7, [sp, #20]
    sGPIOConfig.Pin = GPIO_PIN_15;
 8000224:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000228:	9304      	str	r3, [sp, #16]
    sGPIOConfig.Pull = GPIO_PULLDOWN;
 800022a:	9606      	str	r6, [sp, #24]
    sGPIOConfig.Speed = GPIO_SPEED_FREQ_HIGH;
 800022c:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(GPIOB, &sGPIOConfig);
 800022e:	a904      	add	r1, sp, #16
 8000230:	4640      	mov	r0, r8
 8000232:	f002 ff59 	bl	80030e8 <HAL_GPIO_Init>

    // PC13: onboard LED output
    sGPIOConfig.Mode = GPIO_MODE_OUTPUT_PP;
 8000236:	9705      	str	r7, [sp, #20]
    sGPIOConfig.Pin = GPIO_PIN_13;
 8000238:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800023c:	9304      	str	r3, [sp, #16]
    sGPIOConfig.Pull = GPIO_NOPULL;
 800023e:	9506      	str	r5, [sp, #24]
    sGPIOConfig.Speed = GPIO_SPEED_FREQ_HIGH;
 8000240:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(GPIOC, &sGPIOConfig);
 8000242:	a904      	add	r1, sp, #16
 8000244:	480e      	ldr	r0, [pc, #56]	; (8000280 <_ZL12MX_GPIO_Initv+0x108>)
 8000246:	f002 ff4f 	bl	80030e8 <HAL_GPIO_Init>

    /* EXTI interrupt init*/
    HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 800024a:	462a      	mov	r2, r5
 800024c:	4629      	mov	r1, r5
 800024e:	2009      	movs	r0, #9
 8000250:	f001 fe66 	bl	8001f20 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8000254:	2009      	movs	r0, #9
 8000256:	f001 fe95 	bl	8001f84 <HAL_NVIC_EnableIRQ>

    HAL_NVIC_SetPriority(EXTI4_IRQn, 2, 0);
 800025a:	462a      	mov	r2, r5
 800025c:	4631      	mov	r1, r6
 800025e:	200a      	movs	r0, #10
 8000260:	f001 fe5e 	bl	8001f20 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8000264:	200a      	movs	r0, #10
 8000266:	f001 fe8d 	bl	8001f84 <HAL_NVIC_EnableIRQ>
}
 800026a:	b008      	add	sp, #32
 800026c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000270:	40021000 	.word	0x40021000
 8000274:	40010800 	.word	0x40010800
 8000278:	10310000 	.word	0x10310000
 800027c:	10110000 	.word	0x10110000
 8000280:	40011000 	.word	0x40011000
 8000284:	40010c00 	.word	0x40010c00

08000288 <_ZL11MX_DMA_Initv>:
{
 8000288:	b500      	push	{lr}
 800028a:	b083      	sub	sp, #12
    __HAL_RCC_DMA1_CLK_ENABLE()
 800028c:	4b0e      	ldr	r3, [pc, #56]	; (80002c8 <_ZL11MX_DMA_Initv+0x40>)
 800028e:	695a      	ldr	r2, [r3, #20]
 8000290:	f042 0201 	orr.w	r2, r2, #1
 8000294:	615a      	str	r2, [r3, #20]
 8000296:	695b      	ldr	r3, [r3, #20]
 8000298:	f003 0301 	and.w	r3, r3, #1
 800029c:	9301      	str	r3, [sp, #4]
 800029e:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 1, 1);
 80002a0:	2201      	movs	r2, #1
 80002a2:	4611      	mov	r1, r2
 80002a4:	200e      	movs	r0, #14
 80002a6:	f001 fe3b 	bl	8001f20 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 80002aa:	200e      	movs	r0, #14
 80002ac:	f001 fe6a 	bl	8001f84 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 1, 1);
 80002b0:	2201      	movs	r2, #1
 80002b2:	4611      	mov	r1, r2
 80002b4:	200f      	movs	r0, #15
 80002b6:	f001 fe33 	bl	8001f20 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80002ba:	200f      	movs	r0, #15
 80002bc:	f001 fe62 	bl	8001f84 <HAL_NVIC_EnableIRQ>
}
 80002c0:	b003      	add	sp, #12
 80002c2:	f85d fb04 	ldr.w	pc, [sp], #4
 80002c6:	bf00      	nop
 80002c8:	40021000 	.word	0x40021000

080002cc <_Z22lift_position_callbackRKN8std_msgs5Int32E>:
{
 80002cc:	b508      	push	{r3, lr}
    stepper_lift.set_target_position(lift_pos_msg.data);
 80002ce:	6841      	ldr	r1, [r0, #4]
 80002d0:	4801      	ldr	r0, [pc, #4]	; (80002d8 <_Z22lift_position_callbackRKN8std_msgs5Int32E+0xc>)
 80002d2:	f001 f8c7 	bl	8001464 <_ZN19StepperPositionCtrl19set_target_positionEi>
 80002d6:	bd08      	pop	{r3, pc}
 80002d8:	20000540 	.word	0x20000540

080002dc <_Z22feet_velocity_callbackRKN8std_msgs17Float32MultiArrayE>:
{
 80002dc:	b538      	push	{r3, r4, r5, lr}
    if(feet_vel_msg.data_length != 3)
 80002de:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80002e0:	2b03      	cmp	r3, #3
 80002e2:	d000      	beq.n	80002e6 <_Z22feet_velocity_callbackRKN8std_msgs17Float32MultiArrayE+0xa>
 80002e4:	bd38      	pop	{r3, r4, r5, pc}
 80002e6:	4604      	mov	r4, r0
    stepper_feet_a.set_target(feet_vel_msg.data[0]);
 80002e8:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80002ea:	4d0b      	ldr	r5, [pc, #44]	; (8000318 <_Z22feet_velocity_callbackRKN8std_msgs17Float32MultiArrayE+0x3c>)
 80002ec:	6819      	ldr	r1, [r3, #0]
 80002ee:	f105 00d4 	add.w	r0, r5, #212	; 0xd4
 80002f2:	f001 f967 	bl	80015c4 <_ZN19StepperVelocityCtrl10set_targetEf>
    stepper_feet_b.set_target(feet_vel_msg.data[1]);
 80002f6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80002f8:	6859      	ldr	r1, [r3, #4]
 80002fa:	f505 70ce 	add.w	r0, r5, #412	; 0x19c
 80002fe:	f001 f961 	bl	80015c4 <_ZN19StepperVelocityCtrl10set_targetEf>
    stepper_feet_c.set_target(feet_vel_msg.data[2]);
 8000302:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000304:	6899      	ldr	r1, [r3, #8]
 8000306:	f505 7019 	add.w	r0, r5, #612	; 0x264
 800030a:	f001 f95b 	bl	80015c4 <_ZN19StepperVelocityCtrl10set_targetEf>
    last_cmd_time = HAL_GetTick();
 800030e:	f001 fd5d 	bl	8001dcc <HAL_GetTick>
 8000312:	f8c5 032c 	str.w	r0, [r5, #812]	; 0x32c
 8000316:	e7e5      	b.n	80002e4 <_Z22feet_velocity_callbackRKN8std_msgs17Float32MultiArrayE+0x8>
 8000318:	2000053c 	.word	0x2000053c

0800031c <_Z41__static_initialization_and_destruction_0ii>:
    /* User can add his own implementation to report the HAL error return state */
    while (1)
    {
    }
    /* USER CODE END Error_Handler_Debug */
}
 800031c:	2801      	cmp	r0, #1
 800031e:	d000      	beq.n	8000322 <_Z41__static_initialization_and_destruction_0ii+0x6>
 8000320:	4770      	bx	lr
 8000322:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000326:	4299      	cmp	r1, r3
 8000328:	d1fa      	bne.n	8000320 <_Z41__static_initialization_and_destruction_0ii+0x4>
 800032a:	b570      	push	{r4, r5, r6, lr}
 800032c:	b082      	sub	sp, #8
	uint16_t tx_head = 0;
	uint16_t tx_tail = 0;
	UART_HandleTypeDef &huart;

public:
	SerialClass(UART_HandleTypeDef &huart) : huart(huart)
 800032e:	4d77      	ldr	r5, [pc, #476]	; (800050c <_Z41__static_initialization_and_destruction_0ii+0x1f0>)
 8000330:	2201      	movs	r2, #1
 8000332:	f885 2b30 	strb.w	r2, [r5, #2864]	; 0xb30
 8000336:	2400      	movs	r4, #0
 8000338:	f8a5 4b32 	strh.w	r4, [r5, #2866]	; 0xb32
 800033c:	f8a5 4b34 	strh.w	r4, [r5, #2868]	; 0xb34
 8000340:	f8a5 4b36 	strh.w	r4, [r5, #2870]	; 0xb36
 8000344:	f605 333c 	addw	r3, r5, #2876	; 0xb3c
 8000348:	f8c5 3b38 	str.w	r3, [r5, #2872]	; 0xb38
StepperVelocityCtrl stepper_feet_a(GPIOA, GPIO_PIN_0, GPIOA, GPIO_PIN_1);
 800034c:	4e70      	ldr	r6, [pc, #448]	; (8000510 <_Z41__static_initialization_and_destruction_0ii+0x1f4>)
 800034e:	2302      	movs	r3, #2
 8000350:	9300      	str	r3, [sp, #0]
 8000352:	4633      	mov	r3, r6
 8000354:	4631      	mov	r1, r6
 8000356:	f105 00d4 	add.w	r0, r5, #212	; 0xd4
 800035a:	f001 f88d 	bl	8001478 <_ZN19StepperVelocityCtrlC1EP12GPIO_TypeDeftS1_t>
StepperVelocityCtrl stepper_feet_b(GPIOA, GPIO_PIN_2, GPIOA, GPIO_PIN_3);
 800035e:	2308      	movs	r3, #8
 8000360:	9300      	str	r3, [sp, #0]
 8000362:	4633      	mov	r3, r6
 8000364:	2204      	movs	r2, #4
 8000366:	4631      	mov	r1, r6
 8000368:	f505 70ce 	add.w	r0, r5, #412	; 0x19c
 800036c:	f001 f884 	bl	8001478 <_ZN19StepperVelocityCtrlC1EP12GPIO_TypeDeftS1_t>
StepperVelocityCtrl stepper_feet_c(GPIOA, GPIO_PIN_4, GPIOA, GPIO_PIN_5);
 8000370:	2320      	movs	r3, #32
 8000372:	9300      	str	r3, [sp, #0]
 8000374:	4633      	mov	r3, r6
 8000376:	2210      	movs	r2, #16
 8000378:	4631      	mov	r1, r6
 800037a:	f505 7019 	add.w	r0, r5, #612	; 0x264
 800037e:	f001 f87b 	bl	8001478 <_ZN19StepperVelocityCtrlC1EP12GPIO_TypeDeftS1_t>
StepperPositionCtrl stepper_lift(GPIOA, GPIO_PIN_6, GPIOA, GPIO_PIN_7);
 8000382:	2380      	movs	r3, #128	; 0x80
 8000384:	9300      	str	r3, [sp, #0]
 8000386:	4633      	mov	r3, r6
 8000388:	2240      	movs	r2, #64	; 0x40
 800038a:	4631      	mov	r1, r6
 800038c:	1d28      	adds	r0, r5, #4
 800038e:	f000 feff 	bl	8001190 <_ZN19StepperPositionCtrlC1EP12GPIO_TypeDeftS1_t>

  /*
   * Setup Functions
   */
public:
  NodeHandle_() : configured_(false)
 8000392:	4b60      	ldr	r3, [pc, #384]	; (8000514 <_Z41__static_initialization_and_destruction_0ii+0x1f8>)
 8000394:	f8c5 3b7c 	str.w	r3, [r5, #2940]	; 0xb7c

class STM32Hardware
{
public:
	STM32Hardware() :
			com(&serial)
 8000398:	f505 734c 	add.w	r3, r5, #816	; 0x330
 800039c:	f8c5 3b80 	str.w	r3, [r5, #2944]	; 0xb80
 80003a0:	f241 4370 	movw	r3, #5232	; 0x1470
 80003a4:	54ec      	strb	r4, [r5, r3]
      _strings_type * strings;

    RequestParamResponse():
      ints_length(0), ints(NULL),
      floats_length(0), floats(NULL),
      strings_length(0), strings(NULL)
 80003a6:	4a5c      	ldr	r2, [pc, #368]	; (8000518 <_Z41__static_initialization_and_destruction_0ii+0x1fc>)
 80003a8:	f241 4384 	movw	r3, #5252	; 0x1484
 80003ac:	50ea      	str	r2, [r5, r3]
 80003ae:	f241 4388 	movw	r3, #5256	; 0x1488
 80003b2:	50ec      	str	r4, [r5, r3]
 80003b4:	f241 4390 	movw	r3, #5264	; 0x1490
 80003b8:	50ec      	str	r4, [r5, r3]
 80003ba:	f241 4394 	movw	r3, #5268	; 0x1494
 80003be:	50ec      	str	r4, [r5, r3]
 80003c0:	f241 439c 	movw	r3, #5276	; 0x149c
 80003c4:	50ec      	str	r4, [r5, r3]
 80003c6:	f505 53a5 	add.w	r3, r5, #5280	; 0x14a0
 80003ca:	601c      	str	r4, [r3, #0]
 80003cc:	f241 43a8 	movw	r3, #5288	; 0x14a8
 80003d0:	50ec      	str	r4, [r5, r3]
  {

    for (unsigned int i = 0; i < MAX_PUBLISHERS; i++)
 80003d2:	4623      	mov	r3, r4
 80003d4:	2b18      	cmp	r3, #24
 80003d6:	d809      	bhi.n	80003ec <_Z41__static_initialization_and_destruction_0ii+0xd0>
      publishers[i] = 0;
 80003d8:	f203 2106 	addw	r1, r3, #518	; 0x206
 80003dc:	4a4b      	ldr	r2, [pc, #300]	; (800050c <_Z41__static_initialization_and_destruction_0ii+0x1f0>)
 80003de:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 80003e2:	2100      	movs	r1, #0
 80003e4:	f8c2 1b7c 	str.w	r1, [r2, #2940]	; 0xb7c
    for (unsigned int i = 0; i < MAX_PUBLISHERS; i++)
 80003e8:	3301      	adds	r3, #1
 80003ea:	e7f3      	b.n	80003d4 <_Z41__static_initialization_and_destruction_0ii+0xb8>
 80003ec:	2300      	movs	r3, #0

    for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++)
 80003ee:	2b18      	cmp	r3, #24
 80003f0:	d809      	bhi.n	8000406 <_Z41__static_initialization_and_destruction_0ii+0xea>
      subscribers[i] = 0;
 80003f2:	f203 211e 	addw	r1, r3, #542	; 0x21e
 80003f6:	4a45      	ldr	r2, [pc, #276]	; (800050c <_Z41__static_initialization_and_destruction_0ii+0x1f0>)
 80003f8:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 80003fc:	2100      	movs	r1, #0
 80003fe:	f8c2 1b80 	str.w	r1, [r2, #2944]	; 0xb80
    for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++)
 8000402:	3301      	adds	r3, #1
 8000404:	e7f3      	b.n	80003ee <_Z41__static_initialization_and_destruction_0ii+0xd2>
 8000406:	2300      	movs	r3, #0

    for (unsigned int i = 0; i < INPUT_SIZE; i++)
 8000408:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800040c:	d206      	bcs.n	800041c <_Z41__static_initialization_and_destruction_0ii+0x100>
      message_in[i] = 0;
 800040e:	4a3f      	ldr	r2, [pc, #252]	; (800050c <_Z41__static_initialization_and_destruction_0ii+0x1f0>)
 8000410:	441a      	add	r2, r3
 8000412:	2100      	movs	r1, #0
 8000414:	f882 1b94 	strb.w	r1, [r2, #2964]	; 0xb94
    for (unsigned int i = 0; i < INPUT_SIZE; i++)
 8000418:	3301      	adds	r3, #1
 800041a:	e7f5      	b.n	8000408 <_Z41__static_initialization_and_destruction_0ii+0xec>
 800041c:	2300      	movs	r3, #0

    for (unsigned int i = 0; i < OUTPUT_SIZE; i++)
 800041e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000422:	d206      	bcs.n	8000432 <_Z41__static_initialization_and_destruction_0ii+0x116>
      message_out[i] = 0;
 8000424:	4a39      	ldr	r2, [pc, #228]	; (800050c <_Z41__static_initialization_and_destruction_0ii+0x1f0>)
 8000426:	441a      	add	r2, r3
 8000428:	2100      	movs	r1, #0
 800042a:	f882 1f94 	strb.w	r1, [r2, #3988]	; 0xf94
    for (unsigned int i = 0; i < OUTPUT_SIZE; i++)
 800042e:	3301      	adds	r3, #1
 8000430:	e7f5      	b.n	800041e <_Z41__static_initialization_and_destruction_0ii+0x102>
    req_param_resp.floats_length = 0;
    req_param_resp.floats = NULL;
    req_param_resp.ints_length = 0;
    req_param_resp.ints = NULL;

    spin_timeout_ = 0;
 8000432:	4c36      	ldr	r4, [pc, #216]	; (800050c <_Z41__static_initialization_and_destruction_0ii+0x1f0>)
 8000434:	2200      	movs	r2, #0
 8000436:	f8c4 2b90 	str.w	r2, [r4, #2960]	; 0xb90
    public:
      typedef uint16_t _data_type;
      _data_type data;

    UInt16():
      data(0)
 800043a:	4b38      	ldr	r3, [pc, #224]	; (800051c <_Z41__static_initialization_and_destruction_0ii+0x200>)
 800043c:	4938      	ldr	r1, [pc, #224]	; (8000520 <_Z41__static_initialization_and_destruction_0ii+0x204>)
 800043e:	f8c3 13b4 	str.w	r1, [r3, #948]	; 0x3b4
 8000442:	f8a3 23b8 	strh.w	r2, [r3, #952]	; 0x3b8
{
public:
  Publisher(const char * topic_name, Msg * msg, int endpoint = rosserial_msgs::TopicInfo::ID_PUBLISHER) :
    topic_(topic_name),
    msg_(msg),
    endpoint_(endpoint) {};
 8000446:	4937      	ldr	r1, [pc, #220]	; (8000524 <_Z41__static_initialization_and_destruction_0ii+0x208>)
 8000448:	f8c3 13bc 	str.w	r1, [r3, #956]	; 0x3bc
 800044c:	f503 716d 	add.w	r1, r3, #948	; 0x3b4
 8000450:	f8c3 13c0 	str.w	r1, [r3, #960]	; 0x3c0
 8000454:	f8c3 23cc 	str.w	r2, [r3, #972]	; 0x3cc
  typedef void(*CallbackT)(const MsgT&);
  MsgT msg;

  Subscriber(const char * topic_name, CallbackT cb, int endpoint = rosserial_msgs::TopicInfo::ID_SUBSCRIBER) :
    cb_(cb),
    endpoint_(endpoint)
 8000458:	4d33      	ldr	r5, [pc, #204]	; (8000528 <_Z41__static_initialization_and_destruction_0ii+0x20c>)
 800045a:	f8c3 53d0 	str.w	r5, [r3, #976]	; 0x3d0
    public:
      typedef bool _data_type;
      _data_type data;

    Bool():
      data(0)
 800045e:	4833      	ldr	r0, [pc, #204]	; (800052c <_Z41__static_initialization_and_destruction_0ii+0x210>)
 8000460:	f8c3 03dc 	str.w	r0, [r3, #988]	; 0x3dc
 8000464:	f883 23e0 	strb.w	r2, [r3, #992]	; 0x3e0
 8000468:	4931      	ldr	r1, [pc, #196]	; (8000530 <_Z41__static_initialization_and_destruction_0ii+0x214>)
 800046a:	f8c3 13e4 	str.w	r1, [r3, #996]	; 0x3e4
 800046e:	2101      	movs	r1, #1
 8000470:	f8c3 13e8 	str.w	r1, [r3, #1000]	; 0x3e8
  {
    topic_ = topic_name;
 8000474:	4e2f      	ldr	r6, [pc, #188]	; (8000534 <_Z41__static_initialization_and_destruction_0ii+0x218>)
 8000476:	f8c3 63d8 	str.w	r6, [r3, #984]	; 0x3d8
    endpoint_(endpoint)
 800047a:	4e2f      	ldr	r6, [pc, #188]	; (8000538 <_Z41__static_initialization_and_destruction_0ii+0x21c>)
 800047c:	f8c3 63ec 	str.w	r6, [r3, #1004]	; 0x3ec
    public:
      typedef int32_t _data_type;
      _data_type data;

    Int32():
      data(0)
 8000480:	4e2e      	ldr	r6, [pc, #184]	; (800053c <_Z41__static_initialization_and_destruction_0ii+0x220>)
 8000482:	f8c3 63f8 	str.w	r6, [r3, #1016]	; 0x3f8
 8000486:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
 800048a:	4e2d      	ldr	r6, [pc, #180]	; (8000540 <_Z41__static_initialization_and_destruction_0ii+0x224>)
 800048c:	f8c3 6400 	str.w	r6, [r3, #1024]	; 0x400
 8000490:	f8c3 1404 	str.w	r1, [r3, #1028]	; 0x404
    topic_ = topic_name;
 8000494:	4e2b      	ldr	r6, [pc, #172]	; (8000544 <_Z41__static_initialization_and_destruction_0ii+0x228>)
 8000496:	f8c3 63f4 	str.w	r6, [r3, #1012]	; 0x3f4
    endpoint_(endpoint)
 800049a:	4e2b      	ldr	r6, [pc, #172]	; (8000548 <_Z41__static_initialization_and_destruction_0ii+0x22c>)
 800049c:	f8c3 6408 	str.w	r6, [r3, #1032]	; 0x408
      _data_type st_data;
      _data_type * data;

    Float32MultiArray():
      layout(),
      data_length(0), data(NULL)
 80004a0:	4e2a      	ldr	r6, [pc, #168]	; (800054c <_Z41__static_initialization_and_destruction_0ii+0x230>)
 80004a2:	f8c3 6414 	str.w	r6, [r3, #1044]	; 0x414
      typedef uint32_t _data_offset_type;
      _data_offset_type data_offset;

    MultiArrayLayout():
      dim_length(0), dim(NULL),
      data_offset(0)
 80004a6:	4e2a      	ldr	r6, [pc, #168]	; (8000550 <_Z41__static_initialization_and_destruction_0ii+0x234>)
 80004a8:	f8c3 6418 	str.w	r6, [r3, #1048]	; 0x418
 80004ac:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c
      _stride_type stride;

    MultiArrayDimension():
      label(""),
      size(0),
      stride(0)
 80004b0:	4e28      	ldr	r6, [pc, #160]	; (8000554 <_Z41__static_initialization_and_destruction_0ii+0x238>)
 80004b2:	f8c3 6420 	str.w	r6, [r3, #1056]	; 0x420
 80004b6:	4e28      	ldr	r6, [pc, #160]	; (8000558 <_Z41__static_initialization_and_destruction_0ii+0x23c>)
 80004b8:	f8c3 6424 	str.w	r6, [r3, #1060]	; 0x424
 80004bc:	f8c3 2428 	str.w	r2, [r3, #1064]	; 0x428
 80004c0:	f8c3 242c 	str.w	r2, [r3, #1068]	; 0x42c
 80004c4:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 80004c8:	f8c3 2434 	str.w	r2, [r3, #1076]	; 0x434
 80004cc:	f8c3 2438 	str.w	r2, [r3, #1080]	; 0x438
 80004d0:	f8c3 2440 	str.w	r2, [r3, #1088]	; 0x440
 80004d4:	4e21      	ldr	r6, [pc, #132]	; (800055c <_Z41__static_initialization_and_destruction_0ii+0x240>)
 80004d6:	f8c3 6444 	str.w	r6, [r3, #1092]	; 0x444
 80004da:	f8c3 1448 	str.w	r1, [r3, #1096]	; 0x448
    topic_ = topic_name;
 80004de:	4e20      	ldr	r6, [pc, #128]	; (8000560 <_Z41__static_initialization_and_destruction_0ii+0x244>)
 80004e0:	f8c3 6410 	str.w	r6, [r3, #1040]	; 0x410
    endpoint_(endpoint)
 80004e4:	f8c3 544c 	str.w	r5, [r3, #1100]	; 0x44c
 80004e8:	f8c3 0458 	str.w	r0, [r3, #1112]	; 0x458
 80004ec:	f883 245c 	strb.w	r2, [r3, #1116]	; 0x45c
 80004f0:	4a1c      	ldr	r2, [pc, #112]	; (8000564 <_Z41__static_initialization_and_destruction_0ii+0x248>)
 80004f2:	f8c3 2460 	str.w	r2, [r3, #1120]	; 0x460
 80004f6:	f8c3 1464 	str.w	r1, [r3, #1124]	; 0x464
    topic_ = topic_name;
 80004fa:	4a1b      	ldr	r2, [pc, #108]	; (8000568 <_Z41__static_initialization_and_destruction_0ii+0x24c>)
 80004fc:	f8c3 2454 	str.w	r2, [r3, #1108]	; 0x454
unsigned int last_cmd_time = HAL_GetTick();
 8000500:	f001 fc64 	bl	8001dcc <HAL_GetTick>
 8000504:	f8c4 032c 	str.w	r0, [r4, #812]	; 0x32c
}
 8000508:	b002      	add	sp, #8
 800050a:	bd70      	pop	{r4, r5, r6, pc}
 800050c:	2000053c 	.word	0x2000053c
 8000510:	40010800 	.word	0x40010800
 8000514:	0800c0d0 	.word	0x0800c0d0
 8000518:	0800c028 	.word	0x0800c028
 800051c:	20001634 	.word	0x20001634
 8000520:	0800c0b8 	.word	0x0800c0b8
 8000524:	0800c390 	.word	0x0800c390
 8000528:	0800c0e4 	.word	0x0800c0e4
 800052c:	0800c0a0 	.word	0x0800c0a0
 8000530:	0800060d 	.word	0x0800060d
 8000534:	0800c39c 	.word	0x0800c39c
 8000538:	0800c0fc 	.word	0x0800c0fc
 800053c:	0800c040 	.word	0x0800c040
 8000540:	080002cd 	.word	0x080002cd
 8000544:	0800c3a8 	.word	0x0800c3a8
 8000548:	0800c114 	.word	0x0800c114
 800054c:	0800c088 	.word	0x0800c088
 8000550:	0800c070 	.word	0x0800c070
 8000554:	0800c058 	.word	0x0800c058
 8000558:	0800c1f8 	.word	0x0800c1f8
 800055c:	080002dd 	.word	0x080002dd
 8000560:	0800c3b8 	.word	0x0800c3b8
 8000564:	08000151 	.word	0x08000151
 8000568:	0800c3c8 	.word	0x0800c3c8

0800056c <HAL_UART_TxCpltCallback>:
SerialClass serial(huart1);

extern "C" void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
	// comparing pointer
	if (huart->Instance == serial.get_handle()->Instance)
 800056c:	6802      	ldr	r2, [r0, #0]
		return &huart;
 800056e:	4b06      	ldr	r3, [pc, #24]	; (8000588 <HAL_UART_TxCpltCallback+0x1c>)
 8000570:	f8d3 3b38 	ldr.w	r3, [r3, #2872]	; 0xb38
	if (huart->Instance == serial.get_handle()->Instance)
 8000574:	681b      	ldr	r3, [r3, #0]
 8000576:	429a      	cmp	r2, r3
 8000578:	d000      	beq.n	800057c <HAL_UART_TxCpltCallback+0x10>
 800057a:	4770      	bx	lr
		tx_cplt = true;
 800057c:	2201      	movs	r2, #1
 800057e:	4b02      	ldr	r3, [pc, #8]	; (8000588 <HAL_UART_TxCpltCallback+0x1c>)
 8000580:	f883 2b30 	strb.w	r2, [r3, #2864]	; 0xb30
	{
		serial.tx_cplt_callback();
	}
}
 8000584:	e7f9      	b.n	800057a <HAL_UART_TxCpltCallback+0xe>
 8000586:	bf00      	nop
 8000588:	2000053c 	.word	0x2000053c

0800058c <_Z17disable_actuatorsv>:
    GPIOA->BSRR = GPIO_BSRR_BS8;
 800058c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000590:	4b0e      	ldr	r3, [pc, #56]	; (80005cc <_Z17disable_actuatorsv+0x40>)
 8000592:	611a      	str	r2, [r3, #16]
    GPIOC->BSRR = GPIO_BSRR_BS13;
 8000594:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000598:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800059c:	611a      	str	r2, [r3, #16]
public:
    StepperVelocityCtrl(GPIO_TypeDef *step_gpio, uint16_t step_pin, GPIO_TypeDef *dir_gpio, uint16_t dir_pin);

    inline void disable(void)
    {
        this->m_current_velocity = 0;
 800059e:	4b0c      	ldr	r3, [pc, #48]	; (80005d0 <_Z17disable_actuatorsv+0x44>)
 80005a0:	2200      	movs	r2, #0
 80005a2:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
        this->m_enabled = false;
 80005a6:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
        this->m_current_velocity = 0;
 80005aa:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac
        this->m_enabled = false;
 80005ae:	f883 21b4 	strb.w	r2, [r3, #436]	; 0x1b4
        this->m_current_velocity = 0;
 80005b2:	f8c3 2274 	str.w	r2, [r3, #628]	; 0x274
        this->m_enabled = false;
 80005b6:	f883 227c 	strb.w	r2, [r3, #636]	; 0x27c

    void reset_position(void);

    inline void disable(void)
    {
        this->m_current_velocity = 0;
 80005ba:	61da      	str	r2, [r3, #28]
        this->m_current_position = 0;
 80005bc:	615a      	str	r2, [r3, #20]
        this->m_actual_position = 0;
 80005be:	619a      	str	r2, [r3, #24]
        this->m_target_position = 0;
 80005c0:	611a      	str	r2, [r3, #16]

        this->m_enabled = false;
 80005c2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    is_actuators_enabled = false;
 80005c6:	701a      	strb	r2, [r3, #0]
 80005c8:	4770      	bx	lr
 80005ca:	bf00      	nop
 80005cc:	40010800 	.word	0x40010800
 80005d0:	2000053c 	.word	0x2000053c

080005d4 <_Z16enable_actuatorsv>:
    if (is_actuators_enabled)
 80005d4:	4b0b      	ldr	r3, [pc, #44]	; (8000604 <_Z16enable_actuatorsv+0x30>)
 80005d6:	781b      	ldrb	r3, [r3, #0]
 80005d8:	b99b      	cbnz	r3, 8000602 <_Z16enable_actuatorsv+0x2e>
    }

    inline void enable(void)
    {
        this->m_enabled = true;
 80005da:	4b0a      	ldr	r3, [pc, #40]	; (8000604 <_Z16enable_actuatorsv+0x30>)
 80005dc:	2201      	movs	r2, #1
 80005de:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
 80005e2:	f883 21b4 	strb.w	r2, [r3, #436]	; 0x1b4
 80005e6:	f883 227c 	strb.w	r2, [r3, #636]	; 0x27c
    }

    inline void enable(void)
    {
        this->m_enabled = true;
 80005ea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    GPIOA->BSRR = GPIO_BSRR_BR8;
 80005ee:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 80005f2:	4905      	ldr	r1, [pc, #20]	; (8000608 <_Z16enable_actuatorsv+0x34>)
 80005f4:	6108      	str	r0, [r1, #16]
    GPIOC->BSRR = GPIO_BSRR_BR13;
 80005f6:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 80005fa:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80005fe:	6108      	str	r0, [r1, #16]
    is_actuators_enabled = true;
 8000600:	701a      	strb	r2, [r3, #0]
 8000602:	4770      	bx	lr
 8000604:	2000053c 	.word	0x2000053c
 8000608:	40010800 	.word	0x40010800

0800060c <_Z19act_enable_callbackRKN8std_msgs4BoolE>:
{
 800060c:	b508      	push	{r3, lr}
    if (act_enable_msg.data)
 800060e:	7903      	ldrb	r3, [r0, #4]
 8000610:	b913      	cbnz	r3, 8000618 <_Z19act_enable_callbackRKN8std_msgs4BoolE+0xc>
        disable_actuators();
 8000612:	f7ff ffbb 	bl	800058c <_Z17disable_actuatorsv>
 8000616:	bd08      	pop	{r3, pc}
        enable_actuators();
 8000618:	f7ff ffdc 	bl	80005d4 <_Z16enable_actuatorsv>
 800061c:	bd08      	pop	{r3, pc}

0800061e <_Z19on_shutdown_pressedv>:
{
 800061e:	b508      	push	{r3, lr}
    disable_actuators();
 8000620:	f7ff ffb4 	bl	800058c <_Z17disable_actuatorsv>
    is_shutdown_pressed = true;
 8000624:	2201      	movs	r2, #1
 8000626:	4b01      	ldr	r3, [pc, #4]	; (800062c <_Z19on_shutdown_pressedv+0xe>)
 8000628:	701a      	strb	r2, [r3, #0]
 800062a:	bd08      	pop	{r3, pc}
 800062c:	20000004 	.word	0x20000004

08000630 <_Z20on_shutdown_releasedv>:
    is_shutdown_released = true;
 8000630:	2201      	movs	r2, #1
 8000632:	4b02      	ldr	r3, [pc, #8]	; (800063c <_Z20on_shutdown_releasedv+0xc>)
 8000634:	f883 2468 	strb.w	r2, [r3, #1128]	; 0x468
 8000638:	4770      	bx	lr
 800063a:	bf00      	nop
 800063c:	20001634 	.word	0x20001634

08000640 <_Z16on_start_pressedv>:
    is_start_pressed = true;
 8000640:	2201      	movs	r2, #1
 8000642:	4b02      	ldr	r3, [pc, #8]	; (800064c <_Z16on_start_pressedv+0xc>)
 8000644:	f883 2469 	strb.w	r2, [r3, #1129]	; 0x469
 8000648:	4770      	bx	lr
 800064a:	bf00      	nop
 800064c:	20001634 	.word	0x20001634

08000650 <_Error_Handler>:
{
 8000650:	e7fe      	b.n	8000650 <_Error_Handler>

08000652 <_ZL19MX_USART1_UART_Initv>:
{
 8000652:	b508      	push	{r3, lr}
    huart1.Instance = USART1;
 8000654:	4810      	ldr	r0, [pc, #64]	; (8000698 <_ZL19MX_USART1_UART_Initv+0x46>)
 8000656:	4b11      	ldr	r3, [pc, #68]	; (800069c <_ZL19MX_USART1_UART_Initv+0x4a>)
 8000658:	f8c0 3b3c 	str.w	r3, [r0, #2876]	; 0xb3c
    huart1.Init.BaudRate = 460800;
 800065c:	f44f 23e1 	mov.w	r3, #460800	; 0x70800
 8000660:	f8c0 3b40 	str.w	r3, [r0, #2880]	; 0xb40
    huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000664:	2300      	movs	r3, #0
 8000666:	f8c0 3b44 	str.w	r3, [r0, #2884]	; 0xb44
    huart1.Init.StopBits = UART_STOPBITS_1;
 800066a:	f8c0 3b48 	str.w	r3, [r0, #2888]	; 0xb48
    huart1.Init.Parity = UART_PARITY_NONE;
 800066e:	f8c0 3b4c 	str.w	r3, [r0, #2892]	; 0xb4c
    huart1.Init.Mode = UART_MODE_TX_RX;
 8000672:	220c      	movs	r2, #12
 8000674:	f8c0 2b50 	str.w	r2, [r0, #2896]	; 0xb50
    huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000678:	f8c0 3b54 	str.w	r3, [r0, #2900]	; 0xb54
    huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800067c:	f8c0 3b58 	str.w	r3, [r0, #2904]	; 0xb58
    if (HAL_UART_Init(&huart1) != HAL_OK)
 8000680:	f600 303c 	addw	r0, r0, #2876	; 0xb3c
 8000684:	f006 fcf9 	bl	800707a <HAL_UART_Init>
 8000688:	b900      	cbnz	r0, 800068c <_ZL19MX_USART1_UART_Initv+0x3a>
 800068a:	bd08      	pop	{r3, pc}
        _Error_Handler(__FILE__, __LINE__);
 800068c:	f240 11f9 	movw	r1, #505	; 0x1f9
 8000690:	4803      	ldr	r0, [pc, #12]	; (80006a0 <_ZL19MX_USART1_UART_Initv+0x4e>)
 8000692:	f7ff ffdd 	bl	8000650 <_Error_Handler>
 8000696:	bf00      	nop
 8000698:	2000053c 	.word	0x2000053c
 800069c:	40013800 	.word	0x40013800
 80006a0:	0800c3d8 	.word	0x0800c3d8

080006a4 <_ZL12MX_TIM3_Initv>:
{
 80006a4:	b500      	push	{lr}
 80006a6:	b087      	sub	sp, #28
    htim3.Instance = TIM3;
 80006a8:	481c      	ldr	r0, [pc, #112]	; (800071c <_ZL12MX_TIM3_Initv+0x78>)
 80006aa:	4b1d      	ldr	r3, [pc, #116]	; (8000720 <_ZL12MX_TIM3_Initv+0x7c>)
 80006ac:	f8c0 346c 	str.w	r3, [r0, #1132]	; 0x46c
    htim3.Init.Prescaler = 72u - 1u;
 80006b0:	2347      	movs	r3, #71	; 0x47
 80006b2:	f8c0 3470 	str.w	r3, [r0, #1136]	; 0x470
    htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006b6:	2300      	movs	r3, #0
 80006b8:	f8c0 3474 	str.w	r3, [r0, #1140]	; 0x474
    htim3.Init.Period = 4000u - 1u;
 80006bc:	f640 729f 	movw	r2, #3999	; 0xf9f
 80006c0:	f8c0 2478 	str.w	r2, [r0, #1144]	; 0x478
    htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006c4:	f8c0 347c 	str.w	r3, [r0, #1148]	; 0x47c
    htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006c8:	f8c0 3484 	str.w	r3, [r0, #1156]	; 0x484
    if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80006cc:	f200 406c 	addw	r0, r0, #1132	; 0x46c
 80006d0:	f004 fc7a 	bl	8004fc8 <HAL_TIM_Base_Init>
 80006d4:	b998      	cbnz	r0, 80006fe <_ZL12MX_TIM3_Initv+0x5a>
    sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80006d6:	a906      	add	r1, sp, #24
 80006d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006dc:	f841 3d10 	str.w	r3, [r1, #-16]!
    if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80006e0:	4810      	ldr	r0, [pc, #64]	; (8000724 <_ZL12MX_TIM3_Initv+0x80>)
 80006e2:	f004 fa11 	bl	8004b08 <HAL_TIM_ConfigClockSource>
 80006e6:	b978      	cbnz	r0, 8000708 <_ZL12MX_TIM3_Initv+0x64>
    sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006e8:	2300      	movs	r3, #0
 80006ea:	9300      	str	r3, [sp, #0]
    sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006ec:	9301      	str	r3, [sp, #4]
    if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80006ee:	4669      	mov	r1, sp
 80006f0:	480c      	ldr	r0, [pc, #48]	; (8000724 <_ZL12MX_TIM3_Initv+0x80>)
 80006f2:	f006 fb35 	bl	8006d60 <HAL_TIMEx_MasterConfigSynchronization>
 80006f6:	b960      	cbnz	r0, 8000712 <_ZL12MX_TIM3_Initv+0x6e>
}
 80006f8:	b007      	add	sp, #28
 80006fa:	f85d fb04 	ldr.w	pc, [sp], #4
        _Error_Handler(__FILE__, __LINE__);
 80006fe:	f44f 71d6 	mov.w	r1, #428	; 0x1ac
 8000702:	4809      	ldr	r0, [pc, #36]	; (8000728 <_ZL12MX_TIM3_Initv+0x84>)
 8000704:	f7ff ffa4 	bl	8000650 <_Error_Handler>
        _Error_Handler(__FILE__, __LINE__);
 8000708:	f44f 71d9 	mov.w	r1, #434	; 0x1b2
 800070c:	4806      	ldr	r0, [pc, #24]	; (8000728 <_ZL12MX_TIM3_Initv+0x84>)
 800070e:	f7ff ff9f 	bl	8000650 <_Error_Handler>
        _Error_Handler(__FILE__, __LINE__);
 8000712:	f240 11b9 	movw	r1, #441	; 0x1b9
 8000716:	4804      	ldr	r0, [pc, #16]	; (8000728 <_ZL12MX_TIM3_Initv+0x84>)
 8000718:	f7ff ff9a 	bl	8000650 <_Error_Handler>
 800071c:	20001634 	.word	0x20001634
 8000720:	40000400 	.word	0x40000400
 8000724:	20001aa0 	.word	0x20001aa0
 8000728:	0800c3d8 	.word	0x0800c3d8

0800072c <_ZL12MX_TIM4_Initv>:
{
 800072c:	b500      	push	{lr}
 800072e:	b08f      	sub	sp, #60	; 0x3c
    htim4.Instance = TIM4;
 8000730:	4828      	ldr	r0, [pc, #160]	; (80007d4 <_ZL12MX_TIM4_Initv+0xa8>)
 8000732:	4b29      	ldr	r3, [pc, #164]	; (80007d8 <_ZL12MX_TIM4_Initv+0xac>)
 8000734:	f8c0 34ac 	str.w	r3, [r0, #1196]	; 0x4ac
    htim4.Init.Prescaler = 72u - 1u;
 8000738:	2347      	movs	r3, #71	; 0x47
 800073a:	f8c0 34b0 	str.w	r3, [r0, #1200]	; 0x4b0
    htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800073e:	2300      	movs	r3, #0
 8000740:	f8c0 34b4 	str.w	r3, [r0, #1204]	; 0x4b4
    htim4.Init.Period = 20u - 1u;                         // 72 MHz / 1440 -> 50 kHz
 8000744:	2213      	movs	r2, #19
 8000746:	f8c0 24b8 	str.w	r2, [r0, #1208]	; 0x4b8
    htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800074a:	f8c0 34bc 	str.w	r3, [r0, #1212]	; 0x4bc
    htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800074e:	f8c0 34c4 	str.w	r3, [r0, #1220]	; 0x4c4
    if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000752:	f200 40ac 	addw	r0, r0, #1196	; 0x4ac
 8000756:	f004 fc37 	bl	8004fc8 <HAL_TIM_Base_Init>
 800075a:	bb10      	cbnz	r0, 80007a2 <_ZL12MX_TIM4_Initv+0x76>
    sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800075c:	a90e      	add	r1, sp, #56	; 0x38
 800075e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000762:	f841 3d10 	str.w	r3, [r1, #-16]!
    if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000766:	481d      	ldr	r0, [pc, #116]	; (80007dc <_ZL12MX_TIM4_Initv+0xb0>)
 8000768:	f004 f9ce 	bl	8004b08 <HAL_TIM_ConfigClockSource>
 800076c:	b9f0      	cbnz	r0, 80007ac <_ZL12MX_TIM4_Initv+0x80>
    if (HAL_TIM_OC_Init(&htim4) != HAL_OK)
 800076e:	481b      	ldr	r0, [pc, #108]	; (80007dc <_ZL12MX_TIM4_Initv+0xb0>)
 8000770:	f004 fc43 	bl	8004ffa <HAL_TIM_OC_Init>
 8000774:	b9f8      	cbnz	r0, 80007b6 <_ZL12MX_TIM4_Initv+0x8a>
    sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000776:	2300      	movs	r3, #0
 8000778:	9308      	str	r3, [sp, #32]
    sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800077a:	9309      	str	r3, [sp, #36]	; 0x24
    if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800077c:	a908      	add	r1, sp, #32
 800077e:	4817      	ldr	r0, [pc, #92]	; (80007dc <_ZL12MX_TIM4_Initv+0xb0>)
 8000780:	f006 faee 	bl	8006d60 <HAL_TIMEx_MasterConfigSynchronization>
 8000784:	b9e0      	cbnz	r0, 80007c0 <_ZL12MX_TIM4_Initv+0x94>
    sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8000786:	2200      	movs	r2, #0
 8000788:	9201      	str	r2, [sp, #4]
    sConfigOC.Pulse = 10u - 1u;
 800078a:	2309      	movs	r3, #9
 800078c:	9302      	str	r3, [sp, #8]
    sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800078e:	9203      	str	r2, [sp, #12]
    sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000790:	9205      	str	r2, [sp, #20]
    if (HAL_TIM_OC_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000792:	a901      	add	r1, sp, #4
 8000794:	4811      	ldr	r0, [pc, #68]	; (80007dc <_ZL12MX_TIM4_Initv+0xb0>)
 8000796:	f004 fd1d 	bl	80051d4 <HAL_TIM_OC_ConfigChannel>
 800079a:	b9b0      	cbnz	r0, 80007ca <_ZL12MX_TIM4_Initv+0x9e>
}
 800079c:	b00f      	add	sp, #60	; 0x3c
 800079e:	f85d fb04 	ldr.w	pc, [sp], #4
        _Error_Handler(__FILE__, __LINE__);
 80007a2:	f44f 71e6 	mov.w	r1, #460	; 0x1cc
 80007a6:	480e      	ldr	r0, [pc, #56]	; (80007e0 <_ZL12MX_TIM4_Initv+0xb4>)
 80007a8:	f7ff ff52 	bl	8000650 <_Error_Handler>
        _Error_Handler(__FILE__, __LINE__);
 80007ac:	f44f 71e9 	mov.w	r1, #466	; 0x1d2
 80007b0:	480b      	ldr	r0, [pc, #44]	; (80007e0 <_ZL12MX_TIM4_Initv+0xb4>)
 80007b2:	f7ff ff4d 	bl	8000650 <_Error_Handler>
        _Error_Handler(__FILE__, __LINE__);
 80007b6:	f240 11d7 	movw	r1, #471	; 0x1d7
 80007ba:	4809      	ldr	r0, [pc, #36]	; (80007e0 <_ZL12MX_TIM4_Initv+0xb4>)
 80007bc:	f7ff ff48 	bl	8000650 <_Error_Handler>
        _Error_Handler(__FILE__, __LINE__);
 80007c0:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 80007c4:	4806      	ldr	r0, [pc, #24]	; (80007e0 <_ZL12MX_TIM4_Initv+0xb4>)
 80007c6:	f7ff ff43 	bl	8000650 <_Error_Handler>
        _Error_Handler(__FILE__, __LINE__);
 80007ca:	f240 11e7 	movw	r1, #487	; 0x1e7
 80007ce:	4804      	ldr	r0, [pc, #16]	; (80007e0 <_ZL12MX_TIM4_Initv+0xb4>)
 80007d0:	f7ff ff3e 	bl	8000650 <_Error_Handler>
 80007d4:	20001634 	.word	0x20001634
 80007d8:	40000800 	.word	0x40000800
 80007dc:	20001ae0 	.word	0x20001ae0
 80007e0:	0800c3d8 	.word	0x0800c3d8

080007e4 <_Z18SystemClock_Configv>:
{
 80007e4:	b500      	push	{lr}
 80007e6:	b091      	sub	sp, #68	; 0x44
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80007e8:	2201      	movs	r2, #1
 80007ea:	9206      	str	r2, [sp, #24]
    RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80007ec:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80007f0:	9307      	str	r3, [sp, #28]
    RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80007f2:	2100      	movs	r1, #0
 80007f4:	9108      	str	r1, [sp, #32]
    RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007f6:	920a      	str	r2, [sp, #40]	; 0x28
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007f8:	2202      	movs	r2, #2
 80007fa:	920d      	str	r2, [sp, #52]	; 0x34
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007fc:	930e      	str	r3, [sp, #56]	; 0x38
    RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80007fe:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000802:	930f      	str	r3, [sp, #60]	; 0x3c
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000804:	a806      	add	r0, sp, #24
 8000806:	f002 ffb1 	bl	800376c <HAL_RCC_OscConfig>
 800080a:	bb08      	cbnz	r0, 8000850 <_Z18SystemClock_Configv+0x6c>
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800080c:	230f      	movs	r3, #15
 800080e:	9301      	str	r3, [sp, #4]
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000810:	2102      	movs	r1, #2
 8000812:	9102      	str	r1, [sp, #8]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000814:	2300      	movs	r3, #0
 8000816:	9303      	str	r3, [sp, #12]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000818:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800081c:	9204      	str	r2, [sp, #16]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800081e:	9305      	str	r3, [sp, #20]
    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000820:	a801      	add	r0, sp, #4
 8000822:	f003 f9fb 	bl	8003c1c <HAL_RCC_ClockConfig>
 8000826:	b9c0      	cbnz	r0, 800085a <_Z18SystemClock_Configv+0x76>
    HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / 1000);
 8000828:	f003 fab4 	bl	8003d94 <HAL_RCC_GetHCLKFreq>
 800082c:	4b0d      	ldr	r3, [pc, #52]	; (8000864 <_Z18SystemClock_Configv+0x80>)
 800082e:	fba3 3000 	umull	r3, r0, r3, r0
 8000832:	0980      	lsrs	r0, r0, #6
 8000834:	f001 fbd2 	bl	8001fdc <HAL_SYSTICK_Config>
    HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8000838:	2004      	movs	r0, #4
 800083a:	f001 fc53 	bl	80020e4 <HAL_SYSTICK_CLKSourceConfig>
    HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800083e:	2200      	movs	r2, #0
 8000840:	4611      	mov	r1, r2
 8000842:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000846:	f001 fb6b 	bl	8001f20 <HAL_NVIC_SetPriority>
}
 800084a:	b011      	add	sp, #68	; 0x44
 800084c:	f85d fb04 	ldr.w	pc, [sp], #4
        _Error_Handler(__FILE__, __LINE__);
 8000850:	f44f 71c1 	mov.w	r1, #386	; 0x182
 8000854:	4804      	ldr	r0, [pc, #16]	; (8000868 <_Z18SystemClock_Configv+0x84>)
 8000856:	f7ff fefb 	bl	8000650 <_Error_Handler>
        _Error_Handler(__FILE__, __LINE__);
 800085a:	f240 118f 	movw	r1, #399	; 0x18f
 800085e:	4802      	ldr	r0, [pc, #8]	; (8000868 <_Z18SystemClock_Configv+0x84>)
 8000860:	f7ff fef6 	bl	8000650 <_Error_Handler>
 8000864:	10624dd3 	.word	0x10624dd3
 8000868:	0800c3d8 	.word	0x0800c3d8

0800086c <main>:
{
 800086c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000870:	b087      	sub	sp, #28
    HAL_Init();
 8000872:	f001 fa8d 	bl	8001d90 <HAL_Init>
    SystemClock_Config();
 8000876:	f7ff ffb5 	bl	80007e4 <_Z18SystemClock_Configv>
    MX_GPIO_Init();
 800087a:	f7ff fc7d 	bl	8000178 <_ZL12MX_GPIO_Initv>
    MX_DMA_Init();
 800087e:	f7ff fd03 	bl	8000288 <_ZL11MX_DMA_Initv>
    MX_USART1_UART_Init();
 8000882:	f7ff fee6 	bl	8000652 <_ZL19MX_USART1_UART_Initv>
    MX_TIM3_Init();
 8000886:	f7ff ff0d 	bl	80006a4 <_ZL12MX_TIM3_Initv>
    MX_TIM4_Init();
 800088a:	f7ff ff4f 	bl	800072c <_ZL12MX_TIM4_Initv>
    HAL_TIM_Base_Start_IT(&htim3);
 800088e:	4cba      	ldr	r4, [pc, #744]	; (8000b78 <main+0x30c>)
 8000890:	f204 406c 	addw	r0, r4, #1132	; 0x46c
 8000894:	f003 fdd3 	bl	800443e <HAL_TIM_Base_Start_IT>
    HAL_TIM_Base_Start_IT(&htim4);
 8000898:	f204 44ac 	addw	r4, r4, #1196	; 0x4ac
 800089c:	4620      	mov	r0, r4
 800089e:	f003 fdce 	bl	800443e <HAL_TIM_Base_Start_IT>
    HAL_TIM_OC_Start_IT(&htim4, TIM_CHANNEL_1);
 80008a2:	2100      	movs	r1, #0
 80008a4:	4620      	mov	r0, r4
 80008a6:	f004 fe93 	bl	80055d0 <HAL_TIM_OC_Start_IT>

	}

	void init()
	{
		com->start_dma();
 80008aa:	4db4      	ldr	r5, [pc, #720]	; (8000b7c <main+0x310>)
 80008ac:	f8d5 3b80 	ldr.w	r3, [r5, #2944]	; 0xb80
		tx_cplt = true;
 80008b0:	2201      	movs	r2, #1
 80008b2:	f883 2800 	strb.w	r2, [r3, #2048]	; 0x800
		rx_tail = 0;
 80008b6:	2400      	movs	r4, #0
 80008b8:	f8a3 4802 	strh.w	r4, [r3, #2050]	; 0x802
		HAL_UART_Receive_DMA(&huart, (uint8_t *) rx_buf, BUF_SIZE);
 80008bc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80008c0:	1899      	adds	r1, r3, r2
 80008c2:	f8d3 0808 	ldr.w	r0, [r3, #2056]	; 0x808
 80008c6:	f006 fe49 	bl	800755c <HAL_UART_Receive_DMA>

  /* Start serial, initialize buffers */
  void initNode()
  {
    hardware_.init();
    mode_ = 0;
 80008ca:	f241 435c 	movw	r3, #5212	; 0x145c
 80008ce:	50ec      	str	r4, [r5, r3]
    bytes_ = 0;
 80008d0:	f505 53a3 	add.w	r3, r5, #5216	; 0x1460
 80008d4:	601c      	str	r4, [r3, #0]
    index_ = 0;
 80008d6:	f241 4368 	movw	r3, #5224	; 0x1468
 80008da:	50ec      	str	r4, [r5, r3]
    topic_ = 0;
 80008dc:	f241 4364 	movw	r3, #5220	; 0x1464
 80008e0:	50ec      	str	r4, [r5, r3]
   */

  /* Register a new publisher */
  bool advertise(Publisher & p)
  {
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 80008e2:	2c18      	cmp	r4, #24
 80008e4:	dc17      	bgt.n	8000916 <main+0xaa>
    {
      if (publishers[i] == 0) // empty slot
 80008e6:	f204 2206 	addw	r2, r4, #518	; 0x206
 80008ea:	4ba4      	ldr	r3, [pc, #656]	; (8000b7c <main+0x310>)
 80008ec:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 80008f0:	f8d3 3b7c 	ldr.w	r3, [r3, #2940]	; 0xb7c
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d16c      	bne.n	80009d2 <main+0x166>
      {
        publishers[i] = &p;
 80008f8:	4ba0      	ldr	r3, [pc, #640]	; (8000b7c <main+0x310>)
 80008fa:	eb03 0182 	add.w	r1, r3, r2, lsl #2
 80008fe:	4a9e      	ldr	r2, [pc, #632]	; (8000b78 <main+0x30c>)
 8000900:	f502 706f 	add.w	r0, r2, #956	; 0x3bc
 8000904:	f8c1 0b7c 	str.w	r0, [r1, #2940]	; 0xb7c
        p.id_ = i + 100 + MAX_SUBSCRIBERS;
 8000908:	347d      	adds	r4, #125	; 0x7d
 800090a:	f8c2 43c4 	str.w	r4, [r2, #964]	; 0x3c4
        p.nh_ = this;
 800090e:	f603 337c 	addw	r3, r3, #2940	; 0xb7c
 8000912:	f8c2 33c8 	str.w	r3, [r2, #968]	; 0x3c8

  /* Register a new subscriber */
  template<typename SubscriberT>
  bool subscribe(SubscriberT& s)
  {
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 8000916:	2300      	movs	r3, #0
 8000918:	2b18      	cmp	r3, #24
 800091a:	dc13      	bgt.n	8000944 <main+0xd8>
    {
      if (subscribers[i] == 0) // empty slot
 800091c:	f203 211e 	addw	r1, r3, #542	; 0x21e
 8000920:	4a96      	ldr	r2, [pc, #600]	; (8000b7c <main+0x310>)
 8000922:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8000926:	f8d2 2b80 	ldr.w	r2, [r2, #2944]	; 0xb80
 800092a:	2a00      	cmp	r2, #0
 800092c:	d153      	bne.n	80009d6 <main+0x16a>
      {
        subscribers[i] = static_cast<Subscriber_*>(&s);
 800092e:	4a93      	ldr	r2, [pc, #588]	; (8000b7c <main+0x310>)
 8000930:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8000934:	4990      	ldr	r1, [pc, #576]	; (8000b78 <main+0x30c>)
 8000936:	f501 707b 	add.w	r0, r1, #1004	; 0x3ec
 800093a:	f8c2 0b80 	str.w	r0, [r2, #2944]	; 0xb80
        s.id_ = i + 100;
 800093e:	3364      	adds	r3, #100	; 0x64
 8000940:	f8c1 33f0 	str.w	r3, [r1, #1008]	; 0x3f0
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 8000944:	2300      	movs	r3, #0
 8000946:	2b18      	cmp	r3, #24
 8000948:	dc13      	bgt.n	8000972 <main+0x106>
      if (subscribers[i] == 0) // empty slot
 800094a:	f203 211e 	addw	r1, r3, #542	; 0x21e
 800094e:	4a8b      	ldr	r2, [pc, #556]	; (8000b7c <main+0x310>)
 8000950:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8000954:	f8d2 2b80 	ldr.w	r2, [r2, #2944]	; 0xb80
 8000958:	2a00      	cmp	r2, #0
 800095a:	d13e      	bne.n	80009da <main+0x16e>
        subscribers[i] = static_cast<Subscriber_*>(&s);
 800095c:	4a87      	ldr	r2, [pc, #540]	; (8000b7c <main+0x310>)
 800095e:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8000962:	4985      	ldr	r1, [pc, #532]	; (8000b78 <main+0x30c>)
 8000964:	f501 6081 	add.w	r0, r1, #1032	; 0x408
 8000968:	f8c2 0b80 	str.w	r0, [r2, #2944]	; 0xb80
        s.id_ = i + 100;
 800096c:	3364      	adds	r3, #100	; 0x64
 800096e:	f8c1 340c 	str.w	r3, [r1, #1036]	; 0x40c
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 8000972:	2300      	movs	r3, #0
 8000974:	2b18      	cmp	r3, #24
 8000976:	dc12      	bgt.n	800099e <main+0x132>
      if (subscribers[i] == 0) // empty slot
 8000978:	f203 211e 	addw	r1, r3, #542	; 0x21e
 800097c:	4a7f      	ldr	r2, [pc, #508]	; (8000b7c <main+0x310>)
 800097e:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8000982:	f8d2 2b80 	ldr.w	r2, [r2, #2944]	; 0xb80
 8000986:	bb52      	cbnz	r2, 80009de <main+0x172>
        subscribers[i] = static_cast<Subscriber_*>(&s);
 8000988:	4a7c      	ldr	r2, [pc, #496]	; (8000b7c <main+0x310>)
 800098a:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 800098e:	497a      	ldr	r1, [pc, #488]	; (8000b78 <main+0x30c>)
 8000990:	f201 404c 	addw	r0, r1, #1100	; 0x44c
 8000994:	f8c2 0b80 	str.w	r0, [r2, #2944]	; 0xb80
        s.id_ = i + 100;
 8000998:	3364      	adds	r3, #100	; 0x64
 800099a:	f8c1 3450 	str.w	r3, [r1, #1104]	; 0x450
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 800099e:	2300      	movs	r3, #0
 80009a0:	2b18      	cmp	r3, #24
 80009a2:	dc12      	bgt.n	80009ca <main+0x15e>
      if (subscribers[i] == 0) // empty slot
 80009a4:	f203 211e 	addw	r1, r3, #542	; 0x21e
 80009a8:	4a74      	ldr	r2, [pc, #464]	; (8000b7c <main+0x310>)
 80009aa:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 80009ae:	f8d2 2b80 	ldr.w	r2, [r2, #2944]	; 0xb80
 80009b2:	b9b2      	cbnz	r2, 80009e2 <main+0x176>
        subscribers[i] = static_cast<Subscriber_*>(&s);
 80009b4:	4a71      	ldr	r2, [pc, #452]	; (8000b7c <main+0x310>)
 80009b6:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 80009ba:	496f      	ldr	r1, [pc, #444]	; (8000b78 <main+0x30c>)
 80009bc:	f501 7074 	add.w	r0, r1, #976	; 0x3d0
 80009c0:	f8c2 0b80 	str.w	r0, [r2, #2944]	; 0xb80
        s.id_ = i + 100;
 80009c4:	3364      	adds	r3, #100	; 0x64
 80009c6:	f8c1 33d4 	str.w	r3, [r1, #980]	; 0x3d4
    unsigned int last_ctrl_time = HAL_GetTick();
 80009ca:	f001 f9ff 	bl	8001dcc <HAL_GetTick>
 80009ce:	4605      	mov	r5, r0
 80009d0:	e37a      	b.n	80010c8 <main+0x85c>
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 80009d2:	3401      	adds	r4, #1
 80009d4:	e785      	b.n	80008e2 <main+0x76>
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 80009d6:	3301      	adds	r3, #1
 80009d8:	e79e      	b.n	8000918 <main+0xac>
 80009da:	3301      	adds	r3, #1
 80009dc:	e7b3      	b.n	8000946 <main+0xda>
 80009de:	3301      	adds	r3, #1
 80009e0:	e7c8      	b.n	8000974 <main+0x108>
 80009e2:	3301      	adds	r3, #1
 80009e4:	e7dc      	b.n	80009a0 <main+0x134>
    return configured_;
 80009e6:	f241 4370 	movw	r3, #5232	; 0x1470
 80009ea:	4a64      	ldr	r2, [pc, #400]	; (8000b7c <main+0x310>)
 80009ec:	5cd3      	ldrb	r3, [r2, r3]
        else if (!nh.connected())
 80009ee:	b19b      	cbz	r3, 8000a18 <main+0x1ac>
        else if (now - last_ctrl_time > ctrl_interval)
 80009f0:	1b40      	subs	r0, r0, r5
 80009f2:	2832      	cmp	r0, #50	; 0x32
 80009f4:	f240 8379 	bls.w	80010ea <main+0x87e>
            if(is_shutdown_pressed)
 80009f8:	4b61      	ldr	r3, [pc, #388]	; (8000b80 <main+0x314>)
 80009fa:	781b      	ldrb	r3, [r3, #0]
 80009fc:	b99b      	cbnz	r3, 8000a26 <main+0x1ba>
            if(is_shutdown_released)
 80009fe:	4b5e      	ldr	r3, [pc, #376]	; (8000b78 <main+0x30c>)
 8000a00:	f893 3468 	ldrb.w	r3, [r3, #1128]	; 0x468
 8000a04:	bb1b      	cbnz	r3, 8000a4e <main+0x1e2>
            if(is_start_pressed)
 8000a06:	4b5c      	ldr	r3, [pc, #368]	; (8000b78 <main+0x30c>)
 8000a08:	f893 3469 	ldrb.w	r3, [r3, #1129]	; 0x469
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d134      	bne.n	8000a7a <main+0x20e>
            last_ctrl_time = HAL_GetTick();
 8000a10:	f001 f9dc 	bl	8001dcc <HAL_GetTick>
 8000a14:	4605      	mov	r5, r0
 8000a16:	e368      	b.n	80010ea <main+0x87e>
            disable_actuators();
 8000a18:	f7ff fdb8 	bl	800058c <_Z17disable_actuatorsv>
            is_node_enabled = false;
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	4b56      	ldr	r3, [pc, #344]	; (8000b78 <main+0x30c>)
 8000a20:	f883 24ec 	strb.w	r2, [r3, #1260]	; 0x4ec
 8000a24:	e361      	b.n	80010ea <main+0x87e>
                user_input_msg.data &= ~(1 << 15);
 8000a26:	4b54      	ldr	r3, [pc, #336]	; (8000b78 <main+0x30c>)
 8000a28:	f8b3 23b8 	ldrh.w	r2, [r3, #952]	; 0x3b8
 8000a2c:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8000a30:	f8a3 23b8 	strh.w	r2, [r3, #952]	; 0x3b8

  int publish(const Msg * msg)
  {
    return nh_->publish(id_, msg);
 8000a34:	f8d3 03c8 	ldr.w	r0, [r3, #968]	; 0x3c8
 8000a38:	6802      	ldr	r2, [r0, #0]
 8000a3a:	6814      	ldr	r4, [r2, #0]
 8000a3c:	f503 726d 	add.w	r2, r3, #948	; 0x3b4
 8000a40:	f8d3 13c4 	ldr.w	r1, [r3, #964]	; 0x3c4
 8000a44:	47a0      	blx	r4
                is_shutdown_pressed = false;
 8000a46:	2200      	movs	r2, #0
 8000a48:	4b4d      	ldr	r3, [pc, #308]	; (8000b80 <main+0x314>)
 8000a4a:	701a      	strb	r2, [r3, #0]
 8000a4c:	e7d7      	b.n	80009fe <main+0x192>
                user_input_msg.data |= (1 << 15);
 8000a4e:	4c4a      	ldr	r4, [pc, #296]	; (8000b78 <main+0x30c>)
 8000a50:	f8b4 33b8 	ldrh.w	r3, [r4, #952]	; 0x3b8
 8000a54:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8000a58:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8000a5c:	f8a4 33b8 	strh.w	r3, [r4, #952]	; 0x3b8
 8000a60:	f8d4 03c8 	ldr.w	r0, [r4, #968]	; 0x3c8
 8000a64:	6803      	ldr	r3, [r0, #0]
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	f504 726d 	add.w	r2, r4, #948	; 0x3b4
 8000a6c:	f8d4 13c4 	ldr.w	r1, [r4, #964]	; 0x3c4
 8000a70:	4798      	blx	r3
                is_shutdown_released = false;
 8000a72:	2300      	movs	r3, #0
 8000a74:	f884 3468 	strb.w	r3, [r4, #1128]	; 0x468
 8000a78:	e7c5      	b.n	8000a06 <main+0x19a>
                user_input_msg.data |= (1 << 14);
 8000a7a:	4c3f      	ldr	r4, [pc, #252]	; (8000b78 <main+0x30c>)
 8000a7c:	f8b4 33b8 	ldrh.w	r3, [r4, #952]	; 0x3b8
 8000a80:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a84:	f8a4 33b8 	strh.w	r3, [r4, #952]	; 0x3b8
 8000a88:	f8d4 03c8 	ldr.w	r0, [r4, #968]	; 0x3c8
 8000a8c:	6803      	ldr	r3, [r0, #0]
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	f504 726d 	add.w	r2, r4, #948	; 0x3b4
 8000a94:	f8d4 13c4 	ldr.w	r1, [r4, #964]	; 0x3c4
 8000a98:	4798      	blx	r3
                user_input_msg.data &= ~(1 << 14);
 8000a9a:	f8b4 33b8 	ldrh.w	r3, [r4, #952]	; 0x3b8
 8000a9e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000aa2:	f8a4 33b8 	strh.w	r3, [r4, #952]	; 0x3b8
                is_start_pressed = false;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	f884 3469 	strb.w	r3, [r4, #1129]	; 0x469
 8000aac:	e7b0      	b.n	8000a10 <main+0x1a4>
		com->write(data, length);
	}

	unsigned long time()
	{
		return HAL_GetTick();
 8000aae:	f001 f98d 	bl	8001dcc <HAL_GetTick>
        if ((hardware_.time() - c_time) > spin_timeout_)
 8000ab2:	1b00      	subs	r0, r0, r4
 8000ab4:	4b31      	ldr	r3, [pc, #196]	; (8000b7c <main+0x310>)
 8000ab6:	f8d3 3b90 	ldr.w	r3, [r3, #2960]	; 0xb90
 8000aba:	4298      	cmp	r0, r3
 8000abc:	d927      	bls.n	8000b0e <main+0x2a2>
 8000abe:	e303      	b.n	80010c8 <main+0x85c>
			return -1;
 8000ac0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ac4:	e03a      	b.n	8000b3c <main+0x2d0>
        message_in[index_++] = data;
 8000ac6:	4b2d      	ldr	r3, [pc, #180]	; (8000b7c <main+0x310>)
 8000ac8:	f241 4168 	movw	r1, #5224	; 0x1468
 8000acc:	585a      	ldr	r2, [r3, r1]
 8000ace:	1c56      	adds	r6, r2, #1
 8000ad0:	505e      	str	r6, [r3, r1]
 8000ad2:	441a      	add	r2, r3
 8000ad4:	f882 0b94 	strb.w	r0, [r2, #2964]	; 0xb94
        bytes_--;
 8000ad8:	f503 53a3 	add.w	r3, r3, #5216	; 0x1460
 8000adc:	681a      	ldr	r2, [r3, #0]
 8000ade:	3a01      	subs	r2, #1
 8000ae0:	601a      	str	r2, [r3, #0]
        if (bytes_ == 0)                 /* is message complete? if so, checksum */
 8000ae2:	b97a      	cbnz	r2, 8000b04 <main+0x298>
          mode_ = MODE_MSG_CHECKSUM;
 8000ae4:	2108      	movs	r1, #8
 8000ae6:	f241 435c 	movw	r3, #5212	; 0x145c
 8000aea:	4a24      	ldr	r2, [pc, #144]	; (8000b7c <main+0x310>)
 8000aec:	50d1      	str	r1, [r2, r3]
 8000aee:	e009      	b.n	8000b04 <main+0x298>
          mode_++;
 8000af0:	4a22      	ldr	r2, [pc, #136]	; (8000b7c <main+0x310>)
 8000af2:	3301      	adds	r3, #1
 8000af4:	f241 415c 	movw	r1, #5212	; 0x145c
 8000af8:	5053      	str	r3, [r2, r1]
          last_msg_timeout_time = c_time + SERIAL_MSG_TIMEOUT;
 8000afa:	f104 0314 	add.w	r3, r4, #20
 8000afe:	f241 417c 	movw	r1, #5244	; 0x147c
 8000b02:	5053      	str	r3, [r2, r1]
      if (spin_timeout_ > 0)
 8000b04:	4b1d      	ldr	r3, [pc, #116]	; (8000b7c <main+0x310>)
 8000b06:	f8d3 3b90 	ldr.w	r3, [r3, #2960]	; 0xb90
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d1cf      	bne.n	8000aae <main+0x242>
		return com->read();
 8000b0e:	4b1b      	ldr	r3, [pc, #108]	; (8000b7c <main+0x310>)
 8000b10:	f8d3 1b80 	ldr.w	r1, [r3, #2944]	; 0xb80
		uint16_t rx_head = (BUF_SIZE - huart.hdmarx->Instance->CNDTR)
 8000b14:	f8d1 3808 	ldr.w	r3, [r1, #2056]	; 0x808
 8000b18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	685b      	ldr	r3, [r3, #4]
				& buf_mask;
 8000b1e:	425b      	negs	r3, r3
 8000b20:	f3c3 0309 	ubfx	r3, r3, #0, #10
		if (rx_tail == rx_head)
 8000b24:	f8b1 2802 	ldrh.w	r2, [r1, #2050]	; 0x802
 8000b28:	4293      	cmp	r3, r2
 8000b2a:	d0c9      	beq.n	8000ac0 <main+0x254>
		int c = (int) rx_buf[rx_tail++];
 8000b2c:	1c53      	adds	r3, r2, #1
 8000b2e:	440a      	add	r2, r1
 8000b30:	f892 0400 	ldrb.w	r0, [r2, #1024]	; 0x400
		rx_tail &= buf_mask;
 8000b34:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000b38:	f8a1 3802 	strh.w	r3, [r1, #2050]	; 0x802
      if (data < 0)
 8000b3c:	2800      	cmp	r0, #0
 8000b3e:	f2c0 82b6 	blt.w	80010ae <main+0x842>
      checksum_ += data;
 8000b42:	4b0e      	ldr	r3, [pc, #56]	; (8000b7c <main+0x310>)
 8000b44:	f241 416c 	movw	r1, #5228	; 0x146c
 8000b48:	585a      	ldr	r2, [r3, r1]
 8000b4a:	4402      	add	r2, r0
 8000b4c:	505a      	str	r2, [r3, r1]
      if (mode_ == MODE_MESSAGE)          /* message data being recieved */
 8000b4e:	f241 415c 	movw	r1, #5212	; 0x145c
 8000b52:	585b      	ldr	r3, [r3, r1]
 8000b54:	2b07      	cmp	r3, #7
 8000b56:	d0b6      	beq.n	8000ac6 <main+0x25a>
      else if (mode_ == MODE_FIRST_FF)
 8000b58:	b9a3      	cbnz	r3, 8000b84 <main+0x318>
        if (data == 0xff)
 8000b5a:	28ff      	cmp	r0, #255	; 0xff
 8000b5c:	d0c8      	beq.n	8000af0 <main+0x284>
		return HAL_GetTick();
 8000b5e:	f001 f935 	bl	8001dcc <HAL_GetTick>
        else if (hardware_.time() - c_time > (SYNC_SECONDS * 1000))
 8000b62:	1b00      	subs	r0, r0, r4
 8000b64:	f241 3388 	movw	r3, #5000	; 0x1388
 8000b68:	4298      	cmp	r0, r3
 8000b6a:	d9cb      	bls.n	8000b04 <main+0x298>
          configured_ = false;
 8000b6c:	2100      	movs	r1, #0
 8000b6e:	f241 4370 	movw	r3, #5232	; 0x1470
 8000b72:	4a02      	ldr	r2, [pc, #8]	; (8000b7c <main+0x310>)
 8000b74:	54d1      	strb	r1, [r2, r3]
 8000b76:	e2a7      	b.n	80010c8 <main+0x85c>
 8000b78:	20001634 	.word	0x20001634
 8000b7c:	2000053c 	.word	0x2000053c
 8000b80:	20000004 	.word	0x20000004
      else if (mode_ == MODE_PROTOCOL_VER)
 8000b84:	2b01      	cmp	r3, #1
 8000b86:	d040      	beq.n	8000c0a <main+0x39e>
      else if (mode_ == MODE_SIZE_L)      /* bottom half of message size */
 8000b88:	2b02      	cmp	r3, #2
 8000b8a:	d063      	beq.n	8000c54 <main+0x3e8>
      else if (mode_ == MODE_SIZE_H)      /* top half of message size */
 8000b8c:	2b03      	cmp	r3, #3
 8000b8e:	d071      	beq.n	8000c74 <main+0x408>
      else if (mode_ == MODE_SIZE_CHECKSUM)
 8000b90:	2b04      	cmp	r3, #4
 8000b92:	d07b      	beq.n	8000c8c <main+0x420>
      else if (mode_ == MODE_TOPIC_L)     /* bottom half of topic id */
 8000b94:	2b05      	cmp	r3, #5
 8000b96:	f000 808c 	beq.w	8000cb2 <main+0x446>
      else if (mode_ == MODE_TOPIC_H)     /* top half of topic id */
 8000b9a:	2b06      	cmp	r3, #6
 8000b9c:	f000 8095 	beq.w	8000cca <main+0x45e>
      else if (mode_ == MODE_MSG_CHECKSUM)    /* do checksum */
 8000ba0:	2b08      	cmp	r3, #8
 8000ba2:	d1af      	bne.n	8000b04 <main+0x298>
        mode_ = MODE_FIRST_FF;
 8000ba4:	2000      	movs	r0, #0
 8000ba6:	f241 435c 	movw	r3, #5212	; 0x145c
 8000baa:	499a      	ldr	r1, [pc, #616]	; (8000e14 <main+0x5a8>)
 8000bac:	50c8      	str	r0, [r1, r3]
        if ((checksum_ % 256) == 255)
 8000bae:	1a83      	subs	r3, r0, r2
 8000bb0:	b2d2      	uxtb	r2, r2
 8000bb2:	b2db      	uxtb	r3, r3
 8000bb4:	bf58      	it	pl
 8000bb6:	425a      	negpl	r2, r3
 8000bb8:	2aff      	cmp	r2, #255	; 0xff
 8000bba:	d1a3      	bne.n	8000b04 <main+0x298>
          if (topic_ == TopicInfo::ID_PUBLISHER)
 8000bbc:	f241 4364 	movw	r3, #5220	; 0x1464
 8000bc0:	58ce      	ldr	r6, [r1, r3]
 8000bc2:	2e00      	cmp	r6, #0
 8000bc4:	f000 8097 	beq.w	8000cf6 <main+0x48a>
          else if (topic_ == TopicInfo::ID_TIME)
 8000bc8:	2e0a      	cmp	r6, #10
 8000bca:	f000 812b 	beq.w	8000e24 <main+0x5b8>
          else if (topic_ == TopicInfo::ID_PARAMETER_REQUEST)
 8000bce:	2e06      	cmp	r6, #6
 8000bd0:	f000 8178 	beq.w	8000ec4 <main+0x658>
          else if (topic_ == TopicInfo::ID_TX_STOP)
 8000bd4:	2e0b      	cmp	r6, #11
 8000bd6:	f000 8264 	beq.w	80010a2 <main+0x836>
            if (subscribers[topic_ - 100])
 8000bda:	f1a6 0264 	sub.w	r2, r6, #100	; 0x64
 8000bde:	f506 76dd 	add.w	r6, r6, #442	; 0x1ba
 8000be2:	4b8c      	ldr	r3, [pc, #560]	; (8000e14 <main+0x5a8>)
 8000be4:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 8000be8:	f8d3 0b80 	ldr.w	r0, [r3, #2944]	; 0xb80
 8000bec:	2800      	cmp	r0, #0
 8000bee:	d089      	beq.n	8000b04 <main+0x298>
              subscribers[topic_ - 100]->callback(message_in);
 8000bf0:	4988      	ldr	r1, [pc, #544]	; (8000e14 <main+0x5a8>)
 8000bf2:	f202 231e 	addw	r3, r2, #542	; 0x21e
 8000bf6:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8000bfa:	f8d3 3b80 	ldr.w	r3, [r3, #2944]	; 0xb80
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	f601 3194 	addw	r1, r1, #2964	; 0xb94
 8000c06:	4798      	blx	r3
 8000c08:	e77c      	b.n	8000b04 <main+0x298>
        if (data == PROTOCOL_VER)
 8000c0a:	28fe      	cmp	r0, #254	; 0xfe
 8000c0c:	d01c      	beq.n	8000c48 <main+0x3dc>
          mode_ = MODE_FIRST_FF;
 8000c0e:	4b81      	ldr	r3, [pc, #516]	; (8000e14 <main+0x5a8>)
 8000c10:	2100      	movs	r1, #0
 8000c12:	f241 425c 	movw	r2, #5212	; 0x145c
 8000c16:	5099      	str	r1, [r3, r2]
          if (configured_ == false)
 8000c18:	f241 4270 	movw	r2, #5232	; 0x1470
 8000c1c:	5c9b      	ldrb	r3, [r3, r2]
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	f47f af70 	bne.w	8000b04 <main+0x298>
    public:
      typedef ros::Time _data_type;
      _data_type data;

    Time():
      data()
 8000c24:	4b7c      	ldr	r3, [pc, #496]	; (8000e18 <main+0x5ac>)
 8000c26:	9300      	str	r3, [sp, #0]
class Time
{
public:
  uint32_t sec, nsec;

  Time() : sec(0), nsec(0) {}
 8000c28:	9101      	str	r1, [sp, #4]
 8000c2a:	9102      	str	r1, [sp, #8]
    publish(TopicInfo::ID_TIME, &t);
 8000c2c:	4e79      	ldr	r6, [pc, #484]	; (8000e14 <main+0x5a8>)
 8000c2e:	f8d6 3b7c 	ldr.w	r3, [r6, #2940]	; 0xb7c
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	466a      	mov	r2, sp
 8000c36:	210a      	movs	r1, #10
 8000c38:	f606 307c 	addw	r0, r6, #2940	; 0xb7c
 8000c3c:	4798      	blx	r3
 8000c3e:	f001 f8c5 	bl	8001dcc <HAL_GetTick>
    rt_time = hardware_.time();
 8000c42:	f8c6 0b84 	str.w	r0, [r6, #2948]	; 0xb84
 8000c46:	e75d      	b.n	8000b04 <main+0x298>
          mode_++;
 8000c48:	3301      	adds	r3, #1
 8000c4a:	f241 425c 	movw	r2, #5212	; 0x145c
 8000c4e:	4971      	ldr	r1, [pc, #452]	; (8000e14 <main+0x5a8>)
 8000c50:	508b      	str	r3, [r1, r2]
 8000c52:	e757      	b.n	8000b04 <main+0x298>
        bytes_ = data;
 8000c54:	4a6f      	ldr	r2, [pc, #444]	; (8000e14 <main+0x5a8>)
 8000c56:	f502 51a3 	add.w	r1, r2, #5216	; 0x1460
 8000c5a:	6008      	str	r0, [r1, #0]
        index_ = 0;
 8000c5c:	2600      	movs	r6, #0
 8000c5e:	f241 4168 	movw	r1, #5224	; 0x1468
 8000c62:	5056      	str	r6, [r2, r1]
        mode_++;
 8000c64:	3301      	adds	r3, #1
 8000c66:	f241 415c 	movw	r1, #5212	; 0x145c
 8000c6a:	5053      	str	r3, [r2, r1]
        checksum_ = data;               /* first byte for calculating size checksum */
 8000c6c:	f241 436c 	movw	r3, #5228	; 0x146c
 8000c70:	50d0      	str	r0, [r2, r3]
 8000c72:	e747      	b.n	8000b04 <main+0x298>
        bytes_ += data << 8;
 8000c74:	4967      	ldr	r1, [pc, #412]	; (8000e14 <main+0x5a8>)
 8000c76:	f501 56a3 	add.w	r6, r1, #5216	; 0x1460
 8000c7a:	6832      	ldr	r2, [r6, #0]
 8000c7c:	eb02 2000 	add.w	r0, r2, r0, lsl #8
 8000c80:	6030      	str	r0, [r6, #0]
        mode_++;
 8000c82:	3301      	adds	r3, #1
 8000c84:	f241 425c 	movw	r2, #5212	; 0x145c
 8000c88:	508b      	str	r3, [r1, r2]
 8000c8a:	e73b      	b.n	8000b04 <main+0x298>
        if ((checksum_ % 256) == 255)
 8000c8c:	4251      	negs	r1, r2
 8000c8e:	b2d2      	uxtb	r2, r2
 8000c90:	b2c9      	uxtb	r1, r1
 8000c92:	bf58      	it	pl
 8000c94:	424a      	negpl	r2, r1
 8000c96:	2aff      	cmp	r2, #255	; 0xff
 8000c98:	d005      	beq.n	8000ca6 <main+0x43a>
          mode_ = MODE_FIRST_FF;          /* Abandon the frame if the msg len is wrong */
 8000c9a:	2100      	movs	r1, #0
 8000c9c:	f241 435c 	movw	r3, #5212	; 0x145c
 8000ca0:	4a5c      	ldr	r2, [pc, #368]	; (8000e14 <main+0x5a8>)
 8000ca2:	50d1      	str	r1, [r2, r3]
 8000ca4:	e72e      	b.n	8000b04 <main+0x298>
          mode_++;
 8000ca6:	3301      	adds	r3, #1
 8000ca8:	f241 425c 	movw	r2, #5212	; 0x145c
 8000cac:	4959      	ldr	r1, [pc, #356]	; (8000e14 <main+0x5a8>)
 8000cae:	508b      	str	r3, [r1, r2]
 8000cb0:	e728      	b.n	8000b04 <main+0x298>
        topic_ = data;
 8000cb2:	4a58      	ldr	r2, [pc, #352]	; (8000e14 <main+0x5a8>)
 8000cb4:	f241 4164 	movw	r1, #5220	; 0x1464
 8000cb8:	5050      	str	r0, [r2, r1]
        mode_++;
 8000cba:	3301      	adds	r3, #1
 8000cbc:	f241 415c 	movw	r1, #5212	; 0x145c
 8000cc0:	5053      	str	r3, [r2, r1]
        checksum_ = data;               /* first byte included in checksum */
 8000cc2:	f241 436c 	movw	r3, #5228	; 0x146c
 8000cc6:	50d0      	str	r0, [r2, r3]
 8000cc8:	e71c      	b.n	8000b04 <main+0x298>
        topic_ += data << 8;
 8000cca:	4b52      	ldr	r3, [pc, #328]	; (8000e14 <main+0x5a8>)
 8000ccc:	f241 4164 	movw	r1, #5220	; 0x1464
 8000cd0:	585a      	ldr	r2, [r3, r1]
 8000cd2:	eb02 2000 	add.w	r0, r2, r0, lsl #8
 8000cd6:	5058      	str	r0, [r3, r1]
        mode_ = MODE_MESSAGE;
 8000cd8:	2107      	movs	r1, #7
 8000cda:	f241 425c 	movw	r2, #5212	; 0x145c
 8000cde:	5099      	str	r1, [r3, r2]
        if (bytes_ == 0)
 8000ce0:	f503 53a3 	add.w	r3, r3, #5216	; 0x1460
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	f47f af0c 	bne.w	8000b04 <main+0x298>
          mode_ = MODE_MSG_CHECKSUM;
 8000cec:	2108      	movs	r1, #8
 8000cee:	4613      	mov	r3, r2
 8000cf0:	4a48      	ldr	r2, [pc, #288]	; (8000e14 <main+0x5a8>)
 8000cf2:	50d1      	str	r1, [r2, r3]
 8000cf4:	e706      	b.n	8000b04 <main+0x298>
 8000cf6:	4b48      	ldr	r3, [pc, #288]	; (8000e18 <main+0x5ac>)
 8000cf8:	9300      	str	r3, [sp, #0]
 8000cfa:	4680      	mov	r8, r0
 8000cfc:	9001      	str	r0, [sp, #4]
 8000cfe:	9002      	str	r0, [sp, #8]
    publish(TopicInfo::ID_TIME, &t);
 8000d00:	460f      	mov	r7, r1
 8000d02:	f8d1 3b7c 	ldr.w	r3, [r1, #2940]	; 0xb7c
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	466a      	mov	r2, sp
 8000d0a:	210a      	movs	r1, #10
 8000d0c:	f607 307c 	addw	r0, r7, #2940	; 0xb7c
 8000d10:	4798      	blx	r3
 8000d12:	f001 f85b 	bl	8001dcc <HAL_GetTick>
    rt_time = hardware_.time();
 8000d16:	f8c7 0b84 	str.w	r0, [r7, #2948]	; 0xb84
    TopicInfo():
      topic_id(0),
      topic_name(""),
      message_type(""),
      md5sum(""),
      buffer_size(0)
 8000d1a:	4b40      	ldr	r3, [pc, #256]	; (8000e1c <main+0x5b0>)
 8000d1c:	9300      	str	r3, [sp, #0]
 8000d1e:	f8ad 8004 	strh.w	r8, [sp, #4]
 8000d22:	4b3f      	ldr	r3, [pc, #252]	; (8000e20 <main+0x5b4>)
 8000d24:	9302      	str	r3, [sp, #8]
 8000d26:	9303      	str	r3, [sp, #12]
 8000d28:	9304      	str	r3, [sp, #16]
 8000d2a:	f8cd 8014 	str.w	r8, [sp, #20]

  void negotiateTopics()
  {
    rosserial_msgs::TopicInfo ti;
    int i;
    for (i = 0; i < MAX_PUBLISHERS; i++)
 8000d2e:	4637      	mov	r7, r6
 8000d30:	e000      	b.n	8000d34 <main+0x4c8>
 8000d32:	3701      	adds	r7, #1
 8000d34:	2f18      	cmp	r7, #24
 8000d36:	dc2e      	bgt.n	8000d96 <main+0x52a>
    {
      if (publishers[i] != 0) // non-empty slot
 8000d38:	f207 2206 	addw	r2, r7, #518	; 0x206
 8000d3c:	4b35      	ldr	r3, [pc, #212]	; (8000e14 <main+0x5a8>)
 8000d3e:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8000d42:	f8d3 3b7c 	ldr.w	r3, [r3, #2940]	; 0xb7c
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d0f3      	beq.n	8000d32 <main+0x4c6>
      {
        ti.topic_id = publishers[i]->id_;
 8000d4a:	689a      	ldr	r2, [r3, #8]
 8000d4c:	f8ad 2004 	strh.w	r2, [sp, #4]
        ti.topic_name = (char *) publishers[i]->topic_;
 8000d50:	681a      	ldr	r2, [r3, #0]
 8000d52:	9202      	str	r2, [sp, #8]
        ti.message_type = (char *) publishers[i]->msg_->getType();
 8000d54:	6858      	ldr	r0, [r3, #4]
 8000d56:	6803      	ldr	r3, [r0, #0]
 8000d58:	689b      	ldr	r3, [r3, #8]
 8000d5a:	4798      	blx	r3
 8000d5c:	9003      	str	r0, [sp, #12]
        ti.md5sum = (char *) publishers[i]->msg_->getMD5();
 8000d5e:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 8000e14 <main+0x5a8>
 8000d62:	f207 2806 	addw	r8, r7, #518	; 0x206
 8000d66:	eb09 0888 	add.w	r8, r9, r8, lsl #2
 8000d6a:	f8d8 3b7c 	ldr.w	r3, [r8, #2940]	; 0xb7c
 8000d6e:	6858      	ldr	r0, [r3, #4]
 8000d70:	6803      	ldr	r3, [r0, #0]
 8000d72:	68db      	ldr	r3, [r3, #12]
 8000d74:	4798      	blx	r3
 8000d76:	9004      	str	r0, [sp, #16]
        ti.buffer_size = OUTPUT_SIZE;
 8000d78:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d7c:	9305      	str	r3, [sp, #20]
        publish(publishers[i]->getEndpointType(), &ti);
 8000d7e:	f8d9 3b7c 	ldr.w	r3, [r9, #2940]	; 0xb7c
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	f8d8 1b7c 	ldr.w	r1, [r8, #2940]	; 0xb7c
 8000d88:	466a      	mov	r2, sp
 8000d8a:	6909      	ldr	r1, [r1, #16]
 8000d8c:	f609 307c 	addw	r0, r9, #2940	; 0xb7c
 8000d90:	4798      	blx	r3
 8000d92:	e7ce      	b.n	8000d32 <main+0x4c6>
      }
    }
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8000d94:	3601      	adds	r6, #1
 8000d96:	2e18      	cmp	r6, #24
 8000d98:	dc2f      	bgt.n	8000dfa <main+0x58e>
    {
      if (subscribers[i] != 0) // non-empty slot
 8000d9a:	f206 221e 	addw	r2, r6, #542	; 0x21e
 8000d9e:	4b1d      	ldr	r3, [pc, #116]	; (8000e14 <main+0x5a8>)
 8000da0:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8000da4:	f8d3 0b80 	ldr.w	r0, [r3, #2944]	; 0xb80
 8000da8:	2800      	cmp	r0, #0
 8000daa:	d0f3      	beq.n	8000d94 <main+0x528>
      {
        ti.topic_id = subscribers[i]->id_;
 8000dac:	6843      	ldr	r3, [r0, #4]
 8000dae:	f8ad 3004 	strh.w	r3, [sp, #4]
        ti.topic_name = (char *) subscribers[i]->topic_;
 8000db2:	6883      	ldr	r3, [r0, #8]
 8000db4:	9302      	str	r3, [sp, #8]
        ti.message_type = (char *) subscribers[i]->getMsgType();
 8000db6:	6803      	ldr	r3, [r0, #0]
 8000db8:	689b      	ldr	r3, [r3, #8]
 8000dba:	4798      	blx	r3
 8000dbc:	9003      	str	r0, [sp, #12]
        ti.md5sum = (char *) subscribers[i]->getMsgMD5();
 8000dbe:	f8df 8054 	ldr.w	r8, [pc, #84]	; 8000e14 <main+0x5a8>
 8000dc2:	f206 271e 	addw	r7, r6, #542	; 0x21e
 8000dc6:	eb08 0787 	add.w	r7, r8, r7, lsl #2
 8000dca:	f8d7 0b80 	ldr.w	r0, [r7, #2944]	; 0xb80
 8000dce:	6803      	ldr	r3, [r0, #0]
 8000dd0:	68db      	ldr	r3, [r3, #12]
 8000dd2:	4798      	blx	r3
 8000dd4:	9004      	str	r0, [sp, #16]
        ti.buffer_size = INPUT_SIZE;
 8000dd6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000dda:	9305      	str	r3, [sp, #20]
        publish(subscribers[i]->getEndpointType(), &ti);
 8000ddc:	f8d8 3b7c 	ldr.w	r3, [r8, #2940]	; 0xb7c
 8000de0:	f8d3 9000 	ldr.w	r9, [r3]
 8000de4:	f8d7 0b80 	ldr.w	r0, [r7, #2944]	; 0xb80
 8000de8:	6803      	ldr	r3, [r0, #0]
 8000dea:	685b      	ldr	r3, [r3, #4]
 8000dec:	4798      	blx	r3
 8000dee:	466a      	mov	r2, sp
 8000df0:	4601      	mov	r1, r0
 8000df2:	f608 307c 	addw	r0, r8, #2940	; 0xb7c
 8000df6:	47c8      	blx	r9
 8000df8:	e7cc      	b.n	8000d94 <main+0x528>
      }
    }
    configured_ = true;
 8000dfa:	4b06      	ldr	r3, [pc, #24]	; (8000e14 <main+0x5a8>)
 8000dfc:	2101      	movs	r1, #1
 8000dfe:	f241 4270 	movw	r2, #5232	; 0x1470
 8000e02:	5499      	strb	r1, [r3, r2]
            last_sync_time = c_time;
 8000e04:	f241 4274 	movw	r2, #5236	; 0x1474
 8000e08:	509c      	str	r4, [r3, r2]
            last_sync_receive_time = c_time;
 8000e0a:	f241 4278 	movw	r2, #5240	; 0x1478
 8000e0e:	509c      	str	r4, [r3, r2]
 8000e10:	e15a      	b.n	80010c8 <main+0x85c>
 8000e12:	bf00      	nop
 8000e14:	2000053c 	.word	0x2000053c
 8000e18:	0800bfe0 	.word	0x0800bfe0
 8000e1c:	0800bff8 	.word	0x0800bff8
 8000e20:	0800c1f8 	.word	0x0800c1f8
 8000e24:	f000 ffd2 	bl	8001dcc <HAL_GetTick>
    uint32_t offset = hardware_.time() - rt_time;
 8000e28:	4ec1      	ldr	r6, [pc, #772]	; (8001130 <main+0x8c4>)
 8000e2a:	f8d6 3b84 	ldr.w	r3, [r6, #2948]	; 0xb84
 8000e2e:	1ac0      	subs	r0, r0, r3
    }

    virtual int deserialize(unsigned char *inbuffer)
    {
      int offset = 0;
      this->data.sec =  ((uint32_t) (*(inbuffer + offset)));
 8000e30:	f896 3b94 	ldrb.w	r3, [r6, #2964]	; 0xb94
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8000e34:	f896 2b95 	ldrb.w	r2, [r6, #2965]	; 0xb95
 8000e38:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8000e3c:	f896 2b96 	ldrb.w	r2, [r6, #2966]	; 0xb96
 8000e40:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8000e44:	f896 1b97 	ldrb.w	r1, [r6, #2967]	; 0xb97
 8000e48:	ea43 6101 	orr.w	r1, r3, r1, lsl #24
      offset += sizeof(this->data.sec);
      this->data.nsec =  ((uint32_t) (*(inbuffer + offset)));
 8000e4c:	f896 3b98 	ldrb.w	r3, [r6, #2968]	; 0xb98
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8000e50:	f896 2b99 	ldrb.w	r2, [r6, #2969]	; 0xb99
 8000e54:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8000e58:	f896 2b9a 	ldrb.w	r2, [r6, #2970]	; 0xb9a
 8000e5c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8000e60:	f896 2b9b 	ldrb.w	r2, [r6, #2971]	; 0xb9b
 8000e64:	ea43 6202 	orr.w	r2, r3, r2, lsl #24
    t.data.sec += offset / 1000;
 8000e68:	4fb2      	ldr	r7, [pc, #712]	; (8001134 <main+0x8c8>)
 8000e6a:	fba7 e300 	umull	lr, r3, r7, r0
 8000e6e:	099b      	lsrs	r3, r3, #6
 8000e70:	4419      	add	r1, r3
 8000e72:	9101      	str	r1, [sp, #4]
    t.data.nsec += (offset % 1000) * 1000000UL;
 8000e74:	f44f 797a 	mov.w	r9, #1000	; 0x3e8
 8000e78:	fb09 0313 	mls	r3, r9, r3, r0
 8000e7c:	f8df 82c8 	ldr.w	r8, [pc, #712]	; 8001148 <main+0x8dc>
 8000e80:	fb08 2303 	mla	r3, r8, r3, r2
 8000e84:	9302      	str	r3, [sp, #8]
 8000e86:	f000 ffa1 	bl	8001dcc <HAL_GetTick>
    sec_offset = new_now.sec - ms / 1000 - 1;
 8000e8a:	fba7 2300 	umull	r2, r3, r7, r0
 8000e8e:	099b      	lsrs	r3, r3, #6
 8000e90:	9a01      	ldr	r2, [sp, #4]
 8000e92:	1ad2      	subs	r2, r2, r3
 8000e94:	3a01      	subs	r2, #1
 8000e96:	f8c6 2b88 	str.w	r2, [r6, #2952]	; 0xb88
    nsec_offset = new_now.nsec - (ms % 1000) * 1000000UL + 1000000000UL;
 8000e9a:	fb09 0313 	mls	r3, r9, r3, r0
 8000e9e:	9a02      	ldr	r2, [sp, #8]
 8000ea0:	fb08 2313 	mls	r3, r8, r3, r2
 8000ea4:	4aa4      	ldr	r2, [pc, #656]	; (8001138 <main+0x8cc>)
 8000ea6:	441a      	add	r2, r3
 8000ea8:	f8c6 2b8c 	str.w	r2, [r6, #2956]	; 0xb8c
    normalizeSecNSec(sec_offset, nsec_offset);
 8000eac:	f606 318c 	addw	r1, r6, #2956	; 0xb8c
 8000eb0:	f606 3088 	addw	r0, r6, #2952	; 0xb88
 8000eb4:	f007 f81c 	bl	8007ef0 <_ZN3ros16normalizeSecNSecERmS0_>
 8000eb8:	f000 ff88 	bl	8001dcc <HAL_GetTick>
    last_sync_receive_time = hardware_.time();
 8000ebc:	f241 4378 	movw	r3, #5240	; 0x1478
 8000ec0:	50f0      	str	r0, [r6, r3]
 8000ec2:	e61f      	b.n	8000b04 <main+0x298>
    }

    virtual int deserialize(unsigned char *inbuffer)
    {
      int offset = 0;
      uint32_t ints_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8000ec4:	4b9a      	ldr	r3, [pc, #616]	; (8001130 <main+0x8c4>)
 8000ec6:	f893 6b94 	ldrb.w	r6, [r3, #2964]	; 0xb94
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8000eca:	f893 2b95 	ldrb.w	r2, [r3, #2965]	; 0xb95
 8000ece:	ea46 2602 	orr.w	r6, r6, r2, lsl #8
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8000ed2:	f893 2b96 	ldrb.w	r2, [r3, #2966]	; 0xb96
 8000ed6:	ea46 4602 	orr.w	r6, r6, r2, lsl #16
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8000eda:	f893 2b97 	ldrb.w	r2, [r3, #2967]	; 0xb97
 8000ede:	ea46 6602 	orr.w	r6, r6, r2, lsl #24
      offset += sizeof(this->ints_length);
      if(ints_lengthT > ints_length)
 8000ee2:	f241 4288 	movw	r2, #5256	; 0x1488
 8000ee6:	589b      	ldr	r3, [r3, r2]
 8000ee8:	429e      	cmp	r6, r3
 8000eea:	d826      	bhi.n	8000f3a <main+0x6ce>
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
      ints_length = ints_lengthT;
 8000eec:	f241 4388 	movw	r3, #5256	; 0x1488
 8000ef0:	4a8f      	ldr	r2, [pc, #572]	; (8001130 <main+0x8c4>)
 8000ef2:	50d6      	str	r6, [r2, r3]
      for( uint32_t i = 0; i < ints_length; i++){
 8000ef4:	2100      	movs	r1, #0
      offset += sizeof(this->ints_length);
 8000ef6:	2604      	movs	r6, #4
      for( uint32_t i = 0; i < ints_length; i++){
 8000ef8:	f241 4388 	movw	r3, #5256	; 0x1488
 8000efc:	4a8c      	ldr	r2, [pc, #560]	; (8001130 <main+0x8c4>)
 8000efe:	58d3      	ldr	r3, [r2, r3]
 8000f00:	428b      	cmp	r3, r1
 8000f02:	d926      	bls.n	8000f52 <main+0x6e6>
      union {
        int32_t real;
        uint32_t base;
      } u_st_ints;
      u_st_ints.base = 0;
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8000f04:	4610      	mov	r0, r2
 8000f06:	f602 3294 	addw	r2, r2, #2964	; 0xb94
 8000f0a:	5d93      	ldrb	r3, [r2, r6]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8000f0c:	1c77      	adds	r7, r6, #1
 8000f0e:	5dd7      	ldrb	r7, [r2, r7]
 8000f10:	ea43 2307 	orr.w	r3, r3, r7, lsl #8
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8000f14:	1cb7      	adds	r7, r6, #2
 8000f16:	5dd7      	ldrb	r7, [r2, r7]
 8000f18:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8000f1c:	1cf7      	adds	r7, r6, #3
 8000f1e:	5dd2      	ldrb	r2, [r2, r7]
 8000f20:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
      this->st_ints = u_st_ints.real;
 8000f24:	f241 428c 	movw	r2, #5260	; 0x148c
 8000f28:	5083      	str	r3, [r0, r2]
      offset += sizeof(this->st_ints);
 8000f2a:	3604      	adds	r6, #4
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
 8000f2c:	f241 4290 	movw	r2, #5264	; 0x1490
 8000f30:	5882      	ldr	r2, [r0, r2]
 8000f32:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
      for( uint32_t i = 0; i < ints_length; i++){
 8000f36:	3101      	adds	r1, #1
 8000f38:	e7de      	b.n	8000ef8 <main+0x68c>
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
 8000f3a:	f8df 81f4 	ldr.w	r8, [pc, #500]	; 8001130 <main+0x8c4>
 8000f3e:	f241 4790 	movw	r7, #5264	; 0x1490
 8000f42:	00b1      	lsls	r1, r6, #2
 8000f44:	f858 0007 	ldr.w	r0, [r8, r7]
 8000f48:	f00a fa88 	bl	800b45c <realloc>
 8000f4c:	f848 0007 	str.w	r0, [r8, r7]
 8000f50:	e7cc      	b.n	8000eec <main+0x680>
      }
      uint32_t floats_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8000f52:	4a77      	ldr	r2, [pc, #476]	; (8001130 <main+0x8c4>)
 8000f54:	f602 3394 	addw	r3, r2, #2964	; 0xb94
 8000f58:	5d9f      	ldrb	r7, [r3, r6]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8000f5a:	1c71      	adds	r1, r6, #1
 8000f5c:	5c59      	ldrb	r1, [r3, r1]
 8000f5e:	ea47 2701 	orr.w	r7, r7, r1, lsl #8
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8000f62:	1cb1      	adds	r1, r6, #2
 8000f64:	5c59      	ldrb	r1, [r3, r1]
 8000f66:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8000f6a:	1cf1      	adds	r1, r6, #3
 8000f6c:	5c5b      	ldrb	r3, [r3, r1]
 8000f6e:	ea47 6703 	orr.w	r7, r7, r3, lsl #24
      offset += sizeof(this->floats_length);
 8000f72:	3604      	adds	r6, #4
      if(floats_lengthT > floats_length)
 8000f74:	f241 4394 	movw	r3, #5268	; 0x1494
 8000f78:	58d3      	ldr	r3, [r2, r3]
 8000f7a:	429f      	cmp	r7, r3
 8000f7c:	d825      	bhi.n	8000fca <main+0x75e>
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
      floats_length = floats_lengthT;
 8000f7e:	f241 4394 	movw	r3, #5268	; 0x1494
 8000f82:	4a6b      	ldr	r2, [pc, #428]	; (8001130 <main+0x8c4>)
 8000f84:	50d7      	str	r7, [r2, r3]
      for( uint32_t i = 0; i < floats_length; i++){
 8000f86:	2100      	movs	r1, #0
 8000f88:	f241 4394 	movw	r3, #5268	; 0x1494
 8000f8c:	4a68      	ldr	r2, [pc, #416]	; (8001130 <main+0x8c4>)
 8000f8e:	58d3      	ldr	r3, [r2, r3]
 8000f90:	428b      	cmp	r3, r1
 8000f92:	d925      	bls.n	8000fe0 <main+0x774>
      union {
        float real;
        uint32_t base;
      } u_st_floats;
      u_st_floats.base = 0;
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8000f94:	4610      	mov	r0, r2
 8000f96:	f602 3294 	addw	r2, r2, #2964	; 0xb94
 8000f9a:	5d93      	ldrb	r3, [r2, r6]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8000f9c:	1c77      	adds	r7, r6, #1
 8000f9e:	5dd7      	ldrb	r7, [r2, r7]
 8000fa0:	ea43 2307 	orr.w	r3, r3, r7, lsl #8
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8000fa4:	1cb7      	adds	r7, r6, #2
 8000fa6:	5dd7      	ldrb	r7, [r2, r7]
 8000fa8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8000fac:	1cf7      	adds	r7, r6, #3
 8000fae:	5dd2      	ldrb	r2, [r2, r7]
 8000fb0:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
      this->st_floats = u_st_floats.real;
 8000fb4:	f241 4298 	movw	r2, #5272	; 0x1498
 8000fb8:	5083      	str	r3, [r0, r2]
      offset += sizeof(this->st_floats);
 8000fba:	3604      	adds	r6, #4
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
 8000fbc:	f241 429c 	movw	r2, #5276	; 0x149c
 8000fc0:	5882      	ldr	r2, [r0, r2]
 8000fc2:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
      for( uint32_t i = 0; i < floats_length; i++){
 8000fc6:	3101      	adds	r1, #1
 8000fc8:	e7de      	b.n	8000f88 <main+0x71c>
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
 8000fca:	4691      	mov	r9, r2
 8000fcc:	f241 489c 	movw	r8, #5276	; 0x149c
 8000fd0:	00b9      	lsls	r1, r7, #2
 8000fd2:	f852 0008 	ldr.w	r0, [r2, r8]
 8000fd6:	f00a fa41 	bl	800b45c <realloc>
 8000fda:	f849 0008 	str.w	r0, [r9, r8]
 8000fde:	e7ce      	b.n	8000f7e <main+0x712>
      }
      uint32_t strings_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8000fe0:	4b53      	ldr	r3, [pc, #332]	; (8001130 <main+0x8c4>)
 8000fe2:	f603 3294 	addw	r2, r3, #2964	; 0xb94
 8000fe6:	5d97      	ldrb	r7, [r2, r6]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8000fe8:	1c71      	adds	r1, r6, #1
 8000fea:	5c51      	ldrb	r1, [r2, r1]
 8000fec:	ea47 2701 	orr.w	r7, r7, r1, lsl #8
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8000ff0:	1cb1      	adds	r1, r6, #2
 8000ff2:	5c51      	ldrb	r1, [r2, r1]
 8000ff4:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8000ff8:	1cf1      	adds	r1, r6, #3
 8000ffa:	5c52      	ldrb	r2, [r2, r1]
 8000ffc:	ea47 6702 	orr.w	r7, r7, r2, lsl #24
      offset += sizeof(this->strings_length);
 8001000:	3604      	adds	r6, #4
      if(strings_lengthT > strings_length)
 8001002:	f503 53a5 	add.w	r3, r3, #5280	; 0x14a0
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	429f      	cmp	r7, r3
 800100a:	d803      	bhi.n	8001014 <main+0x7a8>
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
      strings_length = strings_lengthT;
 800100c:	4b4b      	ldr	r3, [pc, #300]	; (800113c <main+0x8d0>)
 800100e:	601f      	str	r7, [r3, #0]
      for( uint32_t i = 0; i < strings_length; i++){
 8001010:	2700      	movs	r7, #0
 8001012:	e03a      	b.n	800108a <main+0x81e>
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
 8001014:	f8df 9118 	ldr.w	r9, [pc, #280]	; 8001130 <main+0x8c4>
 8001018:	f241 48a8 	movw	r8, #5288	; 0x14a8
 800101c:	00b9      	lsls	r1, r7, #2
 800101e:	f859 0008 	ldr.w	r0, [r9, r8]
 8001022:	f00a fa1b 	bl	800b45c <realloc>
 8001026:	f849 0008 	str.w	r0, [r9, r8]
 800102a:	e7ef      	b.n	800100c <main+0x7a0>
  template<typename V, typename A>
  static void arrToVar(V& var, const A arr)
  {
    var = 0;
    for (size_t i = 0; i < sizeof(V); i++)
      var |= (arr[i] << (8 * i));
 800102c:	4b40      	ldr	r3, [pc, #256]	; (8001130 <main+0x8c4>)
 800102e:	4473      	add	r3, lr
 8001030:	4413      	add	r3, r2
 8001032:	f893 3b94 	ldrb.w	r3, [r3, #2964]	; 0xb94
 8001036:	00d0      	lsls	r0, r2, #3
 8001038:	4083      	lsls	r3, r0
 800103a:	4319      	orrs	r1, r3
    for (size_t i = 0; i < sizeof(V); i++)
 800103c:	3201      	adds	r2, #1
 800103e:	2a03      	cmp	r2, #3
 8001040:	d9f4      	bls.n	800102c <main+0x7c0>
      uint32_t length_st_strings;
      arrToVar(length_st_strings, (inbuffer + offset));
      offset += 4;
 8001042:	f106 0e04 	add.w	lr, r6, #4
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8001046:	4673      	mov	r3, lr
 8001048:	eb01 020e 	add.w	r2, r1, lr
 800104c:	429a      	cmp	r2, r3
 800104e:	d909      	bls.n	8001064 <main+0x7f8>
          inbuffer[k-1]=inbuffer[k];
 8001050:	4a37      	ldr	r2, [pc, #220]	; (8001130 <main+0x8c4>)
 8001052:	f602 3694 	addw	r6, r2, #2964	; 0xb94
 8001056:	1e58      	subs	r0, r3, #1
 8001058:	441a      	add	r2, r3
 800105a:	f892 2b94 	ldrb.w	r2, [r2, #2964]	; 0xb94
 800105e:	5432      	strb	r2, [r6, r0]
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8001060:	3301      	adds	r3, #1
 8001062:	e7f1      	b.n	8001048 <main+0x7dc>
      }
      inbuffer[offset+length_st_strings-1]=0;
 8001064:	4932      	ldr	r1, [pc, #200]	; (8001130 <main+0x8c4>)
 8001066:	f601 3394 	addw	r3, r1, #2964	; 0xb94
 800106a:	1e50      	subs	r0, r2, #1
 800106c:	2600      	movs	r6, #0
 800106e:	541e      	strb	r6, [r3, r0]
      this->st_strings = (char *)(inbuffer + offset-1);
 8001070:	f10e 36ff 	add.w	r6, lr, #4294967295	; 0xffffffff
 8001074:	4433      	add	r3, r6
 8001076:	f241 40a4 	movw	r0, #5284	; 0x14a4
 800107a:	500b      	str	r3, [r1, r0]
      offset += length_st_strings;
 800107c:	4616      	mov	r6, r2
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
 800107e:	f241 42a8 	movw	r2, #5288	; 0x14a8
 8001082:	588a      	ldr	r2, [r1, r2]
 8001084:	f842 3027 	str.w	r3, [r2, r7, lsl #2]
      for( uint32_t i = 0; i < strings_length; i++){
 8001088:	3701      	adds	r7, #1
 800108a:	4b2c      	ldr	r3, [pc, #176]	; (800113c <main+0x8d0>)
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	42bb      	cmp	r3, r7
 8001090:	d903      	bls.n	800109a <main+0x82e>
      arrToVar(length_st_strings, (inbuffer + offset));
 8001092:	46b6      	mov	lr, r6
    var = 0;
 8001094:	2100      	movs	r1, #0
    for (size_t i = 0; i < sizeof(V); i++)
 8001096:	460a      	mov	r2, r1
 8001098:	e7d1      	b.n	800103e <main+0x7d2>
            param_recieved = true;
 800109a:	2201      	movs	r2, #1
 800109c:	4b28      	ldr	r3, [pc, #160]	; (8001140 <main+0x8d4>)
 800109e:	701a      	strb	r2, [r3, #0]
 80010a0:	e530      	b.n	8000b04 <main+0x298>
            configured_ = false;
 80010a2:	2100      	movs	r1, #0
 80010a4:	f241 4370 	movw	r3, #5232	; 0x1470
 80010a8:	4a21      	ldr	r2, [pc, #132]	; (8001130 <main+0x8c4>)
 80010aa:	54d1      	strb	r1, [r2, r3]
 80010ac:	e52a      	b.n	8000b04 <main+0x298>
    if (configured_ && ((c_time - last_sync_time) > (SYNC_SECONDS * 500)))
 80010ae:	f241 4370 	movw	r3, #5232	; 0x1470
 80010b2:	4a1f      	ldr	r2, [pc, #124]	; (8001130 <main+0x8c4>)
 80010b4:	5cd3      	ldrb	r3, [r2, r3]
 80010b6:	b13b      	cbz	r3, 80010c8 <main+0x85c>
 80010b8:	f241 4374 	movw	r3, #5236	; 0x1474
 80010bc:	58d3      	ldr	r3, [r2, r3]
 80010be:	1ae3      	subs	r3, r4, r3
 80010c0:	f640 12c4 	movw	r2, #2500	; 0x9c4
 80010c4:	4293      	cmp	r3, r2
 80010c6:	d841      	bhi.n	800114c <main+0x8e0>
        unsigned int now = HAL_GetTick();
 80010c8:	f000 fe80 	bl	8001dcc <HAL_GetTick>
        if (!is_node_enabled)
 80010cc:	4b1d      	ldr	r3, [pc, #116]	; (8001144 <main+0x8d8>)
 80010ce:	f893 34ec 	ldrb.w	r3, [r3, #1260]	; 0x4ec
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	f47f ac87 	bne.w	80009e6 <main+0x17a>
    return configured_;
 80010d8:	f241 4370 	movw	r3, #5232	; 0x1470
 80010dc:	4a14      	ldr	r2, [pc, #80]	; (8001130 <main+0x8c4>)
 80010de:	5cd3      	ldrb	r3, [r2, r3]
            if(nh.connected())
 80010e0:	b11b      	cbz	r3, 80010ea <main+0x87e>
                is_node_enabled = true;
 80010e2:	2201      	movs	r2, #1
 80010e4:	4b17      	ldr	r3, [pc, #92]	; (8001144 <main+0x8d8>)
 80010e6:	f883 24ec 	strb.w	r2, [r3, #1260]	; 0x4ec
 80010ea:	f000 fe6f 	bl	8001dcc <HAL_GetTick>
 80010ee:	4604      	mov	r4, r0
    if ((c_time - last_sync_receive_time) > (SYNC_SECONDS * 2200))
 80010f0:	f241 4378 	movw	r3, #5240	; 0x1478
 80010f4:	4a0e      	ldr	r2, [pc, #56]	; (8001130 <main+0x8c4>)
 80010f6:	58d3      	ldr	r3, [r2, r3]
 80010f8:	1ac3      	subs	r3, r0, r3
 80010fa:	f642 22f8 	movw	r2, #11000	; 0x2af8
 80010fe:	4293      	cmp	r3, r2
 8001100:	d904      	bls.n	800110c <main+0x8a0>
      configured_ = false;
 8001102:	2100      	movs	r1, #0
 8001104:	f241 4370 	movw	r3, #5232	; 0x1470
 8001108:	4a09      	ldr	r2, [pc, #36]	; (8001130 <main+0x8c4>)
 800110a:	54d1      	strb	r1, [r2, r3]
    if (mode_ != MODE_FIRST_FF)
 800110c:	f241 435c 	movw	r3, #5212	; 0x145c
 8001110:	4a07      	ldr	r2, [pc, #28]	; (8001130 <main+0x8c4>)
 8001112:	58d3      	ldr	r3, [r2, r3]
 8001114:	2b00      	cmp	r3, #0
 8001116:	f43f acf5 	beq.w	8000b04 <main+0x298>
      if (c_time > last_msg_timeout_time)
 800111a:	f241 437c 	movw	r3, #5244	; 0x147c
 800111e:	58d3      	ldr	r3, [r2, r3]
 8001120:	429c      	cmp	r4, r3
 8001122:	f67f acef 	bls.w	8000b04 <main+0x298>
        mode_ = MODE_FIRST_FF;
 8001126:	2100      	movs	r1, #0
 8001128:	f241 435c 	movw	r3, #5212	; 0x145c
 800112c:	50d1      	str	r1, [r2, r3]
 800112e:	e4e9      	b.n	8000b04 <main+0x298>
 8001130:	2000053c 	.word	0x2000053c
 8001134:	10624dd3 	.word	0x10624dd3
 8001138:	3b9aca00 	.word	0x3b9aca00
 800113c:	200019dc 	.word	0x200019dc
 8001140:	200019bc 	.word	0x200019bc
 8001144:	20001634 	.word	0x20001634
 8001148:	000f4240 	.word	0x000f4240
      data()
 800114c:	4b0a      	ldr	r3, [pc, #40]	; (8001178 <main+0x90c>)
 800114e:	9300      	str	r3, [sp, #0]
 8001150:	2300      	movs	r3, #0
 8001152:	9301      	str	r3, [sp, #4]
 8001154:	9302      	str	r3, [sp, #8]
    publish(TopicInfo::ID_TIME, &t);
 8001156:	4e09      	ldr	r6, [pc, #36]	; (800117c <main+0x910>)
 8001158:	f8d6 3b7c 	ldr.w	r3, [r6, #2940]	; 0xb7c
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	466a      	mov	r2, sp
 8001160:	210a      	movs	r1, #10
 8001162:	f606 307c 	addw	r0, r6, #2940	; 0xb7c
 8001166:	4798      	blx	r3
 8001168:	f000 fe30 	bl	8001dcc <HAL_GetTick>
    rt_time = hardware_.time();
 800116c:	f8c6 0b84 	str.w	r0, [r6, #2948]	; 0xb84
      last_sync_time = c_time;
 8001170:	f241 4374 	movw	r3, #5236	; 0x1474
 8001174:	50f4      	str	r4, [r6, r3]
 8001176:	e7a7      	b.n	80010c8 <main+0x85c>
 8001178:	0800bfe0 	.word	0x0800bfe0
 800117c:	2000053c 	.word	0x2000053c

08001180 <_GLOBAL__sub_I_serial>:
}
 8001180:	b508      	push	{r3, lr}
 8001182:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001186:	2001      	movs	r0, #1
 8001188:	f7ff f8c8 	bl	800031c <_Z41__static_initialization_and_destruction_0ii>
 800118c:	bd08      	pop	{r3, pc}
 800118e:	bf00      	nop

08001190 <_ZN19StepperPositionCtrlC1EP12GPIO_TypeDeftS1_t>:

#include "stepper_position_ctrl.h"
#include <cmath>
#include <cstdlib>

StepperPositionCtrl::StepperPositionCtrl(GPIO_TypeDef *step_gpio, uint16_t step_pin, GPIO_TypeDef *dir_gpio, uint16_t dir_pin)
 8001190:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001194:	4605      	mov	r5, r0
 8001196:	4689      	mov	r9, r1
 8001198:	4690      	mov	r8, r2
 800119a:	461f      	mov	r7, r3
 800119c:	2400      	movs	r4, #0
 800119e:	60c4      	str	r4, [r0, #12]
 80011a0:	6104      	str	r4, [r0, #16]
 80011a2:	6144      	str	r4, [r0, #20]
 80011a4:	6184      	str	r4, [r0, #24]
 80011a6:	4b1d      	ldr	r3, [pc, #116]	; (800121c <_ZN19StepperPositionCtrlC1EP12GPIO_TypeDeftS1_t+0x8c>)
 80011a8:	61c3      	str	r3, [r0, #28]
 80011aa:	f880 4020 	strb.w	r4, [r0, #32]
 80011ae:	f100 0624 	add.w	r6, r0, #36	; 0x24
 80011b2:	22a0      	movs	r2, #160	; 0xa0
 80011b4:	4621      	mov	r1, r4
 80011b6:	4630      	mov	r0, r6
 80011b8:	f00a f93b 	bl	800b432 <memset>
 80011bc:	2301      	movs	r3, #1
 80011be:	636b      	str	r3, [r5, #52]	; 0x34
 80011c0:	64ab      	str	r3, [r5, #72]	; 0x48
 80011c2:	65eb      	str	r3, [r5, #92]	; 0x5c
 80011c4:	672b      	str	r3, [r5, #112]	; 0x70
 80011c6:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
 80011ca:	f8c5 3098 	str.w	r3, [r5, #152]	; 0x98
 80011ce:	f8c5 30ac 	str.w	r3, [r5, #172]	; 0xac
 80011d2:	f8c5 30c0 	str.w	r3, [r5, #192]	; 0xc0
 80011d6:	f8c5 40c4 	str.w	r4, [r5, #196]	; 0xc4
 80011da:	f8c5 40c8 	str.w	r4, [r5, #200]	; 0xc8
 80011de:	f8c5 60cc 	str.w	r6, [r5, #204]	; 0xcc
{
    m_step_gpio = step_gpio;
 80011e2:	f8c5 9000 	str.w	r9, [r5]
    m_step_pin = step_pin;
 80011e6:	f8a5 8008 	strh.w	r8, [r5, #8]
    m_dir_gpio = dir_gpio;
 80011ea:	606f      	str	r7, [r5, #4]
    m_dir_pin = dir_pin;
 80011ec:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 80011f0:	816b      	strh	r3, [r5, #10]

    seg_buf_head = 0;
 80011f2:	f8c5 40c4 	str.w	r4, [r5, #196]	; 0xc4
    seg_buf_tail = 0;
 80011f6:	f8c5 40c8 	str.w	r4, [r5, #200]	; 0xc8

    for (int j = 0; j < seg_buf_size; j++)
 80011fa:	4621      	mov	r1, r4
 80011fc:	2907      	cmp	r1, #7
 80011fe:	dc09      	bgt.n	8001214 <_ZN19StepperPositionCtrlC1EP12GPIO_TypeDeftS1_t+0x84>
    {
        //seg_buf[j].bresenham_error = 0;
        seg_buf[j].remaining_ticks = 0;
 8001200:	008a      	lsls	r2, r1, #2
 8001202:	440a      	add	r2, r1
 8001204:	0093      	lsls	r3, r2, #2
 8001206:	442b      	add	r3, r5
 8001208:	2200      	movs	r2, #0
 800120a:	625a      	str	r2, [r3, #36]	; 0x24
        seg_buf[j].steps_total = 0;
 800120c:	629a      	str	r2, [r3, #40]	; 0x28
        seg_buf[j].ticks_total = 0;
 800120e:	62da      	str	r2, [r3, #44]	; 0x2c
    for (int j = 0; j < seg_buf_size; j++)
 8001210:	3101      	adds	r1, #1
 8001212:	e7f3      	b.n	80011fc <_ZN19StepperPositionCtrlC1EP12GPIO_TypeDeftS1_t+0x6c>
    }
}
 8001214:	4628      	mov	r0, r5
 8001216:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800121a:	bf00      	nop
 800121c:	ffff3cb0 	.word	0xffff3cb0

08001220 <_ZN19StepperPositionCtrl14reset_positionEv>:

void StepperPositionCtrl::reset_position(void)
{
    m_current_velocity = 0;
 8001220:	2300      	movs	r3, #0
 8001222:	6183      	str	r3, [r0, #24]
    m_current_position = 0;
 8001224:	6103      	str	r3, [r0, #16]
    m_actual_position = 0;
 8001226:	6143      	str	r3, [r0, #20]
    m_target_position = 0;
 8001228:	60c3      	str	r3, [r0, #12]
 800122a:	4770      	bx	lr

0800122c <_ZN19StepperPositionCtrl17calculate_profileEv>:
}

void StepperPositionCtrl::calculate_profile(void)
{
 800122c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001230:	b085      	sub	sp, #20
 8001232:	4604      	mov	r4, r0
    if (!this->m_enabled)
 8001234:	f890 3020 	ldrb.w	r3, [r0, #32]
 8001238:	b91b      	cbnz	r3, 8001242 <_ZN19StepperPositionCtrl17calculate_profileEv+0x16>
    {
        this->m_current_velocity = 0;
 800123a:	6183      	str	r3, [r0, #24]
        this->m_current_position = 0;
 800123c:	6103      	str	r3, [r0, #16]
        this->m_actual_position = 0;
 800123e:	6143      	str	r3, [r0, #20]
        this->m_target_position = 0;
 8001240:	60c3      	str	r3, [r0, #12]
    int accel_until_ms = 0;
    int cruise_until_ms = 0;
    int decel_until_ms = 0;
    int cruise_vel = 0;

    int target = m_target_position;
 8001242:	f8d4 a00c 	ldr.w	sl, [r4, #12]

    int position_delta = m_target_position - m_current_position;
 8001246:	68e3      	ldr	r3, [r4, #12]
 8001248:	6922      	ldr	r2, [r4, #16]
    int position_delta_sgn = 1;
    if (position_delta < 0)
 800124a:	ebb3 0802 	subs.w	r8, r3, r2
 800124e:	d439      	bmi.n	80012c4 <_ZN19StepperPositionCtrl17calculate_profileEv+0x98>
    int position_delta_sgn = 1;
 8001250:	2601      	movs	r6, #1
    {
        position_delta_sgn = -1;
    }
    int position_delta_abs = position_delta_sgn * position_delta;
 8001252:	fb08 f806 	mul.w	r8, r8, r6

    int decision_delta = (int) (((2 * maximum_velocity * maximum_velocity) - (m_current_velocity * m_current_velocity))
 8001256:	69a3      	ldr	r3, [r4, #24]
 8001258:	69a0      	ldr	r0, [r4, #24]
 800125a:	fb00 f003 	mul.w	r0, r0, r3
            / (2.0 * maximum_acceleration) + 0.9);
 800125e:	f1c0 40f4 	rsb	r0, r0, #2046820352	; 0x7a000000
 8001262:	f500 1090 	add.w	r0, r0, #1179648	; 0x120000
 8001266:	f006 ffff 	bl	8008268 <__aeabi_i2d>
 800126a:	2200      	movs	r2, #0
 800126c:	4b78      	ldr	r3, [pc, #480]	; (8001450 <_ZN19StepperPositionCtrl17calculate_profileEv+0x224>)
 800126e:	f007 f98b 	bl	8008588 <__aeabi_ddiv>
 8001272:	a375      	add	r3, pc, #468	; (adr r3, 8001448 <_ZN19StepperPositionCtrl17calculate_profileEv+0x21c>)
 8001274:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001278:	f006 feaa 	bl	8007fd0 <__adddf3>
 800127c:	f007 fb0a 	bl	8008894 <__aeabi_d2iz>

    cruise_until_ms = (position_delta_abs - decision_delta) / maximum_velocity;
 8001280:	eba8 0000 	sub.w	r0, r8, r0
 8001284:	4b73      	ldr	r3, [pc, #460]	; (8001454 <_ZN19StepperPositionCtrl17calculate_profileEv+0x228>)
 8001286:	fb83 2300 	smull	r2, r3, r3, r0
 800128a:	17c0      	asrs	r0, r0, #31
 800128c:	ebc0 20e3 	rsb	r0, r0, r3, asr #11

    int accel = position_delta_sgn * maximum_acceleration;
 8001290:	eb06 0346 	add.w	r3, r6, r6, lsl #1
 8001294:	00df      	lsls	r7, r3, #3
 8001296:	463d      	mov	r5, r7
    int decel = -accel;
 8001298:	427b      	negs	r3, r7
 800129a:	9301      	str	r3, [sp, #4]

    if (cruise_until_ms > 0)
 800129c:	2800      	cmp	r0, #0
 800129e:	dd14      	ble.n	80012ca <_ZN19StepperPositionCtrl17calculate_profileEv+0x9e>
    {
        // trapezoidal profile
        accel_until_ms = (maximum_velocity - (position_delta_sgn * m_current_velocity)) / maximum_acceleration;
 80012a0:	69a3      	ldr	r3, [r4, #24]
 80012a2:	fb03 f306 	mul.w	r3, r3, r6
 80012a6:	f5c3 43fa 	rsb	r3, r3, #32000	; 0x7d00
 80012aa:	4a6b      	ldr	r2, [pc, #428]	; (8001458 <_ZN19StepperPositionCtrl17calculate_profileEv+0x22c>)
 80012ac:	fb82 1203 	smull	r1, r2, r2, r3
 80012b0:	17db      	asrs	r3, r3, #31
 80012b2:	ebc3 02a2 	rsb	r2, r3, r2, asr #2
        decel_until_ms = maximum_velocity / maximum_acceleration;
        cruise_vel = position_delta_sgn * maximum_velocity;
 80012b6:	f44f 41fa 	mov.w	r1, #32000	; 0x7d00
 80012ba:	fb01 f106 	mul.w	r1, r1, r6
        decel_until_ms = maximum_velocity / maximum_acceleration;
 80012be:	f240 5635 	movw	r6, #1333	; 0x535
 80012c2:	e09d      	b.n	8001400 <_ZN19StepperPositionCtrl17calculate_profileEv+0x1d4>
        position_delta_sgn = -1;
 80012c4:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 80012c8:	e7c3      	b.n	8001252 <_ZN19StepperPositionCtrl17calculate_profileEv+0x26>
    }
    else
    {
        int cruise_vel_abs = (int) sqrt(
                ((2.0 * position_delta_abs * maximum_acceleration) + ((double) m_current_velocity * m_current_velocity)) / 2.0);
 80012ca:	4640      	mov	r0, r8
 80012cc:	f006 ffcc 	bl	8008268 <__aeabi_i2d>
 80012d0:	4602      	mov	r2, r0
 80012d2:	460b      	mov	r3, r1
 80012d4:	f006 fe7c 	bl	8007fd0 <__adddf3>
 80012d8:	2200      	movs	r2, #0
 80012da:	4b60      	ldr	r3, [pc, #384]	; (800145c <_ZN19StepperPositionCtrl17calculate_profileEv+0x230>)
 80012dc:	f007 f82a 	bl	8008334 <__aeabi_dmul>
 80012e0:	4680      	mov	r8, r0
 80012e2:	4689      	mov	r9, r1
 80012e4:	69a0      	ldr	r0, [r4, #24]
 80012e6:	f006 ffbf 	bl	8008268 <__aeabi_i2d>
 80012ea:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80012ee:	69a0      	ldr	r0, [r4, #24]
 80012f0:	f006 ffba 	bl	8008268 <__aeabi_i2d>
 80012f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80012f8:	f007 f81c 	bl	8008334 <__aeabi_dmul>
 80012fc:	4602      	mov	r2, r0
 80012fe:	460b      	mov	r3, r1
 8001300:	4640      	mov	r0, r8
 8001302:	4649      	mov	r1, r9
 8001304:	f006 fe64 	bl	8007fd0 <__adddf3>
        int cruise_vel_abs = (int) sqrt(
 8001308:	2200      	movs	r2, #0
 800130a:	4b55      	ldr	r3, [pc, #340]	; (8001460 <_ZN19StepperPositionCtrl17calculate_profileEv+0x234>)
 800130c:	f007 f812 	bl	8008334 <__aeabi_dmul>
 8001310:	f009 fd3c 	bl	800ad8c <sqrt>
                ((2.0 * position_delta_abs * maximum_acceleration) + ((double) m_current_velocity * m_current_velocity)) / 2.0);
 8001314:	f007 fabe 	bl	8008894 <__aeabi_d2iz>
        cruise_vel = position_delta_sgn * cruise_vel_abs;
 8001318:	fb00 f106 	mul.w	r1, r0, r6

        int current_vel_abs = abs(m_current_velocity);
 800131c:	69a3      	ldr	r3, [r4, #24]
 800131e:	2b00      	cmp	r3, #0
 8001320:	bfb8      	it	lt
 8001322:	425b      	neglt	r3, r3
        if (current_vel_abs > cruise_vel_abs)
 8001324:	4298      	cmp	r0, r3
 8001326:	da16      	bge.n	8001356 <_ZN19StepperPositionCtrl17calculate_profileEv+0x12a>
        {
            // special consideration for double-deceleration profile
            accel = -position_delta_sgn * maximum_acceleration;
 8001328:	eba6 0686 	sub.w	r6, r6, r6, lsl #2
 800132c:	00f7      	lsls	r7, r6, #3
 800132e:	463d      	mov	r5, r7
            decel = accel;

            accel_until_ms = (current_vel_abs - cruise_vel_abs) / maximum_acceleration;
 8001330:	1a1b      	subs	r3, r3, r0
 8001332:	4e49      	ldr	r6, [pc, #292]	; (8001458 <_ZN19StepperPositionCtrl17calculate_profileEv+0x22c>)
 8001334:	fb86 e203 	smull	lr, r2, r6, r3
 8001338:	17db      	asrs	r3, r3, #31
 800133a:	ebc3 02a2 	rsb	r2, r3, r2, asr #2
            decel_until_ms = cruise_vel_abs / maximum_acceleration;
 800133e:	fb86 3600 	smull	r3, r6, r6, r0
 8001342:	17c0      	asrs	r0, r0, #31
 8001344:	ebc0 06a6 	rsb	r6, r0, r6, asr #2
            decel = accel;
 8001348:	9701      	str	r7, [sp, #4]
            // no time
            accel_until_ms = 0;
            decel_until_ms = 0;
        }
        //decel_until_ms = cruise_vel_abs / maximum_acceleration;
        cruise_until_ms = 0;
 800134a:	2000      	movs	r0, #0
 800134c:	e058      	b.n	8001400 <_ZN19StepperPositionCtrl17calculate_profileEv+0x1d4>
            decel_until_ms = 0;
 800134e:	2600      	movs	r6, #0
        cruise_until_ms = 0;
 8001350:	4630      	mov	r0, r6
            accel_until_ms = 0;
 8001352:	4632      	mov	r2, r6
 8001354:	e054      	b.n	8001400 <_ZN19StepperPositionCtrl17calculate_profileEv+0x1d4>
        else if (cruise_vel_abs > 500)
 8001356:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
 800135a:	ddf8      	ble.n	800134e <_ZN19StepperPositionCtrl17calculate_profileEv+0x122>
            accel_until_ms = (cruise_vel_abs - current_vel_abs) / maximum_acceleration;
 800135c:	1ac3      	subs	r3, r0, r3
 800135e:	4e3e      	ldr	r6, [pc, #248]	; (8001458 <_ZN19StepperPositionCtrl17calculate_profileEv+0x22c>)
 8001360:	fb86 7203 	smull	r7, r2, r6, r3
 8001364:	17db      	asrs	r3, r3, #31
 8001366:	ebc3 02a2 	rsb	r2, r3, r2, asr #2
            decel_until_ms = cruise_vel_abs / maximum_acceleration;
 800136a:	fb86 3600 	smull	r3, r6, r6, r0
 800136e:	17c0      	asrs	r0, r0, #31
 8001370:	ebc0 06a6 	rsb	r6, r0, r6, asr #2
        cruise_until_ms = 0;
 8001374:	2000      	movs	r0, #0
 8001376:	e043      	b.n	8001400 <_ZN19StepperPositionCtrl17calculate_profileEv+0x1d4>
        {
            // acceleration phase
            m_current_velocity += accel;
            accel_until_ms--;
        }
        else if (cruise_until_ms > 0)
 8001378:	2800      	cmp	r0, #0
 800137a:	dd02      	ble.n	8001382 <_ZN19StepperPositionCtrl17calculate_profileEv+0x156>
        {
            // cruise phase
            m_current_velocity = cruise_vel;
 800137c:	61a1      	str	r1, [r4, #24]
            cruise_until_ms--;
 800137e:	3801      	subs	r0, #1
 8001380:	e04d      	b.n	800141e <_ZN19StepperPositionCtrl17calculate_profileEv+0x1f2>
        }
        else if (decel_until_ms > 1)
 8001382:	2e01      	cmp	r6, #1
 8001384:	dd05      	ble.n	8001392 <_ZN19StepperPositionCtrl17calculate_profileEv+0x166>
        {
            // decel phase
            m_current_velocity += decel;
 8001386:	69a3      	ldr	r3, [r4, #24]
 8001388:	9f01      	ldr	r7, [sp, #4]
 800138a:	443b      	add	r3, r7
 800138c:	61a3      	str	r3, [r4, #24]
            decel_until_ms--;
 800138e:	3e01      	subs	r6, #1
 8001390:	e045      	b.n	800141e <_ZN19StepperPositionCtrl17calculate_profileEv+0x1f2>
        }
        else
        {
            // end of motion
            m_current_velocity = target - m_current_position;
 8001392:	6923      	ldr	r3, [r4, #16]
 8001394:	ebaa 0303 	sub.w	r3, sl, r3
 8001398:	61a3      	str	r3, [r4, #24]
 800139a:	e040      	b.n	800141e <_ZN19StepperPositionCtrl17calculate_profileEv+0x1f2>
        int velocity_sgn = 1;
        int velocity_abs;

        if (m_current_velocity < 0)
        {
            seg->dir_pattern = this->m_dir_pin << 16;
 800139c:	f8b4 e00a 	ldrh.w	lr, [r4, #10]
 80013a0:	ea4f 470e 	mov.w	r7, lr, lsl #16
 80013a4:	eb08 0c88 	add.w	ip, r8, r8, lsl #2
 80013a8:	ea4f 038c 	mov.w	r3, ip, lsl #2
 80013ac:	4423      	add	r3, r4
 80013ae:	631f      	str	r7, [r3, #48]	; 0x30
            velocity_sgn = -1;
 80013b0:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
            seg->dir_pattern = this->m_dir_pin;
            velocity_sgn = 1;
        }

        seg->step_dir = velocity_sgn;
        velocity_abs = velocity_sgn * m_current_velocity;
 80013b4:	69a3      	ldr	r3, [r4, #24]
 80013b6:	fb03 fc07 	mul.w	ip, r3, r7

        //volatile int steps = (int) ((velocity_abs / 1000.0) + 0.5);  // in steps
        //int steps = (int) (velocity_abs / 1000);  // in steps
        seg->steps_total = velocity_abs;
 80013ba:	ea4f 0988 	mov.w	r9, r8, lsl #2
 80013be:	eb09 0b08 	add.w	fp, r9, r8
 80013c2:	ea4f 038b 	mov.w	r3, fp, lsl #2
 80013c6:	4423      	add	r3, r4
 80013c8:	f8c3 c028 	str.w	ip, [r3, #40]	; 0x28
        seg->ticks_total = ticks_per_ms * 1000;
 80013cc:	f24c 3b50 	movw	fp, #50000	; 0xc350
 80013d0:	f8c3 b02c 	str.w	fp, [r3, #44]	; 0x2c
        seg->remaining_ticks = ticks_per_ms;
 80013d4:	f04f 0b32 	mov.w	fp, #50	; 0x32
 80013d8:	f8c3 b024 	str.w	fp, [r3, #36]	; 0x24

        seg->step_dir = velocity_sgn;
 80013dc:	eb09 0308 	add.w	r3, r9, r8
 80013e0:	ea4f 0883 	mov.w	r8, r3, lsl #2
 80013e4:	44a0      	add	r8, r4
 80013e6:	f8c8 7034 	str.w	r7, [r8, #52]	; 0x34

        seg_buf_head = ((seg_buf_head + 1) & seg_buf_mask);
 80013ea:	f8d4 30c4 	ldr.w	r3, [r4, #196]	; 0xc4
 80013ee:	3301      	adds	r3, #1
 80013f0:	f003 0307 	and.w	r3, r3, #7
 80013f4:	f8c4 30c4 	str.w	r3, [r4, #196]	; 0xc4

        m_current_position += velocity_sgn * velocity_abs;
 80013f8:	6923      	ldr	r3, [r4, #16]
 80013fa:	fb0c 3307 	mla	r3, ip, r7, r3
 80013fe:	6123      	str	r3, [r4, #16]
    while (((seg_buf_head + 1) & seg_buf_mask) != seg_buf_tail)
 8001400:	f8d4 30c4 	ldr.w	r3, [r4, #196]	; 0xc4
 8001404:	3301      	adds	r3, #1
 8001406:	f003 0307 	and.w	r3, r3, #7
 800140a:	f8d4 70c8 	ldr.w	r7, [r4, #200]	; 0xc8
 800140e:	42bb      	cmp	r3, r7
 8001410:	d016      	beq.n	8001440 <_ZN19StepperPositionCtrl17calculate_profileEv+0x214>
        if (accel_until_ms > 0)
 8001412:	2a00      	cmp	r2, #0
 8001414:	ddb0      	ble.n	8001378 <_ZN19StepperPositionCtrl17calculate_profileEv+0x14c>
            m_current_velocity += accel;
 8001416:	69a3      	ldr	r3, [r4, #24]
 8001418:	442b      	add	r3, r5
 800141a:	61a3      	str	r3, [r4, #24]
            accel_until_ms--;
 800141c:	3a01      	subs	r2, #1
        auto *seg = &seg_buf[seg_buf_head];
 800141e:	f8d4 80c4 	ldr.w	r8, [r4, #196]	; 0xc4
        if (m_current_velocity < 0)
 8001422:	69a3      	ldr	r3, [r4, #24]
 8001424:	2b00      	cmp	r3, #0
 8001426:	dbb9      	blt.n	800139c <_ZN19StepperPositionCtrl17calculate_profileEv+0x170>
            seg->dir_pattern = this->m_dir_pin;
 8001428:	f8b4 e00a 	ldrh.w	lr, [r4, #10]
 800142c:	fa1f f78e 	uxth.w	r7, lr
 8001430:	eb08 0c88 	add.w	ip, r8, r8, lsl #2
 8001434:	ea4f 038c 	mov.w	r3, ip, lsl #2
 8001438:	4423      	add	r3, r4
 800143a:	631f      	str	r7, [r3, #48]	; 0x30
            velocity_sgn = 1;
 800143c:	2701      	movs	r7, #1
 800143e:	e7b9      	b.n	80013b4 <_ZN19StepperPositionCtrl17calculate_profileEv+0x188>
        //m_current_position = tmp_pos;
        //m_current_velocity = tmp_vel;

        //trace_printf("%d,%d,%d\n", m_target, m_current_position, m_current_velocity);
    }
}
 8001440:	b005      	add	sp, #20
 8001442:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001446:	bf00      	nop
 8001448:	cccccccd 	.word	0xcccccccd
 800144c:	3feccccc 	.word	0x3feccccc
 8001450:	40480000 	.word	0x40480000
 8001454:	10624dd3 	.word	0x10624dd3
 8001458:	2aaaaaab 	.word	0x2aaaaaab
 800145c:	40380000 	.word	0x40380000
 8001460:	3fe00000 	.word	0x3fe00000

08001464 <_ZN19StepperPositionCtrl19set_target_positionEi>:

void StepperPositionCtrl::set_target_position(int target)
{
    if (this->m_enabled)
 8001464:	f890 3020 	ldrb.w	r3, [r0, #32]
 8001468:	b123      	cbz	r3, 8001474 <_ZN19StepperPositionCtrl19set_target_positionEi+0x10>
    {
        this->m_target_position = target * 1000;       // convert to milli-steps
 800146a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800146e:	fb03 f101 	mul.w	r1, r3, r1
 8001472:	60c1      	str	r1, [r0, #12]
 8001474:	4770      	bx	lr
 8001476:	bf00      	nop

08001478 <_ZN19StepperVelocityCtrlC1EP12GPIO_TypeDeftS1_t>:

#include "stm32f1xx_hal.h"
#include <cmath>
#include <cstdlib>

StepperVelocityCtrl::StepperVelocityCtrl(GPIO_TypeDef *step_gpio, uint16_t step_pin, GPIO_TypeDef *dir_gpio, uint16_t dir_pin)
 8001478:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800147c:	4605      	mov	r5, r0
 800147e:	4689      	mov	r9, r1
 8001480:	4690      	mov	r8, r2
 8001482:	461f      	mov	r7, r3
 8001484:	2400      	movs	r4, #0
 8001486:	60c4      	str	r4, [r0, #12]
 8001488:	6104      	str	r4, [r0, #16]
 800148a:	4b1c      	ldr	r3, [pc, #112]	; (80014fc <_ZN19StepperVelocityCtrlC1EP12GPIO_TypeDeftS1_t+0x84>)
 800148c:	6143      	str	r3, [r0, #20]
 800148e:	7604      	strb	r4, [r0, #24]
 8001490:	f100 061c 	add.w	r6, r0, #28
 8001494:	22a0      	movs	r2, #160	; 0xa0
 8001496:	4621      	mov	r1, r4
 8001498:	4630      	mov	r0, r6
 800149a:	f009 ffca 	bl	800b432 <memset>
 800149e:	2301      	movs	r3, #1
 80014a0:	62eb      	str	r3, [r5, #44]	; 0x2c
 80014a2:	642b      	str	r3, [r5, #64]	; 0x40
 80014a4:	656b      	str	r3, [r5, #84]	; 0x54
 80014a6:	66ab      	str	r3, [r5, #104]	; 0x68
 80014a8:	67eb      	str	r3, [r5, #124]	; 0x7c
 80014aa:	f8c5 3090 	str.w	r3, [r5, #144]	; 0x90
 80014ae:	f8c5 30a4 	str.w	r3, [r5, #164]	; 0xa4
 80014b2:	f8c5 30b8 	str.w	r3, [r5, #184]	; 0xb8
 80014b6:	f8c5 40bc 	str.w	r4, [r5, #188]	; 0xbc
 80014ba:	f8c5 40c0 	str.w	r4, [r5, #192]	; 0xc0
 80014be:	f8c5 60c4 	str.w	r6, [r5, #196]	; 0xc4
{
    m_step_gpio = step_gpio;
 80014c2:	f8c5 9000 	str.w	r9, [r5]
    m_step_pin = step_pin;
 80014c6:	f8a5 8008 	strh.w	r8, [r5, #8]
    m_dir_gpio = dir_gpio;
 80014ca:	606f      	str	r7, [r5, #4]
    m_dir_pin = dir_pin;
 80014cc:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 80014d0:	816b      	strh	r3, [r5, #10]

    seg_buf_head = 0;
 80014d2:	f8c5 40bc 	str.w	r4, [r5, #188]	; 0xbc
    seg_buf_tail = 0;
 80014d6:	f8c5 40c0 	str.w	r4, [r5, #192]	; 0xc0

    for (int i = 0; i < seg_buf_size; i++)
 80014da:	4621      	mov	r1, r4
 80014dc:	2907      	cmp	r1, #7
 80014de:	dc09      	bgt.n	80014f4 <_ZN19StepperVelocityCtrlC1EP12GPIO_TypeDeftS1_t+0x7c>
    {
        seg_buf[i].steps_total = 0;
 80014e0:	008a      	lsls	r2, r1, #2
 80014e2:	440a      	add	r2, r1
 80014e4:	0093      	lsls	r3, r2, #2
 80014e6:	442b      	add	r3, r5
 80014e8:	2200      	movs	r2, #0
 80014ea:	621a      	str	r2, [r3, #32]
        seg_buf[i].remaining_ticks = 0;
 80014ec:	61da      	str	r2, [r3, #28]
        seg_buf[i].ticks_total = 0;
 80014ee:	625a      	str	r2, [r3, #36]	; 0x24
    for (int i = 0; i < seg_buf_size; i++)
 80014f0:	3101      	adds	r1, #1
 80014f2:	e7f3      	b.n	80014dc <_ZN19StepperVelocityCtrlC1EP12GPIO_TypeDeftS1_t+0x64>
    }
}
 80014f4:	4628      	mov	r0, r5
 80014f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80014fa:	bf00      	nop
 80014fc:	ffff3cb0 	.word	0xffff3cb0

08001500 <_ZN19StepperVelocityCtrl17calculate_profileEv>:

void StepperVelocityCtrl::calculate_profile(void)
{
 8001500:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001502:	4604      	mov	r4, r0
    //

    if (!this->m_enabled)
 8001504:	7e03      	ldrb	r3, [r0, #24]
 8001506:	b903      	cbnz	r3, 800150a <_ZN19StepperVelocityCtrl17calculate_profileEv+0xa>
    {
        this->m_target_velocity = 0;
 8001508:	60c3      	str	r3, [r0, #12]
    }

    int vel_diff = m_target_velocity - m_current_velocity;
 800150a:	68e5      	ldr	r5, [r4, #12]
 800150c:	6923      	ldr	r3, [r4, #16]
 800150e:	1aed      	subs	r5, r5, r3
    int vel_diff_abs = abs(vel_diff);
    int accel_until_ms = vel_diff_abs / maximum_acceleration;  // in ms
 8001510:	ea85 70e5 	eor.w	r0, r5, r5, asr #31
 8001514:	eba0 70e5 	sub.w	r0, r0, r5, asr #31
 8001518:	f006 fea6 	bl	8008268 <__aeabi_i2d>
 800151c:	2200      	movs	r2, #0
 800151e:	4b28      	ldr	r3, [pc, #160]	; (80015c0 <_ZN19StepperVelocityCtrl17calculate_profileEv+0xc0>)
 8001520:	f007 f832 	bl	8008588 <__aeabi_ddiv>
 8001524:	f007 f9b6 	bl	8008894 <__aeabi_d2iz>

    int accel = 0;

    if (vel_diff < 0)
 8001528:	2d00      	cmp	r5, #0
 800152a:	db01      	blt.n	8001530 <_ZN19StepperVelocityCtrl17calculate_profileEv+0x30>
    {
        accel = -maximum_acceleration;
    }
    else
    {
        accel = maximum_acceleration;
 800152c:	25a0      	movs	r5, #160	; 0xa0
 800152e:	e027      	b.n	8001580 <_ZN19StepperVelocityCtrl17calculate_profileEv+0x80>
        accel = -maximum_acceleration;
 8001530:	f06f 059f 	mvn.w	r5, #159	; 0x9f
 8001534:	e024      	b.n	8001580 <_ZN19StepperVelocityCtrl17calculate_profileEv+0x80>
            m_current_velocity += accel;
            accel_until_ms--;
        }
        else
        {
            m_current_velocity = m_target_velocity;
 8001536:	68e3      	ldr	r3, [r4, #12]
 8001538:	6123      	str	r3, [r4, #16]
 800153a:	e032      	b.n	80015a2 <_ZN19StepperVelocityCtrl17calculate_profileEv+0xa2>
        int velocity_sgn = 1;
        int velocity_abs;

        if (m_current_velocity < 0)
        {
            seg->dir_pattern = this->m_dir_pin << 16;
 800153c:	8962      	ldrh	r2, [r4, #10]
 800153e:	0412      	lsls	r2, r2, #16
 8001540:	eb01 0681 	add.w	r6, r1, r1, lsl #2
 8001544:	00b3      	lsls	r3, r6, #2
 8001546:	4423      	add	r3, r4
 8001548:	629a      	str	r2, [r3, #40]	; 0x28
            velocity_sgn = -1;
 800154a:	f04f 3eff 	mov.w	lr, #4294967295	; 0xffffffff
        {
            seg->dir_pattern = this->m_dir_pin;
            velocity_sgn = 1;
        }

        seg->step_dir = velocity_sgn;
 800154e:	008a      	lsls	r2, r1, #2
 8001550:	1857      	adds	r7, r2, r1
 8001552:	00bb      	lsls	r3, r7, #2
 8001554:	461f      	mov	r7, r3
 8001556:	4423      	add	r3, r4
 8001558:	f8c3 e02c 	str.w	lr, [r3, #44]	; 0x2c
        velocity_abs = velocity_sgn * m_current_velocity;
 800155c:	6926      	ldr	r6, [r4, #16]
 800155e:	fb06 f60e 	mul.w	r6, r6, lr

        seg->steps_total = velocity_abs;
 8001562:	621e      	str	r6, [r3, #32]

        seg->ticks_total = ticks_per_ms * 1000;
 8001564:	f24c 3650 	movw	r6, #50000	; 0xc350
 8001568:	625e      	str	r6, [r3, #36]	; 0x24
        seg->remaining_ticks = ticks_per_ms;
 800156a:	463a      	mov	r2, r7
 800156c:	4422      	add	r2, r4
 800156e:	2332      	movs	r3, #50	; 0x32
 8001570:	61d3      	str	r3, [r2, #28]

        seg_buf_head = ((seg_buf_head + 1) & seg_buf_mask);
 8001572:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
 8001576:	3301      	adds	r3, #1
 8001578:	f003 0307 	and.w	r3, r3, #7
 800157c:	f8c4 30bc 	str.w	r3, [r4, #188]	; 0xbc
    while (((seg_buf_head + 1) & seg_buf_mask) != seg_buf_tail)
 8001580:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
 8001584:	3301      	adds	r3, #1
 8001586:	f003 0307 	and.w	r3, r3, #7
 800158a:	f8d4 20c0 	ldr.w	r2, [r4, #192]	; 0xc0
 800158e:	4293      	cmp	r3, r2
 8001590:	d014      	beq.n	80015bc <_ZN19StepperVelocityCtrl17calculate_profileEv+0xbc>
        auto *seg = &seg_buf[seg_buf_head];
 8001592:	f8d4 10bc 	ldr.w	r1, [r4, #188]	; 0xbc
        if (accel_until_ms > 0)
 8001596:	2800      	cmp	r0, #0
 8001598:	ddcd      	ble.n	8001536 <_ZN19StepperVelocityCtrl17calculate_profileEv+0x36>
            m_current_velocity += accel;
 800159a:	6923      	ldr	r3, [r4, #16]
 800159c:	442b      	add	r3, r5
 800159e:	6123      	str	r3, [r4, #16]
            accel_until_ms--;
 80015a0:	3801      	subs	r0, #1
        if (m_current_velocity < 0)
 80015a2:	6923      	ldr	r3, [r4, #16]
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	dbc9      	blt.n	800153c <_ZN19StepperVelocityCtrl17calculate_profileEv+0x3c>
            seg->dir_pattern = this->m_dir_pin;
 80015a8:	8962      	ldrh	r2, [r4, #10]
 80015aa:	b292      	uxth	r2, r2
 80015ac:	eb01 0681 	add.w	r6, r1, r1, lsl #2
 80015b0:	00b3      	lsls	r3, r6, #2
 80015b2:	4423      	add	r3, r4
 80015b4:	629a      	str	r2, [r3, #40]	; 0x28
            velocity_sgn = 1;
 80015b6:	f04f 0e01 	mov.w	lr, #1
 80015ba:	e7c8      	b.n	800154e <_ZN19StepperVelocityCtrl17calculate_profileEv+0x4e>
 80015bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80015be:	bf00      	nop
 80015c0:	40640000 	.word	0x40640000

080015c4 <_ZN19StepperVelocityCtrl10set_targetEf>:
}

// target: rad/s
void StepperVelocityCtrl::set_target(float target)
{
    if (!this->m_enabled)
 80015c4:	7e03      	ldrb	r3, [r0, #24]
 80015c6:	b303      	cbz	r3, 800160a <_ZN19StepperVelocityCtrl10set_targetEf+0x46>
{
 80015c8:	b510      	push	{r4, lr}
 80015ca:	4604      	mov	r4, r0
    {
        this->m_target_velocity = 0;
    }
    else
    {
        m_target_velocity = target * steps_per_rad;
 80015cc:	4608      	mov	r0, r1
 80015ce:	f006 fe5d 	bl	800828c <__aeabi_f2d>
 80015d2:	a311      	add	r3, pc, #68	; (adr r3, 8001618 <_ZN19StepperVelocityCtrl10set_targetEf+0x54>)
 80015d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015d8:	f006 feac 	bl	8008334 <__aeabi_dmul>
 80015dc:	f007 f95a 	bl	8008894 <__aeabi_d2iz>
 80015e0:	60e0      	str	r0, [r4, #12]

        if (m_target_velocity < -maximum_velocity)
 80015e2:	68e0      	ldr	r0, [r4, #12]
 80015e4:	f006 fe40 	bl	8008268 <__aeabi_i2d>
 80015e8:	2200      	movs	r2, #0
 80015ea:	4b0d      	ldr	r3, [pc, #52]	; (8001620 <_ZN19StepperVelocityCtrl10set_targetEf+0x5c>)
 80015ec:	f007 f914 	bl	8008818 <__aeabi_dcmplt>
 80015f0:	b968      	cbnz	r0, 800160e <_ZN19StepperVelocityCtrl10set_targetEf+0x4a>
        {
            m_target_velocity = -maximum_velocity;
        }
        else if (m_target_velocity > maximum_velocity)
 80015f2:	68e0      	ldr	r0, [r4, #12]
 80015f4:	f006 fe38 	bl	8008268 <__aeabi_i2d>
 80015f8:	2200      	movs	r2, #0
 80015fa:	4b0a      	ldr	r3, [pc, #40]	; (8001624 <_ZN19StepperVelocityCtrl10set_targetEf+0x60>)
 80015fc:	f007 f92a 	bl	8008854 <__aeabi_dcmpgt>
 8001600:	b110      	cbz	r0, 8001608 <_ZN19StepperVelocityCtrl10set_targetEf+0x44>
        {
            m_target_velocity = maximum_velocity;
 8001602:	f44f 4396 	mov.w	r3, #19200	; 0x4b00
 8001606:	60e3      	str	r3, [r4, #12]
 8001608:	bd10      	pop	{r4, pc}
        this->m_target_velocity = 0;
 800160a:	60c3      	str	r3, [r0, #12]
 800160c:	4770      	bx	lr
            m_target_velocity = -maximum_velocity;
 800160e:	4b06      	ldr	r3, [pc, #24]	; (8001628 <_ZN19StepperVelocityCtrl10set_targetEf+0x64>)
 8001610:	60e3      	str	r3, [r4, #12]
 8001612:	bd10      	pop	{r4, pc}
 8001614:	f3af 8000 	nop.w
 8001618:	ab8b494c 	.word	0xab8b494c
 800161c:	407fd4bb 	.word	0x407fd4bb
 8001620:	c0d2c000 	.word	0xc0d2c000
 8001624:	40d2c000 	.word	0x40d2c000
 8001628:	ffffb500 	.word	0xffffb500

0800162c <HAL_MspInit>:
/* USER CODE END 0 */
/**
 * Initializes the Global MSP.
 */
void HAL_MspInit(void)
{
 800162c:	b500      	push	{lr}
 800162e:	b083      	sub	sp, #12
	/* USER CODE BEGIN MspInit 0 */

	/* USER CODE END MspInit 0 */

	__HAL_RCC_AFIO_CLK_ENABLE()
 8001630:	4b24      	ldr	r3, [pc, #144]	; (80016c4 <HAL_MspInit+0x98>)
 8001632:	699a      	ldr	r2, [r3, #24]
 8001634:	f042 0201 	orr.w	r2, r2, #1
 8001638:	619a      	str	r2, [r3, #24]
 800163a:	699a      	ldr	r2, [r3, #24]
 800163c:	f002 0201 	and.w	r2, r2, #1
 8001640:	9200      	str	r2, [sp, #0]
 8001642:	9a00      	ldr	r2, [sp, #0]
	;
	__HAL_RCC_PWR_CLK_ENABLE()
 8001644:	69da      	ldr	r2, [r3, #28]
 8001646:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800164a:	61da      	str	r2, [r3, #28]
 800164c:	69db      	ldr	r3, [r3, #28]
 800164e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001652:	9301      	str	r3, [sp, #4]
 8001654:	9b01      	ldr	r3, [sp, #4]
	;

	HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001656:	2003      	movs	r0, #3
 8001658:	f000 fc50 	bl	8001efc <HAL_NVIC_SetPriorityGrouping>

	/* System interrupt init*/
	/* MemoryManagement_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 800165c:	2200      	movs	r2, #0
 800165e:	4611      	mov	r1, r2
 8001660:	f06f 000b 	mvn.w	r0, #11
 8001664:	f000 fc5c 	bl	8001f20 <HAL_NVIC_SetPriority>
	/* BusFault_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8001668:	2200      	movs	r2, #0
 800166a:	4611      	mov	r1, r2
 800166c:	f06f 000a 	mvn.w	r0, #10
 8001670:	f000 fc56 	bl	8001f20 <HAL_NVIC_SetPriority>
	/* UsageFault_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8001674:	2200      	movs	r2, #0
 8001676:	4611      	mov	r1, r2
 8001678:	f06f 0009 	mvn.w	r0, #9
 800167c:	f000 fc50 	bl	8001f20 <HAL_NVIC_SetPriority>
	/* SVCall_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8001680:	2200      	movs	r2, #0
 8001682:	4611      	mov	r1, r2
 8001684:	f06f 0004 	mvn.w	r0, #4
 8001688:	f000 fc4a 	bl	8001f20 <HAL_NVIC_SetPriority>
	/* DebugMonitor_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 800168c:	2200      	movs	r2, #0
 800168e:	4611      	mov	r1, r2
 8001690:	f06f 0003 	mvn.w	r0, #3
 8001694:	f000 fc44 	bl	8001f20 <HAL_NVIC_SetPriority>
	/* PendSV_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8001698:	2200      	movs	r2, #0
 800169a:	4611      	mov	r1, r2
 800169c:	f06f 0001 	mvn.w	r0, #1
 80016a0:	f000 fc3e 	bl	8001f20 <HAL_NVIC_SetPriority>
	/* SysTick_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80016a4:	2200      	movs	r2, #0
 80016a6:	4611      	mov	r1, r2
 80016a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80016ac:	f000 fc38 	bl	8001f20 <HAL_NVIC_SetPriority>

	/**NOJTAG: JTAG-DP Disabled and SW-DP Enabled
	 */
	__HAL_AFIO_REMAP_SWJ_NOJTAG()
 80016b0:	4a05      	ldr	r2, [pc, #20]	; (80016c8 <HAL_MspInit+0x9c>)
 80016b2:	6853      	ldr	r3, [r2, #4]
 80016b4:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80016b8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80016bc:	6053      	str	r3, [r2, #4]
	;

	/* USER CODE BEGIN MspInit 1 */

	/* USER CODE END MspInit 1 */
}
 80016be:	b003      	add	sp, #12
 80016c0:	f85d fb04 	ldr.w	pc, [sp], #4
 80016c4:	40021000 	.word	0x40021000
 80016c8:	40010000 	.word	0x40010000

080016cc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80016cc:	b500      	push	{lr}
 80016ce:	b083      	sub	sp, #12
	if (htim_base->Instance == TIM3)
 80016d0:	6803      	ldr	r3, [r0, #0]
 80016d2:	4a17      	ldr	r2, [pc, #92]	; (8001730 <HAL_TIM_Base_MspInit+0x64>)
 80016d4:	4293      	cmp	r3, r2
 80016d6:	d005      	beq.n	80016e4 <HAL_TIM_Base_MspInit+0x18>
		;
		/* TIM3 interrupt Init */
		HAL_NVIC_SetPriority(TIM3_IRQn, 1, 0);
		HAL_NVIC_EnableIRQ(TIM3_IRQn);
	}
	else if (htim_base->Instance == TIM4)
 80016d8:	4a16      	ldr	r2, [pc, #88]	; (8001734 <HAL_TIM_Base_MspInit+0x68>)
 80016da:	4293      	cmp	r3, r2
 80016dc:	d015      	beq.n	800170a <HAL_TIM_Base_MspInit+0x3e>

		/* TIM3 interrupt Init */
		HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
		HAL_NVIC_EnableIRQ(TIM4_IRQn);
	}
}
 80016de:	b003      	add	sp, #12
 80016e0:	f85d fb04 	ldr.w	pc, [sp], #4
		__HAL_RCC_TIM3_CLK_ENABLE()
 80016e4:	4b14      	ldr	r3, [pc, #80]	; (8001738 <HAL_TIM_Base_MspInit+0x6c>)
 80016e6:	69da      	ldr	r2, [r3, #28]
 80016e8:	f042 0202 	orr.w	r2, r2, #2
 80016ec:	61da      	str	r2, [r3, #28]
 80016ee:	69db      	ldr	r3, [r3, #28]
 80016f0:	f003 0302 	and.w	r3, r3, #2
 80016f4:	9300      	str	r3, [sp, #0]
 80016f6:	9b00      	ldr	r3, [sp, #0]
		HAL_NVIC_SetPriority(TIM3_IRQn, 1, 0);
 80016f8:	2200      	movs	r2, #0
 80016fa:	2101      	movs	r1, #1
 80016fc:	201d      	movs	r0, #29
 80016fe:	f000 fc0f 	bl	8001f20 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001702:	201d      	movs	r0, #29
 8001704:	f000 fc3e 	bl	8001f84 <HAL_NVIC_EnableIRQ>
 8001708:	e7e9      	b.n	80016de <HAL_TIM_Base_MspInit+0x12>
		__HAL_RCC_TIM4_CLK_ENABLE()
 800170a:	4b0b      	ldr	r3, [pc, #44]	; (8001738 <HAL_TIM_Base_MspInit+0x6c>)
 800170c:	69da      	ldr	r2, [r3, #28]
 800170e:	f042 0204 	orr.w	r2, r2, #4
 8001712:	61da      	str	r2, [r3, #28]
 8001714:	69db      	ldr	r3, [r3, #28]
 8001716:	f003 0304 	and.w	r3, r3, #4
 800171a:	9301      	str	r3, [sp, #4]
 800171c:	9b01      	ldr	r3, [sp, #4]
		HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800171e:	2200      	movs	r2, #0
 8001720:	4611      	mov	r1, r2
 8001722:	201e      	movs	r0, #30
 8001724:	f000 fbfc 	bl	8001f20 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001728:	201e      	movs	r0, #30
 800172a:	f000 fc2b 	bl	8001f84 <HAL_NVIC_EnableIRQ>
}
 800172e:	e7d6      	b.n	80016de <HAL_TIM_Base_MspInit+0x12>
 8001730:	40000400 	.word	0x40000400
 8001734:	40000800 	.word	0x40000800
 8001738:	40021000 	.word	0x40021000

0800173c <HAL_TIM_Base_MspDeInit>:

void HAL_TIM_Base_MspDeInit(TIM_HandleTypeDef* htim_base)
{
 800173c:	b508      	push	{r3, lr}
	if (htim_base->Instance == TIM3)
 800173e:	6803      	ldr	r3, [r0, #0]
 8001740:	4a0d      	ldr	r2, [pc, #52]	; (8001778 <HAL_TIM_Base_MspDeInit+0x3c>)
 8001742:	4293      	cmp	r3, r2
 8001744:	d003      	beq.n	800174e <HAL_TIM_Base_MspDeInit+0x12>
		HAL_NVIC_DisableIRQ(TIM3_IRQn);
		/* USER CODE BEGIN TIM3_MspDeInit 1 */

		/* USER CODE END TIM3_MspDeInit 1 */
	}
	else if (htim_base->Instance == TIM4)
 8001746:	4a0d      	ldr	r2, [pc, #52]	; (800177c <HAL_TIM_Base_MspDeInit+0x40>)
 8001748:	4293      	cmp	r3, r2
 800174a:	d00a      	beq.n	8001762 <HAL_TIM_Base_MspDeInit+0x26>
 800174c:	bd08      	pop	{r3, pc}
		__HAL_RCC_TIM3_CLK_DISABLE();
 800174e:	f502 3203 	add.w	r2, r2, #134144	; 0x20c00
 8001752:	69d3      	ldr	r3, [r2, #28]
 8001754:	f023 0302 	bic.w	r3, r3, #2
 8001758:	61d3      	str	r3, [r2, #28]
		HAL_NVIC_DisableIRQ(TIM3_IRQn);
 800175a:	201d      	movs	r0, #29
 800175c:	f000 fc1e 	bl	8001f9c <HAL_NVIC_DisableIRQ>
 8001760:	bd08      	pop	{r3, pc}
	{
		/* Peripheral clock disable */
		__HAL_RCC_TIM4_CLK_DISABLE();
 8001762:	f502 3202 	add.w	r2, r2, #133120	; 0x20800
 8001766:	69d3      	ldr	r3, [r2, #28]
 8001768:	f023 0304 	bic.w	r3, r3, #4
 800176c:	61d3      	str	r3, [r2, #28]

		/* TIM3 interrupt DeInit */
		HAL_NVIC_DisableIRQ(TIM4_IRQn);
 800176e:	201e      	movs	r0, #30
 8001770:	f000 fc14 	bl	8001f9c <HAL_NVIC_DisableIRQ>
	}
}
 8001774:	e7ea      	b.n	800174c <HAL_TIM_Base_MspDeInit+0x10>
 8001776:	bf00      	nop
 8001778:	40000400 	.word	0x40000400
 800177c:	40000800 	.word	0x40000800

08001780 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
	GPIO_InitTypeDef GPIO_InitStruct;
	if (huart->Instance == USART1)
 8001780:	6802      	ldr	r2, [r0, #0]
 8001782:	4b33      	ldr	r3, [pc, #204]	; (8001850 <HAL_UART_MspInit+0xd0>)
 8001784:	429a      	cmp	r2, r3
 8001786:	d000      	beq.n	800178a <HAL_UART_MspInit+0xa>
 8001788:	4770      	bx	lr
{
 800178a:	b570      	push	{r4, r5, r6, lr}
 800178c:	b086      	sub	sp, #24
 800178e:	4604      	mov	r4, r0
	{
		/* USER CODE BEGIN USART1_MspInit 0 */

		/* USER CODE END USART1_MspInit 0 */
		/* Peripheral clock enable */
		__HAL_RCC_USART1_CLK_ENABLE()
 8001790:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 8001794:	699a      	ldr	r2, [r3, #24]
 8001796:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800179a:	619a      	str	r2, [r3, #24]
 800179c:	699b      	ldr	r3, [r3, #24]
 800179e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017a2:	9301      	str	r3, [sp, #4]
 80017a4:	9b01      	ldr	r3, [sp, #4]

		/**USART1 GPIO Configuration
		 PA9     ------> USART1_TX
		 PA10     ------> USART1_RX
		 */
		GPIO_InitStruct.Pin = GPIO_PIN_9;
 80017a6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80017aa:	9302      	str	r3, [sp, #8]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017ac:	2302      	movs	r3, #2
 80017ae:	9303      	str	r3, [sp, #12]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80017b0:	2303      	movs	r3, #3
 80017b2:	9305      	str	r3, [sp, #20]
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017b4:	4e27      	ldr	r6, [pc, #156]	; (8001854 <HAL_UART_MspInit+0xd4>)
 80017b6:	a902      	add	r1, sp, #8
 80017b8:	4630      	mov	r0, r6
 80017ba:	f001 fc95 	bl	80030e8 <HAL_GPIO_Init>

		GPIO_InitStruct.Pin = GPIO_PIN_10;
 80017be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80017c2:	9302      	str	r3, [sp, #8]
		GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017c4:	2500      	movs	r5, #0
 80017c6:	9503      	str	r5, [sp, #12]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017c8:	9504      	str	r5, [sp, #16]
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017ca:	a902      	add	r1, sp, #8
 80017cc:	4630      	mov	r0, r6
 80017ce:	f001 fc8b 	bl	80030e8 <HAL_GPIO_Init>

		/* USART1 DMA Init */
		/* USART1_RX Init */
		hdma_usart1_rx.Instance = DMA1_Channel5;
 80017d2:	4821      	ldr	r0, [pc, #132]	; (8001858 <HAL_UART_MspInit+0xd8>)
 80017d4:	4b21      	ldr	r3, [pc, #132]	; (800185c <HAL_UART_MspInit+0xdc>)
 80017d6:	6003      	str	r3, [r0, #0]
		hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80017d8:	6045      	str	r5, [r0, #4]
		hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80017da:	6085      	str	r5, [r0, #8]
		hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80017dc:	2380      	movs	r3, #128	; 0x80
 80017de:	60c3      	str	r3, [r0, #12]
		hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80017e0:	6105      	str	r5, [r0, #16]
		hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80017e2:	6145      	str	r5, [r0, #20]
		hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 80017e4:	2320      	movs	r3, #32
 80017e6:	6183      	str	r3, [r0, #24]
		hdma_usart1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 80017e8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80017ec:	61c3      	str	r3, [r0, #28]
		if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80017ee:	f000 fca5 	bl	800213c <HAL_DMA_Init>
 80017f2:	bb18      	cbnz	r0, 800183c <HAL_UART_MspInit+0xbc>
		{
			_Error_Handler(__FILE__, __LINE__);
		}

		__HAL_LINKDMA(huart, hdmarx, hdma_usart1_rx);
 80017f4:	4b18      	ldr	r3, [pc, #96]	; (8001858 <HAL_UART_MspInit+0xd8>)
 80017f6:	6363      	str	r3, [r4, #52]	; 0x34
 80017f8:	625c      	str	r4, [r3, #36]	; 0x24

		/* USART1_TX Init */
		hdma_usart1_tx.Instance = DMA1_Channel4;
 80017fa:	4819      	ldr	r0, [pc, #100]	; (8001860 <HAL_UART_MspInit+0xe0>)
 80017fc:	4b19      	ldr	r3, [pc, #100]	; (8001864 <HAL_UART_MspInit+0xe4>)
 80017fe:	6003      	str	r3, [r0, #0]
		hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001800:	2310      	movs	r3, #16
 8001802:	6043      	str	r3, [r0, #4]
		hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001804:	2300      	movs	r3, #0
 8001806:	6083      	str	r3, [r0, #8]
		hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001808:	2280      	movs	r2, #128	; 0x80
 800180a:	60c2      	str	r2, [r0, #12]
		hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800180c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001810:	6102      	str	r2, [r0, #16]
		hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001812:	6143      	str	r3, [r0, #20]
		hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8001814:	6183      	str	r3, [r0, #24]
		hdma_usart1_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001816:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800181a:	61c3      	str	r3, [r0, #28]
		if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 800181c:	f000 fc8e 	bl	800213c <HAL_DMA_Init>
 8001820:	b988      	cbnz	r0, 8001846 <HAL_UART_MspInit+0xc6>
		{
			_Error_Handler(__FILE__, __LINE__);
		}

		__HAL_LINKDMA(huart, hdmatx, hdma_usart1_tx);
 8001822:	4b0f      	ldr	r3, [pc, #60]	; (8001860 <HAL_UART_MspInit+0xe0>)
 8001824:	6323      	str	r3, [r4, #48]	; 0x30
 8001826:	625c      	str	r4, [r3, #36]	; 0x24

		/* USER CODE BEGIN USART1_MspInit 1 */

		HAL_NVIC_SetPriority(USART1_IRQn, 1, 1);
 8001828:	2201      	movs	r2, #1
 800182a:	4611      	mov	r1, r2
 800182c:	2025      	movs	r0, #37	; 0x25
 800182e:	f000 fb77 	bl	8001f20 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001832:	2025      	movs	r0, #37	; 0x25
 8001834:	f000 fba6 	bl	8001f84 <HAL_NVIC_EnableIRQ>

		/* USER CODE END USART1_MspInit 1 */
	}
}
 8001838:	b006      	add	sp, #24
 800183a:	bd70      	pop	{r4, r5, r6, pc}
			_Error_Handler(__FILE__, __LINE__);
 800183c:	21b3      	movs	r1, #179	; 0xb3
 800183e:	480a      	ldr	r0, [pc, #40]	; (8001868 <HAL_UART_MspInit+0xe8>)
 8001840:	f7fe ff06 	bl	8000650 <_Error_Handler>
 8001844:	e7d6      	b.n	80017f4 <HAL_UART_MspInit+0x74>
			_Error_Handler(__FILE__, __LINE__);
 8001846:	21c3      	movs	r1, #195	; 0xc3
 8001848:	4807      	ldr	r0, [pc, #28]	; (8001868 <HAL_UART_MspInit+0xe8>)
 800184a:	f7fe ff01 	bl	8000650 <_Error_Handler>
 800184e:	e7e8      	b.n	8001822 <HAL_UART_MspInit+0xa2>
 8001850:	40013800 	.word	0x40013800
 8001854:	40010800 	.word	0x40010800
 8001858:	20001b68 	.word	0x20001b68
 800185c:	40020058 	.word	0x40020058
 8001860:	20001b24 	.word	0x20001b24
 8001864:	40020044 	.word	0x40020044
 8001868:	0800c3f0 	.word	0x0800c3f0

0800186c <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{

	if (huart->Instance == USART1)
 800186c:	6802      	ldr	r2, [r0, #0]
 800186e:	4b0d      	ldr	r3, [pc, #52]	; (80018a4 <HAL_UART_MspDeInit+0x38>)
 8001870:	429a      	cmp	r2, r3
 8001872:	d000      	beq.n	8001876 <HAL_UART_MspDeInit+0xa>
 8001874:	4770      	bx	lr
{
 8001876:	b510      	push	{r4, lr}
 8001878:	4604      	mov	r4, r0
	{
		/* USER CODE BEGIN USART1_MspDeInit 0 */

		/* USER CODE END USART1_MspDeInit 0 */
		/* Peripheral clock disable */
		__HAL_RCC_USART1_CLK_DISABLE();
 800187a:	4a0b      	ldr	r2, [pc, #44]	; (80018a8 <HAL_UART_MspDeInit+0x3c>)
 800187c:	6993      	ldr	r3, [r2, #24]
 800187e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001882:	6193      	str	r3, [r2, #24]

		/**USART1 GPIO Configuration
		 PA9     ------> USART1_TX
		 PA10     ------> USART1_RX
		 */
		HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9 | GPIO_PIN_10);
 8001884:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8001888:	4808      	ldr	r0, [pc, #32]	; (80018ac <HAL_UART_MspDeInit+0x40>)
 800188a:	f001 fd23 	bl	80032d4 <HAL_GPIO_DeInit>

		/* USART1 DMA DeInit */
		HAL_DMA_DeInit(huart->hdmarx);
 800188e:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8001890:	f000 fc90 	bl	80021b4 <HAL_DMA_DeInit>
		HAL_DMA_DeInit(huart->hdmatx);
 8001894:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8001896:	f000 fc8d 	bl	80021b4 <HAL_DMA_DeInit>
		/* USER CODE BEGIN USART1_MspDeInit 1 */

		HAL_NVIC_DisableIRQ(USART1_IRQn);
 800189a:	2025      	movs	r0, #37	; 0x25
 800189c:	f000 fb7e 	bl	8001f9c <HAL_NVIC_DisableIRQ>
 80018a0:	bd10      	pop	{r4, pc}
 80018a2:	bf00      	nop
 80018a4:	40013800 	.word	0x40013800
 80018a8:	40021000 	.word	0x40021000
 80018ac:	40010800 	.word	0x40010800

080018b0 <NMI_Handler>:

/**
 * @brief This function handles Non maskable interrupt.
 */
void NMI_Handler(void)
{
 80018b0:	4770      	bx	lr

080018b2 <HardFault_Handler>:

/**
 * @brief This function handles Hard fault interrupt.
 */
void HardFault_Handler(void)
{
 80018b2:	b082      	sub	sp, #8
	/* USER CODE BEGIN HardFault_IRQn 0 */

    volatile int _continue = 0;
 80018b4:	2300      	movs	r3, #0
 80018b6:	9301      	str	r3, [sp, #4]

	/* USER CODE END HardFault_IRQn 0 */
	while (_continue == 0)
 80018b8:	9b01      	ldr	r3, [sp, #4]
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d0fc      	beq.n	80018b8 <HardFault_Handler+0x6>
		/* USER CODE END W1_HardFault_IRQn 0 */
	}
	/* USER CODE BEGIN HardFault_IRQn 1 */

	/* USER CODE END HardFault_IRQn 1 */
}
 80018be:	b002      	add	sp, #8
 80018c0:	4770      	bx	lr

080018c2 <MemManage_Handler>:

/**
 * @brief This function handles Memory management fault.
 */
void MemManage_Handler(void)
{
 80018c2:	e7fe      	b.n	80018c2 <MemManage_Handler>

080018c4 <BusFault_Handler>:

/**
 * @brief This function handles Prefetch fault, memory access fault.
 */
void BusFault_Handler(void)
{
 80018c4:	e7fe      	b.n	80018c4 <BusFault_Handler>

080018c6 <UsageFault_Handler>:

/**
 * @brief This function handles Undefined instruction or illegal state.
 */
void UsageFault_Handler(void)
{
 80018c6:	e7fe      	b.n	80018c6 <UsageFault_Handler>

080018c8 <SVC_Handler>:

/**
 * @brief This function handles System service call via SWI instruction.
 */
void SVC_Handler(void)
{
 80018c8:	4770      	bx	lr

080018ca <DebugMon_Handler>:

/**
 * @brief This function handles Debug monitor.
 */
void DebugMon_Handler(void)
{
 80018ca:	4770      	bx	lr

080018cc <PendSV_Handler>:

/**
 * @brief This function handles Pendable request for system service.
 */
void PendSV_Handler(void)
{
 80018cc:	4770      	bx	lr

080018ce <SysTick_Handler>:

/**
 * @brief This function handles System tick timer.
 */
void SysTick_Handler(void)
{
 80018ce:	b508      	push	{r3, lr}
	/* USER CODE BEGIN SysTick_IRQn 0 */

	/* USER CODE END SysTick_IRQn 0 */
	HAL_IncTick();
 80018d0:	f000 fa70 	bl	8001db4 <HAL_IncTick>
	HAL_SYSTICK_IRQHandler();
 80018d4:	f000 fc17 	bl	8002106 <HAL_SYSTICK_IRQHandler>
 80018d8:	bd08      	pop	{r3, pc}

080018da <DMA1_Channel4_IRQHandler>:

/**
 * @brief This function handles DMA1 channel4 global interrupt.
 */
void DMA1_Channel4_IRQHandler(void)
{
 80018da:	b508      	push	{r3, lr}
	/* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

	/* USER CODE END DMA1_Channel4_IRQn 0 */
	HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80018dc:	4801      	ldr	r0, [pc, #4]	; (80018e4 <DMA1_Channel4_IRQHandler+0xa>)
 80018de:	f000 fe75 	bl	80025cc <HAL_DMA_IRQHandler>
 80018e2:	bd08      	pop	{r3, pc}
 80018e4:	20001b24 	.word	0x20001b24

080018e8 <DMA1_Channel5_IRQHandler>:

/**
 * @brief This function handles DMA1 channel5 global interrupt.
 */
void DMA1_Channel5_IRQHandler(void)
{
 80018e8:	b508      	push	{r3, lr}
	/* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

	/* USER CODE END DMA1_Channel5_IRQn 0 */
	HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80018ea:	4802      	ldr	r0, [pc, #8]	; (80018f4 <DMA1_Channel5_IRQHandler+0xc>)
 80018ec:	f000 fe6e 	bl	80025cc <HAL_DMA_IRQHandler>
 80018f0:	bd08      	pop	{r3, pc}
 80018f2:	bf00      	nop
 80018f4:	20001b68 	.word	0x20001b68

080018f8 <TIM3_IRQHandler>:

/**
 * @brief This function handles TIM3 global interrupt.
 */
void TIM3_IRQHandler(void)
{
 80018f8:	b508      	push	{r3, lr}
    GPIOB->BSRR = GPIO_BSRR_BS15;
 80018fa:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80018fe:	4b0f      	ldr	r3, [pc, #60]	; (800193c <TIM3_IRQHandler+0x44>)
 8001900:	611a      	str	r2, [r3, #16]
	//HAL_TIM_IRQHandler(&htim3);
	if ((TIM3->SR & TIM_SR_UIF) != 0u)
 8001902:	f5a3 3384 	sub.w	r3, r3, #67584	; 0x10800
 8001906:	691b      	ldr	r3, [r3, #16]
 8001908:	f013 0f01 	tst.w	r3, #1
 800190c:	d104      	bne.n	8001918 <TIM3_IRQHandler+0x20>
        stepper_feet_a.calculate_profile();
        stepper_feet_b.calculate_profile();
        stepper_feet_c.calculate_profile();
        stepper_lift.calculate_profile();
	}
    GPIOB->BSRR = GPIO_BSRR_BR15;
 800190e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001912:	4b0a      	ldr	r3, [pc, #40]	; (800193c <TIM3_IRQHandler+0x44>)
 8001914:	611a      	str	r2, [r3, #16]
 8001916:	bd08      	pop	{r3, pc}
		TIM3->SR = ~TIM_SR_UIF;
 8001918:	f06f 0201 	mvn.w	r2, #1
 800191c:	4b08      	ldr	r3, [pc, #32]	; (8001940 <TIM3_IRQHandler+0x48>)
 800191e:	611a      	str	r2, [r3, #16]
        stepper_feet_a.calculate_profile();
 8001920:	4808      	ldr	r0, [pc, #32]	; (8001944 <TIM3_IRQHandler+0x4c>)
 8001922:	f7ff fded 	bl	8001500 <_ZN19StepperVelocityCtrl17calculate_profileEv>
        stepper_feet_b.calculate_profile();
 8001926:	4808      	ldr	r0, [pc, #32]	; (8001948 <TIM3_IRQHandler+0x50>)
 8001928:	f7ff fdea 	bl	8001500 <_ZN19StepperVelocityCtrl17calculate_profileEv>
        stepper_feet_c.calculate_profile();
 800192c:	4807      	ldr	r0, [pc, #28]	; (800194c <TIM3_IRQHandler+0x54>)
 800192e:	f7ff fde7 	bl	8001500 <_ZN19StepperVelocityCtrl17calculate_profileEv>
        stepper_lift.calculate_profile();
 8001932:	4807      	ldr	r0, [pc, #28]	; (8001950 <TIM3_IRQHandler+0x58>)
 8001934:	f7ff fc7a 	bl	800122c <_ZN19StepperPositionCtrl17calculate_profileEv>
 8001938:	e7e9      	b.n	800190e <TIM3_IRQHandler+0x16>
 800193a:	bf00      	nop
 800193c:	40010c00 	.word	0x40010c00
 8001940:	40000400 	.word	0x40000400
 8001944:	20000610 	.word	0x20000610
 8001948:	200006d8 	.word	0x200006d8
 800194c:	200007a0 	.word	0x200007a0
 8001950:	20000540 	.word	0x20000540

08001954 <TIM4_IRQHandler>:
/* USER CODE BEGIN 1 */
//extern "C"
void TIM4_IRQHandler(void)
{
	//HAL_TIM_IRQHandler(&htim4);
	if ((TIM4->SR & TIM_SR_UIF) != 0u)
 8001954:	4b9c      	ldr	r3, [pc, #624]	; (8001bc8 <TIM4_IRQHandler+0x274>)
 8001956:	691b      	ldr	r3, [r3, #16]
 8001958:	f013 0f01 	tst.w	r3, #1
 800195c:	d11d      	bne.n	800199a <TIM4_IRQHandler+0x46>
        stepper_feet_a.tick();
        stepper_feet_b.tick();
        stepper_feet_c.tick();
        stepper_lift.tick();
	}
	else if ((TIM4->SR & TIM_SR_CC1IF) != 0u)
 800195e:	4b9a      	ldr	r3, [pc, #616]	; (8001bc8 <TIM4_IRQHandler+0x274>)
 8001960:	691b      	ldr	r3, [r3, #16]
 8001962:	f013 0f02 	tst.w	r3, #2
 8001966:	d017      	beq.n	8001998 <TIM4_IRQHandler+0x44>
	{
		TIM4->SR = ~TIM_SR_CC1IF;
 8001968:	f06f 0202 	mvn.w	r2, #2
 800196c:	4b96      	ldr	r3, [pc, #600]	; (8001bc8 <TIM4_IRQHandler+0x274>)
 800196e:	611a      	str	r2, [r3, #16]
    // target: rad/s
    void set_target(float target);

    void reset_step(void)
    {
        m_step_gpio->BRR = m_step_pin;      // un-step
 8001970:	4b96      	ldr	r3, [pc, #600]	; (8001bcc <TIM4_IRQHandler+0x278>)
 8001972:	681a      	ldr	r2, [r3, #0]
 8001974:	891b      	ldrh	r3, [r3, #8]
 8001976:	b29b      	uxth	r3, r3
 8001978:	6153      	str	r3, [r2, #20]
 800197a:	4b95      	ldr	r3, [pc, #596]	; (8001bd0 <TIM4_IRQHandler+0x27c>)
 800197c:	681a      	ldr	r2, [r3, #0]
 800197e:	891b      	ldrh	r3, [r3, #8]
 8001980:	b29b      	uxth	r3, r3
 8001982:	6153      	str	r3, [r2, #20]
 8001984:	4b93      	ldr	r3, [pc, #588]	; (8001bd4 <TIM4_IRQHandler+0x280>)
 8001986:	681a      	ldr	r2, [r3, #0]
 8001988:	891b      	ldrh	r3, [r3, #8]
 800198a:	b29b      	uxth	r3, r3
 800198c:	6153      	str	r3, [r2, #20]
        return (m_actual_position * 1000 == m_target_position);
    }

    inline void reset_step(void)
    {
        this->m_step_gpio->BSRR = static_cast<uint32_t>(this->m_step_pin << 16);      // un-step
 800198e:	4b92      	ldr	r3, [pc, #584]	; (8001bd8 <TIM4_IRQHandler+0x284>)
 8001990:	681a      	ldr	r2, [r3, #0]
 8001992:	891b      	ldrh	r3, [r3, #8]
 8001994:	041b      	lsls	r3, r3, #16
 8001996:	6113      	str	r3, [r2, #16]
 8001998:	4770      	bx	lr
		TIM4->SR = ~TIM_SR_UIF;
 800199a:	f06f 0201 	mvn.w	r2, #1
 800199e:	4b8a      	ldr	r3, [pc, #552]	; (8001bc8 <TIM4_IRQHandler+0x274>)
 80019a0:	611a      	str	r2, [r3, #16]
            return;
        }
        */

        // load next segment if neccesary
        if (current_segment->remaining_ticks <= 0)
 80019a2:	4b8a      	ldr	r3, [pc, #552]	; (8001bcc <TIM4_IRQHandler+0x278>)
 80019a4:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	f340 8099 	ble.w	8001ae2 <TIM4_IRQHandler+0x18e>
            seg_buf_tail &= seg_buf_mask;

            //m_actual_velocity = 0;
        }

        this->m_dir_gpio->BSRR = current_segment->dir_pattern;
 80019b0:	4b86      	ldr	r3, [pc, #536]	; (8001bcc <TIM4_IRQHandler+0x278>)
 80019b2:	685a      	ldr	r2, [r3, #4]
 80019b4:	f8d3 10c4 	ldr.w	r1, [r3, #196]	; 0xc4
 80019b8:	68c9      	ldr	r1, [r1, #12]
 80019ba:	6111      	str	r1, [r2, #16]

        if (this->m_bresenham_error > 0)
 80019bc:	695b      	ldr	r3, [r3, #20]
 80019be:	2b00      	cmp	r3, #0
 80019c0:	dd0b      	ble.n	80019da <TIM4_IRQHandler+0x86>
        {
            m_step_gpio->BSRR = m_step_pin;     // step
 80019c2:	4b82      	ldr	r3, [pc, #520]	; (8001bcc <TIM4_IRQHandler+0x278>)
 80019c4:	6819      	ldr	r1, [r3, #0]
 80019c6:	891a      	ldrh	r2, [r3, #8]
 80019c8:	b292      	uxth	r2, r2
 80019ca:	610a      	str	r2, [r1, #16]

            //m_actual_velocity += current_segment->step_dir;

            // -2*dx
            this->m_bresenham_error -= 2 * current_segment->ticks_total;
 80019cc:	695a      	ldr	r2, [r3, #20]
 80019ce:	f8d3 10c4 	ldr.w	r1, [r3, #196]	; 0xc4
 80019d2:	6889      	ldr	r1, [r1, #8]
 80019d4:	eba2 0241 	sub.w	r2, r2, r1, lsl #1
 80019d8:	615a      	str	r2, [r3, #20]
        }

        // 2*dy
        this->m_bresenham_error += 2 * current_segment->steps_total;
 80019da:	4a7c      	ldr	r2, [pc, #496]	; (8001bcc <TIM4_IRQHandler+0x278>)
 80019dc:	6951      	ldr	r1, [r2, #20]
 80019de:	f8d2 30c4 	ldr.w	r3, [r2, #196]	; 0xc4
 80019e2:	6858      	ldr	r0, [r3, #4]
 80019e4:	eb01 0140 	add.w	r1, r1, r0, lsl #1
 80019e8:	6151      	str	r1, [r2, #20]

        current_segment->remaining_ticks--;
 80019ea:	681a      	ldr	r2, [r3, #0]
 80019ec:	3a01      	subs	r2, #1
 80019ee:	601a      	str	r2, [r3, #0]
        if (current_segment->remaining_ticks <= 0)
 80019f0:	4b77      	ldr	r3, [pc, #476]	; (8001bd0 <TIM4_IRQHandler+0x27c>)
 80019f2:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	f340 808f 	ble.w	8001b1c <TIM4_IRQHandler+0x1c8>
        this->m_dir_gpio->BSRR = current_segment->dir_pattern;
 80019fe:	4b74      	ldr	r3, [pc, #464]	; (8001bd0 <TIM4_IRQHandler+0x27c>)
 8001a00:	685a      	ldr	r2, [r3, #4]
 8001a02:	f8d3 10c4 	ldr.w	r1, [r3, #196]	; 0xc4
 8001a06:	68c9      	ldr	r1, [r1, #12]
 8001a08:	6111      	str	r1, [r2, #16]
        if (this->m_bresenham_error > 0)
 8001a0a:	695b      	ldr	r3, [r3, #20]
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	dd0b      	ble.n	8001a28 <TIM4_IRQHandler+0xd4>
            m_step_gpio->BSRR = m_step_pin;     // step
 8001a10:	4b6f      	ldr	r3, [pc, #444]	; (8001bd0 <TIM4_IRQHandler+0x27c>)
 8001a12:	6819      	ldr	r1, [r3, #0]
 8001a14:	891a      	ldrh	r2, [r3, #8]
 8001a16:	b292      	uxth	r2, r2
 8001a18:	610a      	str	r2, [r1, #16]
            this->m_bresenham_error -= 2 * current_segment->ticks_total;
 8001a1a:	695a      	ldr	r2, [r3, #20]
 8001a1c:	f8d3 10c4 	ldr.w	r1, [r3, #196]	; 0xc4
 8001a20:	6889      	ldr	r1, [r1, #8]
 8001a22:	eba2 0241 	sub.w	r2, r2, r1, lsl #1
 8001a26:	615a      	str	r2, [r3, #20]
        this->m_bresenham_error += 2 * current_segment->steps_total;
 8001a28:	4a69      	ldr	r2, [pc, #420]	; (8001bd0 <TIM4_IRQHandler+0x27c>)
 8001a2a:	6951      	ldr	r1, [r2, #20]
 8001a2c:	f8d2 30c4 	ldr.w	r3, [r2, #196]	; 0xc4
 8001a30:	6858      	ldr	r0, [r3, #4]
 8001a32:	eb01 0140 	add.w	r1, r1, r0, lsl #1
 8001a36:	6151      	str	r1, [r2, #20]
        current_segment->remaining_ticks--;
 8001a38:	681a      	ldr	r2, [r3, #0]
 8001a3a:	3a01      	subs	r2, #1
 8001a3c:	601a      	str	r2, [r3, #0]
        if (current_segment->remaining_ticks <= 0)
 8001a3e:	4b65      	ldr	r3, [pc, #404]	; (8001bd4 <TIM4_IRQHandler+0x280>)
 8001a40:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	f340 8084 	ble.w	8001b54 <TIM4_IRQHandler+0x200>
        this->m_dir_gpio->BSRR = current_segment->dir_pattern;
 8001a4c:	4b61      	ldr	r3, [pc, #388]	; (8001bd4 <TIM4_IRQHandler+0x280>)
 8001a4e:	685a      	ldr	r2, [r3, #4]
 8001a50:	f8d3 10c4 	ldr.w	r1, [r3, #196]	; 0xc4
 8001a54:	68c9      	ldr	r1, [r1, #12]
 8001a56:	6111      	str	r1, [r2, #16]
        if (this->m_bresenham_error > 0)
 8001a58:	695b      	ldr	r3, [r3, #20]
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	dd0b      	ble.n	8001a76 <TIM4_IRQHandler+0x122>
            m_step_gpio->BSRR = m_step_pin;     // step
 8001a5e:	4b5d      	ldr	r3, [pc, #372]	; (8001bd4 <TIM4_IRQHandler+0x280>)
 8001a60:	6819      	ldr	r1, [r3, #0]
 8001a62:	891a      	ldrh	r2, [r3, #8]
 8001a64:	b292      	uxth	r2, r2
 8001a66:	610a      	str	r2, [r1, #16]
            this->m_bresenham_error -= 2 * current_segment->ticks_total;
 8001a68:	695a      	ldr	r2, [r3, #20]
 8001a6a:	f8d3 10c4 	ldr.w	r1, [r3, #196]	; 0xc4
 8001a6e:	6889      	ldr	r1, [r1, #8]
 8001a70:	eba2 0241 	sub.w	r2, r2, r1, lsl #1
 8001a74:	615a      	str	r2, [r3, #20]
        this->m_bresenham_error += 2 * current_segment->steps_total;
 8001a76:	4a57      	ldr	r2, [pc, #348]	; (8001bd4 <TIM4_IRQHandler+0x280>)
 8001a78:	6951      	ldr	r1, [r2, #20]
 8001a7a:	f8d2 30c4 	ldr.w	r3, [r2, #196]	; 0xc4
 8001a7e:	6858      	ldr	r0, [r3, #4]
 8001a80:	eb01 0140 	add.w	r1, r1, r0, lsl #1
 8001a84:	6151      	str	r1, [r2, #20]
        current_segment->remaining_ticks--;
 8001a86:	681a      	ldr	r2, [r3, #0]
 8001a88:	3a01      	subs	r2, #1
 8001a8a:	601a      	str	r2, [r3, #0]
            return;
        }
        */

        // load next segment if neccesary
        if (current_segment->remaining_ticks <= 0)
 8001a8c:	4b52      	ldr	r3, [pc, #328]	; (8001bd8 <TIM4_IRQHandler+0x284>)
 8001a8e:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	dd79      	ble.n	8001b8c <TIM4_IRQHandler+0x238>
            seg_buf_tail &= seg_buf_mask;

            //current_segment->bresenham_error = -current_segment->ticks_total;
        }

        this->m_dir_gpio->BSRR = current_segment->dir_pattern;
 8001a98:	4b4f      	ldr	r3, [pc, #316]	; (8001bd8 <TIM4_IRQHandler+0x284>)
 8001a9a:	685a      	ldr	r2, [r3, #4]
 8001a9c:	f8d3 10cc 	ldr.w	r1, [r3, #204]	; 0xcc
 8001aa0:	68c9      	ldr	r1, [r1, #12]
 8001aa2:	6111      	str	r1, [r2, #16]

        if (this->m_bresenham_error > 0)
 8001aa4:	69db      	ldr	r3, [r3, #28]
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	dd0f      	ble.n	8001aca <TIM4_IRQHandler+0x176>
        {
            m_step_gpio->BSRR = m_step_pin;     // step
 8001aaa:	4b4b      	ldr	r3, [pc, #300]	; (8001bd8 <TIM4_IRQHandler+0x284>)
 8001aac:	6819      	ldr	r1, [r3, #0]
 8001aae:	891a      	ldrh	r2, [r3, #8]
 8001ab0:	b292      	uxth	r2, r2
 8001ab2:	610a      	str	r2, [r1, #16]

            m_actual_position += current_segment->step_dir;
 8001ab4:	695a      	ldr	r2, [r3, #20]
 8001ab6:	f8d3 10cc 	ldr.w	r1, [r3, #204]	; 0xcc
 8001aba:	6908      	ldr	r0, [r1, #16]
 8001abc:	4402      	add	r2, r0
 8001abe:	615a      	str	r2, [r3, #20]

            // -2*dx
            this->m_bresenham_error -= 2 * current_segment->ticks_total;
 8001ac0:	69da      	ldr	r2, [r3, #28]
 8001ac2:	6889      	ldr	r1, [r1, #8]
 8001ac4:	eba2 0241 	sub.w	r2, r2, r1, lsl #1
 8001ac8:	61da      	str	r2, [r3, #28]
        }

        // 2*dy
        this->m_bresenham_error += 2 * current_segment->steps_total;
 8001aca:	4a43      	ldr	r2, [pc, #268]	; (8001bd8 <TIM4_IRQHandler+0x284>)
 8001acc:	69d1      	ldr	r1, [r2, #28]
 8001ace:	f8d2 30cc 	ldr.w	r3, [r2, #204]	; 0xcc
 8001ad2:	6858      	ldr	r0, [r3, #4]
 8001ad4:	eb01 0140 	add.w	r1, r1, r0, lsl #1
 8001ad8:	61d1      	str	r1, [r2, #28]

        current_segment->remaining_ticks--;
 8001ada:	681a      	ldr	r2, [r3, #0]
 8001adc:	3a01      	subs	r2, #1
 8001ade:	601a      	str	r2, [r3, #0]
 8001ae0:	4770      	bx	lr
            if (seg_buf_head == seg_buf_tail)
 8001ae2:	4b3a      	ldr	r3, [pc, #232]	; (8001bcc <TIM4_IRQHandler+0x278>)
 8001ae4:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 8001ae8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001aec:	429a      	cmp	r2, r3
 8001aee:	f43f af7f 	beq.w	80019f0 <TIM4_IRQHandler+0x9c>
            current_segment = &seg_buf[seg_buf_tail++];
 8001af2:	4a36      	ldr	r2, [pc, #216]	; (8001bcc <TIM4_IRQHandler+0x278>)
 8001af4:	f8d2 30c0 	ldr.w	r3, [r2, #192]	; 0xc0
 8001af8:	1c59      	adds	r1, r3, #1
 8001afa:	f8c2 10c0 	str.w	r1, [r2, #192]	; 0xc0
 8001afe:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8001b02:	008b      	lsls	r3, r1, #2
 8001b04:	3318      	adds	r3, #24
 8001b06:	4413      	add	r3, r2
 8001b08:	3304      	adds	r3, #4
 8001b0a:	f8c2 30c4 	str.w	r3, [r2, #196]	; 0xc4
            seg_buf_tail &= seg_buf_mask;
 8001b0e:	f8d2 30c0 	ldr.w	r3, [r2, #192]	; 0xc0
 8001b12:	f003 0307 	and.w	r3, r3, #7
 8001b16:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8001b1a:	e749      	b.n	80019b0 <TIM4_IRQHandler+0x5c>
            if (seg_buf_head == seg_buf_tail)
 8001b1c:	4b2c      	ldr	r3, [pc, #176]	; (8001bd0 <TIM4_IRQHandler+0x27c>)
 8001b1e:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 8001b22:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001b26:	429a      	cmp	r2, r3
 8001b28:	d089      	beq.n	8001a3e <TIM4_IRQHandler+0xea>
            current_segment = &seg_buf[seg_buf_tail++];
 8001b2a:	4a29      	ldr	r2, [pc, #164]	; (8001bd0 <TIM4_IRQHandler+0x27c>)
 8001b2c:	f8d2 30c0 	ldr.w	r3, [r2, #192]	; 0xc0
 8001b30:	1c59      	adds	r1, r3, #1
 8001b32:	f8c2 10c0 	str.w	r1, [r2, #192]	; 0xc0
 8001b36:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8001b3a:	008b      	lsls	r3, r1, #2
 8001b3c:	3318      	adds	r3, #24
 8001b3e:	4413      	add	r3, r2
 8001b40:	3304      	adds	r3, #4
 8001b42:	f8c2 30c4 	str.w	r3, [r2, #196]	; 0xc4
            seg_buf_tail &= seg_buf_mask;
 8001b46:	f8d2 30c0 	ldr.w	r3, [r2, #192]	; 0xc0
 8001b4a:	f003 0307 	and.w	r3, r3, #7
 8001b4e:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8001b52:	e754      	b.n	80019fe <TIM4_IRQHandler+0xaa>
            if (seg_buf_head == seg_buf_tail)
 8001b54:	4b1f      	ldr	r3, [pc, #124]	; (8001bd4 <TIM4_IRQHandler+0x280>)
 8001b56:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 8001b5a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001b5e:	429a      	cmp	r2, r3
 8001b60:	d094      	beq.n	8001a8c <TIM4_IRQHandler+0x138>
            current_segment = &seg_buf[seg_buf_tail++];
 8001b62:	4a1c      	ldr	r2, [pc, #112]	; (8001bd4 <TIM4_IRQHandler+0x280>)
 8001b64:	f8d2 30c0 	ldr.w	r3, [r2, #192]	; 0xc0
 8001b68:	1c59      	adds	r1, r3, #1
 8001b6a:	f8c2 10c0 	str.w	r1, [r2, #192]	; 0xc0
 8001b6e:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8001b72:	008b      	lsls	r3, r1, #2
 8001b74:	3318      	adds	r3, #24
 8001b76:	4413      	add	r3, r2
 8001b78:	3304      	adds	r3, #4
 8001b7a:	f8c2 30c4 	str.w	r3, [r2, #196]	; 0xc4
            seg_buf_tail &= seg_buf_mask;
 8001b7e:	f8d2 30c0 	ldr.w	r3, [r2, #192]	; 0xc0
 8001b82:	f003 0307 	and.w	r3, r3, #7
 8001b86:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8001b8a:	e75f      	b.n	8001a4c <TIM4_IRQHandler+0xf8>
            if (seg_buf_head == seg_buf_tail)
 8001b8c:	4b12      	ldr	r3, [pc, #72]	; (8001bd8 <TIM4_IRQHandler+0x284>)
 8001b8e:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 8001b92:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8001b96:	429a      	cmp	r2, r3
 8001b98:	f43f aefe 	beq.w	8001998 <TIM4_IRQHandler+0x44>
            current_segment = &seg_buf[seg_buf_tail++];
 8001b9c:	4a0e      	ldr	r2, [pc, #56]	; (8001bd8 <TIM4_IRQHandler+0x284>)
 8001b9e:	f8d2 30c8 	ldr.w	r3, [r2, #200]	; 0xc8
 8001ba2:	1c59      	adds	r1, r3, #1
 8001ba4:	f8c2 10c8 	str.w	r1, [r2, #200]	; 0xc8
 8001ba8:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8001bac:	008b      	lsls	r3, r1, #2
 8001bae:	3320      	adds	r3, #32
 8001bb0:	4413      	add	r3, r2
 8001bb2:	3304      	adds	r3, #4
 8001bb4:	f8c2 30cc 	str.w	r3, [r2, #204]	; 0xcc
            seg_buf_tail &= seg_buf_mask;
 8001bb8:	f8d2 30c8 	ldr.w	r3, [r2, #200]	; 0xc8
 8001bbc:	f003 0307 	and.w	r3, r3, #7
 8001bc0:	f8c2 30c8 	str.w	r3, [r2, #200]	; 0xc8
 8001bc4:	e768      	b.n	8001a98 <TIM4_IRQHandler+0x144>
 8001bc6:	bf00      	nop
 8001bc8:	40000800 	.word	0x40000800
 8001bcc:	20000610 	.word	0x20000610
 8001bd0:	200006d8 	.word	0x200006d8
 8001bd4:	200007a0 	.word	0x200007a0
 8001bd8:	20000540 	.word	0x20000540

08001bdc <USART1_IRQHandler>:
        stepper_lift.reset_step();
	}
}

void USART1_IRQHandler(void)
{
 8001bdc:	b508      	push	{r3, lr}
	HAL_UART_IRQHandler(&huart1);
 8001bde:	4802      	ldr	r0, [pc, #8]	; (8001be8 <USART1_IRQHandler+0xc>)
 8001be0:	f005 fef8 	bl	80079d4 <HAL_UART_IRQHandler>
 8001be4:	bd08      	pop	{r3, pc}
 8001be6:	bf00      	nop
 8001be8:	20001078 	.word	0x20001078

08001bec <EXTI3_IRQHandler>:
}

// nES interrupt
void EXTI3_IRQHandler(void)
{
 8001bec:	b508      	push	{r3, lr}
    if(EXTI->PR & EXTI_PR_PR3)
 8001bee:	4b09      	ldr	r3, [pc, #36]	; (8001c14 <EXTI3_IRQHandler+0x28>)
 8001bf0:	695b      	ldr	r3, [r3, #20]
 8001bf2:	f013 0f08 	tst.w	r3, #8
 8001bf6:	d008      	beq.n	8001c0a <EXTI3_IRQHandler+0x1e>
    {
        EXTI->PR = EXTI_PR_PR3;
 8001bf8:	2208      	movs	r2, #8
 8001bfa:	4b06      	ldr	r3, [pc, #24]	; (8001c14 <EXTI3_IRQHandler+0x28>)
 8001bfc:	615a      	str	r2, [r3, #20]

        if(GPIOB->IDR & GPIO_IDR_IDR3)
 8001bfe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001c02:	689b      	ldr	r3, [r3, #8]
 8001c04:	f013 0f08 	tst.w	r3, #8
 8001c08:	d000      	beq.n	8001c0c <EXTI3_IRQHandler+0x20>
 8001c0a:	bd08      	pop	{r3, pc}
        {
            //on_shutdown_released();
        }
        else
        {
            on_shutdown_pressed();
 8001c0c:	f7fe fd07 	bl	800061e <_Z19on_shutdown_pressedv>
        }
    }
}
 8001c10:	e7fb      	b.n	8001c0a <EXTI3_IRQHandler+0x1e>
 8001c12:	bf00      	nop
 8001c14:	40010400 	.word	0x40010400

08001c18 <EXTI4_IRQHandler>:

// START interrupt
void EXTI4_IRQHandler(void)
{
 8001c18:	b508      	push	{r3, lr}
    if(EXTI->PR & EXTI_PR_PR4)
 8001c1a:	4b09      	ldr	r3, [pc, #36]	; (8001c40 <EXTI4_IRQHandler+0x28>)
 8001c1c:	695b      	ldr	r3, [r3, #20]
 8001c1e:	f013 0f10 	tst.w	r3, #16
 8001c22:	d008      	beq.n	8001c36 <EXTI4_IRQHandler+0x1e>
    {
        EXTI->PR = EXTI_PR_PR4;
 8001c24:	2210      	movs	r2, #16
 8001c26:	4b06      	ldr	r3, [pc, #24]	; (8001c40 <EXTI4_IRQHandler+0x28>)
 8001c28:	615a      	str	r2, [r3, #20]

        if(GPIOB->IDR & GPIO_IDR_IDR4)
 8001c2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001c2e:	689b      	ldr	r3, [r3, #8]
 8001c30:	f013 0f10 	tst.w	r3, #16
 8001c34:	d100      	bne.n	8001c38 <EXTI4_IRQHandler+0x20>
 8001c36:	bd08      	pop	{r3, pc}
        {
            on_start_pressed();
 8001c38:	f7fe fd02 	bl	8000640 <_Z16on_start_pressedv>
        }
    }
}
 8001c3c:	e7fb      	b.n	8001c36 <EXTI4_IRQHandler+0x1e>
 8001c3e:	bf00      	nop
 8001c40:	40010400 	.word	0x40010400

08001c44 <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8001c44:	4b0f      	ldr	r3, [pc, #60]	; (8001c84 <SystemInit+0x40>)
 8001c46:	681a      	ldr	r2, [r3, #0]
 8001c48:	f042 0201 	orr.w	r2, r2, #1
 8001c4c:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8001c4e:	6859      	ldr	r1, [r3, #4]
 8001c50:	4a0d      	ldr	r2, [pc, #52]	; (8001c88 <SystemInit+0x44>)
 8001c52:	400a      	ands	r2, r1
 8001c54:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8001c56:	681a      	ldr	r2, [r3, #0]
 8001c58:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8001c5c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001c60:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001c62:	681a      	ldr	r2, [r3, #0]
 8001c64:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001c68:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8001c6a:	685a      	ldr	r2, [r3, #4]
 8001c6c:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8001c70:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8001c72:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8001c76:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8001c78:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001c7c:	4b03      	ldr	r3, [pc, #12]	; (8001c8c <SystemInit+0x48>)
 8001c7e:	609a      	str	r2, [r3, #8]
 8001c80:	4770      	bx	lr
 8001c82:	bf00      	nop
 8001c84:	40021000 	.word	0x40021000
 8001c88:	f8ff0000 	.word	0xf8ff0000
 8001c8c:	e000ed00 	.word	0xe000ed00

08001c90 <SystemCoreClockUpdate>:
#if defined(STM32F100xB) || defined(STM32F100xE)
  uint32_t prediv1factor = 0U;
#endif /* STM32F100xB or STM32F100xE */
    
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8001c90:	4b1f      	ldr	r3, [pc, #124]	; (8001d10 <SystemCoreClockUpdate+0x80>)
 8001c92:	685b      	ldr	r3, [r3, #4]
 8001c94:	f003 030c 	and.w	r3, r3, #12
  
  switch (tmp)
 8001c98:	2b04      	cmp	r3, #4
 8001c9a:	d014      	beq.n	8001cc6 <SystemCoreClockUpdate+0x36>
 8001c9c:	2b08      	cmp	r3, #8
 8001c9e:	d016      	beq.n	8001cce <SystemCoreClockUpdate+0x3e>
 8001ca0:	b11b      	cbz	r3, 8001caa <SystemCoreClockUpdate+0x1a>
      }
#endif /* STM32F105xC */ 
      break;

    default:
      SystemCoreClock = HSI_VALUE;
 8001ca2:	4a1c      	ldr	r2, [pc, #112]	; (8001d14 <SystemCoreClockUpdate+0x84>)
 8001ca4:	4b1c      	ldr	r3, [pc, #112]	; (8001d18 <SystemCoreClockUpdate+0x88>)
 8001ca6:	601a      	str	r2, [r3, #0]
      break;
 8001ca8:	e002      	b.n	8001cb0 <SystemCoreClockUpdate+0x20>
      SystemCoreClock = HSI_VALUE;
 8001caa:	4a1a      	ldr	r2, [pc, #104]	; (8001d14 <SystemCoreClockUpdate+0x84>)
 8001cac:	4b1a      	ldr	r3, [pc, #104]	; (8001d18 <SystemCoreClockUpdate+0x88>)
 8001cae:	601a      	str	r2, [r3, #0]
  }
  
  /* Compute HCLK clock frequency ----------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4U)];
 8001cb0:	4b17      	ldr	r3, [pc, #92]	; (8001d10 <SystemCoreClockUpdate+0x80>)
 8001cb2:	685b      	ldr	r3, [r3, #4]
 8001cb4:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001cb8:	4a18      	ldr	r2, [pc, #96]	; (8001d1c <SystemCoreClockUpdate+0x8c>)
 8001cba:	5cd1      	ldrb	r1, [r2, r3]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;  
 8001cbc:	4a16      	ldr	r2, [pc, #88]	; (8001d18 <SystemCoreClockUpdate+0x88>)
 8001cbe:	6813      	ldr	r3, [r2, #0]
 8001cc0:	40cb      	lsrs	r3, r1
 8001cc2:	6013      	str	r3, [r2, #0]
 8001cc4:	4770      	bx	lr
      SystemCoreClock = HSE_VALUE;
 8001cc6:	4a13      	ldr	r2, [pc, #76]	; (8001d14 <SystemCoreClockUpdate+0x84>)
 8001cc8:	4b13      	ldr	r3, [pc, #76]	; (8001d18 <SystemCoreClockUpdate+0x88>)
 8001cca:	601a      	str	r2, [r3, #0]
      break;
 8001ccc:	e7f0      	b.n	8001cb0 <SystemCoreClockUpdate+0x20>
      pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
 8001cce:	4a10      	ldr	r2, [pc, #64]	; (8001d10 <SystemCoreClockUpdate+0x80>)
 8001cd0:	6853      	ldr	r3, [r2, #4]
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 8001cd2:	6852      	ldr	r2, [r2, #4]
      pllmull = ( pllmull >> 18U) + 2U;
 8001cd4:	f3c3 4383 	ubfx	r3, r3, #18, #4
 8001cd8:	3302      	adds	r3, #2
      if (pllsource == 0x00U)
 8001cda:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 8001cde:	d00a      	beq.n	8001cf6 <SystemCoreClockUpdate+0x66>
        if ((RCC->CFGR & RCC_CFGR_PLLXTPRE) != (uint32_t)RESET)
 8001ce0:	4a0b      	ldr	r2, [pc, #44]	; (8001d10 <SystemCoreClockUpdate+0x80>)
 8001ce2:	6852      	ldr	r2, [r2, #4]
 8001ce4:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8001ce8:	d00b      	beq.n	8001d02 <SystemCoreClockUpdate+0x72>
          SystemCoreClock = (HSE_VALUE >> 1U) * pllmull;
 8001cea:	4a0d      	ldr	r2, [pc, #52]	; (8001d20 <SystemCoreClockUpdate+0x90>)
 8001cec:	fb02 f303 	mul.w	r3, r2, r3
 8001cf0:	4a09      	ldr	r2, [pc, #36]	; (8001d18 <SystemCoreClockUpdate+0x88>)
 8001cf2:	6013      	str	r3, [r2, #0]
 8001cf4:	e7dc      	b.n	8001cb0 <SystemCoreClockUpdate+0x20>
        SystemCoreClock = (HSI_VALUE >> 1U) * pllmull;
 8001cf6:	4a0a      	ldr	r2, [pc, #40]	; (8001d20 <SystemCoreClockUpdate+0x90>)
 8001cf8:	fb02 f303 	mul.w	r3, r2, r3
 8001cfc:	4a06      	ldr	r2, [pc, #24]	; (8001d18 <SystemCoreClockUpdate+0x88>)
 8001cfe:	6013      	str	r3, [r2, #0]
 8001d00:	e7d6      	b.n	8001cb0 <SystemCoreClockUpdate+0x20>
          SystemCoreClock = HSE_VALUE * pllmull;
 8001d02:	4a04      	ldr	r2, [pc, #16]	; (8001d14 <SystemCoreClockUpdate+0x84>)
 8001d04:	fb02 f303 	mul.w	r3, r2, r3
 8001d08:	4a03      	ldr	r2, [pc, #12]	; (8001d18 <SystemCoreClockUpdate+0x88>)
 8001d0a:	6013      	str	r3, [r2, #0]
 8001d0c:	e7d0      	b.n	8001cb0 <SystemCoreClockUpdate+0x20>
 8001d0e:	bf00      	nop
 8001d10:	40021000 	.word	0x40021000
 8001d14:	007a1200 	.word	0x007a1200
 8001d18:	20000008 	.word	0x20000008
 8001d1c:	0800bcc4 	.word	0x0800bcc4
 8001d20:	003d0900 	.word	0x003d0900
/**
  * @brief  Initialize the MSP.
  * @retval None
  */
__weak void HAL_MspInit(void)
{
 8001d24:	4770      	bx	lr

08001d26 <HAL_MspDeInit>:
/**
  * @brief  DeInitializes the MSP.
  * @retval None
  */
__weak void HAL_MspDeInit(void)
{
 8001d26:	4770      	bx	lr

08001d28 <HAL_DeInit>:
{
 8001d28:	b510      	push	{r4, lr}
  __HAL_RCC_APB1_FORCE_RESET();
 8001d2a:	4b06      	ldr	r3, [pc, #24]	; (8001d44 <HAL_DeInit+0x1c>)
 8001d2c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001d30:	60da      	str	r2, [r3, #12]
  __HAL_RCC_APB1_RELEASE_RESET();
 8001d32:	2400      	movs	r4, #0
 8001d34:	611c      	str	r4, [r3, #16]
  __HAL_RCC_APB2_FORCE_RESET();
 8001d36:	60da      	str	r2, [r3, #12]
  __HAL_RCC_APB2_RELEASE_RESET();
 8001d38:	60dc      	str	r4, [r3, #12]
  HAL_MspDeInit();
 8001d3a:	f7ff fff4 	bl	8001d26 <HAL_MspDeInit>
}
 8001d3e:	4620      	mov	r0, r4
 8001d40:	bd10      	pop	{r4, pc}
 8001d42:	bf00      	nop
 8001d44:	40021000 	.word	0x40021000

08001d48 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d48:	b510      	push	{r4, lr}
 8001d4a:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001d4c:	4b0e      	ldr	r3, [pc, #56]	; (8001d88 <HAL_InitTick+0x40>)
 8001d4e:	7818      	ldrb	r0, [r3, #0]
 8001d50:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d54:	fbb3 f3f0 	udiv	r3, r3, r0
 8001d58:	4a0c      	ldr	r2, [pc, #48]	; (8001d8c <HAL_InitTick+0x44>)
 8001d5a:	6810      	ldr	r0, [r2, #0]
 8001d5c:	fbb0 f0f3 	udiv	r0, r0, r3
 8001d60:	f000 f93c 	bl	8001fdc <HAL_SYSTICK_Config>
 8001d64:	b968      	cbnz	r0, 8001d82 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d66:	2c0f      	cmp	r4, #15
 8001d68:	d901      	bls.n	8001d6e <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 8001d6a:	2001      	movs	r0, #1
  }

  /* Return function status */
  return HAL_OK;
}
 8001d6c:	bd10      	pop	{r4, pc}
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d6e:	2200      	movs	r2, #0
 8001d70:	4621      	mov	r1, r4
 8001d72:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001d76:	f000 f8d3 	bl	8001f20 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d7a:	4b03      	ldr	r3, [pc, #12]	; (8001d88 <HAL_InitTick+0x40>)
 8001d7c:	605c      	str	r4, [r3, #4]
  return HAL_OK;
 8001d7e:	2000      	movs	r0, #0
 8001d80:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001d82:	2001      	movs	r0, #1
 8001d84:	bd10      	pop	{r4, pc}
 8001d86:	bf00      	nop
 8001d88:	2000000c 	.word	0x2000000c
 8001d8c:	20000008 	.word	0x20000008

08001d90 <HAL_Init>:
{
 8001d90:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d92:	4a07      	ldr	r2, [pc, #28]	; (8001db0 <HAL_Init+0x20>)
 8001d94:	6813      	ldr	r3, [r2, #0]
 8001d96:	f043 0310 	orr.w	r3, r3, #16
 8001d9a:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d9c:	2003      	movs	r0, #3
 8001d9e:	f000 f8ad 	bl	8001efc <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8001da2:	2000      	movs	r0, #0
 8001da4:	f7ff ffd0 	bl	8001d48 <HAL_InitTick>
  HAL_MspInit();
 8001da8:	f7ff fc40 	bl	800162c <HAL_MspInit>
}
 8001dac:	2000      	movs	r0, #0
 8001dae:	bd08      	pop	{r3, pc}
 8001db0:	40022000 	.word	0x40022000

08001db4 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8001db4:	4a03      	ldr	r2, [pc, #12]	; (8001dc4 <HAL_IncTick+0x10>)
 8001db6:	6811      	ldr	r1, [r2, #0]
 8001db8:	4b03      	ldr	r3, [pc, #12]	; (8001dc8 <HAL_IncTick+0x14>)
 8001dba:	781b      	ldrb	r3, [r3, #0]
 8001dbc:	440b      	add	r3, r1
 8001dbe:	6013      	str	r3, [r2, #0]
 8001dc0:	4770      	bx	lr
 8001dc2:	bf00      	nop
 8001dc4:	20001be4 	.word	0x20001be4
 8001dc8:	2000000c 	.word	0x2000000c

08001dcc <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001dcc:	4b01      	ldr	r3, [pc, #4]	; (8001dd4 <HAL_GetTick+0x8>)
 8001dce:	6818      	ldr	r0, [r3, #0]
}
 8001dd0:	4770      	bx	lr
 8001dd2:	bf00      	nop
 8001dd4:	20001be4 	.word	0x20001be4

08001dd8 <HAL_GetTickPrio>:
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
  return uwTickPrio;
}
 8001dd8:	4b01      	ldr	r3, [pc, #4]	; (8001de0 <HAL_GetTickPrio+0x8>)
 8001dda:	6858      	ldr	r0, [r3, #4]
 8001ddc:	4770      	bx	lr
 8001dde:	bf00      	nop
 8001de0:	2000000c 	.word	0x2000000c

08001de4 <HAL_SetTickFreq>:
/**
  * @brief Set new tick Freq.
  * @retval Status
  */
HAL_StatusTypeDef HAL_SetTickFreq(HAL_TickFreqTypeDef Freq)
{
 8001de4:	b508      	push	{r3, lr}
  HAL_StatusTypeDef status  = HAL_OK;
  assert_param(IS_TICKFREQ(Freq));

  if (uwTickFreq != Freq)
 8001de6:	4b06      	ldr	r3, [pc, #24]	; (8001e00 <HAL_SetTickFreq+0x1c>)
 8001de8:	781b      	ldrb	r3, [r3, #0]
 8001dea:	4283      	cmp	r3, r0
 8001dec:	d005      	beq.n	8001dfa <HAL_SetTickFreq+0x16>
  {
    uwTickFreq = Freq;
 8001dee:	4b04      	ldr	r3, [pc, #16]	; (8001e00 <HAL_SetTickFreq+0x1c>)
 8001df0:	7018      	strb	r0, [r3, #0]

    /* Apply the new tick Freq  */
    status = HAL_InitTick(uwTickPrio);
 8001df2:	6858      	ldr	r0, [r3, #4]
 8001df4:	f7ff ffa8 	bl	8001d48 <HAL_InitTick>
 8001df8:	bd08      	pop	{r3, pc}
  HAL_StatusTypeDef status  = HAL_OK;
 8001dfa:	2000      	movs	r0, #0
  }

  return status;
}
 8001dfc:	bd08      	pop	{r3, pc}
 8001dfe:	bf00      	nop
 8001e00:	2000000c 	.word	0x2000000c

08001e04 <HAL_GetTickFreq>:
  * @retval tick period in Hz
  */
HAL_TickFreqTypeDef HAL_GetTickFreq(void)
{
  return uwTickFreq;
}
 8001e04:	4b01      	ldr	r3, [pc, #4]	; (8001e0c <HAL_GetTickFreq+0x8>)
 8001e06:	7818      	ldrb	r0, [r3, #0]
 8001e08:	4770      	bx	lr
 8001e0a:	bf00      	nop
 8001e0c:	2000000c 	.word	0x2000000c

08001e10 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e10:	b538      	push	{r3, r4, r5, lr}
 8001e12:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001e14:	f7ff ffda 	bl	8001dcc <HAL_GetTick>
 8001e18:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e1a:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 8001e1e:	d002      	beq.n	8001e26 <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e20:	4b04      	ldr	r3, [pc, #16]	; (8001e34 <HAL_Delay+0x24>)
 8001e22:	781b      	ldrb	r3, [r3, #0]
 8001e24:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001e26:	f7ff ffd1 	bl	8001dcc <HAL_GetTick>
 8001e2a:	1b40      	subs	r0, r0, r5
 8001e2c:	4284      	cmp	r4, r0
 8001e2e:	d8fa      	bhi.n	8001e26 <HAL_Delay+0x16>
  {
  }
}
 8001e30:	bd38      	pop	{r3, r4, r5, pc}
 8001e32:	bf00      	nop
 8001e34:	2000000c 	.word	0x2000000c

08001e38 <HAL_SuspendTick>:
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8001e38:	4a02      	ldr	r2, [pc, #8]	; (8001e44 <HAL_SuspendTick+0xc>)
 8001e3a:	6813      	ldr	r3, [r2, #0]
 8001e3c:	f023 0302 	bic.w	r3, r3, #2
 8001e40:	6013      	str	r3, [r2, #0]
 8001e42:	4770      	bx	lr
 8001e44:	e000e010 	.word	0xe000e010

08001e48 <HAL_ResumeTick>:
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8001e48:	4a02      	ldr	r2, [pc, #8]	; (8001e54 <HAL_ResumeTick+0xc>)
 8001e4a:	6813      	ldr	r3, [r2, #0]
 8001e4c:	f043 0302 	orr.w	r3, r3, #2
 8001e50:	6013      	str	r3, [r2, #0]
 8001e52:	4770      	bx	lr
 8001e54:	e000e010 	.word	0xe000e010

08001e58 <HAL_GetHalVersion>:
  * @retval version 0xXYZR (8bits for each decimal, R for RC)
  */
uint32_t HAL_GetHalVersion(void)
{
  return __STM32F1xx_HAL_VERSION;
}
 8001e58:	4800      	ldr	r0, [pc, #0]	; (8001e5c <HAL_GetHalVersion+0x4>)
 8001e5a:	4770      	bx	lr
 8001e5c:	01010200 	.word	0x01010200

08001e60 <HAL_GetREVID>:
  *       Refer to errata sheet of these devices for more details.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
  return ((DBGMCU->IDCODE) >> DBGMCU_IDCODE_REV_ID_Pos);
 8001e60:	4b01      	ldr	r3, [pc, #4]	; (8001e68 <HAL_GetREVID+0x8>)
 8001e62:	6818      	ldr	r0, [r3, #0]
}
 8001e64:	0c00      	lsrs	r0, r0, #16
 8001e66:	4770      	bx	lr
 8001e68:	e0042000 	.word	0xe0042000

08001e6c <HAL_GetDEVID>:
  *       Refer to errata sheet of these devices for more details.
  * @retval Device identifier
  */
uint32_t HAL_GetDEVID(void)
{
  return ((DBGMCU->IDCODE) & IDCODE_DEVID_MASK);
 8001e6c:	4b02      	ldr	r3, [pc, #8]	; (8001e78 <HAL_GetDEVID+0xc>)
 8001e6e:	6818      	ldr	r0, [r3, #0]
}
 8001e70:	f3c0 000b 	ubfx	r0, r0, #0, #12
 8001e74:	4770      	bx	lr
 8001e76:	bf00      	nop
 8001e78:	e0042000 	.word	0xe0042000

08001e7c <HAL_DBGMCU_EnableDBGSleepMode>:
  * @brief  Enable the Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGSleepMode(void)
{
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 8001e7c:	4a02      	ldr	r2, [pc, #8]	; (8001e88 <HAL_DBGMCU_EnableDBGSleepMode+0xc>)
 8001e7e:	6853      	ldr	r3, [r2, #4]
 8001e80:	f043 0301 	orr.w	r3, r3, #1
 8001e84:	6053      	str	r3, [r2, #4]
 8001e86:	4770      	bx	lr
 8001e88:	e0042000 	.word	0xe0042000

08001e8c <HAL_DBGMCU_DisableDBGSleepMode>:
  *       Refer to errata sheet of these devices for more details.
  * @retval None
  */
void HAL_DBGMCU_DisableDBGSleepMode(void)
{
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 8001e8c:	4a02      	ldr	r2, [pc, #8]	; (8001e98 <HAL_DBGMCU_DisableDBGSleepMode+0xc>)
 8001e8e:	6853      	ldr	r3, [r2, #4]
 8001e90:	f023 0301 	bic.w	r3, r3, #1
 8001e94:	6053      	str	r3, [r2, #4]
 8001e96:	4770      	bx	lr
 8001e98:	e0042000 	.word	0xe0042000

08001e9c <HAL_DBGMCU_EnableDBGStopMode>:
  *       Refer to errata sheet of these devices for more details.
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStopMode(void)
{
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 8001e9c:	4a02      	ldr	r2, [pc, #8]	; (8001ea8 <HAL_DBGMCU_EnableDBGStopMode+0xc>)
 8001e9e:	6853      	ldr	r3, [r2, #4]
 8001ea0:	f043 0302 	orr.w	r3, r3, #2
 8001ea4:	6053      	str	r3, [r2, #4]
 8001ea6:	4770      	bx	lr
 8001ea8:	e0042000 	.word	0xe0042000

08001eac <HAL_DBGMCU_DisableDBGStopMode>:
  *       Refer to errata sheet of these devices for more details.
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStopMode(void)
{
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 8001eac:	4a02      	ldr	r2, [pc, #8]	; (8001eb8 <HAL_DBGMCU_DisableDBGStopMode+0xc>)
 8001eae:	6853      	ldr	r3, [r2, #4]
 8001eb0:	f023 0302 	bic.w	r3, r3, #2
 8001eb4:	6053      	str	r3, [r2, #4]
 8001eb6:	4770      	bx	lr
 8001eb8:	e0042000 	.word	0xe0042000

08001ebc <HAL_DBGMCU_EnableDBGStandbyMode>:
  *       Refer to errata sheet of these devices for more details.
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStandbyMode(void)
{
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 8001ebc:	4a02      	ldr	r2, [pc, #8]	; (8001ec8 <HAL_DBGMCU_EnableDBGStandbyMode+0xc>)
 8001ebe:	6853      	ldr	r3, [r2, #4]
 8001ec0:	f043 0304 	orr.w	r3, r3, #4
 8001ec4:	6053      	str	r3, [r2, #4]
 8001ec6:	4770      	bx	lr
 8001ec8:	e0042000 	.word	0xe0042000

08001ecc <HAL_DBGMCU_DisableDBGStandbyMode>:
  *       Refer to errata sheet of these devices for more details.
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStandbyMode(void)
{
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 8001ecc:	4a02      	ldr	r2, [pc, #8]	; (8001ed8 <HAL_DBGMCU_DisableDBGStandbyMode+0xc>)
 8001ece:	6853      	ldr	r3, [r2, #4]
 8001ed0:	f023 0304 	bic.w	r3, r3, #4
 8001ed4:	6053      	str	r3, [r2, #4]
 8001ed6:	4770      	bx	lr
 8001ed8:	e0042000 	.word	0xe0042000

08001edc <HAL_GetUID>:
  * @param UID pointer to 3 words array.
  * @retval Device identifier
  */
void HAL_GetUID(uint32_t *UID)
{
  UID[0] = (uint32_t)(READ_REG(*((uint32_t *)UID_BASE)));
 8001edc:	4b04      	ldr	r3, [pc, #16]	; (8001ef0 <HAL_GetUID+0x14>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	6003      	str	r3, [r0, #0]
  UID[1] = (uint32_t)(READ_REG(*((uint32_t *)(UID_BASE + 4U))));
 8001ee2:	4b04      	ldr	r3, [pc, #16]	; (8001ef4 <HAL_GetUID+0x18>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	6043      	str	r3, [r0, #4]
  UID[2] = (uint32_t)(READ_REG(*((uint32_t *)(UID_BASE + 8U))));
 8001ee8:	4b03      	ldr	r3, [pc, #12]	; (8001ef8 <HAL_GetUID+0x1c>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	6083      	str	r3, [r0, #8]
 8001eee:	4770      	bx	lr
 8001ef0:	1ffff7e8 	.word	0x1ffff7e8
 8001ef4:	1ffff7ec 	.word	0x1ffff7ec
 8001ef8:	1ffff7f0 	.word	0x1ffff7f0

08001efc <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001efc:	4a07      	ldr	r2, [pc, #28]	; (8001f1c <HAL_NVIC_SetPriorityGrouping+0x20>)
 8001efe:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f00:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001f04:	041b      	lsls	r3, r3, #16
 8001f06:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8001f08:	0200      	lsls	r0, r0, #8
 8001f0a:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f0e:	4318      	orrs	r0, r3
  reg_value  =  (reg_value                                   |
 8001f10:	f040 60bf 	orr.w	r0, r0, #100139008	; 0x5f80000
 8001f14:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8001f18:	60d0      	str	r0, [r2, #12]
 8001f1a:	4770      	bx	lr
 8001f1c:	e000ed00 	.word	0xe000ed00

08001f20 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f20:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f22:	4b16      	ldr	r3, [pc, #88]	; (8001f7c <HAL_NVIC_SetPriority+0x5c>)
 8001f24:	68db      	ldr	r3, [r3, #12]
 8001f26:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f2a:	f1c3 0407 	rsb	r4, r3, #7
 8001f2e:	2c04      	cmp	r4, #4
 8001f30:	bf28      	it	cs
 8001f32:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f34:	1d1d      	adds	r5, r3, #4
 8001f36:	2d06      	cmp	r5, #6
 8001f38:	d917      	bls.n	8001f6a <HAL_NVIC_SetPriority+0x4a>
 8001f3a:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f3c:	2501      	movs	r5, #1
 8001f3e:	fa05 f404 	lsl.w	r4, r5, r4
 8001f42:	3c01      	subs	r4, #1
 8001f44:	4021      	ands	r1, r4
 8001f46:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f48:	fa05 f303 	lsl.w	r3, r5, r3
 8001f4c:	3b01      	subs	r3, #1
 8001f4e:	4013      	ands	r3, r2
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f50:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) < 0)
 8001f52:	2800      	cmp	r0, #0
 8001f54:	db0b      	blt.n	8001f6e <HAL_NVIC_SetPriority+0x4e>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f56:	0109      	lsls	r1, r1, #4
 8001f58:	b2c9      	uxtb	r1, r1
 8001f5a:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8001f5e:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8001f62:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8001f66:	bc30      	pop	{r4, r5}
 8001f68:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	e7e6      	b.n	8001f3c <HAL_NVIC_SetPriority+0x1c>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f6e:	f000 000f 	and.w	r0, r0, #15
 8001f72:	0109      	lsls	r1, r1, #4
 8001f74:	b2c9      	uxtb	r1, r1
 8001f76:	4b02      	ldr	r3, [pc, #8]	; (8001f80 <HAL_NVIC_SetPriority+0x60>)
 8001f78:	5419      	strb	r1, [r3, r0]
 8001f7a:	e7f4      	b.n	8001f66 <HAL_NVIC_SetPriority+0x46>
 8001f7c:	e000ed00 	.word	0xe000ed00
 8001f80:	e000ed14 	.word	0xe000ed14

08001f84 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8001f84:	0942      	lsrs	r2, r0, #5
 8001f86:	f000 001f 	and.w	r0, r0, #31
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	fa03 f000 	lsl.w	r0, r3, r0
 8001f90:	4b01      	ldr	r3, [pc, #4]	; (8001f98 <HAL_NVIC_EnableIRQ+0x14>)
 8001f92:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8001f96:	4770      	bx	lr
 8001f98:	e000e100 	.word	0xe000e100

08001f9c <HAL_NVIC_DisableIRQ>:
  NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8001f9c:	0943      	lsrs	r3, r0, #5
 8001f9e:	f000 001f 	and.w	r0, r0, #31
 8001fa2:	2201      	movs	r2, #1
 8001fa4:	fa02 f000 	lsl.w	r0, r2, r0
 8001fa8:	3320      	adds	r3, #32
 8001faa:	4a02      	ldr	r2, [pc, #8]	; (8001fb4 <HAL_NVIC_DisableIRQ+0x18>)
 8001fac:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
 8001fb0:	4770      	bx	lr
 8001fb2:	bf00      	nop
 8001fb4:	e000e100 	.word	0xe000e100

08001fb8 <HAL_NVIC_SystemReset>:
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001fb8:	f3bf 8f4f 	dsb	sy
__STATIC_INLINE void NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8001fbc:	4905      	ldr	r1, [pc, #20]	; (8001fd4 <HAL_NVIC_SystemReset+0x1c>)
 8001fbe:	68ca      	ldr	r2, [r1, #12]
 8001fc0:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8001fc4:	4b04      	ldr	r3, [pc, #16]	; (8001fd8 <HAL_NVIC_SystemReset+0x20>)
 8001fc6:	4313      	orrs	r3, r2
 8001fc8:	60cb      	str	r3, [r1, #12]
 8001fca:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 8001fce:	bf00      	nop
 8001fd0:	e7fd      	b.n	8001fce <HAL_NVIC_SystemReset+0x16>
 8001fd2:	bf00      	nop
 8001fd4:	e000ed00 	.word	0xe000ed00
 8001fd8:	05fa0004 	.word	0x05fa0004

08001fdc <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001fdc:	3801      	subs	r0, #1
 8001fde:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8001fe2:	d20a      	bcs.n	8001ffa <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001fe4:	4b06      	ldr	r3, [pc, #24]	; (8002000 <HAL_SYSTICK_Config+0x24>)
 8001fe6:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fe8:	21f0      	movs	r1, #240	; 0xf0
 8001fea:	4a06      	ldr	r2, [pc, #24]	; (8002004 <HAL_SYSTICK_Config+0x28>)
 8001fec:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ff0:	2000      	movs	r0, #0
 8001ff2:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ff4:	2207      	movs	r2, #7
 8001ff6:	601a      	str	r2, [r3, #0]
 8001ff8:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8001ffa:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001ffc:	4770      	bx	lr
 8001ffe:	bf00      	nop
 8002000:	e000e010 	.word	0xe000e010
 8002004:	e000ed00 	.word	0xe000ed00

08002008 <HAL_NVIC_GetPriorityGrouping>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002008:	4b02      	ldr	r3, [pc, #8]	; (8002014 <HAL_NVIC_GetPriorityGrouping+0xc>)
 800200a:	68d8      	ldr	r0, [r3, #12]
  */
uint32_t HAL_NVIC_GetPriorityGrouping(void)
{
  /* Get the PRIGROUP[10:8] field value */
  return NVIC_GetPriorityGrouping();
}
 800200c:	f3c0 2002 	ubfx	r0, r0, #8, #3
 8002010:	4770      	bx	lr
 8002012:	bf00      	nop
 8002014:	e000ed00 	.word	0xe000ed00

08002018 <HAL_NVIC_GetPriority>:
  * @param  pPreemptPriority: Pointer on the Preemptive priority value (starting from 0).
  * @param  pSubPriority: Pointer on the Subpriority value (starting from 0).
  * @retval None
  */
void HAL_NVIC_GetPriority(IRQn_Type IRQn, uint32_t PriorityGroup, uint32_t *pPreemptPriority, uint32_t *pSubPriority)
{
 8002018:	b470      	push	{r4, r5, r6}
  if ((int32_t)(IRQn) < 0)
 800201a:	2800      	cmp	r0, #0
 800201c:	db1f      	blt.n	800205e <HAL_NVIC_GetPriority+0x46>
    return(((uint32_t)NVIC->IP[((uint32_t)(int32_t)IRQn)]               >> (8U - __NVIC_PRIO_BITS)));
 800201e:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8002022:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8002026:	f890 0300 	ldrb.w	r0, [r0, #768]	; 0x300
 800202a:	0905      	lsrs	r5, r0, #4
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800202c:	f001 0107 	and.w	r1, r1, #7
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002030:	f1c1 0407 	rsb	r4, r1, #7
 8002034:	2c04      	cmp	r4, #4
 8002036:	bf28      	it	cs
 8002038:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800203a:	1d08      	adds	r0, r1, #4
 800203c:	2806      	cmp	r0, #6
 800203e:	d914      	bls.n	800206a <HAL_NVIC_GetPriority+0x52>
 8002040:	3903      	subs	r1, #3
  *pPreemptPriority = (Priority >> SubPriorityBits) & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL);
 8002042:	fa25 f601 	lsr.w	r6, r5, r1
 8002046:	2001      	movs	r0, #1
 8002048:	fa00 f404 	lsl.w	r4, r0, r4
 800204c:	3c01      	subs	r4, #1
 800204e:	4034      	ands	r4, r6
 8002050:	6014      	str	r4, [r2, #0]
  *pSubPriority     = (Priority                   ) & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL);
 8002052:	4088      	lsls	r0, r1
 8002054:	3801      	subs	r0, #1
 8002056:	4028      	ands	r0, r5
 8002058:	6018      	str	r0, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 /* Get priority for Cortex-M system or device specific interrupts */
  NVIC_DecodePriority(NVIC_GetPriority(IRQn), PriorityGroup, pPreemptPriority, pSubPriority);
}
 800205a:	bc70      	pop	{r4, r5, r6}
 800205c:	4770      	bx	lr
    return(((uint32_t)SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] >> (8U - __NVIC_PRIO_BITS)));
 800205e:	f000 000f 	and.w	r0, r0, #15
 8002062:	4c03      	ldr	r4, [pc, #12]	; (8002070 <HAL_NVIC_GetPriority+0x58>)
 8002064:	5c20      	ldrb	r0, [r4, r0]
 8002066:	0905      	lsrs	r5, r0, #4
 8002068:	e7e0      	b.n	800202c <HAL_NVIC_GetPriority+0x14>
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800206a:	2100      	movs	r1, #0
 800206c:	e7e9      	b.n	8002042 <HAL_NVIC_GetPriority+0x2a>
 800206e:	bf00      	nop
 8002070:	e000ed14 	.word	0xe000ed14

08002074 <HAL_NVIC_SetPendingIRQ>:
  NVIC->ISPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8002074:	0943      	lsrs	r3, r0, #5
 8002076:	f000 001f 	and.w	r0, r0, #31
 800207a:	2201      	movs	r2, #1
 800207c:	fa02 f000 	lsl.w	r0, r2, r0
 8002080:	3340      	adds	r3, #64	; 0x40
 8002082:	4a02      	ldr	r2, [pc, #8]	; (800208c <HAL_NVIC_SetPendingIRQ+0x18>)
 8002084:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
 8002088:	4770      	bx	lr
 800208a:	bf00      	nop
 800208c:	e000e100 	.word	0xe000e100

08002090 <HAL_NVIC_GetPendingIRQ>:
  return((uint32_t)(((NVIC->ISPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));
 8002090:	0943      	lsrs	r3, r0, #5
 8002092:	3340      	adds	r3, #64	; 0x40
 8002094:	4a04      	ldr	r2, [pc, #16]	; (80020a8 <HAL_NVIC_GetPendingIRQ+0x18>)
 8002096:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800209a:	f000 001f 	and.w	r0, r0, #31
 800209e:	fa23 f000 	lsr.w	r0, r3, r0
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Return 1 if pending else 0 */
  return NVIC_GetPendingIRQ(IRQn);
}
 80020a2:	f000 0001 	and.w	r0, r0, #1
 80020a6:	4770      	bx	lr
 80020a8:	e000e100 	.word	0xe000e100

080020ac <HAL_NVIC_ClearPendingIRQ>:
  NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80020ac:	0943      	lsrs	r3, r0, #5
 80020ae:	f000 001f 	and.w	r0, r0, #31
 80020b2:	2201      	movs	r2, #1
 80020b4:	fa02 f000 	lsl.w	r0, r2, r0
 80020b8:	3360      	adds	r3, #96	; 0x60
 80020ba:	4a02      	ldr	r2, [pc, #8]	; (80020c4 <HAL_NVIC_ClearPendingIRQ+0x18>)
 80020bc:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
 80020c0:	4770      	bx	lr
 80020c2:	bf00      	nop
 80020c4:	e000e100 	.word	0xe000e100

080020c8 <HAL_NVIC_GetActive>:
  return((uint32_t)(((NVIC->IABR[(((uint32_t)(int32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));
 80020c8:	0943      	lsrs	r3, r0, #5
 80020ca:	3380      	adds	r3, #128	; 0x80
 80020cc:	4a04      	ldr	r2, [pc, #16]	; (80020e0 <HAL_NVIC_GetActive+0x18>)
 80020ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020d2:	f000 001f 	and.w	r0, r0, #31
 80020d6:	fa23 f000 	lsr.w	r0, r3, r0
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Return 1 if active else 0 */
  return NVIC_GetActive(IRQn);
}
 80020da:	f000 0001 	and.w	r0, r0, #1
 80020de:	4770      	bx	lr
 80020e0:	e000e100 	.word	0xe000e100

080020e4 <HAL_SYSTICK_CLKSourceConfig>:
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 80020e4:	2804      	cmp	r0, #4
 80020e6:	d005      	beq.n	80020f4 <HAL_SYSTICK_CLKSourceConfig+0x10>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 80020e8:	4a05      	ldr	r2, [pc, #20]	; (8002100 <HAL_SYSTICK_CLKSourceConfig+0x1c>)
 80020ea:	6813      	ldr	r3, [r2, #0]
 80020ec:	f023 0304 	bic.w	r3, r3, #4
 80020f0:	6013      	str	r3, [r2, #0]
 80020f2:	4770      	bx	lr
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80020f4:	4a02      	ldr	r2, [pc, #8]	; (8002100 <HAL_SYSTICK_CLKSourceConfig+0x1c>)
 80020f6:	6813      	ldr	r3, [r2, #0]
 80020f8:	f043 0304 	orr.w	r3, r3, #4
 80020fc:	6013      	str	r3, [r2, #0]
 80020fe:	4770      	bx	lr
 8002100:	e000e010 	.word	0xe000e010

08002104 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8002104:	4770      	bx	lr

08002106 <HAL_SYSTICK_IRQHandler>:
{
 8002106:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 8002108:	f7ff fffc 	bl	8002104 <HAL_SYSTICK_Callback>
 800210c:	bd08      	pop	{r3, pc}
 800210e:	bf00      	nop

08002110 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002110:	b470      	push	{r4, r5, r6}
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002112:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
 8002114:	6c06      	ldr	r6, [r0, #64]	; 0x40
 8002116:	2401      	movs	r4, #1
 8002118:	40b4      	lsls	r4, r6
 800211a:	606c      	str	r4, [r5, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800211c:	6804      	ldr	r4, [r0, #0]
 800211e:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002120:	6843      	ldr	r3, [r0, #4]
 8002122:	2b10      	cmp	r3, #16
 8002124:	d005      	beq.n	8002132 <DMA_SetConfig+0x22>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8002126:	6803      	ldr	r3, [r0, #0]
 8002128:	6099      	str	r1, [r3, #8]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 800212a:	6803      	ldr	r3, [r0, #0]
 800212c:	60da      	str	r2, [r3, #12]
  }
}
 800212e:	bc70      	pop	{r4, r5, r6}
 8002130:	4770      	bx	lr
    hdma->Instance->CPAR = DstAddress;
 8002132:	6803      	ldr	r3, [r0, #0]
 8002134:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = SrcAddress;
 8002136:	6803      	ldr	r3, [r0, #0]
 8002138:	60d9      	str	r1, [r3, #12]
 800213a:	e7f8      	b.n	800212e <DMA_SetConfig+0x1e>

0800213c <HAL_DMA_Init>:
  if(hdma == NULL)
 800213c:	2800      	cmp	r0, #0
 800213e:	d030      	beq.n	80021a2 <HAL_DMA_Init+0x66>
{
 8002140:	b410      	push	{r4}
 8002142:	4603      	mov	r3, r0
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002144:	6800      	ldr	r0, [r0, #0]
 8002146:	4a18      	ldr	r2, [pc, #96]	; (80021a8 <HAL_DMA_Init+0x6c>)
 8002148:	4402      	add	r2, r0
 800214a:	4918      	ldr	r1, [pc, #96]	; (80021ac <HAL_DMA_Init+0x70>)
 800214c:	fba1 1202 	umull	r1, r2, r1, r2
 8002150:	0912      	lsrs	r2, r2, #4
 8002152:	0092      	lsls	r2, r2, #2
 8002154:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8002156:	4a16      	ldr	r2, [pc, #88]	; (80021b0 <HAL_DMA_Init+0x74>)
 8002158:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->State = HAL_DMA_STATE_BUSY;
 800215a:	2202      	movs	r2, #2
 800215c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  tmp = hdma->Instance->CCR;
 8002160:	6801      	ldr	r1, [r0, #0]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002162:	f421 517f 	bic.w	r1, r1, #16320	; 0x3fc0
 8002166:	f021 0130 	bic.w	r1, r1, #48	; 0x30
  tmp |=  hdma->Init.Direction        |
 800216a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800216c:	689c      	ldr	r4, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 800216e:	4322      	orrs	r2, r4
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002170:	68dc      	ldr	r4, [r3, #12]
 8002172:	4322      	orrs	r2, r4
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002174:	691c      	ldr	r4, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002176:	4322      	orrs	r2, r4
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002178:	695c      	ldr	r4, [r3, #20]
 800217a:	4322      	orrs	r2, r4
          hdma->Init.Mode                | hdma->Init.Priority;
 800217c:	699c      	ldr	r4, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800217e:	4322      	orrs	r2, r4
          hdma->Init.Mode                | hdma->Init.Priority;
 8002180:	69dc      	ldr	r4, [r3, #28]
 8002182:	4322      	orrs	r2, r4
  tmp |=  hdma->Init.Direction        |
 8002184:	430a      	orrs	r2, r1
  hdma->Instance->CCR = tmp;
 8002186:	6002      	str	r2, [r0, #0]
  hdma->XferCpltCallback = NULL;
 8002188:	2000      	movs	r0, #0
 800218a:	6298      	str	r0, [r3, #40]	; 0x28
  hdma->XferHalfCpltCallback = NULL;
 800218c:	62d8      	str	r0, [r3, #44]	; 0x2c
  hdma->XferErrorCallback = NULL;
 800218e:	6318      	str	r0, [r3, #48]	; 0x30
  hdma->XferAbortCallback = NULL;
 8002190:	6358      	str	r0, [r3, #52]	; 0x34
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002192:	6398      	str	r0, [r3, #56]	; 0x38
  hdma->State = HAL_DMA_STATE_READY;
 8002194:	2201      	movs	r2, #1
 8002196:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  hdma->Lock = HAL_UNLOCKED;
 800219a:	f883 0020 	strb.w	r0, [r3, #32]
}
 800219e:	bc10      	pop	{r4}
 80021a0:	4770      	bx	lr
    return HAL_ERROR;
 80021a2:	2001      	movs	r0, #1
 80021a4:	4770      	bx	lr
 80021a6:	bf00      	nop
 80021a8:	bffdfff8 	.word	0xbffdfff8
 80021ac:	cccccccd 	.word	0xcccccccd
 80021b0:	40020000 	.word	0x40020000

080021b4 <HAL_DMA_DeInit>:
  if(hdma == NULL)
 80021b4:	b328      	cbz	r0, 8002202 <HAL_DMA_DeInit+0x4e>
{
 80021b6:	b410      	push	{r4}
 80021b8:	4603      	mov	r3, r0
  __HAL_DMA_DISABLE(hdma);
 80021ba:	6801      	ldr	r1, [r0, #0]
 80021bc:	680a      	ldr	r2, [r1, #0]
 80021be:	f022 0201 	bic.w	r2, r2, #1
 80021c2:	600a      	str	r2, [r1, #0]
  hdma->Instance->CCR  = 0U;
 80021c4:	6802      	ldr	r2, [r0, #0]
 80021c6:	2000      	movs	r0, #0
 80021c8:	6010      	str	r0, [r2, #0]
  hdma->Instance->CNDTR = 0U;
 80021ca:	681a      	ldr	r2, [r3, #0]
 80021cc:	6050      	str	r0, [r2, #4]
  hdma->Instance->CPAR  = 0U;
 80021ce:	681a      	ldr	r2, [r3, #0]
 80021d0:	6090      	str	r0, [r2, #8]
  hdma->Instance->CMAR = 0U;
 80021d2:	681a      	ldr	r2, [r3, #0]
 80021d4:	60d0      	str	r0, [r2, #12]
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80021d6:	6819      	ldr	r1, [r3, #0]
 80021d8:	4a0b      	ldr	r2, [pc, #44]	; (8002208 <HAL_DMA_DeInit+0x54>)
 80021da:	440a      	add	r2, r1
 80021dc:	490b      	ldr	r1, [pc, #44]	; (800220c <HAL_DMA_DeInit+0x58>)
 80021de:	fba1 1202 	umull	r1, r2, r1, r2
 80021e2:	0912      	lsrs	r2, r2, #4
 80021e4:	0092      	lsls	r2, r2, #2
 80021e6:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80021e8:	4c09      	ldr	r4, [pc, #36]	; (8002210 <HAL_DMA_DeInit+0x5c>)
 80021ea:	63dc      	str	r4, [r3, #60]	; 0x3c
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex));
 80021ec:	2101      	movs	r1, #1
 80021ee:	fa01 f202 	lsl.w	r2, r1, r2
 80021f2:	6062      	str	r2, [r4, #4]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80021f4:	6398      	str	r0, [r3, #56]	; 0x38
  hdma->State = HAL_DMA_STATE_RESET;
 80021f6:	f883 0021 	strb.w	r0, [r3, #33]	; 0x21
  __HAL_UNLOCK(hdma);
 80021fa:	f883 0020 	strb.w	r0, [r3, #32]
}
 80021fe:	bc10      	pop	{r4}
 8002200:	4770      	bx	lr
    return HAL_ERROR;
 8002202:	2001      	movs	r0, #1
 8002204:	4770      	bx	lr
 8002206:	bf00      	nop
 8002208:	bffdfff8 	.word	0xbffdfff8
 800220c:	cccccccd 	.word	0xcccccccd
 8002210:	40020000 	.word	0x40020000

08002214 <HAL_DMA_Start>:
{
 8002214:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hdma);
 8002216:	f890 4020 	ldrb.w	r4, [r0, #32]
 800221a:	2c01      	cmp	r4, #1
 800221c:	d020      	beq.n	8002260 <HAL_DMA_Start+0x4c>
 800221e:	2401      	movs	r4, #1
 8002220:	f880 4020 	strb.w	r4, [r0, #32]
  if(HAL_DMA_STATE_READY == hdma->State)
 8002224:	f890 4021 	ldrb.w	r4, [r0, #33]	; 0x21
 8002228:	2c01      	cmp	r4, #1
 800222a:	d004      	beq.n	8002236 <HAL_DMA_Start+0x22>
   __HAL_UNLOCK(hdma);  
 800222c:	2300      	movs	r3, #0
 800222e:	f880 3020 	strb.w	r3, [r0, #32]
   status = HAL_BUSY;
 8002232:	2002      	movs	r0, #2
 8002234:	bd70      	pop	{r4, r5, r6, pc}
 8002236:	4604      	mov	r4, r0
    hdma->State = HAL_DMA_STATE_BUSY;
 8002238:	2002      	movs	r0, #2
 800223a:	f884 0021 	strb.w	r0, [r4, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800223e:	2500      	movs	r5, #0
 8002240:	63a5      	str	r5, [r4, #56]	; 0x38
    __HAL_DMA_DISABLE(hdma);
 8002242:	6826      	ldr	r6, [r4, #0]
 8002244:	6830      	ldr	r0, [r6, #0]
 8002246:	f020 0001 	bic.w	r0, r0, #1
 800224a:	6030      	str	r0, [r6, #0]
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800224c:	4620      	mov	r0, r4
 800224e:	f7ff ff5f 	bl	8002110 <DMA_SetConfig>
    __HAL_DMA_ENABLE(hdma);
 8002252:	6822      	ldr	r2, [r4, #0]
 8002254:	6813      	ldr	r3, [r2, #0]
 8002256:	f043 0301 	orr.w	r3, r3, #1
 800225a:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800225c:	4628      	mov	r0, r5
 800225e:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(hdma);
 8002260:	2002      	movs	r0, #2
}
 8002262:	bd70      	pop	{r4, r5, r6, pc}

08002264 <HAL_DMA_Start_IT>:
{
 8002264:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(hdma);
 8002266:	f890 4020 	ldrb.w	r4, [r0, #32]
 800226a:	2c01      	cmp	r4, #1
 800226c:	d032      	beq.n	80022d4 <HAL_DMA_Start_IT+0x70>
 800226e:	2401      	movs	r4, #1
 8002270:	f880 4020 	strb.w	r4, [r0, #32]
  if(HAL_DMA_STATE_READY == hdma->State)
 8002274:	f890 4021 	ldrb.w	r4, [r0, #33]	; 0x21
 8002278:	2c01      	cmp	r4, #1
 800227a:	d004      	beq.n	8002286 <HAL_DMA_Start_IT+0x22>
    __HAL_UNLOCK(hdma); 
 800227c:	2300      	movs	r3, #0
 800227e:	f880 3020 	strb.w	r3, [r0, #32]
    status = HAL_BUSY;
 8002282:	2002      	movs	r0, #2
 8002284:	bd38      	pop	{r3, r4, r5, pc}
 8002286:	4604      	mov	r4, r0
    hdma->State = HAL_DMA_STATE_BUSY;
 8002288:	2002      	movs	r0, #2
 800228a:	f884 0021 	strb.w	r0, [r4, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800228e:	2000      	movs	r0, #0
 8002290:	63a0      	str	r0, [r4, #56]	; 0x38
    __HAL_DMA_DISABLE(hdma);
 8002292:	6825      	ldr	r5, [r4, #0]
 8002294:	6828      	ldr	r0, [r5, #0]
 8002296:	f020 0001 	bic.w	r0, r0, #1
 800229a:	6028      	str	r0, [r5, #0]
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800229c:	4620      	mov	r0, r4
 800229e:	f7ff ff37 	bl	8002110 <DMA_SetConfig>
    if(NULL != hdma->XferHalfCpltCallback)
 80022a2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80022a4:	b15b      	cbz	r3, 80022be <HAL_DMA_Start_IT+0x5a>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80022a6:	6822      	ldr	r2, [r4, #0]
 80022a8:	6813      	ldr	r3, [r2, #0]
 80022aa:	f043 030e 	orr.w	r3, r3, #14
 80022ae:	6013      	str	r3, [r2, #0]
    __HAL_DMA_ENABLE(hdma);
 80022b0:	6822      	ldr	r2, [r4, #0]
 80022b2:	6813      	ldr	r3, [r2, #0]
 80022b4:	f043 0301 	orr.w	r3, r3, #1
 80022b8:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80022ba:	2000      	movs	r0, #0
 80022bc:	bd38      	pop	{r3, r4, r5, pc}
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80022be:	6822      	ldr	r2, [r4, #0]
 80022c0:	6813      	ldr	r3, [r2, #0]
 80022c2:	f023 0304 	bic.w	r3, r3, #4
 80022c6:	6013      	str	r3, [r2, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80022c8:	6822      	ldr	r2, [r4, #0]
 80022ca:	6813      	ldr	r3, [r2, #0]
 80022cc:	f043 030a 	orr.w	r3, r3, #10
 80022d0:	6013      	str	r3, [r2, #0]
 80022d2:	e7ed      	b.n	80022b0 <HAL_DMA_Start_IT+0x4c>
  __HAL_LOCK(hdma);
 80022d4:	2002      	movs	r0, #2
}
 80022d6:	bd38      	pop	{r3, r4, r5, pc}

080022d8 <HAL_DMA_Abort>:
{
 80022d8:	4603      	mov	r3, r0
  __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80022da:	6801      	ldr	r1, [r0, #0]
 80022dc:	680a      	ldr	r2, [r1, #0]
 80022de:	f022 020e 	bic.w	r2, r2, #14
 80022e2:	600a      	str	r2, [r1, #0]
  __HAL_DMA_DISABLE(hdma);
 80022e4:	6801      	ldr	r1, [r0, #0]
 80022e6:	680a      	ldr	r2, [r1, #0]
 80022e8:	f022 0201 	bic.w	r2, r2, #1
 80022ec:	600a      	str	r2, [r1, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80022ee:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 80022f0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80022f2:	2101      	movs	r1, #1
 80022f4:	fa01 f202 	lsl.w	r2, r1, r2
 80022f8:	6042      	str	r2, [r0, #4]
  hdma->State = HAL_DMA_STATE_READY;
 80022fa:	f883 1021 	strb.w	r1, [r3, #33]	; 0x21
  __HAL_UNLOCK(hdma);      
 80022fe:	2000      	movs	r0, #0
 8002300:	f883 0020 	strb.w	r0, [r3, #32]
}
 8002304:	4770      	bx	lr

08002306 <HAL_DMA_Abort_IT>:
{  
 8002306:	b508      	push	{r3, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002308:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 800230c:	2b02      	cmp	r3, #2
 800230e:	d003      	beq.n	8002318 <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002310:	2304      	movs	r3, #4
 8002312:	6383      	str	r3, [r0, #56]	; 0x38
    status = HAL_ERROR;
 8002314:	2001      	movs	r0, #1
 8002316:	bd08      	pop	{r3, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002318:	6802      	ldr	r2, [r0, #0]
 800231a:	6813      	ldr	r3, [r2, #0]
 800231c:	f023 030e 	bic.w	r3, r3, #14
 8002320:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8002322:	6802      	ldr	r2, [r0, #0]
 8002324:	6813      	ldr	r3, [r2, #0]
 8002326:	f023 0301 	bic.w	r3, r3, #1
 800232a:	6013      	str	r3, [r2, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800232c:	6803      	ldr	r3, [r0, #0]
 800232e:	4a19      	ldr	r2, [pc, #100]	; (8002394 <HAL_DMA_Abort_IT+0x8e>)
 8002330:	4293      	cmp	r3, r2
 8002332:	d014      	beq.n	800235e <HAL_DMA_Abort_IT+0x58>
 8002334:	3214      	adds	r2, #20
 8002336:	4293      	cmp	r3, r2
 8002338:	d01f      	beq.n	800237a <HAL_DMA_Abort_IT+0x74>
 800233a:	3214      	adds	r2, #20
 800233c:	4293      	cmp	r3, r2
 800233e:	d01e      	beq.n	800237e <HAL_DMA_Abort_IT+0x78>
 8002340:	3214      	adds	r2, #20
 8002342:	4293      	cmp	r3, r2
 8002344:	d01e      	beq.n	8002384 <HAL_DMA_Abort_IT+0x7e>
 8002346:	3214      	adds	r2, #20
 8002348:	4293      	cmp	r3, r2
 800234a:	d01e      	beq.n	800238a <HAL_DMA_Abort_IT+0x84>
 800234c:	3214      	adds	r2, #20
 800234e:	4293      	cmp	r3, r2
 8002350:	d002      	beq.n	8002358 <HAL_DMA_Abort_IT+0x52>
 8002352:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002356:	e003      	b.n	8002360 <HAL_DMA_Abort_IT+0x5a>
 8002358:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800235c:	e000      	b.n	8002360 <HAL_DMA_Abort_IT+0x5a>
 800235e:	2201      	movs	r2, #1
 8002360:	4b0d      	ldr	r3, [pc, #52]	; (8002398 <HAL_DMA_Abort_IT+0x92>)
 8002362:	605a      	str	r2, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8002364:	2301      	movs	r3, #1
 8002366:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 800236a:	2300      	movs	r3, #0
 800236c:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 8002370:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002372:	b16b      	cbz	r3, 8002390 <HAL_DMA_Abort_IT+0x8a>
      hdma->XferAbortCallback(hdma);
 8002374:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8002376:	2000      	movs	r0, #0
 8002378:	bd08      	pop	{r3, pc}
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800237a:	2210      	movs	r2, #16
 800237c:	e7f0      	b.n	8002360 <HAL_DMA_Abort_IT+0x5a>
 800237e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002382:	e7ed      	b.n	8002360 <HAL_DMA_Abort_IT+0x5a>
 8002384:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002388:	e7ea      	b.n	8002360 <HAL_DMA_Abort_IT+0x5a>
 800238a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800238e:	e7e7      	b.n	8002360 <HAL_DMA_Abort_IT+0x5a>
  HAL_StatusTypeDef status = HAL_OK;
 8002390:	2000      	movs	r0, #0
}
 8002392:	bd08      	pop	{r3, pc}
 8002394:	40020008 	.word	0x40020008
 8002398:	40020000 	.word	0x40020000

0800239c <HAL_DMA_PollForTransfer>:
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800239c:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 80023a0:	2b02      	cmp	r3, #2
 80023a2:	d006      	beq.n	80023b2 <HAL_DMA_PollForTransfer+0x16>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80023a4:	2304      	movs	r3, #4
 80023a6:	6383      	str	r3, [r0, #56]	; 0x38
    __HAL_UNLOCK(hdma);
 80023a8:	2300      	movs	r3, #0
 80023aa:	f880 3020 	strb.w	r3, [r0, #32]
    return HAL_ERROR;
 80023ae:	2001      	movs	r0, #1
 80023b0:	4770      	bx	lr
{
 80023b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (RESET != (hdma->Instance->CCR & DMA_CCR_CIRC))
 80023b6:	6803      	ldr	r3, [r0, #0]
 80023b8:	681c      	ldr	r4, [r3, #0]
 80023ba:	f014 0f20 	tst.w	r4, #32
 80023be:	d115      	bne.n	80023ec <HAL_DMA_PollForTransfer+0x50>
  if(CompleteLevel == HAL_DMA_FULL_TRANSFER)
 80023c0:	b9e9      	cbnz	r1, 80023fe <HAL_DMA_PollForTransfer+0x62>
    temp = __HAL_DMA_GET_TC_FLAG_INDEX(hdma);
 80023c2:	4c80      	ldr	r4, [pc, #512]	; (80025c4 <HAL_DMA_PollForTransfer+0x228>)
 80023c4:	42a3      	cmp	r3, r4
 80023c6:	d032      	beq.n	800242e <HAL_DMA_PollForTransfer+0x92>
 80023c8:	3414      	adds	r4, #20
 80023ca:	42a3      	cmp	r3, r4
 80023cc:	d037      	beq.n	800243e <HAL_DMA_PollForTransfer+0xa2>
 80023ce:	3414      	adds	r4, #20
 80023d0:	42a3      	cmp	r3, r4
 80023d2:	d036      	beq.n	8002442 <HAL_DMA_PollForTransfer+0xa6>
 80023d4:	3414      	adds	r4, #20
 80023d6:	42a3      	cmp	r3, r4
 80023d8:	d036      	beq.n	8002448 <HAL_DMA_PollForTransfer+0xac>
 80023da:	3414      	adds	r4, #20
 80023dc:	42a3      	cmp	r3, r4
 80023de:	d036      	beq.n	800244e <HAL_DMA_PollForTransfer+0xb2>
 80023e0:	3414      	adds	r4, #20
 80023e2:	42a3      	cmp	r3, r4
 80023e4:	d008      	beq.n	80023f8 <HAL_DMA_PollForTransfer+0x5c>
 80023e6:	f04f 7600 	mov.w	r6, #33554432	; 0x2000000
 80023ea:	e021      	b.n	8002430 <HAL_DMA_PollForTransfer+0x94>
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 80023ec:	f44f 7380 	mov.w	r3, #256	; 0x100
 80023f0:	6383      	str	r3, [r0, #56]	; 0x38
    return HAL_ERROR;
 80023f2:	2001      	movs	r0, #1
 80023f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    temp = __HAL_DMA_GET_TC_FLAG_INDEX(hdma);
 80023f8:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 80023fc:	e018      	b.n	8002430 <HAL_DMA_PollForTransfer+0x94>
    temp = __HAL_DMA_GET_HT_FLAG_INDEX(hdma);
 80023fe:	4c71      	ldr	r4, [pc, #452]	; (80025c4 <HAL_DMA_PollForTransfer+0x228>)
 8002400:	42a3      	cmp	r3, r4
 8002402:	d027      	beq.n	8002454 <HAL_DMA_PollForTransfer+0xb8>
 8002404:	3414      	adds	r4, #20
 8002406:	42a3      	cmp	r3, r4
 8002408:	d026      	beq.n	8002458 <HAL_DMA_PollForTransfer+0xbc>
 800240a:	3414      	adds	r4, #20
 800240c:	42a3      	cmp	r3, r4
 800240e:	d025      	beq.n	800245c <HAL_DMA_PollForTransfer+0xc0>
 8002410:	3414      	adds	r4, #20
 8002412:	42a3      	cmp	r3, r4
 8002414:	d025      	beq.n	8002462 <HAL_DMA_PollForTransfer+0xc6>
 8002416:	3414      	adds	r4, #20
 8002418:	42a3      	cmp	r3, r4
 800241a:	d025      	beq.n	8002468 <HAL_DMA_PollForTransfer+0xcc>
 800241c:	3414      	adds	r4, #20
 800241e:	42a3      	cmp	r3, r4
 8002420:	d002      	beq.n	8002428 <HAL_DMA_PollForTransfer+0x8c>
 8002422:	f04f 6680 	mov.w	r6, #67108864	; 0x4000000
 8002426:	e003      	b.n	8002430 <HAL_DMA_PollForTransfer+0x94>
 8002428:	f44f 0680 	mov.w	r6, #4194304	; 0x400000
 800242c:	e000      	b.n	8002430 <HAL_DMA_PollForTransfer+0x94>
    temp = __HAL_DMA_GET_TC_FLAG_INDEX(hdma);
 800242e:	2602      	movs	r6, #2
 8002430:	4615      	mov	r5, r2
 8002432:	460f      	mov	r7, r1
 8002434:	4604      	mov	r4, r0
  tickstart = HAL_GetTick();
 8002436:	f7ff fcc9 	bl	8001dcc <HAL_GetTick>
 800243a:	4680      	mov	r8, r0
  while(__HAL_DMA_GET_FLAG(hdma, temp) == RESET)
 800243c:	e020      	b.n	8002480 <HAL_DMA_PollForTransfer+0xe4>
    temp = __HAL_DMA_GET_TC_FLAG_INDEX(hdma);
 800243e:	2620      	movs	r6, #32
 8002440:	e7f6      	b.n	8002430 <HAL_DMA_PollForTransfer+0x94>
 8002442:	f44f 7600 	mov.w	r6, #512	; 0x200
 8002446:	e7f3      	b.n	8002430 <HAL_DMA_PollForTransfer+0x94>
 8002448:	f44f 5600 	mov.w	r6, #8192	; 0x2000
 800244c:	e7f0      	b.n	8002430 <HAL_DMA_PollForTransfer+0x94>
 800244e:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 8002452:	e7ed      	b.n	8002430 <HAL_DMA_PollForTransfer+0x94>
    temp = __HAL_DMA_GET_HT_FLAG_INDEX(hdma);
 8002454:	2604      	movs	r6, #4
 8002456:	e7eb      	b.n	8002430 <HAL_DMA_PollForTransfer+0x94>
 8002458:	2640      	movs	r6, #64	; 0x40
 800245a:	e7e9      	b.n	8002430 <HAL_DMA_PollForTransfer+0x94>
 800245c:	f44f 6680 	mov.w	r6, #1024	; 0x400
 8002460:	e7e6      	b.n	8002430 <HAL_DMA_PollForTransfer+0x94>
 8002462:	f44f 4680 	mov.w	r6, #16384	; 0x4000
 8002466:	e7e3      	b.n	8002430 <HAL_DMA_PollForTransfer+0x94>
 8002468:	f44f 2680 	mov.w	r6, #262144	; 0x40000
 800246c:	e7e0      	b.n	8002430 <HAL_DMA_PollForTransfer+0x94>
    if((__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET))
 800246e:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8002472:	e000      	b.n	8002476 <HAL_DMA_PollForTransfer+0xda>
 8002474:	2308      	movs	r3, #8
 8002476:	4213      	tst	r3, r2
 8002478:	d129      	bne.n	80024ce <HAL_DMA_PollForTransfer+0x132>
    if(Timeout != HAL_MAX_DELAY)
 800247a:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 800247e:	d136      	bne.n	80024ee <HAL_DMA_PollForTransfer+0x152>
  while(__HAL_DMA_GET_FLAG(hdma, temp) == RESET)
 8002480:	4b51      	ldr	r3, [pc, #324]	; (80025c8 <HAL_DMA_PollForTransfer+0x22c>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	421e      	tst	r6, r3
 8002486:	d145      	bne.n	8002514 <HAL_DMA_PollForTransfer+0x178>
    if((__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET))
 8002488:	4b4f      	ldr	r3, [pc, #316]	; (80025c8 <HAL_DMA_PollForTransfer+0x22c>)
 800248a:	681a      	ldr	r2, [r3, #0]
 800248c:	6823      	ldr	r3, [r4, #0]
 800248e:	494d      	ldr	r1, [pc, #308]	; (80025c4 <HAL_DMA_PollForTransfer+0x228>)
 8002490:	428b      	cmp	r3, r1
 8002492:	d0ef      	beq.n	8002474 <HAL_DMA_PollForTransfer+0xd8>
 8002494:	3114      	adds	r1, #20
 8002496:	428b      	cmp	r3, r1
 8002498:	d00e      	beq.n	80024b8 <HAL_DMA_PollForTransfer+0x11c>
 800249a:	3114      	adds	r1, #20
 800249c:	428b      	cmp	r3, r1
 800249e:	d00d      	beq.n	80024bc <HAL_DMA_PollForTransfer+0x120>
 80024a0:	3114      	adds	r1, #20
 80024a2:	428b      	cmp	r3, r1
 80024a4:	d00d      	beq.n	80024c2 <HAL_DMA_PollForTransfer+0x126>
 80024a6:	3114      	adds	r1, #20
 80024a8:	428b      	cmp	r3, r1
 80024aa:	d00d      	beq.n	80024c8 <HAL_DMA_PollForTransfer+0x12c>
 80024ac:	3114      	adds	r1, #20
 80024ae:	428b      	cmp	r3, r1
 80024b0:	d0dd      	beq.n	800246e <HAL_DMA_PollForTransfer+0xd2>
 80024b2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80024b6:	e7de      	b.n	8002476 <HAL_DMA_PollForTransfer+0xda>
 80024b8:	2380      	movs	r3, #128	; 0x80
 80024ba:	e7dc      	b.n	8002476 <HAL_DMA_PollForTransfer+0xda>
 80024bc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80024c0:	e7d9      	b.n	8002476 <HAL_DMA_PollForTransfer+0xda>
 80024c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80024c6:	e7d6      	b.n	8002476 <HAL_DMA_PollForTransfer+0xda>
 80024c8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80024cc:	e7d3      	b.n	8002476 <HAL_DMA_PollForTransfer+0xda>
      hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80024ce:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80024d0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80024d2:	2001      	movs	r0, #1
 80024d4:	fa00 f303 	lsl.w	r3, r0, r3
 80024d8:	6053      	str	r3, [r2, #4]
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TE);
 80024da:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80024dc:	4303      	orrs	r3, r0
 80024de:	63a3      	str	r3, [r4, #56]	; 0x38
      hdma->State= HAL_DMA_STATE_READY;
 80024e0:	f884 0021 	strb.w	r0, [r4, #33]	; 0x21
      __HAL_UNLOCK(hdma);
 80024e4:	2300      	movs	r3, #0
 80024e6:	f884 3020 	strb.w	r3, [r4, #32]
      return HAL_ERROR;
 80024ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80024ee:	b12d      	cbz	r5, 80024fc <HAL_DMA_PollForTransfer+0x160>
 80024f0:	f7ff fc6c 	bl	8001dcc <HAL_GetTick>
 80024f4:	eba0 0008 	sub.w	r0, r0, r8
 80024f8:	4285      	cmp	r5, r0
 80024fa:	d2c1      	bcs.n	8002480 <HAL_DMA_PollForTransfer+0xe4>
        SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TIMEOUT);
 80024fc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80024fe:	f043 0320 	orr.w	r3, r3, #32
 8002502:	63a3      	str	r3, [r4, #56]	; 0x38
        hdma->State = HAL_DMA_STATE_READY;
 8002504:	2001      	movs	r0, #1
 8002506:	f884 0021 	strb.w	r0, [r4, #33]	; 0x21
        __HAL_UNLOCK(hdma);
 800250a:	2300      	movs	r3, #0
 800250c:	f884 3020 	strb.w	r3, [r4, #32]
        return HAL_ERROR;
 8002510:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(CompleteLevel == HAL_DMA_FULL_TRANSFER)
 8002514:	bb77      	cbnz	r7, 8002574 <HAL_DMA_PollForTransfer+0x1d8>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002516:	6823      	ldr	r3, [r4, #0]
 8002518:	4a2a      	ldr	r2, [pc, #168]	; (80025c4 <HAL_DMA_PollForTransfer+0x228>)
 800251a:	4293      	cmp	r3, r2
 800251c:	d014      	beq.n	8002548 <HAL_DMA_PollForTransfer+0x1ac>
 800251e:	3214      	adds	r2, #20
 8002520:	4293      	cmp	r3, r2
 8002522:	d01c      	beq.n	800255e <HAL_DMA_PollForTransfer+0x1c2>
 8002524:	3214      	adds	r2, #20
 8002526:	4293      	cmp	r3, r2
 8002528:	d01b      	beq.n	8002562 <HAL_DMA_PollForTransfer+0x1c6>
 800252a:	3214      	adds	r2, #20
 800252c:	4293      	cmp	r3, r2
 800252e:	d01b      	beq.n	8002568 <HAL_DMA_PollForTransfer+0x1cc>
 8002530:	3214      	adds	r2, #20
 8002532:	4293      	cmp	r3, r2
 8002534:	d01b      	beq.n	800256e <HAL_DMA_PollForTransfer+0x1d2>
 8002536:	3214      	adds	r2, #20
 8002538:	4293      	cmp	r3, r2
 800253a:	d002      	beq.n	8002542 <HAL_DMA_PollForTransfer+0x1a6>
 800253c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002540:	e003      	b.n	800254a <HAL_DMA_PollForTransfer+0x1ae>
 8002542:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002546:	e000      	b.n	800254a <HAL_DMA_PollForTransfer+0x1ae>
 8002548:	2202      	movs	r2, #2
 800254a:	4b1f      	ldr	r3, [pc, #124]	; (80025c8 <HAL_DMA_PollForTransfer+0x22c>)
 800254c:	605a      	str	r2, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 800254e:	2301      	movs	r3, #1
 8002550:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
  __HAL_UNLOCK(hdma);
 8002554:	2000      	movs	r0, #0
 8002556:	f884 0020 	strb.w	r0, [r4, #32]
}
 800255a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800255e:	2220      	movs	r2, #32
 8002560:	e7f3      	b.n	800254a <HAL_DMA_PollForTransfer+0x1ae>
 8002562:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002566:	e7f0      	b.n	800254a <HAL_DMA_PollForTransfer+0x1ae>
 8002568:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800256c:	e7ed      	b.n	800254a <HAL_DMA_PollForTransfer+0x1ae>
 800256e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002572:	e7ea      	b.n	800254a <HAL_DMA_PollForTransfer+0x1ae>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002574:	6823      	ldr	r3, [r4, #0]
 8002576:	4a13      	ldr	r2, [pc, #76]	; (80025c4 <HAL_DMA_PollForTransfer+0x228>)
 8002578:	4293      	cmp	r3, r2
 800257a:	d014      	beq.n	80025a6 <HAL_DMA_PollForTransfer+0x20a>
 800257c:	3214      	adds	r2, #20
 800257e:	4293      	cmp	r3, r2
 8002580:	d015      	beq.n	80025ae <HAL_DMA_PollForTransfer+0x212>
 8002582:	3214      	adds	r2, #20
 8002584:	4293      	cmp	r3, r2
 8002586:	d014      	beq.n	80025b2 <HAL_DMA_PollForTransfer+0x216>
 8002588:	3214      	adds	r2, #20
 800258a:	4293      	cmp	r3, r2
 800258c:	d014      	beq.n	80025b8 <HAL_DMA_PollForTransfer+0x21c>
 800258e:	3214      	adds	r2, #20
 8002590:	4293      	cmp	r3, r2
 8002592:	d014      	beq.n	80025be <HAL_DMA_PollForTransfer+0x222>
 8002594:	3214      	adds	r2, #20
 8002596:	4293      	cmp	r3, r2
 8002598:	d002      	beq.n	80025a0 <HAL_DMA_PollForTransfer+0x204>
 800259a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800259e:	e003      	b.n	80025a8 <HAL_DMA_PollForTransfer+0x20c>
 80025a0:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80025a4:	e000      	b.n	80025a8 <HAL_DMA_PollForTransfer+0x20c>
 80025a6:	2204      	movs	r2, #4
 80025a8:	4b07      	ldr	r3, [pc, #28]	; (80025c8 <HAL_DMA_PollForTransfer+0x22c>)
 80025aa:	605a      	str	r2, [r3, #4]
 80025ac:	e7d2      	b.n	8002554 <HAL_DMA_PollForTransfer+0x1b8>
 80025ae:	2240      	movs	r2, #64	; 0x40
 80025b0:	e7fa      	b.n	80025a8 <HAL_DMA_PollForTransfer+0x20c>
 80025b2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80025b6:	e7f7      	b.n	80025a8 <HAL_DMA_PollForTransfer+0x20c>
 80025b8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80025bc:	e7f4      	b.n	80025a8 <HAL_DMA_PollForTransfer+0x20c>
 80025be:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80025c2:	e7f1      	b.n	80025a8 <HAL_DMA_PollForTransfer+0x20c>
 80025c4:	40020008 	.word	0x40020008
 80025c8:	40020000 	.word	0x40020000

080025cc <HAL_DMA_IRQHandler>:
{
 80025cc:	b538      	push	{r3, r4, r5, lr}
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80025ce:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 80025d0:	681a      	ldr	r2, [r3, #0]
  uint32_t source_it = hdma->Instance->CCR;
 80025d2:	6804      	ldr	r4, [r0, #0]
 80025d4:	6825      	ldr	r5, [r4, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80025d6:	6c01      	ldr	r1, [r0, #64]	; 0x40
 80025d8:	2304      	movs	r3, #4
 80025da:	408b      	lsls	r3, r1
 80025dc:	421a      	tst	r2, r3
 80025de:	d036      	beq.n	800264e <HAL_DMA_IRQHandler+0x82>
 80025e0:	f015 0f04 	tst.w	r5, #4
 80025e4:	d033      	beq.n	800264e <HAL_DMA_IRQHandler+0x82>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80025e6:	6823      	ldr	r3, [r4, #0]
 80025e8:	f013 0f20 	tst.w	r3, #32
 80025ec:	d103      	bne.n	80025f6 <HAL_DMA_IRQHandler+0x2a>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80025ee:	6823      	ldr	r3, [r4, #0]
 80025f0:	f023 0304 	bic.w	r3, r3, #4
 80025f4:	6023      	str	r3, [r4, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80025f6:	6803      	ldr	r3, [r0, #0]
 80025f8:	4a43      	ldr	r2, [pc, #268]	; (8002708 <HAL_DMA_IRQHandler+0x13c>)
 80025fa:	4293      	cmp	r3, r2
 80025fc:	d014      	beq.n	8002628 <HAL_DMA_IRQHandler+0x5c>
 80025fe:	3214      	adds	r2, #20
 8002600:	4293      	cmp	r3, r2
 8002602:	d019      	beq.n	8002638 <HAL_DMA_IRQHandler+0x6c>
 8002604:	3214      	adds	r2, #20
 8002606:	4293      	cmp	r3, r2
 8002608:	d018      	beq.n	800263c <HAL_DMA_IRQHandler+0x70>
 800260a:	3214      	adds	r2, #20
 800260c:	4293      	cmp	r3, r2
 800260e:	d018      	beq.n	8002642 <HAL_DMA_IRQHandler+0x76>
 8002610:	3214      	adds	r2, #20
 8002612:	4293      	cmp	r3, r2
 8002614:	d018      	beq.n	8002648 <HAL_DMA_IRQHandler+0x7c>
 8002616:	3214      	adds	r2, #20
 8002618:	4293      	cmp	r3, r2
 800261a:	d002      	beq.n	8002622 <HAL_DMA_IRQHandler+0x56>
 800261c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002620:	e003      	b.n	800262a <HAL_DMA_IRQHandler+0x5e>
 8002622:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8002626:	e000      	b.n	800262a <HAL_DMA_IRQHandler+0x5e>
 8002628:	2204      	movs	r2, #4
 800262a:	4b38      	ldr	r3, [pc, #224]	; (800270c <HAL_DMA_IRQHandler+0x140>)
 800262c:	605a      	str	r2, [r3, #4]
    if(hdma->XferHalfCpltCallback != NULL)
 800262e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8002630:	2b00      	cmp	r3, #0
 8002632:	d067      	beq.n	8002704 <HAL_DMA_IRQHandler+0x138>
      hdma->XferHalfCpltCallback(hdma);
 8002634:	4798      	blx	r3
 8002636:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002638:	2240      	movs	r2, #64	; 0x40
 800263a:	e7f6      	b.n	800262a <HAL_DMA_IRQHandler+0x5e>
 800263c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002640:	e7f3      	b.n	800262a <HAL_DMA_IRQHandler+0x5e>
 8002642:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002646:	e7f0      	b.n	800262a <HAL_DMA_IRQHandler+0x5e>
 8002648:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800264c:	e7ed      	b.n	800262a <HAL_DMA_IRQHandler+0x5e>
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 800264e:	2302      	movs	r3, #2
 8002650:	408b      	lsls	r3, r1
 8002652:	421a      	tst	r2, r3
 8002654:	d03b      	beq.n	80026ce <HAL_DMA_IRQHandler+0x102>
 8002656:	f015 0f02 	tst.w	r5, #2
 800265a:	d038      	beq.n	80026ce <HAL_DMA_IRQHandler+0x102>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800265c:	6823      	ldr	r3, [r4, #0]
 800265e:	f013 0f20 	tst.w	r3, #32
 8002662:	d106      	bne.n	8002672 <HAL_DMA_IRQHandler+0xa6>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002664:	6823      	ldr	r3, [r4, #0]
 8002666:	f023 030a 	bic.w	r3, r3, #10
 800266a:	6023      	str	r3, [r4, #0]
      hdma->State = HAL_DMA_STATE_READY;
 800266c:	2301      	movs	r3, #1
 800266e:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002672:	6803      	ldr	r3, [r0, #0]
 8002674:	4a24      	ldr	r2, [pc, #144]	; (8002708 <HAL_DMA_IRQHandler+0x13c>)
 8002676:	4293      	cmp	r3, r2
 8002678:	d014      	beq.n	80026a4 <HAL_DMA_IRQHandler+0xd8>
 800267a:	3214      	adds	r2, #20
 800267c:	4293      	cmp	r3, r2
 800267e:	d01b      	beq.n	80026b8 <HAL_DMA_IRQHandler+0xec>
 8002680:	3214      	adds	r2, #20
 8002682:	4293      	cmp	r3, r2
 8002684:	d01a      	beq.n	80026bc <HAL_DMA_IRQHandler+0xf0>
 8002686:	3214      	adds	r2, #20
 8002688:	4293      	cmp	r3, r2
 800268a:	d01a      	beq.n	80026c2 <HAL_DMA_IRQHandler+0xf6>
 800268c:	3214      	adds	r2, #20
 800268e:	4293      	cmp	r3, r2
 8002690:	d01a      	beq.n	80026c8 <HAL_DMA_IRQHandler+0xfc>
 8002692:	3214      	adds	r2, #20
 8002694:	4293      	cmp	r3, r2
 8002696:	d002      	beq.n	800269e <HAL_DMA_IRQHandler+0xd2>
 8002698:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800269c:	e003      	b.n	80026a6 <HAL_DMA_IRQHandler+0xda>
 800269e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80026a2:	e000      	b.n	80026a6 <HAL_DMA_IRQHandler+0xda>
 80026a4:	2202      	movs	r2, #2
 80026a6:	4b19      	ldr	r3, [pc, #100]	; (800270c <HAL_DMA_IRQHandler+0x140>)
 80026a8:	605a      	str	r2, [r3, #4]
    __HAL_UNLOCK(hdma);
 80026aa:	2300      	movs	r3, #0
 80026ac:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferCpltCallback != NULL)
 80026b0:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80026b2:	b33b      	cbz	r3, 8002704 <HAL_DMA_IRQHandler+0x138>
      hdma->XferCpltCallback(hdma);
 80026b4:	4798      	blx	r3
 80026b6:	bd38      	pop	{r3, r4, r5, pc}
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80026b8:	2220      	movs	r2, #32
 80026ba:	e7f4      	b.n	80026a6 <HAL_DMA_IRQHandler+0xda>
 80026bc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80026c0:	e7f1      	b.n	80026a6 <HAL_DMA_IRQHandler+0xda>
 80026c2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80026c6:	e7ee      	b.n	80026a6 <HAL_DMA_IRQHandler+0xda>
 80026c8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80026cc:	e7eb      	b.n	80026a6 <HAL_DMA_IRQHandler+0xda>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80026ce:	2308      	movs	r3, #8
 80026d0:	fa03 f101 	lsl.w	r1, r3, r1
 80026d4:	420a      	tst	r2, r1
 80026d6:	d015      	beq.n	8002704 <HAL_DMA_IRQHandler+0x138>
 80026d8:	f015 0f08 	tst.w	r5, #8
 80026dc:	d012      	beq.n	8002704 <HAL_DMA_IRQHandler+0x138>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80026de:	6823      	ldr	r3, [r4, #0]
 80026e0:	f023 030e 	bic.w	r3, r3, #14
 80026e4:	6023      	str	r3, [r4, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80026e6:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 80026e8:	6c02      	ldr	r2, [r0, #64]	; 0x40
 80026ea:	2301      	movs	r3, #1
 80026ec:	fa03 f202 	lsl.w	r2, r3, r2
 80026f0:	604a      	str	r2, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80026f2:	6383      	str	r3, [r0, #56]	; 0x38
    hdma->State = HAL_DMA_STATE_READY;
 80026f4:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 80026f8:	2300      	movs	r3, #0
 80026fa:	f880 3020 	strb.w	r3, [r0, #32]
    if (hdma->XferErrorCallback != NULL)
 80026fe:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8002700:	b103      	cbz	r3, 8002704 <HAL_DMA_IRQHandler+0x138>
      hdma->XferErrorCallback(hdma);
 8002702:	4798      	blx	r3
 8002704:	bd38      	pop	{r3, r4, r5, pc}
 8002706:	bf00      	nop
 8002708:	40020008 	.word	0x40020008
 800270c:	40020000 	.word	0x40020000

08002710 <HAL_DMA_RegisterCallback>:
{
 8002710:	4603      	mov	r3, r0
  __HAL_LOCK(hdma);
 8002712:	f890 0020 	ldrb.w	r0, [r0, #32]
 8002716:	2801      	cmp	r0, #1
 8002718:	d01f      	beq.n	800275a <HAL_DMA_RegisterCallback+0x4a>
 800271a:	2001      	movs	r0, #1
 800271c:	f883 0020 	strb.w	r0, [r3, #32]
  if(HAL_DMA_STATE_READY == hdma->State)
 8002720:	f893 0021 	ldrb.w	r0, [r3, #33]	; 0x21
 8002724:	2801      	cmp	r0, #1
 8002726:	d004      	beq.n	8002732 <HAL_DMA_RegisterCallback+0x22>
    status = HAL_ERROR;
 8002728:	2001      	movs	r0, #1
  __HAL_UNLOCK(hdma);
 800272a:	2200      	movs	r2, #0
 800272c:	f883 2020 	strb.w	r2, [r3, #32]
  return status;
 8002730:	4770      	bx	lr
    switch (CallbackID)
 8002732:	2903      	cmp	r1, #3
 8002734:	d80f      	bhi.n	8002756 <HAL_DMA_RegisterCallback+0x46>
 8002736:	e8df f001 	tbb	[pc, r1]
 800273a:	0502      	.short	0x0502
 800273c:	0b08      	.short	0x0b08
      hdma->XferCpltCallback = pCallback;
 800273e:	629a      	str	r2, [r3, #40]	; 0x28
  HAL_StatusTypeDef status = HAL_OK;
 8002740:	2000      	movs	r0, #0
      break;
 8002742:	e7f2      	b.n	800272a <HAL_DMA_RegisterCallback+0x1a>
      hdma->XferHalfCpltCallback = pCallback;
 8002744:	62da      	str	r2, [r3, #44]	; 0x2c
  HAL_StatusTypeDef status = HAL_OK;
 8002746:	2000      	movs	r0, #0
      break;         
 8002748:	e7ef      	b.n	800272a <HAL_DMA_RegisterCallback+0x1a>
      hdma->XferErrorCallback = pCallback;
 800274a:	631a      	str	r2, [r3, #48]	; 0x30
  HAL_StatusTypeDef status = HAL_OK;
 800274c:	2000      	movs	r0, #0
      break;         
 800274e:	e7ec      	b.n	800272a <HAL_DMA_RegisterCallback+0x1a>
      hdma->XferAbortCallback = pCallback;
 8002750:	635a      	str	r2, [r3, #52]	; 0x34
  HAL_StatusTypeDef status = HAL_OK;
 8002752:	2000      	movs	r0, #0
      break; 
 8002754:	e7e9      	b.n	800272a <HAL_DMA_RegisterCallback+0x1a>
      status = HAL_ERROR;
 8002756:	2001      	movs	r0, #1
 8002758:	e7e7      	b.n	800272a <HAL_DMA_RegisterCallback+0x1a>
  __HAL_LOCK(hdma);
 800275a:	2002      	movs	r0, #2
}
 800275c:	4770      	bx	lr

0800275e <HAL_DMA_UnRegisterCallback>:
{
 800275e:	4603      	mov	r3, r0
  __HAL_LOCK(hdma);
 8002760:	f890 2020 	ldrb.w	r2, [r0, #32]
 8002764:	2a01      	cmp	r2, #1
 8002766:	d026      	beq.n	80027b6 <HAL_DMA_UnRegisterCallback+0x58>
 8002768:	2201      	movs	r2, #1
 800276a:	f880 2020 	strb.w	r2, [r0, #32]
  if(HAL_DMA_STATE_READY == hdma->State)
 800276e:	f890 2021 	ldrb.w	r2, [r0, #33]	; 0x21
 8002772:	2a01      	cmp	r2, #1
 8002774:	d004      	beq.n	8002780 <HAL_DMA_UnRegisterCallback+0x22>
    status = HAL_ERROR;
 8002776:	2001      	movs	r0, #1
  __HAL_UNLOCK(hdma);
 8002778:	2200      	movs	r2, #0
 800277a:	f883 2020 	strb.w	r2, [r3, #32]
  return status;
 800277e:	4770      	bx	lr
    switch (CallbackID)
 8002780:	2904      	cmp	r1, #4
 8002782:	d816      	bhi.n	80027b2 <HAL_DMA_UnRegisterCallback+0x54>
 8002784:	e8df f001 	tbb	[pc, r1]
 8002788:	0c090603 	.word	0x0c090603
 800278c:	0f          	.byte	0x0f
 800278d:	00          	.byte	0x00
      hdma->XferCpltCallback = NULL;
 800278e:	2000      	movs	r0, #0
 8002790:	6298      	str	r0, [r3, #40]	; 0x28
      break;
 8002792:	e7f1      	b.n	8002778 <HAL_DMA_UnRegisterCallback+0x1a>
      hdma->XferHalfCpltCallback = NULL;
 8002794:	2000      	movs	r0, #0
 8002796:	62d8      	str	r0, [r3, #44]	; 0x2c
      break;         
 8002798:	e7ee      	b.n	8002778 <HAL_DMA_UnRegisterCallback+0x1a>
      hdma->XferErrorCallback = NULL;
 800279a:	2000      	movs	r0, #0
 800279c:	6318      	str	r0, [r3, #48]	; 0x30
      break;         
 800279e:	e7eb      	b.n	8002778 <HAL_DMA_UnRegisterCallback+0x1a>
      hdma->XferAbortCallback = NULL;
 80027a0:	2000      	movs	r0, #0
 80027a2:	6358      	str	r0, [r3, #52]	; 0x34
      break; 
 80027a4:	e7e8      	b.n	8002778 <HAL_DMA_UnRegisterCallback+0x1a>
      hdma->XferCpltCallback = NULL;
 80027a6:	2000      	movs	r0, #0
 80027a8:	6298      	str	r0, [r3, #40]	; 0x28
      hdma->XferHalfCpltCallback = NULL;
 80027aa:	62d8      	str	r0, [r3, #44]	; 0x2c
      hdma->XferErrorCallback = NULL;
 80027ac:	6318      	str	r0, [r3, #48]	; 0x30
      hdma->XferAbortCallback = NULL;
 80027ae:	6358      	str	r0, [r3, #52]	; 0x34
      break; 
 80027b0:	e7e2      	b.n	8002778 <HAL_DMA_UnRegisterCallback+0x1a>
      status = HAL_ERROR;
 80027b2:	2001      	movs	r0, #1
 80027b4:	e7e0      	b.n	8002778 <HAL_DMA_UnRegisterCallback+0x1a>
  __HAL_LOCK(hdma);
 80027b6:	2002      	movs	r0, #2
}
 80027b8:	4770      	bx	lr

080027ba <HAL_DMA_GetState>:
}
 80027ba:	f890 0021 	ldrb.w	r0, [r0, #33]	; 0x21
 80027be:	4770      	bx	lr

080027c0 <HAL_DMA_GetError>:
  return hdma->ErrorCode;
 80027c0:	6b80      	ldr	r0, [r0, #56]	; 0x38
}
 80027c2:	4770      	bx	lr

080027c4 <FLASH_Program_HalfWord>:
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80027c4:	2200      	movs	r2, #0
 80027c6:	4b04      	ldr	r3, [pc, #16]	; (80027d8 <FLASH_Program_HalfWord+0x14>)
 80027c8:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 80027ca:	4a04      	ldr	r2, [pc, #16]	; (80027dc <FLASH_Program_HalfWord+0x18>)
 80027cc:	6913      	ldr	r3, [r2, #16]
 80027ce:	f043 0301 	orr.w	r3, r3, #1
 80027d2:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 80027d4:	8001      	strh	r1, [r0, #0]
 80027d6:	4770      	bx	lr
 80027d8:	20001be8 	.word	0x20001be8
 80027dc:	40022000 	.word	0x40022000

080027e0 <FLASH_SetErrorCode>:
  uint32_t flags = 0U;
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 80027e0:	4b1a      	ldr	r3, [pc, #104]	; (800284c <FLASH_SetErrorCode+0x6c>)
 80027e2:	68db      	ldr	r3, [r3, #12]
 80027e4:	f013 0f10 	tst.w	r3, #16
 80027e8:	d027      	beq.n	800283a <FLASH_SetErrorCode+0x5a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80027ea:	4a19      	ldr	r2, [pc, #100]	; (8002850 <FLASH_SetErrorCode+0x70>)
 80027ec:	69d3      	ldr	r3, [r2, #28]
 80027ee:	f043 0302 	orr.w	r3, r3, #2
 80027f2:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 80027f4:	2310      	movs	r3, #16
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80027f6:	4a15      	ldr	r2, [pc, #84]	; (800284c <FLASH_SetErrorCode+0x6c>)
 80027f8:	68d2      	ldr	r2, [r2, #12]
 80027fa:	f012 0f04 	tst.w	r2, #4
 80027fe:	d006      	beq.n	800280e <FLASH_SetErrorCode+0x2e>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8002800:	4913      	ldr	r1, [pc, #76]	; (8002850 <FLASH_SetErrorCode+0x70>)
 8002802:	69ca      	ldr	r2, [r1, #28]
 8002804:	f042 0201 	orr.w	r2, r2, #1
 8002808:	61ca      	str	r2, [r1, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 800280a:	f043 0304 	orr.w	r3, r3, #4
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 800280e:	4a0f      	ldr	r2, [pc, #60]	; (800284c <FLASH_SetErrorCode+0x6c>)
 8002810:	69d2      	ldr	r2, [r2, #28]
 8002812:	f012 0f01 	tst.w	r2, #1
 8002816:	d009      	beq.n	800282c <FLASH_SetErrorCode+0x4c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8002818:	490d      	ldr	r1, [pc, #52]	; (8002850 <FLASH_SetErrorCode+0x70>)
 800281a:	69ca      	ldr	r2, [r1, #28]
 800281c:	f042 0204 	orr.w	r2, r2, #4
 8002820:	61ca      	str	r2, [r1, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8002822:	490a      	ldr	r1, [pc, #40]	; (800284c <FLASH_SetErrorCode+0x6c>)
 8002824:	69ca      	ldr	r2, [r1, #28]
 8002826:	f022 0201 	bic.w	r2, r2, #1
 800282a:	61ca      	str	r2, [r1, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 800282c:	f240 1201 	movw	r2, #257	; 0x101
 8002830:	4293      	cmp	r3, r2
 8002832:	d004      	beq.n	800283e <FLASH_SetErrorCode+0x5e>
 8002834:	4a05      	ldr	r2, [pc, #20]	; (800284c <FLASH_SetErrorCode+0x6c>)
 8002836:	60d3      	str	r3, [r2, #12]
 8002838:	4770      	bx	lr
  uint32_t flags = 0U;
 800283a:	2300      	movs	r3, #0
 800283c:	e7db      	b.n	80027f6 <FLASH_SetErrorCode+0x16>
  __HAL_FLASH_CLEAR_FLAG(flags);
 800283e:	4a03      	ldr	r2, [pc, #12]	; (800284c <FLASH_SetErrorCode+0x6c>)
 8002840:	69d3      	ldr	r3, [r2, #28]
 8002842:	f023 0301 	bic.w	r3, r3, #1
 8002846:	61d3      	str	r3, [r2, #28]
 8002848:	4770      	bx	lr
 800284a:	bf00      	nop
 800284c:	40022000 	.word	0x40022000
 8002850:	20001be8 	.word	0x20001be8

08002854 <HAL_FLASH_Program_IT>:
{
 8002854:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(&pFlash);
 8002856:	4c16      	ldr	r4, [pc, #88]	; (80028b0 <HAL_FLASH_Program_IT+0x5c>)
 8002858:	7e24      	ldrb	r4, [r4, #24]
 800285a:	2c01      	cmp	r4, #1
 800285c:	d025      	beq.n	80028aa <HAL_FLASH_Program_IT+0x56>
 800285e:	4c14      	ldr	r4, [pc, #80]	; (80028b0 <HAL_FLASH_Program_IT+0x5c>)
 8002860:	2501      	movs	r5, #1
 8002862:	7625      	strb	r5, [r4, #24]
  __HAL_FLASH_ENABLE_IT(FLASH_IT_EOP | FLASH_IT_ERR);
 8002864:	4e13      	ldr	r6, [pc, #76]	; (80028b4 <HAL_FLASH_Program_IT+0x60>)
 8002866:	6935      	ldr	r5, [r6, #16]
 8002868:	f445 55a0 	orr.w	r5, r5, #5120	; 0x1400
 800286c:	6135      	str	r5, [r6, #16]
  pFlash.Address = Address;
 800286e:	60a1      	str	r1, [r4, #8]
  pFlash.Data = Data;
 8002870:	e9c4 2304 	strd	r2, r3, [r4, #16]
  if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8002874:	2801      	cmp	r0, #1
 8002876:	d00c      	beq.n	8002892 <HAL_FLASH_Program_IT+0x3e>
  else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8002878:	2802      	cmp	r0, #2
 800287a:	d010      	beq.n	800289e <HAL_FLASH_Program_IT+0x4a>
    pFlash.ProcedureOnGoing = FLASH_PROC_PROGRAMDOUBLEWORD;
 800287c:	480c      	ldr	r0, [pc, #48]	; (80028b0 <HAL_FLASH_Program_IT+0x5c>)
 800287e:	2405      	movs	r4, #5
 8002880:	7004      	strb	r4, [r0, #0]
    pFlash.DataRemaining = 4U;
 8002882:	2404      	movs	r4, #4
 8002884:	6044      	str	r4, [r0, #4]
 8002886:	4608      	mov	r0, r1
  FLASH_Program_HalfWord(Address, (uint16_t)Data);
 8002888:	b291      	uxth	r1, r2
 800288a:	f7ff ff9b 	bl	80027c4 <FLASH_Program_HalfWord>
  return status;
 800288e:	2000      	movs	r0, #0
 8002890:	bd70      	pop	{r4, r5, r6, pc}
    pFlash.ProcedureOnGoing = FLASH_PROC_PROGRAMHALFWORD;
 8002892:	4620      	mov	r0, r4
 8002894:	2403      	movs	r4, #3
 8002896:	7004      	strb	r4, [r0, #0]
    pFlash.DataRemaining = 1U;
 8002898:	2401      	movs	r4, #1
 800289a:	6044      	str	r4, [r0, #4]
 800289c:	e7f3      	b.n	8002886 <HAL_FLASH_Program_IT+0x32>
    pFlash.ProcedureOnGoing = FLASH_PROC_PROGRAMWORD;
 800289e:	4804      	ldr	r0, [pc, #16]	; (80028b0 <HAL_FLASH_Program_IT+0x5c>)
 80028a0:	2404      	movs	r4, #4
 80028a2:	7004      	strb	r4, [r0, #0]
    pFlash.DataRemaining = 2U;
 80028a4:	2402      	movs	r4, #2
 80028a6:	6044      	str	r4, [r0, #4]
 80028a8:	e7ed      	b.n	8002886 <HAL_FLASH_Program_IT+0x32>
  __HAL_LOCK(&pFlash);
 80028aa:	2002      	movs	r0, #2
}
 80028ac:	bd70      	pop	{r4, r5, r6, pc}
 80028ae:	bf00      	nop
 80028b0:	20001be8 	.word	0x20001be8
 80028b4:	40022000 	.word	0x40022000

080028b8 <HAL_FLASH_EndOfOperationCallback>:
{
 80028b8:	4770      	bx	lr

080028ba <HAL_FLASH_OperationErrorCallback>:
{
 80028ba:	4770      	bx	lr

080028bc <HAL_FLASH_IRQHandler>:
{
 80028bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) ||__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80028be:	4b52      	ldr	r3, [pc, #328]	; (8002a08 <HAL_FLASH_IRQHandler+0x14c>)
 80028c0:	68db      	ldr	r3, [r3, #12]
 80028c2:	f013 0f10 	tst.w	r3, #16
 80028c6:	d104      	bne.n	80028d2 <HAL_FLASH_IRQHandler+0x16>
 80028c8:	4b4f      	ldr	r3, [pc, #316]	; (8002a08 <HAL_FLASH_IRQHandler+0x14c>)
 80028ca:	68db      	ldr	r3, [r3, #12]
 80028cc:	f013 0f04 	tst.w	r3, #4
 80028d0:	d00b      	beq.n	80028ea <HAL_FLASH_IRQHandler+0x2e>
    addresstmp = pFlash.Address;
 80028d2:	4c4e      	ldr	r4, [pc, #312]	; (8002a0c <HAL_FLASH_IRQHandler+0x150>)
 80028d4:	68a5      	ldr	r5, [r4, #8]
    pFlash.Address = 0xFFFFFFFFU;
 80028d6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80028da:	60a3      	str	r3, [r4, #8]
    FLASH_SetErrorCode();
 80028dc:	f7ff ff80 	bl	80027e0 <FLASH_SetErrorCode>
    HAL_FLASH_OperationErrorCallback(addresstmp);
 80028e0:	4628      	mov	r0, r5
 80028e2:	f7ff ffea 	bl	80028ba <HAL_FLASH_OperationErrorCallback>
    pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 80028e6:	2300      	movs	r3, #0
 80028e8:	7023      	strb	r3, [r4, #0]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 80028ea:	4b47      	ldr	r3, [pc, #284]	; (8002a08 <HAL_FLASH_IRQHandler+0x14c>)
 80028ec:	68db      	ldr	r3, [r3, #12]
 80028ee:	f013 0f20 	tst.w	r3, #32
 80028f2:	d02b      	beq.n	800294c <HAL_FLASH_IRQHandler+0x90>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80028f4:	2220      	movs	r2, #32
 80028f6:	4b44      	ldr	r3, [pc, #272]	; (8002a08 <HAL_FLASH_IRQHandler+0x14c>)
 80028f8:	60da      	str	r2, [r3, #12]
    if(pFlash.ProcedureOnGoing != FLASH_PROC_NONE)
 80028fa:	4b44      	ldr	r3, [pc, #272]	; (8002a0c <HAL_FLASH_IRQHandler+0x150>)
 80028fc:	781b      	ldrb	r3, [r3, #0]
 80028fe:	b32b      	cbz	r3, 800294c <HAL_FLASH_IRQHandler+0x90>
      if(pFlash.ProcedureOnGoing == FLASH_PROC_PAGEERASE)
 8002900:	4b42      	ldr	r3, [pc, #264]	; (8002a0c <HAL_FLASH_IRQHandler+0x150>)
 8002902:	781b      	ldrb	r3, [r3, #0]
 8002904:	b2db      	uxtb	r3, r3
 8002906:	2b01      	cmp	r3, #1
 8002908:	d030      	beq.n	800296c <HAL_FLASH_IRQHandler+0xb0>
      else if(pFlash.ProcedureOnGoing == FLASH_PROC_MASSERASE)
 800290a:	4b40      	ldr	r3, [pc, #256]	; (8002a0c <HAL_FLASH_IRQHandler+0x150>)
 800290c:	781b      	ldrb	r3, [r3, #0]
 800290e:	b2db      	uxtb	r3, r3
 8002910:	2b02      	cmp	r3, #2
 8002912:	d04a      	beq.n	80029aa <HAL_FLASH_IRQHandler+0xee>
        pFlash.DataRemaining--;
 8002914:	4b3d      	ldr	r3, [pc, #244]	; (8002a0c <HAL_FLASH_IRQHandler+0x150>)
 8002916:	685a      	ldr	r2, [r3, #4]
 8002918:	3a01      	subs	r2, #1
 800291a:	605a      	str	r2, [r3, #4]
        if(pFlash.DataRemaining != 0U)
 800291c:	685b      	ldr	r3, [r3, #4]
 800291e:	2b00      	cmp	r3, #0
 8002920:	d14f      	bne.n	80029c2 <HAL_FLASH_IRQHandler+0x106>
          if (pFlash.ProcedureOnGoing == FLASH_PROC_PROGRAMHALFWORD)
 8002922:	4b3a      	ldr	r3, [pc, #232]	; (8002a0c <HAL_FLASH_IRQHandler+0x150>)
 8002924:	781b      	ldrb	r3, [r3, #0]
 8002926:	b2db      	uxtb	r3, r3
 8002928:	2b03      	cmp	r3, #3
 800292a:	d062      	beq.n	80029f2 <HAL_FLASH_IRQHandler+0x136>
          else if (pFlash.ProcedureOnGoing == FLASH_PROC_PROGRAMWORD)
 800292c:	4b37      	ldr	r3, [pc, #220]	; (8002a0c <HAL_FLASH_IRQHandler+0x150>)
 800292e:	781b      	ldrb	r3, [r3, #0]
 8002930:	b2db      	uxtb	r3, r3
 8002932:	2b04      	cmp	r3, #4
 8002934:	d062      	beq.n	80029fc <HAL_FLASH_IRQHandler+0x140>
            HAL_FLASH_EndOfOperationCallback(pFlash.Address - 6U);
 8002936:	4b35      	ldr	r3, [pc, #212]	; (8002a0c <HAL_FLASH_IRQHandler+0x150>)
 8002938:	6898      	ldr	r0, [r3, #8]
 800293a:	3806      	subs	r0, #6
 800293c:	f7ff ffbc 	bl	80028b8 <HAL_FLASH_EndOfOperationCallback>
          pFlash.Address = 0xFFFFFFFFU;
 8002940:	4b32      	ldr	r3, [pc, #200]	; (8002a0c <HAL_FLASH_IRQHandler+0x150>)
 8002942:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002946:	609a      	str	r2, [r3, #8]
          pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8002948:	2200      	movs	r2, #0
 800294a:	701a      	strb	r2, [r3, #0]
  if(pFlash.ProcedureOnGoing == FLASH_PROC_NONE)
 800294c:	4b2f      	ldr	r3, [pc, #188]	; (8002a0c <HAL_FLASH_IRQHandler+0x150>)
 800294e:	781b      	ldrb	r3, [r3, #0]
 8002950:	b95b      	cbnz	r3, 800296a <HAL_FLASH_IRQHandler+0xae>
    CLEAR_BIT(FLASH->CR, (FLASH_CR_PG | FLASH_CR_PER | FLASH_CR_MER));
 8002952:	4b2d      	ldr	r3, [pc, #180]	; (8002a08 <HAL_FLASH_IRQHandler+0x14c>)
 8002954:	691a      	ldr	r2, [r3, #16]
 8002956:	f022 0207 	bic.w	r2, r2, #7
 800295a:	611a      	str	r2, [r3, #16]
    __HAL_FLASH_DISABLE_IT(FLASH_IT_EOP | FLASH_IT_ERR);
 800295c:	691a      	ldr	r2, [r3, #16]
 800295e:	f422 52a0 	bic.w	r2, r2, #5120	; 0x1400
 8002962:	611a      	str	r2, [r3, #16]
    __HAL_UNLOCK(&pFlash);
 8002964:	2200      	movs	r2, #0
 8002966:	4b29      	ldr	r3, [pc, #164]	; (8002a0c <HAL_FLASH_IRQHandler+0x150>)
 8002968:	761a      	strb	r2, [r3, #24]
 800296a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        pFlash.DataRemaining--;
 800296c:	4b27      	ldr	r3, [pc, #156]	; (8002a0c <HAL_FLASH_IRQHandler+0x150>)
 800296e:	685a      	ldr	r2, [r3, #4]
 8002970:	3a01      	subs	r2, #1
 8002972:	605a      	str	r2, [r3, #4]
        if(pFlash.DataRemaining != 0U)
 8002974:	685b      	ldr	r3, [r3, #4]
 8002976:	b17b      	cbz	r3, 8002998 <HAL_FLASH_IRQHandler+0xdc>
          addresstmp = pFlash.Address;
 8002978:	4c24      	ldr	r4, [pc, #144]	; (8002a0c <HAL_FLASH_IRQHandler+0x150>)
 800297a:	68a0      	ldr	r0, [r4, #8]
          HAL_FLASH_EndOfOperationCallback(addresstmp);
 800297c:	f7ff ff9c 	bl	80028b8 <HAL_FLASH_EndOfOperationCallback>
          addresstmp = pFlash.Address + FLASH_PAGE_SIZE;
 8002980:	68a0      	ldr	r0, [r4, #8]
 8002982:	f500 6080 	add.w	r0, r0, #1024	; 0x400
          pFlash.Address = addresstmp;
 8002986:	60a0      	str	r0, [r4, #8]
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8002988:	4a1f      	ldr	r2, [pc, #124]	; (8002a08 <HAL_FLASH_IRQHandler+0x14c>)
 800298a:	6913      	ldr	r3, [r2, #16]
 800298c:	f023 0302 	bic.w	r3, r3, #2
 8002990:	6113      	str	r3, [r2, #16]
          FLASH_PageErase(addresstmp);
 8002992:	f000 fb17 	bl	8002fc4 <FLASH_PageErase>
 8002996:	e7d9      	b.n	800294c <HAL_FLASH_IRQHandler+0x90>
          pFlash.Address = addresstmp = 0xFFFFFFFFU;
 8002998:	4b1c      	ldr	r3, [pc, #112]	; (8002a0c <HAL_FLASH_IRQHandler+0x150>)
 800299a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800299e:	6098      	str	r0, [r3, #8]
          pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 80029a0:	2200      	movs	r2, #0
 80029a2:	701a      	strb	r2, [r3, #0]
          HAL_FLASH_EndOfOperationCallback(addresstmp);
 80029a4:	f7ff ff88 	bl	80028b8 <HAL_FLASH_EndOfOperationCallback>
 80029a8:	e7d0      	b.n	800294c <HAL_FLASH_IRQHandler+0x90>
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 80029aa:	4a17      	ldr	r2, [pc, #92]	; (8002a08 <HAL_FLASH_IRQHandler+0x14c>)
 80029ac:	6913      	ldr	r3, [r2, #16]
 80029ae:	f023 0304 	bic.w	r3, r3, #4
 80029b2:	6113      	str	r3, [r2, #16]
          HAL_FLASH_EndOfOperationCallback(0U);
 80029b4:	2000      	movs	r0, #0
 80029b6:	f7ff ff7f 	bl	80028b8 <HAL_FLASH_EndOfOperationCallback>
          pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 80029ba:	2200      	movs	r2, #0
 80029bc:	4b13      	ldr	r3, [pc, #76]	; (8002a0c <HAL_FLASH_IRQHandler+0x150>)
 80029be:	701a      	strb	r2, [r3, #0]
 80029c0:	e7c4      	b.n	800294c <HAL_FLASH_IRQHandler+0x90>
          pFlash.Address += 2U;
 80029c2:	4b12      	ldr	r3, [pc, #72]	; (8002a0c <HAL_FLASH_IRQHandler+0x150>)
 80029c4:	689a      	ldr	r2, [r3, #8]
 80029c6:	3202      	adds	r2, #2
 80029c8:	609a      	str	r2, [r3, #8]
          addresstmp = pFlash.Address;
 80029ca:	6898      	ldr	r0, [r3, #8]
          pFlash.Data = (pFlash.Data >> 16U);
 80029cc:	e9d3 6704 	ldrd	r6, r7, [r3, #16]
 80029d0:	0c34      	lsrs	r4, r6, #16
 80029d2:	ea44 4407 	orr.w	r4, r4, r7, lsl #16
 80029d6:	0c3d      	lsrs	r5, r7, #16
 80029d8:	e9c3 4504 	strd	r4, r5, [r3, #16]
          CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 80029dc:	490a      	ldr	r1, [pc, #40]	; (8002a08 <HAL_FLASH_IRQHandler+0x14c>)
 80029de:	690a      	ldr	r2, [r1, #16]
 80029e0:	f022 0201 	bic.w	r2, r2, #1
 80029e4:	610a      	str	r2, [r1, #16]
          FLASH_Program_HalfWord(addresstmp, (uint16_t)pFlash.Data);
 80029e6:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80029ea:	b291      	uxth	r1, r2
 80029ec:	f7ff feea 	bl	80027c4 <FLASH_Program_HalfWord>
 80029f0:	e7ac      	b.n	800294c <HAL_FLASH_IRQHandler+0x90>
            HAL_FLASH_EndOfOperationCallback(pFlash.Address);
 80029f2:	4b06      	ldr	r3, [pc, #24]	; (8002a0c <HAL_FLASH_IRQHandler+0x150>)
 80029f4:	6898      	ldr	r0, [r3, #8]
 80029f6:	f7ff ff5f 	bl	80028b8 <HAL_FLASH_EndOfOperationCallback>
 80029fa:	e7a1      	b.n	8002940 <HAL_FLASH_IRQHandler+0x84>
            HAL_FLASH_EndOfOperationCallback(pFlash.Address - 2U);
 80029fc:	4b03      	ldr	r3, [pc, #12]	; (8002a0c <HAL_FLASH_IRQHandler+0x150>)
 80029fe:	6898      	ldr	r0, [r3, #8]
 8002a00:	3802      	subs	r0, #2
 8002a02:	f7ff ff59 	bl	80028b8 <HAL_FLASH_EndOfOperationCallback>
 8002a06:	e79b      	b.n	8002940 <HAL_FLASH_IRQHandler+0x84>
 8002a08:	40022000 	.word	0x40022000
 8002a0c:	20001be8 	.word	0x20001be8

08002a10 <HAL_FLASH_Unlock>:
  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8002a10:	4b0a      	ldr	r3, [pc, #40]	; (8002a3c <HAL_FLASH_Unlock+0x2c>)
 8002a12:	691b      	ldr	r3, [r3, #16]
 8002a14:	f013 0f80 	tst.w	r3, #128	; 0x80
 8002a18:	d00d      	beq.n	8002a36 <HAL_FLASH_Unlock+0x26>
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8002a1a:	4b08      	ldr	r3, [pc, #32]	; (8002a3c <HAL_FLASH_Unlock+0x2c>)
 8002a1c:	4a08      	ldr	r2, [pc, #32]	; (8002a40 <HAL_FLASH_Unlock+0x30>)
 8002a1e:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8002a20:	f102 3288 	add.w	r2, r2, #2290649224	; 0x88888888
 8002a24:	605a      	str	r2, [r3, #4]
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8002a26:	691b      	ldr	r3, [r3, #16]
 8002a28:	f013 0f80 	tst.w	r3, #128	; 0x80
 8002a2c:	d001      	beq.n	8002a32 <HAL_FLASH_Unlock+0x22>
      status = HAL_ERROR;
 8002a2e:	2001      	movs	r0, #1
}
 8002a30:	4770      	bx	lr
  HAL_StatusTypeDef status = HAL_OK;
 8002a32:	2000      	movs	r0, #0
 8002a34:	4770      	bx	lr
 8002a36:	2000      	movs	r0, #0
 8002a38:	4770      	bx	lr
 8002a3a:	bf00      	nop
 8002a3c:	40022000 	.word	0x40022000
 8002a40:	45670123 	.word	0x45670123

08002a44 <HAL_FLASH_Lock>:
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8002a44:	4a03      	ldr	r2, [pc, #12]	; (8002a54 <HAL_FLASH_Lock+0x10>)
 8002a46:	6913      	ldr	r3, [r2, #16]
 8002a48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a4c:	6113      	str	r3, [r2, #16]
}
 8002a4e:	2000      	movs	r0, #0
 8002a50:	4770      	bx	lr
 8002a52:	bf00      	nop
 8002a54:	40022000 	.word	0x40022000

08002a58 <HAL_FLASH_OB_Unlock>:
  if (HAL_IS_BIT_CLR(FLASH->CR, FLASH_CR_OPTWRE))
 8002a58:	4b07      	ldr	r3, [pc, #28]	; (8002a78 <HAL_FLASH_OB_Unlock+0x20>)
 8002a5a:	691b      	ldr	r3, [r3, #16]
 8002a5c:	f413 7f00 	tst.w	r3, #512	; 0x200
 8002a60:	d107      	bne.n	8002a72 <HAL_FLASH_OB_Unlock+0x1a>
    WRITE_REG(FLASH->OPTKEYR, FLASH_OPTKEY1);
 8002a62:	4b05      	ldr	r3, [pc, #20]	; (8002a78 <HAL_FLASH_OB_Unlock+0x20>)
 8002a64:	4a05      	ldr	r2, [pc, #20]	; (8002a7c <HAL_FLASH_OB_Unlock+0x24>)
 8002a66:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->OPTKEYR, FLASH_OPTKEY2);
 8002a68:	f102 3288 	add.w	r2, r2, #2290649224	; 0x88888888
 8002a6c:	609a      	str	r2, [r3, #8]
  return HAL_OK;  
 8002a6e:	2000      	movs	r0, #0
 8002a70:	4770      	bx	lr
    return HAL_ERROR;
 8002a72:	2001      	movs	r0, #1
}
 8002a74:	4770      	bx	lr
 8002a76:	bf00      	nop
 8002a78:	40022000 	.word	0x40022000
 8002a7c:	45670123 	.word	0x45670123

08002a80 <HAL_FLASH_OB_Lock>:
  CLEAR_BIT(FLASH->CR, FLASH_CR_OPTWRE);
 8002a80:	4a03      	ldr	r2, [pc, #12]	; (8002a90 <HAL_FLASH_OB_Lock+0x10>)
 8002a82:	6913      	ldr	r3, [r2, #16]
 8002a84:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002a88:	6113      	str	r3, [r2, #16]
}
 8002a8a:	2000      	movs	r0, #0
 8002a8c:	4770      	bx	lr
 8002a8e:	bf00      	nop
 8002a90:	40022000 	.word	0x40022000

08002a94 <HAL_FLASH_OB_Launch>:
{
 8002a94:	b508      	push	{r3, lr}
  HAL_NVIC_SystemReset();
 8002a96:	f7ff fa8f 	bl	8001fb8 <HAL_NVIC_SystemReset>
 8002a9a:	bd08      	pop	{r3, pc}

08002a9c <HAL_FLASH_GetError>:
   return pFlash.ErrorCode;
 8002a9c:	4b01      	ldr	r3, [pc, #4]	; (8002aa4 <HAL_FLASH_GetError+0x8>)
 8002a9e:	69d8      	ldr	r0, [r3, #28]
}
 8002aa0:	4770      	bx	lr
 8002aa2:	bf00      	nop
 8002aa4:	20001be8 	.word	0x20001be8

08002aa8 <FLASH_WaitForLastOperation>:
{
 8002aa8:	b538      	push	{r3, r4, r5, lr}
 8002aaa:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8002aac:	f7ff f98e 	bl	8001dcc <HAL_GetTick>
 8002ab0:	4605      	mov	r5, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8002ab2:	4b17      	ldr	r3, [pc, #92]	; (8002b10 <FLASH_WaitForLastOperation+0x68>)
 8002ab4:	68db      	ldr	r3, [r3, #12]
 8002ab6:	f013 0f01 	tst.w	r3, #1
 8002aba:	d00a      	beq.n	8002ad2 <FLASH_WaitForLastOperation+0x2a>
    if (Timeout != HAL_MAX_DELAY)
 8002abc:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 8002ac0:	d0f7      	beq.n	8002ab2 <FLASH_WaitForLastOperation+0xa>
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8002ac2:	b30c      	cbz	r4, 8002b08 <FLASH_WaitForLastOperation+0x60>
 8002ac4:	f7ff f982 	bl	8001dcc <HAL_GetTick>
 8002ac8:	1b40      	subs	r0, r0, r5
 8002aca:	4284      	cmp	r4, r0
 8002acc:	d2f1      	bcs.n	8002ab2 <FLASH_WaitForLastOperation+0xa>
        return HAL_TIMEOUT;
 8002ace:	2003      	movs	r0, #3
 8002ad0:	bd38      	pop	{r3, r4, r5, pc}
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8002ad2:	4b0f      	ldr	r3, [pc, #60]	; (8002b10 <FLASH_WaitForLastOperation+0x68>)
 8002ad4:	68db      	ldr	r3, [r3, #12]
 8002ad6:	f013 0f20 	tst.w	r3, #32
 8002ada:	d002      	beq.n	8002ae2 <FLASH_WaitForLastOperation+0x3a>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8002adc:	2220      	movs	r2, #32
 8002ade:	4b0c      	ldr	r3, [pc, #48]	; (8002b10 <FLASH_WaitForLastOperation+0x68>)
 8002ae0:	60da      	str	r2, [r3, #12]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8002ae2:	4b0b      	ldr	r3, [pc, #44]	; (8002b10 <FLASH_WaitForLastOperation+0x68>)
 8002ae4:	68db      	ldr	r3, [r3, #12]
 8002ae6:	f013 0f10 	tst.w	r3, #16
 8002aea:	d109      	bne.n	8002b00 <FLASH_WaitForLastOperation+0x58>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8002aec:	4b08      	ldr	r3, [pc, #32]	; (8002b10 <FLASH_WaitForLastOperation+0x68>)
 8002aee:	69db      	ldr	r3, [r3, #28]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8002af0:	f013 0f01 	tst.w	r3, #1
 8002af4:	d104      	bne.n	8002b00 <FLASH_WaitForLastOperation+0x58>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8002af6:	4b06      	ldr	r3, [pc, #24]	; (8002b10 <FLASH_WaitForLastOperation+0x68>)
 8002af8:	68db      	ldr	r3, [r3, #12]
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8002afa:	f013 0f04 	tst.w	r3, #4
 8002afe:	d005      	beq.n	8002b0c <FLASH_WaitForLastOperation+0x64>
    FLASH_SetErrorCode();
 8002b00:	f7ff fe6e 	bl	80027e0 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8002b04:	2001      	movs	r0, #1
 8002b06:	bd38      	pop	{r3, r4, r5, pc}
        return HAL_TIMEOUT;
 8002b08:	2003      	movs	r0, #3
 8002b0a:	bd38      	pop	{r3, r4, r5, pc}
  return HAL_OK;
 8002b0c:	2000      	movs	r0, #0
}
 8002b0e:	bd38      	pop	{r3, r4, r5, pc}
 8002b10:	40022000 	.word	0x40022000

08002b14 <HAL_FLASH_Program>:
{
 8002b14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  __HAL_LOCK(&pFlash);
 8002b18:	4c23      	ldr	r4, [pc, #140]	; (8002ba8 <HAL_FLASH_Program+0x94>)
 8002b1a:	7e24      	ldrb	r4, [r4, #24]
 8002b1c:	2c01      	cmp	r4, #1
 8002b1e:	d103      	bne.n	8002b28 <HAL_FLASH_Program+0x14>
 8002b20:	2302      	movs	r3, #2
}
 8002b22:	4618      	mov	r0, r3
 8002b24:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002b28:	461e      	mov	r6, r3
 8002b2a:	4690      	mov	r8, r2
 8002b2c:	460f      	mov	r7, r1
 8002b2e:	4604      	mov	r4, r0
  __HAL_LOCK(&pFlash);
 8002b30:	2201      	movs	r2, #1
 8002b32:	4b1d      	ldr	r3, [pc, #116]	; (8002ba8 <HAL_FLASH_Program+0x94>)
 8002b34:	761a      	strb	r2, [r3, #24]
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8002b36:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002b3a:	f7ff ffb5 	bl	8002aa8 <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 8002b3e:	4603      	mov	r3, r0
 8002b40:	bb70      	cbnz	r0, 8002ba0 <HAL_FLASH_Program+0x8c>
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8002b42:	2c01      	cmp	r4, #1
 8002b44:	d029      	beq.n	8002b9a <HAL_FLASH_Program+0x86>
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8002b46:	2c02      	cmp	r4, #2
 8002b48:	d024      	beq.n	8002b94 <HAL_FLASH_Program+0x80>
      nbiterations = 4U;
 8002b4a:	f04f 0904 	mov.w	r9, #4
    for (index = 0U; index < nbiterations; index++)
 8002b4e:	2400      	movs	r4, #0
 8002b50:	454c      	cmp	r4, r9
 8002b52:	d225      	bcs.n	8002ba0 <HAL_FLASH_Program+0x8c>
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8002b54:	0121      	lsls	r1, r4, #4
 8002b56:	f1c1 0220 	rsb	r2, r1, #32
 8002b5a:	f1a1 0320 	sub.w	r3, r1, #32
 8002b5e:	fa28 f101 	lsr.w	r1, r8, r1
 8002b62:	fa06 f202 	lsl.w	r2, r6, r2
 8002b66:	4311      	orrs	r1, r2
 8002b68:	fa26 f303 	lsr.w	r3, r6, r3
 8002b6c:	4319      	orrs	r1, r3
 8002b6e:	b289      	uxth	r1, r1
 8002b70:	eb07 0044 	add.w	r0, r7, r4, lsl #1
 8002b74:	f7ff fe26 	bl	80027c4 <FLASH_Program_HalfWord>
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8002b78:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002b7c:	f7ff ff94 	bl	8002aa8 <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8002b80:	4b0a      	ldr	r3, [pc, #40]	; (8002bac <HAL_FLASH_Program+0x98>)
 8002b82:	691d      	ldr	r5, [r3, #16]
 8002b84:	f025 0501 	bic.w	r5, r5, #1
 8002b88:	611d      	str	r5, [r3, #16]
      if (status != HAL_OK)
 8002b8a:	4603      	mov	r3, r0
 8002b8c:	b940      	cbnz	r0, 8002ba0 <HAL_FLASH_Program+0x8c>
    for (index = 0U; index < nbiterations; index++)
 8002b8e:	3401      	adds	r4, #1
 8002b90:	b2e4      	uxtb	r4, r4
 8002b92:	e7dd      	b.n	8002b50 <HAL_FLASH_Program+0x3c>
      nbiterations = 2U;
 8002b94:	f04f 0902 	mov.w	r9, #2
 8002b98:	e7d9      	b.n	8002b4e <HAL_FLASH_Program+0x3a>
      nbiterations = 1U;
 8002b9a:	f04f 0901 	mov.w	r9, #1
 8002b9e:	e7d6      	b.n	8002b4e <HAL_FLASH_Program+0x3a>
  __HAL_UNLOCK(&pFlash);
 8002ba0:	2100      	movs	r1, #0
 8002ba2:	4a01      	ldr	r2, [pc, #4]	; (8002ba8 <HAL_FLASH_Program+0x94>)
 8002ba4:	7611      	strb	r1, [r2, #24]
  return status;
 8002ba6:	e7bc      	b.n	8002b22 <HAL_FLASH_Program+0xe>
 8002ba8:	20001be8 	.word	0x20001be8
 8002bac:	40022000 	.word	0x40022000

08002bb0 <FLASH_MassErase>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	4b06      	ldr	r3, [pc, #24]	; (8002bcc <FLASH_MassErase+0x1c>)
 8002bb4:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8002bb6:	4b06      	ldr	r3, [pc, #24]	; (8002bd0 <FLASH_MassErase+0x20>)
 8002bb8:	691a      	ldr	r2, [r3, #16]
 8002bba:	f042 0204 	orr.w	r2, r2, #4
 8002bbe:	611a      	str	r2, [r3, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8002bc0:	691a      	ldr	r2, [r3, #16]
 8002bc2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002bc6:	611a      	str	r2, [r3, #16]
 8002bc8:	4770      	bx	lr
 8002bca:	bf00      	nop
 8002bcc:	20001be8 	.word	0x20001be8
 8002bd0:	40022000 	.word	0x40022000

08002bd4 <FLASH_OB_GetWRP>:
  * @retval The FLASH Write Protection Option Bytes value
  */
static uint32_t FLASH_OB_GetWRP(void)
{
  /* Return the FLASH write protection Register value */
  return (uint32_t)(READ_REG(FLASH->WRPR));
 8002bd4:	4b01      	ldr	r3, [pc, #4]	; (8002bdc <FLASH_OB_GetWRP+0x8>)
 8002bd6:	6a18      	ldr	r0, [r3, #32]
}
 8002bd8:	4770      	bx	lr
 8002bda:	bf00      	nop
 8002bdc:	40022000 	.word	0x40022000

08002be0 <FLASH_OB_GetRDP>:
{
  uint32_t readstatus = OB_RDP_LEVEL_0;
  uint32_t tmp_reg = 0U;
  
  /* Read RDP level bits */
  tmp_reg = READ_BIT(FLASH->OBR, FLASH_OBR_RDPRT);
 8002be0:	4b04      	ldr	r3, [pc, #16]	; (8002bf4 <FLASH_OB_GetRDP+0x14>)
 8002be2:	69db      	ldr	r3, [r3, #28]

  if (tmp_reg == FLASH_OBR_RDPRT)
 8002be4:	f013 0f02 	tst.w	r3, #2
 8002be8:	d101      	bne.n	8002bee <FLASH_OB_GetRDP+0xe>
  {
    readstatus = OB_RDP_LEVEL_1;
  }
  else 
  {
    readstatus = OB_RDP_LEVEL_0;
 8002bea:	20a5      	movs	r0, #165	; 0xa5
  }

  return readstatus;
}
 8002bec:	4770      	bx	lr
    readstatus = OB_RDP_LEVEL_1;
 8002bee:	2000      	movs	r0, #0
 8002bf0:	4770      	bx	lr
 8002bf2:	bf00      	nop
 8002bf4:	40022000 	.word	0x40022000

08002bf8 <FLASH_OB_GetUser>:
  *         And FLASH_OBR_BFB2(Bit5) for STM32F101xG and STM32F103xG . 
  */
static uint8_t FLASH_OB_GetUser(void)
{
  /* Return the User Option Byte */
  return (uint8_t)((READ_REG(FLASH->OBR) & FLASH_OBR_USER) >> FLASH_POSITION_IWDGSW_BIT);
 8002bf8:	4b02      	ldr	r3, [pc, #8]	; (8002c04 <FLASH_OB_GetUser+0xc>)
 8002bfa:	69d8      	ldr	r0, [r3, #28]
}
 8002bfc:	f3c0 0082 	ubfx	r0, r0, #2, #3
 8002c00:	4770      	bx	lr
 8002c02:	bf00      	nop
 8002c04:	40022000 	.word	0x40022000

08002c08 <FLASH_OB_RDP_LevelConfig>:
{
 8002c08:	b538      	push	{r3, r4, r5, lr}
 8002c0a:	4605      	mov	r5, r0
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002c0c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002c10:	f7ff ff4a 	bl	8002aa8 <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 8002c14:	4603      	mov	r3, r0
 8002c16:	b108      	cbz	r0, 8002c1c <FLASH_OB_RDP_LevelConfig+0x14>
}
 8002c18:	4618      	mov	r0, r3
 8002c1a:	bd38      	pop	{r3, r4, r5, pc}
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	4b13      	ldr	r3, [pc, #76]	; (8002c6c <FLASH_OB_RDP_LevelConfig+0x64>)
 8002c20:	61da      	str	r2, [r3, #28]
    SET_BIT(FLASH->CR, FLASH_CR_OPTER);
 8002c22:	4c13      	ldr	r4, [pc, #76]	; (8002c70 <FLASH_OB_RDP_LevelConfig+0x68>)
 8002c24:	6923      	ldr	r3, [r4, #16]
 8002c26:	f043 0320 	orr.w	r3, r3, #32
 8002c2a:	6123      	str	r3, [r4, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8002c2c:	6923      	ldr	r3, [r4, #16]
 8002c2e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002c32:	6123      	str	r3, [r4, #16]
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002c34:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002c38:	f7ff ff36 	bl	8002aa8 <FLASH_WaitForLastOperation>
    CLEAR_BIT(FLASH->CR, FLASH_CR_OPTER);
 8002c3c:	6923      	ldr	r3, [r4, #16]
 8002c3e:	f023 0320 	bic.w	r3, r3, #32
 8002c42:	6123      	str	r3, [r4, #16]
    if(status == HAL_OK)
 8002c44:	4603      	mov	r3, r0
 8002c46:	2800      	cmp	r0, #0
 8002c48:	d1e6      	bne.n	8002c18 <FLASH_OB_RDP_LevelConfig+0x10>
      SET_BIT(FLASH->CR, FLASH_CR_OPTPG);
 8002c4a:	6923      	ldr	r3, [r4, #16]
 8002c4c:	f043 0310 	orr.w	r3, r3, #16
 8002c50:	6123      	str	r3, [r4, #16]
      WRITE_REG(OB->RDP, ReadProtectLevel);
 8002c52:	b2ad      	uxth	r5, r5
 8002c54:	4b07      	ldr	r3, [pc, #28]	; (8002c74 <FLASH_OB_RDP_LevelConfig+0x6c>)
 8002c56:	801d      	strh	r5, [r3, #0]
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE); 
 8002c58:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002c5c:	f7ff ff24 	bl	8002aa8 <FLASH_WaitForLastOperation>
 8002c60:	4603      	mov	r3, r0
      CLEAR_BIT(FLASH->CR, FLASH_CR_OPTPG);
 8002c62:	6922      	ldr	r2, [r4, #16]
 8002c64:	f022 0210 	bic.w	r2, r2, #16
 8002c68:	6122      	str	r2, [r4, #16]
 8002c6a:	e7d5      	b.n	8002c18 <FLASH_OB_RDP_LevelConfig+0x10>
 8002c6c:	20001be8 	.word	0x20001be8
 8002c70:	40022000 	.word	0x40022000
 8002c74:	1ffff800 	.word	0x1ffff800

08002c78 <FLASH_OB_UserConfig>:
{
 8002c78:	b538      	push	{r3, r4, r5, lr}
 8002c7a:	4604      	mov	r4, r0
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002c7c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002c80:	f7ff ff12 	bl	8002aa8 <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 8002c84:	4603      	mov	r3, r0
 8002c86:	b108      	cbz	r0, 8002c8c <FLASH_OB_UserConfig+0x14>
}
 8002c88:	4618      	mov	r0, r3
 8002c8a:	bd38      	pop	{r3, r4, r5, pc}
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	4b0a      	ldr	r3, [pc, #40]	; (8002cb8 <FLASH_OB_UserConfig+0x40>)
 8002c90:	61da      	str	r2, [r3, #28]
    SET_BIT(FLASH->CR, FLASH_CR_OPTPG); 
 8002c92:	4d0a      	ldr	r5, [pc, #40]	; (8002cbc <FLASH_OB_UserConfig+0x44>)
 8002c94:	692b      	ldr	r3, [r5, #16]
 8002c96:	f043 0310 	orr.w	r3, r3, #16
 8002c9a:	612b      	str	r3, [r5, #16]
    OB->USER = (UserConfig | 0x88U);
 8002c9c:	f044 0488 	orr.w	r4, r4, #136	; 0x88
 8002ca0:	4b07      	ldr	r3, [pc, #28]	; (8002cc0 <FLASH_OB_UserConfig+0x48>)
 8002ca2:	805c      	strh	r4, [r3, #2]
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002ca4:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002ca8:	f7ff fefe 	bl	8002aa8 <FLASH_WaitForLastOperation>
 8002cac:	4603      	mov	r3, r0
    CLEAR_BIT(FLASH->CR, FLASH_CR_OPTPG);
 8002cae:	692a      	ldr	r2, [r5, #16]
 8002cb0:	f022 0210 	bic.w	r2, r2, #16
 8002cb4:	612a      	str	r2, [r5, #16]
 8002cb6:	e7e7      	b.n	8002c88 <FLASH_OB_UserConfig+0x10>
 8002cb8:	20001be8 	.word	0x20001be8
 8002cbc:	40022000 	.word	0x40022000
 8002cc0:	1ffff800 	.word	0x1ffff800

08002cc4 <FLASH_OB_ProgramData>:
{
 8002cc4:	b570      	push	{r4, r5, r6, lr}
 8002cc6:	4606      	mov	r6, r0
 8002cc8:	460c      	mov	r4, r1
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002cca:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002cce:	f7ff feeb 	bl	8002aa8 <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 8002cd2:	4603      	mov	r3, r0
 8002cd4:	b108      	cbz	r0, 8002cda <FLASH_OB_ProgramData+0x16>
}
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	bd70      	pop	{r4, r5, r6, pc}
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002cda:	2200      	movs	r2, #0
 8002cdc:	4b09      	ldr	r3, [pc, #36]	; (8002d04 <FLASH_OB_ProgramData+0x40>)
 8002cde:	61da      	str	r2, [r3, #28]
    SET_BIT(FLASH->CR, FLASH_CR_OPTPG); 
 8002ce0:	4d09      	ldr	r5, [pc, #36]	; (8002d08 <FLASH_OB_ProgramData+0x44>)
 8002ce2:	692b      	ldr	r3, [r5, #16]
 8002ce4:	f043 0310 	orr.w	r3, r3, #16
 8002ce8:	612b      	str	r3, [r5, #16]
    *(__IO uint16_t*)Address = Data;
 8002cea:	b2a4      	uxth	r4, r4
 8002cec:	8034      	strh	r4, [r6, #0]
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002cee:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002cf2:	f7ff fed9 	bl	8002aa8 <FLASH_WaitForLastOperation>
 8002cf6:	4603      	mov	r3, r0
    CLEAR_BIT(FLASH->CR, FLASH_CR_OPTPG);
 8002cf8:	692a      	ldr	r2, [r5, #16]
 8002cfa:	f022 0210 	bic.w	r2, r2, #16
 8002cfe:	612a      	str	r2, [r5, #16]
 8002d00:	e7e9      	b.n	8002cd6 <FLASH_OB_ProgramData+0x12>
 8002d02:	bf00      	nop
 8002d04:	20001be8 	.word	0x20001be8
 8002d08:	40022000 	.word	0x40022000

08002d0c <HAL_FLASHEx_OBErase>:
{
 8002d0c:	b538      	push	{r3, r4, r5, lr}
  rdptmp = FLASH_OB_GetRDP();
 8002d0e:	f7ff ff67 	bl	8002be0 <FLASH_OB_GetRDP>
 8002d12:	b2c5      	uxtb	r5, r0
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002d14:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002d18:	f7ff fec6 	bl	8002aa8 <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 8002d1c:	4603      	mov	r3, r0
 8002d1e:	b108      	cbz	r0, 8002d24 <HAL_FLASHEx_OBErase+0x18>
}
 8002d20:	4618      	mov	r0, r3
 8002d22:	bd38      	pop	{r3, r4, r5, pc}
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002d24:	2200      	movs	r2, #0
 8002d26:	4b0d      	ldr	r3, [pc, #52]	; (8002d5c <HAL_FLASHEx_OBErase+0x50>)
 8002d28:	61da      	str	r2, [r3, #28]
    SET_BIT(FLASH->CR, FLASH_CR_OPTER);
 8002d2a:	4c0d      	ldr	r4, [pc, #52]	; (8002d60 <HAL_FLASHEx_OBErase+0x54>)
 8002d2c:	6923      	ldr	r3, [r4, #16]
 8002d2e:	f043 0320 	orr.w	r3, r3, #32
 8002d32:	6123      	str	r3, [r4, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8002d34:	6923      	ldr	r3, [r4, #16]
 8002d36:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002d3a:	6123      	str	r3, [r4, #16]
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002d3c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002d40:	f7ff feb2 	bl	8002aa8 <FLASH_WaitForLastOperation>
    CLEAR_BIT(FLASH->CR, FLASH_CR_OPTER);
 8002d44:	6923      	ldr	r3, [r4, #16]
 8002d46:	f023 0320 	bic.w	r3, r3, #32
 8002d4a:	6123      	str	r3, [r4, #16]
    if(status == HAL_OK)
 8002d4c:	4603      	mov	r3, r0
 8002d4e:	2800      	cmp	r0, #0
 8002d50:	d1e6      	bne.n	8002d20 <HAL_FLASHEx_OBErase+0x14>
      status = FLASH_OB_RDP_LevelConfig(rdptmp);
 8002d52:	4628      	mov	r0, r5
 8002d54:	f7ff ff58 	bl	8002c08 <FLASH_OB_RDP_LevelConfig>
 8002d58:	4603      	mov	r3, r0
 8002d5a:	e7e1      	b.n	8002d20 <HAL_FLASHEx_OBErase+0x14>
 8002d5c:	20001be8 	.word	0x20001be8
 8002d60:	40022000 	.word	0x40022000

08002d64 <FLASH_OB_EnableWRP>:
{
 8002d64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d66:	4604      	mov	r4, r0
  WriteProtectPage = (uint32_t)(~((~FLASH_OB_GetWRP()) | WriteProtectPage));
 8002d68:	f7ff ff34 	bl	8002bd4 <FLASH_OB_GetWRP>
 8002d6c:	ea20 0404 	bic.w	r4, r0, r4
  WRP1_Data = (uint16_t)((WriteProtectPage & OB_WRP_PAGES32TO63MASK) >> 8U);
 8002d70:	f3c4 2707 	ubfx	r7, r4, #8, #8
  WRP2_Data = (uint16_t)((WriteProtectPage & OB_WRP_PAGES64TO95MASK) >> 16U);
 8002d74:	f3c4 4607 	ubfx	r6, r4, #16, #8
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002d78:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002d7c:	f7ff fe94 	bl	8002aa8 <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 8002d80:	4603      	mov	r3, r0
 8002d82:	b108      	cbz	r0, 8002d88 <FLASH_OB_EnableWRP+0x24>
}
 8002d84:	4618      	mov	r0, r3
 8002d86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002d88:	b2e5      	uxtb	r5, r4
 8002d8a:	0e24      	lsrs	r4, r4, #24
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	4b20      	ldr	r3, [pc, #128]	; (8002e10 <FLASH_OB_EnableWRP+0xac>)
 8002d90:	61da      	str	r2, [r3, #28]
    status = HAL_FLASHEx_OBErase();
 8002d92:	f7ff ffbb 	bl	8002d0c <HAL_FLASHEx_OBErase>
    if (status == HAL_OK)  
 8002d96:	4603      	mov	r3, r0
 8002d98:	2800      	cmp	r0, #0
 8002d9a:	d1f3      	bne.n	8002d84 <FLASH_OB_EnableWRP+0x20>
      SET_BIT(FLASH->CR, FLASH_CR_OPTPG);
 8002d9c:	491d      	ldr	r1, [pc, #116]	; (8002e14 <FLASH_OB_EnableWRP+0xb0>)
 8002d9e:	690a      	ldr	r2, [r1, #16]
 8002da0:	f042 0210 	orr.w	r2, r2, #16
 8002da4:	610a      	str	r2, [r1, #16]
      if(WRP0_Data != 0xFFU)
 8002da6:	2dff      	cmp	r5, #255	; 0xff
 8002da8:	d008      	beq.n	8002dbc <FLASH_OB_EnableWRP+0x58>
        OB->WRP0 &= WRP0_Data;
 8002daa:	4b1b      	ldr	r3, [pc, #108]	; (8002e18 <FLASH_OB_EnableWRP+0xb4>)
 8002dac:	891a      	ldrh	r2, [r3, #8]
 8002dae:	4015      	ands	r5, r2
 8002db0:	811d      	strh	r5, [r3, #8]
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002db2:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002db6:	f7ff fe77 	bl	8002aa8 <FLASH_WaitForLastOperation>
 8002dba:	4603      	mov	r3, r0
      if((status == HAL_OK) && (WRP1_Data != 0xFFU))
 8002dbc:	b953      	cbnz	r3, 8002dd4 <FLASH_OB_EnableWRP+0x70>
 8002dbe:	2fff      	cmp	r7, #255	; 0xff
 8002dc0:	d008      	beq.n	8002dd4 <FLASH_OB_EnableWRP+0x70>
        OB->WRP1 &= WRP1_Data;
 8002dc2:	4b15      	ldr	r3, [pc, #84]	; (8002e18 <FLASH_OB_EnableWRP+0xb4>)
 8002dc4:	895a      	ldrh	r2, [r3, #10]
 8002dc6:	4017      	ands	r7, r2
 8002dc8:	815f      	strh	r7, [r3, #10]
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002dca:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002dce:	f7ff fe6b 	bl	8002aa8 <FLASH_WaitForLastOperation>
 8002dd2:	4603      	mov	r3, r0
      if((status == HAL_OK) && (WRP2_Data != 0xFFU))
 8002dd4:	b953      	cbnz	r3, 8002dec <FLASH_OB_EnableWRP+0x88>
 8002dd6:	2eff      	cmp	r6, #255	; 0xff
 8002dd8:	d008      	beq.n	8002dec <FLASH_OB_EnableWRP+0x88>
        OB->WRP2 &= WRP2_Data;
 8002dda:	4b0f      	ldr	r3, [pc, #60]	; (8002e18 <FLASH_OB_EnableWRP+0xb4>)
 8002ddc:	899a      	ldrh	r2, [r3, #12]
 8002dde:	4016      	ands	r6, r2
 8002de0:	819e      	strh	r6, [r3, #12]
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002de2:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002de6:	f7ff fe5f 	bl	8002aa8 <FLASH_WaitForLastOperation>
 8002dea:	4603      	mov	r3, r0
      if((status == HAL_OK) && (WRP3_Data != 0xFFU))
 8002dec:	b953      	cbnz	r3, 8002e04 <FLASH_OB_EnableWRP+0xa0>
 8002dee:	2cff      	cmp	r4, #255	; 0xff
 8002df0:	d008      	beq.n	8002e04 <FLASH_OB_EnableWRP+0xa0>
        OB->WRP3 &= WRP3_Data;
 8002df2:	4b09      	ldr	r3, [pc, #36]	; (8002e18 <FLASH_OB_EnableWRP+0xb4>)
 8002df4:	89d8      	ldrh	r0, [r3, #14]
 8002df6:	4020      	ands	r0, r4
 8002df8:	81d8      	strh	r0, [r3, #14]
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002dfa:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002dfe:	f7ff fe53 	bl	8002aa8 <FLASH_WaitForLastOperation>
 8002e02:	4603      	mov	r3, r0
      CLEAR_BIT(FLASH->CR, FLASH_CR_OPTPG);
 8002e04:	4903      	ldr	r1, [pc, #12]	; (8002e14 <FLASH_OB_EnableWRP+0xb0>)
 8002e06:	690a      	ldr	r2, [r1, #16]
 8002e08:	f022 0210 	bic.w	r2, r2, #16
 8002e0c:	610a      	str	r2, [r1, #16]
 8002e0e:	e7b9      	b.n	8002d84 <FLASH_OB_EnableWRP+0x20>
 8002e10:	20001be8 	.word	0x20001be8
 8002e14:	40022000 	.word	0x40022000
 8002e18:	1ffff800 	.word	0x1ffff800

08002e1c <FLASH_OB_DisableWRP>:
{
 8002e1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e1e:	4604      	mov	r4, r0
  WriteProtectPage = (FLASH_OB_GetWRP() | WriteProtectPage);
 8002e20:	f7ff fed8 	bl	8002bd4 <FLASH_OB_GetWRP>
 8002e24:	4304      	orrs	r4, r0
  WRP1_Data = (uint16_t)((WriteProtectPage & OB_WRP_PAGES32TO63MASK) >> 8U);
 8002e26:	f3c4 2707 	ubfx	r7, r4, #8, #8
  WRP2_Data = (uint16_t)((WriteProtectPage & OB_WRP_PAGES64TO95MASK) >> 16U);
 8002e2a:	f3c4 4607 	ubfx	r6, r4, #16, #8
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002e2e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002e32:	f7ff fe39 	bl	8002aa8 <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 8002e36:	4603      	mov	r3, r0
 8002e38:	b108      	cbz	r0, 8002e3e <FLASH_OB_DisableWRP+0x22>
}
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002e3e:	b2e5      	uxtb	r5, r4
 8002e40:	0e24      	lsrs	r4, r4, #24
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002e42:	2200      	movs	r2, #0
 8002e44:	4b22      	ldr	r3, [pc, #136]	; (8002ed0 <FLASH_OB_DisableWRP+0xb4>)
 8002e46:	61da      	str	r2, [r3, #28]
    status = HAL_FLASHEx_OBErase();
 8002e48:	f7ff ff60 	bl	8002d0c <HAL_FLASHEx_OBErase>
    if (status == HAL_OK)  
 8002e4c:	4603      	mov	r3, r0
 8002e4e:	2800      	cmp	r0, #0
 8002e50:	d1f3      	bne.n	8002e3a <FLASH_OB_DisableWRP+0x1e>
      SET_BIT(FLASH->CR, FLASH_CR_OPTPG);
 8002e52:	4920      	ldr	r1, [pc, #128]	; (8002ed4 <FLASH_OB_DisableWRP+0xb8>)
 8002e54:	690a      	ldr	r2, [r1, #16]
 8002e56:	f042 0210 	orr.w	r2, r2, #16
 8002e5a:	610a      	str	r2, [r1, #16]
      if(WRP0_Data != 0xFFU)
 8002e5c:	2dff      	cmp	r5, #255	; 0xff
 8002e5e:	d009      	beq.n	8002e74 <FLASH_OB_DisableWRP+0x58>
        OB->WRP0 |= WRP0_Data;
 8002e60:	4a1d      	ldr	r2, [pc, #116]	; (8002ed8 <FLASH_OB_DisableWRP+0xbc>)
 8002e62:	8913      	ldrh	r3, [r2, #8]
 8002e64:	b29b      	uxth	r3, r3
 8002e66:	431d      	orrs	r5, r3
 8002e68:	8115      	strh	r5, [r2, #8]
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002e6a:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002e6e:	f7ff fe1b 	bl	8002aa8 <FLASH_WaitForLastOperation>
 8002e72:	4603      	mov	r3, r0
      if((status == HAL_OK) && (WRP1_Data != 0xFFU))
 8002e74:	b95b      	cbnz	r3, 8002e8e <FLASH_OB_DisableWRP+0x72>
 8002e76:	2fff      	cmp	r7, #255	; 0xff
 8002e78:	d009      	beq.n	8002e8e <FLASH_OB_DisableWRP+0x72>
        OB->WRP1 |= WRP1_Data;
 8002e7a:	4a17      	ldr	r2, [pc, #92]	; (8002ed8 <FLASH_OB_DisableWRP+0xbc>)
 8002e7c:	8953      	ldrh	r3, [r2, #10]
 8002e7e:	b29b      	uxth	r3, r3
 8002e80:	431f      	orrs	r7, r3
 8002e82:	8157      	strh	r7, [r2, #10]
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002e84:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002e88:	f7ff fe0e 	bl	8002aa8 <FLASH_WaitForLastOperation>
 8002e8c:	4603      	mov	r3, r0
      if((status == HAL_OK) && (WRP2_Data != 0xFFU))
 8002e8e:	b95b      	cbnz	r3, 8002ea8 <FLASH_OB_DisableWRP+0x8c>
 8002e90:	2eff      	cmp	r6, #255	; 0xff
 8002e92:	d009      	beq.n	8002ea8 <FLASH_OB_DisableWRP+0x8c>
        OB->WRP2 |= WRP2_Data;
 8002e94:	4a10      	ldr	r2, [pc, #64]	; (8002ed8 <FLASH_OB_DisableWRP+0xbc>)
 8002e96:	8993      	ldrh	r3, [r2, #12]
 8002e98:	b29b      	uxth	r3, r3
 8002e9a:	431e      	orrs	r6, r3
 8002e9c:	8196      	strh	r6, [r2, #12]
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002e9e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002ea2:	f7ff fe01 	bl	8002aa8 <FLASH_WaitForLastOperation>
 8002ea6:	4603      	mov	r3, r0
      if((status == HAL_OK) && (WRP3_Data != 0xFFU))
 8002ea8:	b95b      	cbnz	r3, 8002ec2 <FLASH_OB_DisableWRP+0xa6>
 8002eaa:	2cff      	cmp	r4, #255	; 0xff
 8002eac:	d009      	beq.n	8002ec2 <FLASH_OB_DisableWRP+0xa6>
        OB->WRP3 |= WRP3_Data;
 8002eae:	4b0a      	ldr	r3, [pc, #40]	; (8002ed8 <FLASH_OB_DisableWRP+0xbc>)
 8002eb0:	89d8      	ldrh	r0, [r3, #14]
 8002eb2:	b280      	uxth	r0, r0
 8002eb4:	4320      	orrs	r0, r4
 8002eb6:	81d8      	strh	r0, [r3, #14]
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002eb8:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002ebc:	f7ff fdf4 	bl	8002aa8 <FLASH_WaitForLastOperation>
 8002ec0:	4603      	mov	r3, r0
      CLEAR_BIT(FLASH->CR, FLASH_CR_OPTPG);
 8002ec2:	4904      	ldr	r1, [pc, #16]	; (8002ed4 <FLASH_OB_DisableWRP+0xb8>)
 8002ec4:	690a      	ldr	r2, [r1, #16]
 8002ec6:	f022 0210 	bic.w	r2, r2, #16
 8002eca:	610a      	str	r2, [r1, #16]
 8002ecc:	e7b5      	b.n	8002e3a <FLASH_OB_DisableWRP+0x1e>
 8002ece:	bf00      	nop
 8002ed0:	20001be8 	.word	0x20001be8
 8002ed4:	40022000 	.word	0x40022000
 8002ed8:	1ffff800 	.word	0x1ffff800

08002edc <HAL_FLASHEx_OBProgram>:
  __HAL_LOCK(&pFlash);
 8002edc:	4b28      	ldr	r3, [pc, #160]	; (8002f80 <HAL_FLASHEx_OBProgram+0xa4>)
 8002ede:	7e1b      	ldrb	r3, [r3, #24]
 8002ee0:	2b01      	cmp	r3, #1
 8002ee2:	d04a      	beq.n	8002f7a <HAL_FLASHEx_OBProgram+0x9e>
{
 8002ee4:	b510      	push	{r4, lr}
 8002ee6:	4604      	mov	r4, r0
  __HAL_LOCK(&pFlash);
 8002ee8:	2201      	movs	r2, #1
 8002eea:	4b25      	ldr	r3, [pc, #148]	; (8002f80 <HAL_FLASHEx_OBProgram+0xa4>)
 8002eec:	761a      	strb	r2, [r3, #24]
  if((pOBInit->OptionType & OPTIONBYTE_WRP) == OPTIONBYTE_WRP)
 8002eee:	6803      	ldr	r3, [r0, #0]
 8002ef0:	f013 0f01 	tst.w	r3, #1
 8002ef4:	d010      	beq.n	8002f18 <HAL_FLASHEx_OBProgram+0x3c>
    if (pOBInit->WRPState == OB_WRPSTATE_ENABLE)
 8002ef6:	6843      	ldr	r3, [r0, #4]
 8002ef8:	4293      	cmp	r3, r2
 8002efa:	d008      	beq.n	8002f0e <HAL_FLASHEx_OBProgram+0x32>
      status = FLASH_OB_DisableWRP(pOBInit->WRPPage);
 8002efc:	6880      	ldr	r0, [r0, #8]
 8002efe:	f7ff ff8d 	bl	8002e1c <FLASH_OB_DisableWRP>
 8002f02:	4603      	mov	r3, r0
    if (status != HAL_OK)
 8002f04:	b14b      	cbz	r3, 8002f1a <HAL_FLASHEx_OBProgram+0x3e>
      __HAL_UNLOCK(&pFlash);
 8002f06:	2100      	movs	r1, #0
 8002f08:	4a1d      	ldr	r2, [pc, #116]	; (8002f80 <HAL_FLASHEx_OBProgram+0xa4>)
 8002f0a:	7611      	strb	r1, [r2, #24]
      return status;
 8002f0c:	e014      	b.n	8002f38 <HAL_FLASHEx_OBProgram+0x5c>
      status = FLASH_OB_EnableWRP(pOBInit->WRPPage);
 8002f0e:	6880      	ldr	r0, [r0, #8]
 8002f10:	f7ff ff28 	bl	8002d64 <FLASH_OB_EnableWRP>
 8002f14:	4603      	mov	r3, r0
 8002f16:	e7f5      	b.n	8002f04 <HAL_FLASHEx_OBProgram+0x28>
  HAL_StatusTypeDef status = HAL_ERROR;
 8002f18:	2301      	movs	r3, #1
  if((pOBInit->OptionType & OPTIONBYTE_RDP) == OPTIONBYTE_RDP)
 8002f1a:	6822      	ldr	r2, [r4, #0]
 8002f1c:	f012 0f02 	tst.w	r2, #2
 8002f20:	d10c      	bne.n	8002f3c <HAL_FLASHEx_OBProgram+0x60>
  if((pOBInit->OptionType & OPTIONBYTE_USER) == OPTIONBYTE_USER)
 8002f22:	6822      	ldr	r2, [r4, #0]
 8002f24:	f012 0f04 	tst.w	r2, #4
 8002f28:	d112      	bne.n	8002f50 <HAL_FLASHEx_OBProgram+0x74>
  if((pOBInit->OptionType & OPTIONBYTE_DATA) == OPTIONBYTE_DATA)
 8002f2a:	6822      	ldr	r2, [r4, #0]
 8002f2c:	f012 0f08 	tst.w	r2, #8
 8002f30:	d118      	bne.n	8002f64 <HAL_FLASHEx_OBProgram+0x88>
  __HAL_UNLOCK(&pFlash);
 8002f32:	2100      	movs	r1, #0
 8002f34:	4a12      	ldr	r2, [pc, #72]	; (8002f80 <HAL_FLASHEx_OBProgram+0xa4>)
 8002f36:	7611      	strb	r1, [r2, #24]
}
 8002f38:	4618      	mov	r0, r3
 8002f3a:	bd10      	pop	{r4, pc}
    status = FLASH_OB_RDP_LevelConfig(pOBInit->RDPLevel);
 8002f3c:	7c20      	ldrb	r0, [r4, #16]
 8002f3e:	f7ff fe63 	bl	8002c08 <FLASH_OB_RDP_LevelConfig>
    if (status != HAL_OK)
 8002f42:	4603      	mov	r3, r0
 8002f44:	2800      	cmp	r0, #0
 8002f46:	d0ec      	beq.n	8002f22 <HAL_FLASHEx_OBProgram+0x46>
      __HAL_UNLOCK(&pFlash);
 8002f48:	2100      	movs	r1, #0
 8002f4a:	4a0d      	ldr	r2, [pc, #52]	; (8002f80 <HAL_FLASHEx_OBProgram+0xa4>)
 8002f4c:	7611      	strb	r1, [r2, #24]
      return status;
 8002f4e:	e7f3      	b.n	8002f38 <HAL_FLASHEx_OBProgram+0x5c>
    status = FLASH_OB_UserConfig(pOBInit->USERConfig);
 8002f50:	7c60      	ldrb	r0, [r4, #17]
 8002f52:	f7ff fe91 	bl	8002c78 <FLASH_OB_UserConfig>
    if (status != HAL_OK)
 8002f56:	4603      	mov	r3, r0
 8002f58:	2800      	cmp	r0, #0
 8002f5a:	d0e6      	beq.n	8002f2a <HAL_FLASHEx_OBProgram+0x4e>
      __HAL_UNLOCK(&pFlash);
 8002f5c:	2100      	movs	r1, #0
 8002f5e:	4a08      	ldr	r2, [pc, #32]	; (8002f80 <HAL_FLASHEx_OBProgram+0xa4>)
 8002f60:	7611      	strb	r1, [r2, #24]
      return status;
 8002f62:	e7e9      	b.n	8002f38 <HAL_FLASHEx_OBProgram+0x5c>
    status = FLASH_OB_ProgramData(pOBInit->DATAAddress, pOBInit->DATAData);
 8002f64:	7e21      	ldrb	r1, [r4, #24]
 8002f66:	6960      	ldr	r0, [r4, #20]
 8002f68:	f7ff feac 	bl	8002cc4 <FLASH_OB_ProgramData>
    if (status != HAL_OK)
 8002f6c:	4603      	mov	r3, r0
 8002f6e:	2800      	cmp	r0, #0
 8002f70:	d0df      	beq.n	8002f32 <HAL_FLASHEx_OBProgram+0x56>
      __HAL_UNLOCK(&pFlash);
 8002f72:	2100      	movs	r1, #0
 8002f74:	4a02      	ldr	r2, [pc, #8]	; (8002f80 <HAL_FLASHEx_OBProgram+0xa4>)
 8002f76:	7611      	strb	r1, [r2, #24]
      return status;
 8002f78:	e7de      	b.n	8002f38 <HAL_FLASHEx_OBProgram+0x5c>
  __HAL_LOCK(&pFlash);
 8002f7a:	2302      	movs	r3, #2
}
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	4770      	bx	lr
 8002f80:	20001be8 	.word	0x20001be8

08002f84 <HAL_FLASHEx_OBGetConfig>:
{
 8002f84:	b510      	push	{r4, lr}
 8002f86:	4604      	mov	r4, r0
  pOBInit->OptionType = OPTIONBYTE_WRP | OPTIONBYTE_RDP | OPTIONBYTE_USER;
 8002f88:	2307      	movs	r3, #7
 8002f8a:	6003      	str	r3, [r0, #0]
  pOBInit->WRPPage = FLASH_OB_GetWRP();
 8002f8c:	f7ff fe22 	bl	8002bd4 <FLASH_OB_GetWRP>
 8002f90:	60a0      	str	r0, [r4, #8]
  pOBInit->RDPLevel = FLASH_OB_GetRDP();
 8002f92:	f7ff fe25 	bl	8002be0 <FLASH_OB_GetRDP>
 8002f96:	7420      	strb	r0, [r4, #16]
  pOBInit->USERConfig = FLASH_OB_GetUser();
 8002f98:	f7ff fe2e 	bl	8002bf8 <FLASH_OB_GetUser>
 8002f9c:	7460      	strb	r0, [r4, #17]
 8002f9e:	bd10      	pop	{r4, pc}

08002fa0 <HAL_FLASHEx_OBGetUserData>:
  if (DATAAdress == OB_DATA_ADDRESS_DATA0)
 8002fa0:	4b06      	ldr	r3, [pc, #24]	; (8002fbc <HAL_FLASHEx_OBGetUserData+0x1c>)
 8002fa2:	4298      	cmp	r0, r3
 8002fa4:	d004      	beq.n	8002fb0 <HAL_FLASHEx_OBGetUserData+0x10>
    value = READ_BIT(FLASH->OBR, FLASH_OBR_DATA1) >> FLASH_POSITION_OB_USERDATA1_BIT;
 8002fa6:	4b06      	ldr	r3, [pc, #24]	; (8002fc0 <HAL_FLASHEx_OBGetUserData+0x20>)
 8002fa8:	69d8      	ldr	r0, [r3, #28]
 8002faa:	f3c0 4087 	ubfx	r0, r0, #18, #8
}
 8002fae:	4770      	bx	lr
    value = READ_BIT(FLASH->OBR, FLASH_OBR_DATA0) >> FLASH_POSITION_OB_USERDATA0_BIT;
 8002fb0:	4b03      	ldr	r3, [pc, #12]	; (8002fc0 <HAL_FLASHEx_OBGetUserData+0x20>)
 8002fb2:	69d8      	ldr	r0, [r3, #28]
 8002fb4:	f3c0 2087 	ubfx	r0, r0, #10, #8
 8002fb8:	4770      	bx	lr
 8002fba:	bf00      	nop
 8002fbc:	1ffff804 	.word	0x1ffff804
 8002fc0:	40022000 	.word	0x40022000

08002fc4 <FLASH_PageErase>:
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	4b06      	ldr	r3, [pc, #24]	; (8002fe0 <FLASH_PageErase+0x1c>)
 8002fc8:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8002fca:	4b06      	ldr	r3, [pc, #24]	; (8002fe4 <FLASH_PageErase+0x20>)
 8002fcc:	691a      	ldr	r2, [r3, #16]
 8002fce:	f042 0202 	orr.w	r2, r2, #2
 8002fd2:	611a      	str	r2, [r3, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8002fd4:	6158      	str	r0, [r3, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8002fd6:	691a      	ldr	r2, [r3, #16]
 8002fd8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002fdc:	611a      	str	r2, [r3, #16]
 8002fde:	4770      	bx	lr
 8002fe0:	20001be8 	.word	0x20001be8
 8002fe4:	40022000 	.word	0x40022000

08002fe8 <HAL_FLASHEx_Erase>:
  __HAL_LOCK(&pFlash);
 8002fe8:	4b26      	ldr	r3, [pc, #152]	; (8003084 <HAL_FLASHEx_Erase+0x9c>)
 8002fea:	7e1b      	ldrb	r3, [r3, #24]
 8002fec:	2b01      	cmp	r3, #1
 8002fee:	d046      	beq.n	800307e <HAL_FLASHEx_Erase+0x96>
{
 8002ff0:	b570      	push	{r4, r5, r6, lr}
 8002ff2:	460e      	mov	r6, r1
 8002ff4:	4605      	mov	r5, r0
  __HAL_LOCK(&pFlash);
 8002ff6:	2201      	movs	r2, #1
 8002ff8:	4b22      	ldr	r3, [pc, #136]	; (8003084 <HAL_FLASHEx_Erase+0x9c>)
 8002ffa:	761a      	strb	r2, [r3, #24]
  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8002ffc:	6803      	ldr	r3, [r0, #0]
 8002ffe:	2b02      	cmp	r3, #2
 8003000:	d020      	beq.n	8003044 <HAL_FLASHEx_Erase+0x5c>
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8003002:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003006:	f7ff fd4f 	bl	8002aa8 <FLASH_WaitForLastOperation>
 800300a:	bb90      	cbnz	r0, 8003072 <HAL_FLASHEx_Erase+0x8a>
        *PageError = 0xFFFFFFFFU;
 800300c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003010:	6033      	str	r3, [r6, #0]
        for(address = pEraseInit->PageAddress;
 8003012:	68ac      	ldr	r4, [r5, #8]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003014:	2101      	movs	r1, #1
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8003016:	68ea      	ldr	r2, [r5, #12]
 8003018:	68ab      	ldr	r3, [r5, #8]
 800301a:	eb03 2382 	add.w	r3, r3, r2, lsl #10
        for(address = pEraseInit->PageAddress;
 800301e:	429c      	cmp	r4, r3
 8003020:	d228      	bcs.n	8003074 <HAL_FLASHEx_Erase+0x8c>
          FLASH_PageErase(address);
 8003022:	4620      	mov	r0, r4
 8003024:	f7ff ffce 	bl	8002fc4 <FLASH_PageErase>
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003028:	f24c 3050 	movw	r0, #50000	; 0xc350
 800302c:	f7ff fd3c 	bl	8002aa8 <FLASH_WaitForLastOperation>
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8003030:	4a15      	ldr	r2, [pc, #84]	; (8003088 <HAL_FLASHEx_Erase+0xa0>)
 8003032:	6913      	ldr	r3, [r2, #16]
 8003034:	f023 0302 	bic.w	r3, r3, #2
 8003038:	6113      	str	r3, [r2, #16]
          if (status != HAL_OK)
 800303a:	4601      	mov	r1, r0
 800303c:	b9b8      	cbnz	r0, 800306e <HAL_FLASHEx_Erase+0x86>
            address += FLASH_PAGE_SIZE)
 800303e:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8003042:	e7e8      	b.n	8003016 <HAL_FLASHEx_Erase+0x2e>
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8003044:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003048:	f7ff fd2e 	bl	8002aa8 <FLASH_WaitForLastOperation>
 800304c:	b108      	cbz	r0, 8003052 <HAL_FLASHEx_Erase+0x6a>
  HAL_StatusTypeDef status = HAL_ERROR;
 800304e:	2101      	movs	r1, #1
 8003050:	e010      	b.n	8003074 <HAL_FLASHEx_Erase+0x8c>
        FLASH_MassErase(FLASH_BANK_1);
 8003052:	2001      	movs	r0, #1
 8003054:	f7ff fdac 	bl	8002bb0 <FLASH_MassErase>
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003058:	f24c 3050 	movw	r0, #50000	; 0xc350
 800305c:	f7ff fd24 	bl	8002aa8 <FLASH_WaitForLastOperation>
 8003060:	4601      	mov	r1, r0
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8003062:	4a09      	ldr	r2, [pc, #36]	; (8003088 <HAL_FLASHEx_Erase+0xa0>)
 8003064:	6913      	ldr	r3, [r2, #16]
 8003066:	f023 0304 	bic.w	r3, r3, #4
 800306a:	6113      	str	r3, [r2, #16]
 800306c:	e002      	b.n	8003074 <HAL_FLASHEx_Erase+0x8c>
            *PageError = address;
 800306e:	6034      	str	r4, [r6, #0]
            break;
 8003070:	e000      	b.n	8003074 <HAL_FLASHEx_Erase+0x8c>
  HAL_StatusTypeDef status = HAL_ERROR;
 8003072:	2101      	movs	r1, #1
  __HAL_UNLOCK(&pFlash);
 8003074:	2200      	movs	r2, #0
 8003076:	4b03      	ldr	r3, [pc, #12]	; (8003084 <HAL_FLASHEx_Erase+0x9c>)
 8003078:	761a      	strb	r2, [r3, #24]
}
 800307a:	4608      	mov	r0, r1
 800307c:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(&pFlash);
 800307e:	2102      	movs	r1, #2
}
 8003080:	4608      	mov	r0, r1
 8003082:	4770      	bx	lr
 8003084:	20001be8 	.word	0x20001be8
 8003088:	40022000 	.word	0x40022000

0800308c <HAL_FLASHEx_Erase_IT>:
{
 800308c:	b508      	push	{r3, lr}
  __HAL_LOCK(&pFlash);
 800308e:	4b14      	ldr	r3, [pc, #80]	; (80030e0 <HAL_FLASHEx_Erase_IT+0x54>)
 8003090:	7e1b      	ldrb	r3, [r3, #24]
 8003092:	2b01      	cmp	r3, #1
 8003094:	d020      	beq.n	80030d8 <HAL_FLASHEx_Erase_IT+0x4c>
 8003096:	4b12      	ldr	r3, [pc, #72]	; (80030e0 <HAL_FLASHEx_Erase_IT+0x54>)
 8003098:	2201      	movs	r2, #1
 800309a:	761a      	strb	r2, [r3, #24]
  if (pFlash.ProcedureOnGoing != FLASH_PROC_NONE)
 800309c:	781b      	ldrb	r3, [r3, #0]
 800309e:	b9eb      	cbnz	r3, 80030dc <HAL_FLASHEx_Erase_IT+0x50>
  __HAL_FLASH_ENABLE_IT(FLASH_IT_EOP | FLASH_IT_ERR);
 80030a0:	4a10      	ldr	r2, [pc, #64]	; (80030e4 <HAL_FLASHEx_Erase_IT+0x58>)
 80030a2:	6913      	ldr	r3, [r2, #16]
 80030a4:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 80030a8:	6113      	str	r3, [r2, #16]
  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80030aa:	6803      	ldr	r3, [r0, #0]
 80030ac:	2b02      	cmp	r3, #2
 80030ae:	d00b      	beq.n	80030c8 <HAL_FLASHEx_Erase_IT+0x3c>
    pFlash.ProcedureOnGoing = FLASH_PROC_PAGEERASE;
 80030b0:	4b0b      	ldr	r3, [pc, #44]	; (80030e0 <HAL_FLASHEx_Erase_IT+0x54>)
 80030b2:	2201      	movs	r2, #1
 80030b4:	701a      	strb	r2, [r3, #0]
    pFlash.DataRemaining = pEraseInit->NbPages;
 80030b6:	68c2      	ldr	r2, [r0, #12]
 80030b8:	605a      	str	r2, [r3, #4]
    pFlash.Address = pEraseInit->PageAddress;
 80030ba:	6882      	ldr	r2, [r0, #8]
 80030bc:	609a      	str	r2, [r3, #8]
    FLASH_PageErase(pEraseInit->PageAddress);
 80030be:	6880      	ldr	r0, [r0, #8]
 80030c0:	f7ff ff80 	bl	8002fc4 <FLASH_PageErase>
  return status;
 80030c4:	2000      	movs	r0, #0
 80030c6:	bd08      	pop	{r3, pc}
    pFlash.ProcedureOnGoing = FLASH_PROC_MASSERASE;
 80030c8:	2202      	movs	r2, #2
 80030ca:	4b05      	ldr	r3, [pc, #20]	; (80030e0 <HAL_FLASHEx_Erase_IT+0x54>)
 80030cc:	701a      	strb	r2, [r3, #0]
        FLASH_MassErase(pEraseInit->Banks);
 80030ce:	6840      	ldr	r0, [r0, #4]
 80030d0:	f7ff fd6e 	bl	8002bb0 <FLASH_MassErase>
  return status;
 80030d4:	2000      	movs	r0, #0
 80030d6:	bd08      	pop	{r3, pc}
  __HAL_LOCK(&pFlash);
 80030d8:	2002      	movs	r0, #2
 80030da:	bd08      	pop	{r3, pc}
    return HAL_ERROR;
 80030dc:	2001      	movs	r0, #1
}
 80030de:	bd08      	pop	{r3, pc}
 80030e0:	20001be8 	.word	0x20001be8
 80030e4:	40022000 	.word	0x40022000

080030e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80030e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80030ea:	b083      	sub	sp, #12
  uint32_t position;
  uint32_t ioposition = 0x00U;
  uint32_t iocurrent = 0x00U;
  uint32_t temp = 0x00U;
  uint32_t config = 0x00U;
 80030ec:	2600      	movs	r6, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 80030ee:	4634      	mov	r4, r6
 80030f0:	e071      	b.n	80031d6 <HAL_GPIO_Init+0xee>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80030f2:	2d00      	cmp	r5, #0
 80030f4:	f000 80a1 	beq.w	800323a <HAL_GPIO_Init+0x152>
 80030f8:	2d01      	cmp	r5, #1
 80030fa:	d100      	bne.n	80030fe <HAL_GPIO_Init+0x16>
      {
        /* If we are configuring the pin in OUTPUT push-pull mode */
        case GPIO_MODE_OUTPUT_PP:
          /* Check the GPIO speed parameter */
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80030fc:	68ce      	ldr	r6, [r1, #12]
          break;
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80030fe:	2bff      	cmp	r3, #255	; 0xff
 8003100:	f200 80af 	bhi.w	8003262 <HAL_GPIO_Init+0x17a>
 8003104:	4686      	mov	lr, r0
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);
 8003106:	2bff      	cmp	r3, #255	; 0xff
 8003108:	f200 80ae 	bhi.w	8003268 <HAL_GPIO_Init+0x180>
 800310c:	00a5      	lsls	r5, r4, #2

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800310e:	f8de 2000 	ldr.w	r2, [lr]
 8003112:	270f      	movs	r7, #15
 8003114:	40af      	lsls	r7, r5
 8003116:	ea22 0207 	bic.w	r2, r2, r7
 800311a:	fa06 f505 	lsl.w	r5, r6, r5
 800311e:	432a      	orrs	r2, r5
 8003120:	f8ce 2000 	str.w	r2, [lr]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003124:	684a      	ldr	r2, [r1, #4]
 8003126:	f012 5f80 	tst.w	r2, #268435456	; 0x10000000
 800312a:	d053      	beq.n	80031d4 <HAL_GPIO_Init+0xec>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800312c:	4a63      	ldr	r2, [pc, #396]	; (80032bc <HAL_GPIO_Init+0x1d4>)
 800312e:	6995      	ldr	r5, [r2, #24]
 8003130:	f045 0501 	orr.w	r5, r5, #1
 8003134:	6195      	str	r5, [r2, #24]
 8003136:	6992      	ldr	r2, [r2, #24]
 8003138:	f002 0201 	and.w	r2, r2, #1
 800313c:	9201      	str	r2, [sp, #4]
 800313e:	9a01      	ldr	r2, [sp, #4]
        temp = AFIO->EXTICR[position >> 2U];
 8003140:	08a5      	lsrs	r5, r4, #2
 8003142:	1caf      	adds	r7, r5, #2
 8003144:	4a5e      	ldr	r2, [pc, #376]	; (80032c0 <HAL_GPIO_Init+0x1d8>)
 8003146:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 800314a:	f004 0703 	and.w	r7, r4, #3
 800314e:	00bf      	lsls	r7, r7, #2
 8003150:	f04f 0e0f 	mov.w	lr, #15
 8003154:	fa0e fe07 	lsl.w	lr, lr, r7
 8003158:	ea22 020e 	bic.w	r2, r2, lr
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800315c:	f8df e170 	ldr.w	lr, [pc, #368]	; 80032d0 <HAL_GPIO_Init+0x1e8>
 8003160:	4570      	cmp	r0, lr
 8003162:	f000 8088 	beq.w	8003276 <HAL_GPIO_Init+0x18e>
 8003166:	f50e 6e80 	add.w	lr, lr, #1024	; 0x400
 800316a:	4570      	cmp	r0, lr
 800316c:	f000 8086 	beq.w	800327c <HAL_GPIO_Init+0x194>
 8003170:	f50e 6e80 	add.w	lr, lr, #1024	; 0x400
 8003174:	4570      	cmp	r0, lr
 8003176:	f000 8084 	beq.w	8003282 <HAL_GPIO_Init+0x19a>
 800317a:	f50e 6e80 	add.w	lr, lr, #1024	; 0x400
 800317e:	4570      	cmp	r0, lr
 8003180:	d076      	beq.n	8003270 <HAL_GPIO_Init+0x188>
 8003182:	f04f 0e04 	mov.w	lr, #4
 8003186:	fa0e f707 	lsl.w	r7, lr, r7
 800318a:	433a      	orrs	r2, r7
        AFIO->EXTICR[position >> 2U] = temp;
 800318c:	3502      	adds	r5, #2
 800318e:	4f4c      	ldr	r7, [pc, #304]	; (80032c0 <HAL_GPIO_Init+0x1d8>)
 8003190:	f847 2025 	str.w	r2, [r7, r5, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003194:	684a      	ldr	r2, [r1, #4]
 8003196:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 800319a:	d075      	beq.n	8003288 <HAL_GPIO_Init+0x1a0>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800319c:	4d49      	ldr	r5, [pc, #292]	; (80032c4 <HAL_GPIO_Init+0x1dc>)
 800319e:	682a      	ldr	r2, [r5, #0]
 80031a0:	431a      	orrs	r2, r3
 80031a2:	602a      	str	r2, [r5, #0]
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80031a4:	684a      	ldr	r2, [r1, #4]
 80031a6:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 80031aa:	d073      	beq.n	8003294 <HAL_GPIO_Init+0x1ac>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80031ac:	4d45      	ldr	r5, [pc, #276]	; (80032c4 <HAL_GPIO_Init+0x1dc>)
 80031ae:	686a      	ldr	r2, [r5, #4]
 80031b0:	431a      	orrs	r2, r3
 80031b2:	606a      	str	r2, [r5, #4]
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80031b4:	684a      	ldr	r2, [r1, #4]
 80031b6:	f412 1f80 	tst.w	r2, #1048576	; 0x100000
 80031ba:	d071      	beq.n	80032a0 <HAL_GPIO_Init+0x1b8>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80031bc:	4d41      	ldr	r5, [pc, #260]	; (80032c4 <HAL_GPIO_Init+0x1dc>)
 80031be:	68aa      	ldr	r2, [r5, #8]
 80031c0:	431a      	orrs	r2, r3
 80031c2:	60aa      	str	r2, [r5, #8]
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80031c4:	684a      	ldr	r2, [r1, #4]
 80031c6:	f412 1f00 	tst.w	r2, #2097152	; 0x200000
 80031ca:	d06f      	beq.n	80032ac <HAL_GPIO_Init+0x1c4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80031cc:	4d3d      	ldr	r5, [pc, #244]	; (80032c4 <HAL_GPIO_Init+0x1dc>)
 80031ce:	68ea      	ldr	r2, [r5, #12]
 80031d0:	4313      	orrs	r3, r2
 80031d2:	60eb      	str	r3, [r5, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 80031d4:	3401      	adds	r4, #1
 80031d6:	2c0f      	cmp	r4, #15
 80031d8:	d86e      	bhi.n	80032b8 <HAL_GPIO_Init+0x1d0>
    ioposition = (0x01U << position);
 80031da:	2201      	movs	r2, #1
 80031dc:	40a2      	lsls	r2, r4
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80031de:	680b      	ldr	r3, [r1, #0]
 80031e0:	4013      	ands	r3, r2
    if (iocurrent == ioposition)
 80031e2:	429a      	cmp	r2, r3
 80031e4:	d1f6      	bne.n	80031d4 <HAL_GPIO_Init+0xec>
      switch (GPIO_Init->Mode)
 80031e6:	684d      	ldr	r5, [r1, #4]
 80031e8:	2d12      	cmp	r5, #18
 80031ea:	d030      	beq.n	800324e <HAL_GPIO_Init+0x166>
 80031ec:	d80b      	bhi.n	8003206 <HAL_GPIO_Init+0x11e>
 80031ee:	2d02      	cmp	r5, #2
 80031f0:	d02a      	beq.n	8003248 <HAL_GPIO_Init+0x160>
 80031f2:	f67f af7e 	bls.w	80030f2 <HAL_GPIO_Init+0xa>
 80031f6:	2d03      	cmp	r5, #3
 80031f8:	d02f      	beq.n	800325a <HAL_GPIO_Init+0x172>
 80031fa:	2d11      	cmp	r5, #17
 80031fc:	f47f af7f 	bne.w	80030fe <HAL_GPIO_Init+0x16>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003200:	68ce      	ldr	r6, [r1, #12]
 8003202:	3604      	adds	r6, #4
          break;
 8003204:	e77b      	b.n	80030fe <HAL_GPIO_Init+0x16>
      switch (GPIO_Init->Mode)
 8003206:	4f30      	ldr	r7, [pc, #192]	; (80032c8 <HAL_GPIO_Init+0x1e0>)
 8003208:	42bd      	cmp	r5, r7
 800320a:	d016      	beq.n	800323a <HAL_GPIO_Init+0x152>
 800320c:	d90c      	bls.n	8003228 <HAL_GPIO_Init+0x140>
 800320e:	4f2f      	ldr	r7, [pc, #188]	; (80032cc <HAL_GPIO_Init+0x1e4>)
 8003210:	42bd      	cmp	r5, r7
 8003212:	d012      	beq.n	800323a <HAL_GPIO_Init+0x152>
 8003214:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 8003218:	42bd      	cmp	r5, r7
 800321a:	d00e      	beq.n	800323a <HAL_GPIO_Init+0x152>
 800321c:	f5a7 1780 	sub.w	r7, r7, #1048576	; 0x100000
 8003220:	42bd      	cmp	r5, r7
 8003222:	f47f af6c 	bne.w	80030fe <HAL_GPIO_Init+0x16>
 8003226:	e008      	b.n	800323a <HAL_GPIO_Init+0x152>
 8003228:	f5a7 1780 	sub.w	r7, r7, #1048576	; 0x100000
 800322c:	42bd      	cmp	r5, r7
 800322e:	d004      	beq.n	800323a <HAL_GPIO_Init+0x152>
 8003230:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 8003234:	42bd      	cmp	r5, r7
 8003236:	f47f af62 	bne.w	80030fe <HAL_GPIO_Init+0x16>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800323a:	688d      	ldr	r5, [r1, #8]
 800323c:	b17d      	cbz	r5, 800325e <HAL_GPIO_Init+0x176>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800323e:	2d01      	cmp	r5, #1
 8003240:	d008      	beq.n	8003254 <HAL_GPIO_Init+0x16c>
            GPIOx->BRR = ioposition;
 8003242:	6142      	str	r2, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003244:	2608      	movs	r6, #8
 8003246:	e75a      	b.n	80030fe <HAL_GPIO_Init+0x16>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003248:	68ce      	ldr	r6, [r1, #12]
 800324a:	3608      	adds	r6, #8
          break;
 800324c:	e757      	b.n	80030fe <HAL_GPIO_Init+0x16>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800324e:	68ce      	ldr	r6, [r1, #12]
 8003250:	360c      	adds	r6, #12
          break;
 8003252:	e754      	b.n	80030fe <HAL_GPIO_Init+0x16>
            GPIOx->BSRR = ioposition;
 8003254:	6102      	str	r2, [r0, #16]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003256:	2608      	movs	r6, #8
 8003258:	e751      	b.n	80030fe <HAL_GPIO_Init+0x16>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800325a:	2600      	movs	r6, #0
 800325c:	e74f      	b.n	80030fe <HAL_GPIO_Init+0x16>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800325e:	2604      	movs	r6, #4
 8003260:	e74d      	b.n	80030fe <HAL_GPIO_Init+0x16>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003262:	f100 0e04 	add.w	lr, r0, #4
 8003266:	e74e      	b.n	8003106 <HAL_GPIO_Init+0x1e>
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);
 8003268:	f1a4 0508 	sub.w	r5, r4, #8
 800326c:	00ad      	lsls	r5, r5, #2
 800326e:	e74e      	b.n	800310e <HAL_GPIO_Init+0x26>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003270:	f04f 0e03 	mov.w	lr, #3
 8003274:	e787      	b.n	8003186 <HAL_GPIO_Init+0x9e>
 8003276:	f04f 0e00 	mov.w	lr, #0
 800327a:	e784      	b.n	8003186 <HAL_GPIO_Init+0x9e>
 800327c:	f04f 0e01 	mov.w	lr, #1
 8003280:	e781      	b.n	8003186 <HAL_GPIO_Init+0x9e>
 8003282:	f04f 0e02 	mov.w	lr, #2
 8003286:	e77e      	b.n	8003186 <HAL_GPIO_Init+0x9e>
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003288:	4d0e      	ldr	r5, [pc, #56]	; (80032c4 <HAL_GPIO_Init+0x1dc>)
 800328a:	682a      	ldr	r2, [r5, #0]
 800328c:	ea22 0203 	bic.w	r2, r2, r3
 8003290:	602a      	str	r2, [r5, #0]
 8003292:	e787      	b.n	80031a4 <HAL_GPIO_Init+0xbc>
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003294:	4d0b      	ldr	r5, [pc, #44]	; (80032c4 <HAL_GPIO_Init+0x1dc>)
 8003296:	686a      	ldr	r2, [r5, #4]
 8003298:	ea22 0203 	bic.w	r2, r2, r3
 800329c:	606a      	str	r2, [r5, #4]
 800329e:	e789      	b.n	80031b4 <HAL_GPIO_Init+0xcc>
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80032a0:	4d08      	ldr	r5, [pc, #32]	; (80032c4 <HAL_GPIO_Init+0x1dc>)
 80032a2:	68aa      	ldr	r2, [r5, #8]
 80032a4:	ea22 0203 	bic.w	r2, r2, r3
 80032a8:	60aa      	str	r2, [r5, #8]
 80032aa:	e78b      	b.n	80031c4 <HAL_GPIO_Init+0xdc>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80032ac:	4d05      	ldr	r5, [pc, #20]	; (80032c4 <HAL_GPIO_Init+0x1dc>)
 80032ae:	68ea      	ldr	r2, [r5, #12]
 80032b0:	ea22 0303 	bic.w	r3, r2, r3
 80032b4:	60eb      	str	r3, [r5, #12]
 80032b6:	e78d      	b.n	80031d4 <HAL_GPIO_Init+0xec>
        }
      }
    }
  }
}
 80032b8:	b003      	add	sp, #12
 80032ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80032bc:	40021000 	.word	0x40021000
 80032c0:	40010000 	.word	0x40010000
 80032c4:	40010400 	.word	0x40010400
 80032c8:	10210000 	.word	0x10210000
 80032cc:	10310000 	.word	0x10310000
 80032d0:	40010800 	.word	0x40010800

080032d4 <HAL_GPIO_DeInit>:
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
  uint32_t position = 0x00U;
 80032d4:	2200      	movs	r2, #0
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0U)
 80032d6:	e065      	b.n	80033a4 <HAL_GPIO_DeInit+0xd0>
    if (iocurrent)
    {
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register */
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80032d8:	f100 0e04 	add.w	lr, r0, #4
 80032dc:	e03d      	b.n	800335a <HAL_GPIO_DeInit+0x86>
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);
 80032de:	f1a2 0608 	sub.w	r6, r2, #8
 80032e2:	00b7      	lsls	r7, r6, #2

      /* CRL/CRH default value is floating input(0x04) shifted to correct position */
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 80032e4:	f8de 4000 	ldr.w	r4, [lr]
 80032e8:	250f      	movs	r5, #15
 80032ea:	fa05 f607 	lsl.w	r6, r5, r7
 80032ee:	ea24 0406 	bic.w	r4, r4, r6
 80032f2:	2604      	movs	r6, #4
 80032f4:	40be      	lsls	r6, r7
 80032f6:	4334      	orrs	r4, r6
 80032f8:	f8ce 4000 	str.w	r4, [lr]

      /* ODR default value is 0 */
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 80032fc:	68c4      	ldr	r4, [r0, #12]
 80032fe:	43db      	mvns	r3, r3
 8003300:	401c      	ands	r4, r3
 8003302:	60c4      	str	r4, [r0, #12]

      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = AFIO->EXTICR[position >> 2U];
 8003304:	ea4f 0e92 	mov.w	lr, r2, lsr #2
 8003308:	f10e 0602 	add.w	r6, lr, #2
 800330c:	4c2a      	ldr	r4, [pc, #168]	; (80033b8 <HAL_GPIO_DeInit+0xe4>)
 800330e:	f854 6026 	ldr.w	r6, [r4, r6, lsl #2]
      tmp &= 0x0FU << (4U * (position & 0x03U));
 8003312:	f002 0403 	and.w	r4, r2, #3
 8003316:	00a4      	lsls	r4, r4, #2
 8003318:	40a5      	lsls	r5, r4
 800331a:	402e      	ands	r6, r5
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 800331c:	4f27      	ldr	r7, [pc, #156]	; (80033bc <HAL_GPIO_DeInit+0xe8>)
 800331e:	42b8      	cmp	r0, r7
 8003320:	d021      	beq.n	8003366 <HAL_GPIO_DeInit+0x92>
 8003322:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 8003326:	42b8      	cmp	r0, r7
 8003328:	d01f      	beq.n	800336a <HAL_GPIO_DeInit+0x96>
 800332a:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 800332e:	42b8      	cmp	r0, r7
 8003330:	d01d      	beq.n	800336e <HAL_GPIO_DeInit+0x9a>
 8003332:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 8003336:	42b8      	cmp	r0, r7
 8003338:	d013      	beq.n	8003362 <HAL_GPIO_DeInit+0x8e>
 800333a:	2704      	movs	r7, #4
 800333c:	fa07 f404 	lsl.w	r4, r7, r4
 8003340:	42a6      	cmp	r6, r4
 8003342:	d016      	beq.n	8003372 <HAL_GPIO_DeInit+0x9e>
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
      }
    }

    position++;
 8003344:	3201      	adds	r2, #1
  while ((GPIO_Pin >> position) != 0U)
 8003346:	fa31 f302 	lsrs.w	r3, r1, r2
 800334a:	d029      	beq.n	80033a0 <HAL_GPIO_DeInit+0xcc>
    iocurrent = (GPIO_Pin) & (1U << position);
 800334c:	2301      	movs	r3, #1
 800334e:	4093      	lsls	r3, r2
    if (iocurrent)
 8003350:	400b      	ands	r3, r1
 8003352:	d0f7      	beq.n	8003344 <HAL_GPIO_DeInit+0x70>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003354:	2bff      	cmp	r3, #255	; 0xff
 8003356:	d8bf      	bhi.n	80032d8 <HAL_GPIO_DeInit+0x4>
 8003358:	4686      	mov	lr, r0
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);
 800335a:	2bff      	cmp	r3, #255	; 0xff
 800335c:	d8bf      	bhi.n	80032de <HAL_GPIO_DeInit+0xa>
 800335e:	0097      	lsls	r7, r2, #2
 8003360:	e7c0      	b.n	80032e4 <HAL_GPIO_DeInit+0x10>
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8003362:	2703      	movs	r7, #3
 8003364:	e7ea      	b.n	800333c <HAL_GPIO_DeInit+0x68>
 8003366:	2700      	movs	r7, #0
 8003368:	e7e8      	b.n	800333c <HAL_GPIO_DeInit+0x68>
 800336a:	2701      	movs	r7, #1
 800336c:	e7e6      	b.n	800333c <HAL_GPIO_DeInit+0x68>
 800336e:	2702      	movs	r7, #2
 8003370:	e7e4      	b.n	800333c <HAL_GPIO_DeInit+0x68>
        CLEAR_BIT(AFIO->EXTICR[position >> 2U], tmp);
 8003372:	4f11      	ldr	r7, [pc, #68]	; (80033b8 <HAL_GPIO_DeInit+0xe4>)
 8003374:	f10e 0402 	add.w	r4, lr, #2
 8003378:	f857 6024 	ldr.w	r6, [r7, r4, lsl #2]
 800337c:	ea26 0505 	bic.w	r5, r6, r5
 8003380:	f847 5024 	str.w	r5, [r7, r4, lsl #2]
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 8003384:	4c0e      	ldr	r4, [pc, #56]	; (80033c0 <HAL_GPIO_DeInit+0xec>)
 8003386:	6825      	ldr	r5, [r4, #0]
 8003388:	401d      	ands	r5, r3
 800338a:	6025      	str	r5, [r4, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 800338c:	6865      	ldr	r5, [r4, #4]
 800338e:	401d      	ands	r5, r3
 8003390:	6065      	str	r5, [r4, #4]
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 8003392:	68a5      	ldr	r5, [r4, #8]
 8003394:	401d      	ands	r5, r3
 8003396:	60a5      	str	r5, [r4, #8]
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 8003398:	68e5      	ldr	r5, [r4, #12]
 800339a:	402b      	ands	r3, r5
 800339c:	60e3      	str	r3, [r4, #12]
 800339e:	e7d1      	b.n	8003344 <HAL_GPIO_DeInit+0x70>
  }
}
 80033a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    position++;
 80033a2:	3201      	adds	r2, #1
  while ((GPIO_Pin >> position) != 0U)
 80033a4:	fa31 f302 	lsrs.w	r3, r1, r2
 80033a8:	d005      	beq.n	80033b6 <HAL_GPIO_DeInit+0xe2>
    iocurrent = (GPIO_Pin) & (1U << position);
 80033aa:	2301      	movs	r3, #1
 80033ac:	4093      	lsls	r3, r2
    if (iocurrent)
 80033ae:	400b      	ands	r3, r1
 80033b0:	d0f7      	beq.n	80033a2 <HAL_GPIO_DeInit+0xce>
{
 80033b2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80033b4:	e7ce      	b.n	8003354 <HAL_GPIO_DeInit+0x80>
 80033b6:	4770      	bx	lr
 80033b8:	40010000 	.word	0x40010000
 80033bc:	40010800 	.word	0x40010800
 80033c0:	40010400 	.word	0x40010400

080033c4 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80033c4:	6883      	ldr	r3, [r0, #8]
 80033c6:	4219      	tst	r1, r3
 80033c8:	d101      	bne.n	80033ce <HAL_GPIO_ReadPin+0xa>
  {
    bitstatus = GPIO_PIN_SET;
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80033ca:	2000      	movs	r0, #0
  }
  return bitstatus;
}
 80033cc:	4770      	bx	lr
    bitstatus = GPIO_PIN_SET;
 80033ce:	2001      	movs	r0, #1
 80033d0:	4770      	bx	lr

080033d2 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80033d2:	b912      	cbnz	r2, 80033da <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80033d4:	0409      	lsls	r1, r1, #16
 80033d6:	6101      	str	r1, [r0, #16]
 80033d8:	4770      	bx	lr
    GPIOx->BSRR = GPIO_Pin;
 80033da:	6101      	str	r1, [r0, #16]
 80033dc:	4770      	bx	lr

080033de <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 80033de:	68c3      	ldr	r3, [r0, #12]
 80033e0:	4059      	eors	r1, r3
 80033e2:	60c1      	str	r1, [r0, #12]
 80033e4:	4770      	bx	lr

080033e6 <HAL_GPIO_LockPin>:
* @param  GPIO_Pin: specifies the port bit to be locked.
*         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
* @retval None
*/
HAL_StatusTypeDef HAL_GPIO_LockPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80033e6:	b082      	sub	sp, #8
  __IO uint32_t tmp = GPIO_LCKR_LCKK;
 80033e8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80033ec:	9301      	str	r3, [sp, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_LOCK_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Apply lock key write sequence */
  SET_BIT(tmp, GPIO_Pin);
 80033ee:	9b01      	ldr	r3, [sp, #4]
 80033f0:	430b      	orrs	r3, r1
 80033f2:	9301      	str	r3, [sp, #4]
  /* Set LCKx bit(s): LCKK='1' + LCK[15-0] */
  GPIOx->LCKR = tmp;
 80033f4:	9b01      	ldr	r3, [sp, #4]
 80033f6:	6183      	str	r3, [r0, #24]
  /* Reset LCKx bit(s): LCKK='0' + LCK[15-0] */
  GPIOx->LCKR = GPIO_Pin;
 80033f8:	6181      	str	r1, [r0, #24]
  /* Set LCKx bit(s): LCKK='1' + LCK[15-0] */
  GPIOx->LCKR = tmp;
 80033fa:	9b01      	ldr	r3, [sp, #4]
 80033fc:	6183      	str	r3, [r0, #24]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
 80033fe:	6983      	ldr	r3, [r0, #24]
 8003400:	9301      	str	r3, [sp, #4]

  if ((uint32_t)(GPIOx->LCKR & GPIO_LCKR_LCKK))
 8003402:	6983      	ldr	r3, [r0, #24]
 8003404:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8003408:	d102      	bne.n	8003410 <HAL_GPIO_LockPin+0x2a>
  {
    return HAL_OK;
  }
  else
  {
    return HAL_ERROR;
 800340a:	2001      	movs	r0, #1
  }
}
 800340c:	b002      	add	sp, #8
 800340e:	4770      	bx	lr
    return HAL_OK;
 8003410:	2000      	movs	r0, #0
 8003412:	e7fb      	b.n	800340c <HAL_GPIO_LockPin+0x26>

08003414 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003414:	4770      	bx	lr

08003416 <HAL_GPIO_EXTI_IRQHandler>:
{
 8003416:	b508      	push	{r3, lr}
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003418:	4b04      	ldr	r3, [pc, #16]	; (800342c <HAL_GPIO_EXTI_IRQHandler+0x16>)
 800341a:	695b      	ldr	r3, [r3, #20]
 800341c:	4203      	tst	r3, r0
 800341e:	d100      	bne.n	8003422 <HAL_GPIO_EXTI_IRQHandler+0xc>
 8003420:	bd08      	pop	{r3, pc}
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003422:	4b02      	ldr	r3, [pc, #8]	; (800342c <HAL_GPIO_EXTI_IRQHandler+0x16>)
 8003424:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003426:	f7ff fff5 	bl	8003414 <HAL_GPIO_EXTI_Callback>
}
 800342a:	e7f9      	b.n	8003420 <HAL_GPIO_EXTI_IRQHandler+0xa>
 800342c:	40010400 	.word	0x40010400

08003430 <HAL_GPIOEx_ConfigEventout>:
  /* Verify the parameters */
  assert_param(IS_AFIO_EVENTOUT_PORT(GPIO_PortSource));
  assert_param(IS_AFIO_EVENTOUT_PIN(GPIO_PinSource));

  /* Apply the new configuration */
  MODIFY_REG(AFIO->EVCR, (AFIO_EVCR_PORT) | (AFIO_EVCR_PIN), (GPIO_PortSource) | (GPIO_PinSource));
 8003430:	4a03      	ldr	r2, [pc, #12]	; (8003440 <HAL_GPIOEx_ConfigEventout+0x10>)
 8003432:	6813      	ldr	r3, [r2, #0]
 8003434:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8003438:	4301      	orrs	r1, r0
 800343a:	430b      	orrs	r3, r1
 800343c:	6013      	str	r3, [r2, #0]
 800343e:	4770      	bx	lr
 8003440:	40010000 	.word	0x40010000

08003444 <HAL_GPIOEx_EnableEventout>:
  * @brief  Enables the Event Output.
  * @retval None
  */
void HAL_GPIOEx_EnableEventout(void)
{
  SET_BIT(AFIO->EVCR, AFIO_EVCR_EVOE);
 8003444:	4a02      	ldr	r2, [pc, #8]	; (8003450 <HAL_GPIOEx_EnableEventout+0xc>)
 8003446:	6813      	ldr	r3, [r2, #0]
 8003448:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800344c:	6013      	str	r3, [r2, #0]
 800344e:	4770      	bx	lr
 8003450:	40010000 	.word	0x40010000

08003454 <HAL_GPIOEx_DisableEventout>:
  * @brief  Disables the Event Output.
  * @retval None
  */
void HAL_GPIOEx_DisableEventout(void)
{
  CLEAR_BIT(AFIO->EVCR, AFIO_EVCR_EVOE);
 8003454:	4a02      	ldr	r2, [pc, #8]	; (8003460 <HAL_GPIOEx_DisableEventout+0xc>)
 8003456:	6813      	ldr	r3, [r2, #0]
 8003458:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800345c:	6013      	str	r3, [r2, #0]
 800345e:	4770      	bx	lr
 8003460:	40010000 	.word	0x40010000

08003464 <PWR_OverloadWfe>:

/* Private functions ---------------------------------------------------------*/
__NOINLINE
static void PWR_OverloadWfe(void)
{
  __asm volatile( "wfe" );
 8003464:	bf20      	wfe
  __asm volatile( "nop" );
 8003466:	bf00      	nop
 8003468:	4770      	bx	lr

0800346a <HAL_PWR_DeInit>:
  * @brief  Deinitializes the PWR peripheral registers to their default reset values.  
  * @retval None
  */
void HAL_PWR_DeInit(void)
{
  __HAL_RCC_PWR_FORCE_RESET();
 800346a:	4b05      	ldr	r3, [pc, #20]	; (8003480 <HAL_PWR_DeInit+0x16>)
 800346c:	691a      	ldr	r2, [r3, #16]
 800346e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003472:	611a      	str	r2, [r3, #16]
  __HAL_RCC_PWR_RELEASE_RESET();
 8003474:	691a      	ldr	r2, [r3, #16]
 8003476:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800347a:	611a      	str	r2, [r3, #16]
 800347c:	4770      	bx	lr
 800347e:	bf00      	nop
 8003480:	40021000 	.word	0x40021000

08003484 <HAL_PWR_EnableBkUpAccess>:
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8003484:	2201      	movs	r2, #1
 8003486:	4b01      	ldr	r3, [pc, #4]	; (800348c <HAL_PWR_EnableBkUpAccess+0x8>)
 8003488:	601a      	str	r2, [r3, #0]
 800348a:	4770      	bx	lr
 800348c:	420e0020 	.word	0x420e0020

08003490 <HAL_PWR_DisableBkUpAccess>:
  * @retval None
  */
void HAL_PWR_DisableBkUpAccess(void)
{
  /* Disable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)DISABLE;
 8003490:	2200      	movs	r2, #0
 8003492:	4b01      	ldr	r3, [pc, #4]	; (8003498 <HAL_PWR_DisableBkUpAccess+0x8>)
 8003494:	601a      	str	r2, [r3, #0]
 8003496:	4770      	bx	lr
 8003498:	420e0020 	.word	0x420e0020

0800349c <HAL_PWR_ConfigPVD>:
  /* Check the parameters */
  assert_param(IS_PWR_PVD_LEVEL(sConfigPVD->PVDLevel));
  assert_param(IS_PWR_PVD_MODE(sConfigPVD->Mode));

  /* Set PLS[7:5] bits according to PVDLevel value */
  MODIFY_REG(PWR->CR, PWR_CR_PLS, sConfigPVD->PVDLevel);
 800349c:	4a1e      	ldr	r2, [pc, #120]	; (8003518 <HAL_PWR_ConfigPVD+0x7c>)
 800349e:	6813      	ldr	r3, [r2, #0]
 80034a0:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 80034a4:	6801      	ldr	r1, [r0, #0]
 80034a6:	430b      	orrs	r3, r1
 80034a8:	6013      	str	r3, [r2, #0]
  
  /* Clear any previous config. Keep it clear if no event or IT mode is selected */
  __HAL_PWR_PVD_EXTI_DISABLE_EVENT();
 80034aa:	4b1c      	ldr	r3, [pc, #112]	; (800351c <HAL_PWR_ConfigPVD+0x80>)
 80034ac:	685a      	ldr	r2, [r3, #4]
 80034ae:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80034b2:	605a      	str	r2, [r3, #4]
  __HAL_PWR_PVD_EXTI_DISABLE_IT();
 80034b4:	681a      	ldr	r2, [r3, #0]
 80034b6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80034ba:	601a      	str	r2, [r3, #0]
  __HAL_PWR_PVD_EXTI_DISABLE_FALLING_EDGE(); 
 80034bc:	68da      	ldr	r2, [r3, #12]
 80034be:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80034c2:	60da      	str	r2, [r3, #12]
  __HAL_PWR_PVD_EXTI_DISABLE_RISING_EDGE();
 80034c4:	689a      	ldr	r2, [r3, #8]
 80034c6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80034ca:	609a      	str	r2, [r3, #8]

  /* Configure interrupt mode */
  if((sConfigPVD->Mode & PVD_MODE_IT) == PVD_MODE_IT)
 80034cc:	6843      	ldr	r3, [r0, #4]
 80034ce:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80034d2:	d004      	beq.n	80034de <HAL_PWR_ConfigPVD+0x42>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_IT();
 80034d4:	4a11      	ldr	r2, [pc, #68]	; (800351c <HAL_PWR_ConfigPVD+0x80>)
 80034d6:	6813      	ldr	r3, [r2, #0]
 80034d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034dc:	6013      	str	r3, [r2, #0]
  }
  
  /* Configure event mode */
  if((sConfigPVD->Mode & PVD_MODE_EVT) == PVD_MODE_EVT)
 80034de:	6843      	ldr	r3, [r0, #4]
 80034e0:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80034e4:	d004      	beq.n	80034f0 <HAL_PWR_ConfigPVD+0x54>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_EVENT();
 80034e6:	4a0d      	ldr	r2, [pc, #52]	; (800351c <HAL_PWR_ConfigPVD+0x80>)
 80034e8:	6853      	ldr	r3, [r2, #4]
 80034ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034ee:	6053      	str	r3, [r2, #4]
  }
  
  /* Configure the edge */
  if((sConfigPVD->Mode & PVD_RISING_EDGE) == PVD_RISING_EDGE)
 80034f0:	6843      	ldr	r3, [r0, #4]
 80034f2:	f013 0f01 	tst.w	r3, #1
 80034f6:	d004      	beq.n	8003502 <HAL_PWR_ConfigPVD+0x66>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_RISING_EDGE();
 80034f8:	4a08      	ldr	r2, [pc, #32]	; (800351c <HAL_PWR_ConfigPVD+0x80>)
 80034fa:	6893      	ldr	r3, [r2, #8]
 80034fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003500:	6093      	str	r3, [r2, #8]
  }
  
  if((sConfigPVD->Mode & PVD_FALLING_EDGE) == PVD_FALLING_EDGE)
 8003502:	6843      	ldr	r3, [r0, #4]
 8003504:	f013 0f02 	tst.w	r3, #2
 8003508:	d004      	beq.n	8003514 <HAL_PWR_ConfigPVD+0x78>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_FALLING_EDGE();
 800350a:	4a04      	ldr	r2, [pc, #16]	; (800351c <HAL_PWR_ConfigPVD+0x80>)
 800350c:	68d3      	ldr	r3, [r2, #12]
 800350e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003512:	60d3      	str	r3, [r2, #12]
 8003514:	4770      	bx	lr
 8003516:	bf00      	nop
 8003518:	40007000 	.word	0x40007000
 800351c:	40010400 	.word	0x40010400

08003520 <HAL_PWR_EnablePVD>:
  * @retval None
  */
void HAL_PWR_EnablePVD(void)
{
  /* Enable the power voltage detector */
  *(__IO uint32_t *) CR_PVDE_BB = (uint32_t)ENABLE;
 8003520:	2201      	movs	r2, #1
 8003522:	4b01      	ldr	r3, [pc, #4]	; (8003528 <HAL_PWR_EnablePVD+0x8>)
 8003524:	601a      	str	r2, [r3, #0]
 8003526:	4770      	bx	lr
 8003528:	420e0010 	.word	0x420e0010

0800352c <HAL_PWR_DisablePVD>:
  * @retval None
  */
void HAL_PWR_DisablePVD(void)
{
  /* Disable the power voltage detector */
  *(__IO uint32_t *) CR_PVDE_BB = (uint32_t)DISABLE;
 800352c:	2200      	movs	r2, #0
 800352e:	4b01      	ldr	r3, [pc, #4]	; (8003534 <HAL_PWR_DisablePVD+0x8>)
 8003530:	601a      	str	r2, [r3, #0]
 8003532:	4770      	bx	lr
 8003534:	420e0010 	.word	0x420e0010

08003538 <HAL_PWR_EnableWakeUpPin>:
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003538:	fa90 f0a0 	rbit	r0, r0
void HAL_PWR_EnableWakeUpPin(uint32_t WakeUpPinx)
{
  /* Check the parameter */
  assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinx));
  /* Enable the EWUPx pin */
  *(__IO uint32_t *) CSR_EWUP_BB(WakeUpPinx) = (uint32_t)ENABLE;
 800353c:	fab0 f080 	clz	r0, r0
 8003540:	4b02      	ldr	r3, [pc, #8]	; (800354c <HAL_PWR_EnableWakeUpPin+0x14>)
 8003542:	4403      	add	r3, r0
 8003544:	009b      	lsls	r3, r3, #2
 8003546:	2201      	movs	r2, #1
 8003548:	601a      	str	r2, [r3, #0]
 800354a:	4770      	bx	lr
 800354c:	10838020 	.word	0x10838020

08003550 <HAL_PWR_DisableWakeUpPin>:
 8003550:	fa90 f0a0 	rbit	r0, r0
void HAL_PWR_DisableWakeUpPin(uint32_t WakeUpPinx)
{
  /* Check the parameter */
  assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinx));
  /* Disable the EWUPx pin */
  *(__IO uint32_t *) CSR_EWUP_BB(WakeUpPinx) = (uint32_t)DISABLE;
 8003554:	fab0 f080 	clz	r0, r0
 8003558:	4b02      	ldr	r3, [pc, #8]	; (8003564 <HAL_PWR_DisableWakeUpPin+0x14>)
 800355a:	4403      	add	r3, r0
 800355c:	009b      	lsls	r3, r3, #2
 800355e:	2200      	movs	r2, #0
 8003560:	601a      	str	r2, [r3, #0]
 8003562:	4770      	bx	lr
 8003564:	10838020 	.word	0x10838020

08003568 <HAL_PWR_EnterSLEEPMode>:
  UNUSED(Regulator);

  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8003568:	4a06      	ldr	r2, [pc, #24]	; (8003584 <HAL_PWR_EnterSLEEPMode+0x1c>)
 800356a:	6913      	ldr	r3, [r2, #16]
 800356c:	f023 0304 	bic.w	r3, r3, #4
 8003570:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8003572:	2901      	cmp	r1, #1
 8003574:	d003      	beq.n	800357e <HAL_PWR_EnterSLEEPMode+0x16>
  __ASM volatile ("sev");
 8003576:	bf40      	sev
  __ASM volatile ("wfe");
 8003578:	bf20      	wfe
 800357a:	bf20      	wfe
 800357c:	4770      	bx	lr
  __ASM volatile ("wfi");
 800357e:	bf30      	wfi
 8003580:	4770      	bx	lr
 8003582:	bf00      	nop
 8003584:	e000ed00 	.word	0xe000ed00

08003588 <HAL_PWR_EnterSTOPMode>:
  *            @arg PWR_STOPENTRY_WFI: Enter Stop mode with WFI instruction
  *            @arg PWR_STOPENTRY_WFE: Enter Stop mode with WFE instruction   
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 8003588:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* Clear PDDS bit in PWR register to specify entering in STOP mode when CPU enter in Deepsleep */ 
  CLEAR_BIT(PWR->CR,  PWR_CR_PDDS);
 800358a:	4a0f      	ldr	r2, [pc, #60]	; (80035c8 <HAL_PWR_EnterSTOPMode+0x40>)
 800358c:	6813      	ldr	r3, [r2, #0]
 800358e:	f023 0302 	bic.w	r3, r3, #2
 8003592:	6013      	str	r3, [r2, #0]

  /* Select the voltage regulator mode by setting LPDS bit in PWR register according to Regulator parameter value */
  MODIFY_REG(PWR->CR, PWR_CR_LPDS, Regulator);
 8003594:	6813      	ldr	r3, [r2, #0]
 8003596:	f023 0301 	bic.w	r3, r3, #1
 800359a:	4318      	orrs	r0, r3
 800359c:	6010      	str	r0, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800359e:	4a0b      	ldr	r2, [pc, #44]	; (80035cc <HAL_PWR_EnterSTOPMode+0x44>)
 80035a0:	6913      	ldr	r3, [r2, #16]
 80035a2:	f043 0304 	orr.w	r3, r3, #4
 80035a6:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 80035a8:	2901      	cmp	r1, #1
 80035aa:	d00a      	beq.n	80035c2 <HAL_PWR_EnterSTOPMode+0x3a>
  __ASM volatile ("sev");
 80035ac:	bf40      	sev
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
    PWR_OverloadWfe(); /* WFE redefine locally */
 80035ae:	f7ff ff59 	bl	8003464 <PWR_OverloadWfe>
    PWR_OverloadWfe(); /* WFE redefine locally */
 80035b2:	f7ff ff57 	bl	8003464 <PWR_OverloadWfe>
  }
  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80035b6:	4a05      	ldr	r2, [pc, #20]	; (80035cc <HAL_PWR_EnterSTOPMode+0x44>)
 80035b8:	6913      	ldr	r3, [r2, #16]
 80035ba:	f023 0304 	bic.w	r3, r3, #4
 80035be:	6113      	str	r3, [r2, #16]
 80035c0:	bd08      	pop	{r3, pc}
  __ASM volatile ("wfi");
 80035c2:	bf30      	wfi
 80035c4:	e7f7      	b.n	80035b6 <HAL_PWR_EnterSTOPMode+0x2e>
 80035c6:	bf00      	nop
 80035c8:	40007000 	.word	0x40007000
 80035cc:	e000ed00 	.word	0xe000ed00

080035d0 <HAL_PWR_EnterSTANDBYMode>:
  * @retval None
  */
void HAL_PWR_EnterSTANDBYMode(void)
{
  /* Select Standby mode */
  SET_BIT(PWR->CR, PWR_CR_PDDS);
 80035d0:	4a05      	ldr	r2, [pc, #20]	; (80035e8 <HAL_PWR_EnterSTANDBYMode+0x18>)
 80035d2:	6813      	ldr	r3, [r2, #0]
 80035d4:	f043 0302 	orr.w	r3, r3, #2
 80035d8:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80035da:	4a04      	ldr	r2, [pc, #16]	; (80035ec <HAL_PWR_EnterSTANDBYMode+0x1c>)
 80035dc:	6913      	ldr	r3, [r2, #16]
 80035de:	f043 0304 	orr.w	r3, r3, #4
 80035e2:	6113      	str	r3, [r2, #16]
 80035e4:	bf30      	wfi
 80035e6:	4770      	bx	lr
 80035e8:	40007000 	.word	0x40007000
 80035ec:	e000ed00 	.word	0xe000ed00

080035f0 <HAL_PWR_EnableSleepOnExit>:
  * @retval None
  */
void HAL_PWR_EnableSleepOnExit(void)
{
  /* Set SLEEPONEXIT bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPONEXIT_Msk));
 80035f0:	4a02      	ldr	r2, [pc, #8]	; (80035fc <HAL_PWR_EnableSleepOnExit+0xc>)
 80035f2:	6913      	ldr	r3, [r2, #16]
 80035f4:	f043 0302 	orr.w	r3, r3, #2
 80035f8:	6113      	str	r3, [r2, #16]
 80035fa:	4770      	bx	lr
 80035fc:	e000ed00 	.word	0xe000ed00

08003600 <HAL_PWR_DisableSleepOnExit>:
  * @retval None
  */
void HAL_PWR_DisableSleepOnExit(void)
{
  /* Clear SLEEPONEXIT bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPONEXIT_Msk));
 8003600:	4a02      	ldr	r2, [pc, #8]	; (800360c <HAL_PWR_DisableSleepOnExit+0xc>)
 8003602:	6913      	ldr	r3, [r2, #16]
 8003604:	f023 0302 	bic.w	r3, r3, #2
 8003608:	6113      	str	r3, [r2, #16]
 800360a:	4770      	bx	lr
 800360c:	e000ed00 	.word	0xe000ed00

08003610 <HAL_PWR_EnableSEVOnPend>:
  * @retval None
  */
void HAL_PWR_EnableSEVOnPend(void)
{
  /* Set SEVONPEND bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SEVONPEND_Msk));
 8003610:	4a02      	ldr	r2, [pc, #8]	; (800361c <HAL_PWR_EnableSEVOnPend+0xc>)
 8003612:	6913      	ldr	r3, [r2, #16]
 8003614:	f043 0310 	orr.w	r3, r3, #16
 8003618:	6113      	str	r3, [r2, #16]
 800361a:	4770      	bx	lr
 800361c:	e000ed00 	.word	0xe000ed00

08003620 <HAL_PWR_DisableSEVOnPend>:
  * @retval None
  */
void HAL_PWR_DisableSEVOnPend(void)
{
  /* Clear SEVONPEND bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SEVONPEND_Msk));
 8003620:	4a02      	ldr	r2, [pc, #8]	; (800362c <HAL_PWR_DisableSEVOnPend+0xc>)
 8003622:	6913      	ldr	r3, [r2, #16]
 8003624:	f023 0310 	bic.w	r3, r3, #16
 8003628:	6113      	str	r3, [r2, #16]
 800362a:	4770      	bx	lr
 800362c:	e000ed00 	.word	0xe000ed00

08003630 <HAL_PWR_PVDCallback>:
/**
  * @brief  PWR PVD interrupt callback
  * @retval None
  */
__weak void HAL_PWR_PVDCallback(void)
{
 8003630:	4770      	bx	lr

08003632 <HAL_PWR_PVD_IRQHandler>:
{
 8003632:	b508      	push	{r3, lr}
  if(__HAL_PWR_PVD_EXTI_GET_FLAG() != RESET)
 8003634:	4b06      	ldr	r3, [pc, #24]	; (8003650 <HAL_PWR_PVD_IRQHandler+0x1e>)
 8003636:	695b      	ldr	r3, [r3, #20]
 8003638:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 800363c:	d100      	bne.n	8003640 <HAL_PWR_PVD_IRQHandler+0xe>
 800363e:	bd08      	pop	{r3, pc}
    HAL_PWR_PVDCallback();
 8003640:	f7ff fff6 	bl	8003630 <HAL_PWR_PVDCallback>
    __HAL_PWR_PVD_EXTI_CLEAR_FLAG();
 8003644:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003648:	4b01      	ldr	r3, [pc, #4]	; (8003650 <HAL_PWR_PVD_IRQHandler+0x1e>)
 800364a:	615a      	str	r2, [r3, #20]
}
 800364c:	e7f7      	b.n	800363e <HAL_PWR_PVD_IRQHandler+0xc>
 800364e:	bf00      	nop
 8003650:	40010400 	.word	0x40010400

08003654 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003654:	b082      	sub	sp, #8
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003656:	4b08      	ldr	r3, [pc, #32]	; (8003678 <RCC_Delay+0x24>)
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	4a08      	ldr	r2, [pc, #32]	; (800367c <RCC_Delay+0x28>)
 800365c:	fba2 2303 	umull	r2, r3, r2, r3
 8003660:	0a5b      	lsrs	r3, r3, #9
 8003662:	fb00 f003 	mul.w	r0, r0, r3
 8003666:	9001      	str	r0, [sp, #4]
  __ASM volatile ("nop");
 8003668:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 800366a:	9b01      	ldr	r3, [sp, #4]
 800366c:	1e5a      	subs	r2, r3, #1
 800366e:	9201      	str	r2, [sp, #4]
 8003670:	2b00      	cmp	r3, #0
 8003672:	d1f9      	bne.n	8003668 <RCC_Delay+0x14>
}
 8003674:	b002      	add	sp, #8
 8003676:	4770      	bx	lr
 8003678:	20000008 	.word	0x20000008
 800367c:	10624dd3 	.word	0x10624dd3

08003680 <HAL_RCC_DeInit>:
{
 8003680:	b570      	push	{r4, r5, r6, lr}
  tickstart = HAL_GetTick();
 8003682:	f7fe fba3 	bl	8001dcc <HAL_GetTick>
 8003686:	4604      	mov	r4, r0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8003688:	4a35      	ldr	r2, [pc, #212]	; (8003760 <HAL_RCC_DeInit+0xe0>)
 800368a:	6813      	ldr	r3, [r2, #0]
 800368c:	f043 0301 	orr.w	r3, r3, #1
 8003690:	6013      	str	r3, [r2, #0]
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8003692:	4b33      	ldr	r3, [pc, #204]	; (8003760 <HAL_RCC_DeInit+0xe0>)
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f013 0f02 	tst.w	r3, #2
 800369a:	d107      	bne.n	80036ac <HAL_RCC_DeInit+0x2c>
    if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800369c:	f7fe fb96 	bl	8001dcc <HAL_GetTick>
 80036a0:	1b00      	subs	r0, r0, r4
 80036a2:	2802      	cmp	r0, #2
 80036a4:	d9f5      	bls.n	8003692 <HAL_RCC_DeInit+0x12>
      return HAL_TIMEOUT;
 80036a6:	2403      	movs	r4, #3
}
 80036a8:	4620      	mov	r0, r4
 80036aa:	bd70      	pop	{r4, r5, r6, pc}
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, (0x10U << RCC_CR_HSITRIM_Pos));
 80036ac:	4d2c      	ldr	r5, [pc, #176]	; (8003760 <HAL_RCC_DeInit+0xe0>)
 80036ae:	682b      	ldr	r3, [r5, #0]
 80036b0:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80036b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80036b8:	602b      	str	r3, [r5, #0]
  tickstart = HAL_GetTick();
 80036ba:	f7fe fb87 	bl	8001dcc <HAL_GetTick>
 80036be:	4604      	mov	r4, r0
  CLEAR_REG(RCC->CFGR);
 80036c0:	2300      	movs	r3, #0
 80036c2:	606b      	str	r3, [r5, #4]
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 80036c4:	4b26      	ldr	r3, [pc, #152]	; (8003760 <HAL_RCC_DeInit+0xe0>)
 80036c6:	685b      	ldr	r3, [r3, #4]
 80036c8:	f013 0f0c 	tst.w	r3, #12
 80036cc:	d008      	beq.n	80036e0 <HAL_RCC_DeInit+0x60>
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80036ce:	f7fe fb7d 	bl	8001dcc <HAL_GetTick>
 80036d2:	1b00      	subs	r0, r0, r4
 80036d4:	f241 3388 	movw	r3, #5000	; 0x1388
 80036d8:	4298      	cmp	r0, r3
 80036da:	d9f3      	bls.n	80036c4 <HAL_RCC_DeInit+0x44>
      return HAL_TIMEOUT;
 80036dc:	2403      	movs	r4, #3
 80036de:	e7e3      	b.n	80036a8 <HAL_RCC_DeInit+0x28>
  SystemCoreClock = HSI_VALUE;
 80036e0:	4a20      	ldr	r2, [pc, #128]	; (8003764 <HAL_RCC_DeInit+0xe4>)
 80036e2:	4b21      	ldr	r3, [pc, #132]	; (8003768 <HAL_RCC_DeInit+0xe8>)
 80036e4:	601a      	str	r2, [r3, #0]
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80036e6:	2000      	movs	r0, #0
 80036e8:	f7fe fb2e 	bl	8001d48 <HAL_InitTick>
 80036ec:	4604      	mov	r4, r0
 80036ee:	b108      	cbz	r0, 80036f4 <HAL_RCC_DeInit+0x74>
    return HAL_ERROR;
 80036f0:	2401      	movs	r4, #1
 80036f2:	e7d9      	b.n	80036a8 <HAL_RCC_DeInit+0x28>
  tickstart = HAL_GetTick();
 80036f4:	f7fe fb6a 	bl	8001dcc <HAL_GetTick>
 80036f8:	4605      	mov	r5, r0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 80036fa:	4a19      	ldr	r2, [pc, #100]	; (8003760 <HAL_RCC_DeInit+0xe0>)
 80036fc:	6813      	ldr	r3, [r2, #0]
 80036fe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003702:	6013      	str	r3, [r2, #0]
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8003704:	4b16      	ldr	r3, [pc, #88]	; (8003760 <HAL_RCC_DeInit+0xe0>)
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800370c:	d006      	beq.n	800371c <HAL_RCC_DeInit+0x9c>
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800370e:	f7fe fb5d 	bl	8001dcc <HAL_GetTick>
 8003712:	1b40      	subs	r0, r0, r5
 8003714:	2802      	cmp	r0, #2
 8003716:	d9f5      	bls.n	8003704 <HAL_RCC_DeInit+0x84>
      return HAL_TIMEOUT;
 8003718:	2403      	movs	r4, #3
 800371a:	e7c5      	b.n	80036a8 <HAL_RCC_DeInit+0x28>
  CLEAR_REG(RCC->CFGR);
 800371c:	4e10      	ldr	r6, [pc, #64]	; (8003760 <HAL_RCC_DeInit+0xe0>)
 800371e:	2300      	movs	r3, #0
 8003720:	6073      	str	r3, [r6, #4]
  tickstart = HAL_GetTick();
 8003722:	f7fe fb53 	bl	8001dcc <HAL_GetTick>
 8003726:	4605      	mov	r5, r0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON | RCC_CR_CSSON);
 8003728:	6833      	ldr	r3, [r6, #0]
 800372a:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 800372e:	6033      	str	r3, [r6, #0]
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 8003730:	4b0b      	ldr	r3, [pc, #44]	; (8003760 <HAL_RCC_DeInit+0xe0>)
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8003738:	d006      	beq.n	8003748 <HAL_RCC_DeInit+0xc8>
    if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800373a:	f7fe fb47 	bl	8001dcc <HAL_GetTick>
 800373e:	1b40      	subs	r0, r0, r5
 8003740:	2864      	cmp	r0, #100	; 0x64
 8003742:	d9f5      	bls.n	8003730 <HAL_RCC_DeInit+0xb0>
      return HAL_TIMEOUT;
 8003744:	2403      	movs	r4, #3
 8003746:	e7af      	b.n	80036a8 <HAL_RCC_DeInit+0x28>
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYP);
 8003748:	4b05      	ldr	r3, [pc, #20]	; (8003760 <HAL_RCC_DeInit+0xe0>)
 800374a:	681a      	ldr	r2, [r3, #0]
 800374c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003750:	601a      	str	r2, [r3, #0]
  SET_BIT(RCC->CSR, RCC_CSR_RMVF);
 8003752:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003754:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8003758:	625a      	str	r2, [r3, #36]	; 0x24
  CLEAR_REG(RCC->CIR);
 800375a:	2200      	movs	r2, #0
 800375c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800375e:	e7a3      	b.n	80036a8 <HAL_RCC_DeInit+0x28>
 8003760:	40021000 	.word	0x40021000
 8003764:	007a1200 	.word	0x007a1200
 8003768:	20000008 	.word	0x20000008

0800376c <HAL_RCC_OscConfig>:
{
 800376c:	b570      	push	{r4, r5, r6, lr}
 800376e:	b082      	sub	sp, #8
 8003770:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003772:	6803      	ldr	r3, [r0, #0]
 8003774:	f013 0f01 	tst.w	r3, #1
 8003778:	d03d      	beq.n	80037f6 <HAL_RCC_OscConfig+0x8a>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800377a:	4bac      	ldr	r3, [pc, #688]	; (8003a2c <HAL_RCC_OscConfig+0x2c0>)
 800377c:	685b      	ldr	r3, [r3, #4]
 800377e:	f003 030c 	and.w	r3, r3, #12
 8003782:	2b04      	cmp	r3, #4
 8003784:	d02e      	beq.n	80037e4 <HAL_RCC_OscConfig+0x78>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003786:	4ba9      	ldr	r3, [pc, #676]	; (8003a2c <HAL_RCC_OscConfig+0x2c0>)
 8003788:	685b      	ldr	r3, [r3, #4]
 800378a:	f003 030c 	and.w	r3, r3, #12
 800378e:	2b08      	cmp	r3, #8
 8003790:	d023      	beq.n	80037da <HAL_RCC_OscConfig+0x6e>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003792:	6863      	ldr	r3, [r4, #4]
 8003794:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003798:	d051      	beq.n	800383e <HAL_RCC_OscConfig+0xd2>
 800379a:	2b00      	cmp	r3, #0
 800379c:	d155      	bne.n	800384a <HAL_RCC_OscConfig+0xde>
 800379e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80037a2:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80037a6:	681a      	ldr	r2, [r3, #0]
 80037a8:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80037ac:	601a      	str	r2, [r3, #0]
 80037ae:	681a      	ldr	r2, [r3, #0]
 80037b0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80037b4:	601a      	str	r2, [r3, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80037b6:	6863      	ldr	r3, [r4, #4]
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d060      	beq.n	800387e <HAL_RCC_OscConfig+0x112>
        tickstart = HAL_GetTick();
 80037bc:	f7fe fb06 	bl	8001dcc <HAL_GetTick>
 80037c0:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037c2:	4b9a      	ldr	r3, [pc, #616]	; (8003a2c <HAL_RCC_OscConfig+0x2c0>)
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80037ca:	d114      	bne.n	80037f6 <HAL_RCC_OscConfig+0x8a>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80037cc:	f7fe fafe 	bl	8001dcc <HAL_GetTick>
 80037d0:	1b40      	subs	r0, r0, r5
 80037d2:	2864      	cmp	r0, #100	; 0x64
 80037d4:	d9f5      	bls.n	80037c2 <HAL_RCC_OscConfig+0x56>
            return HAL_TIMEOUT;
 80037d6:	2003      	movs	r0, #3
 80037d8:	e1af      	b.n	8003b3a <HAL_RCC_OscConfig+0x3ce>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80037da:	4b94      	ldr	r3, [pc, #592]	; (8003a2c <HAL_RCC_OscConfig+0x2c0>)
 80037dc:	685b      	ldr	r3, [r3, #4]
 80037de:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80037e2:	d0d6      	beq.n	8003792 <HAL_RCC_OscConfig+0x26>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037e4:	4b91      	ldr	r3, [pc, #580]	; (8003a2c <HAL_RCC_OscConfig+0x2c0>)
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80037ec:	d003      	beq.n	80037f6 <HAL_RCC_OscConfig+0x8a>
 80037ee:	6863      	ldr	r3, [r4, #4]
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	f000 819f 	beq.w	8003b34 <HAL_RCC_OscConfig+0x3c8>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80037f6:	6823      	ldr	r3, [r4, #0]
 80037f8:	f013 0f02 	tst.w	r3, #2
 80037fc:	d065      	beq.n	80038ca <HAL_RCC_OscConfig+0x15e>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80037fe:	4b8b      	ldr	r3, [pc, #556]	; (8003a2c <HAL_RCC_OscConfig+0x2c0>)
 8003800:	685b      	ldr	r3, [r3, #4]
 8003802:	f013 0f0c 	tst.w	r3, #12
 8003806:	d04e      	beq.n	80038a6 <HAL_RCC_OscConfig+0x13a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003808:	4b88      	ldr	r3, [pc, #544]	; (8003a2c <HAL_RCC_OscConfig+0x2c0>)
 800380a:	685b      	ldr	r3, [r3, #4]
 800380c:	f003 030c 	and.w	r3, r3, #12
 8003810:	2b08      	cmp	r3, #8
 8003812:	d043      	beq.n	800389c <HAL_RCC_OscConfig+0x130>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003814:	6923      	ldr	r3, [r4, #16]
 8003816:	2b00      	cmp	r3, #0
 8003818:	d079      	beq.n	800390e <HAL_RCC_OscConfig+0x1a2>
        __HAL_RCC_HSI_ENABLE();
 800381a:	2201      	movs	r2, #1
 800381c:	4b84      	ldr	r3, [pc, #528]	; (8003a30 <HAL_RCC_OscConfig+0x2c4>)
 800381e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8003820:	f7fe fad4 	bl	8001dcc <HAL_GetTick>
 8003824:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003826:	4b81      	ldr	r3, [pc, #516]	; (8003a2c <HAL_RCC_OscConfig+0x2c0>)
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f013 0f02 	tst.w	r3, #2
 800382e:	d165      	bne.n	80038fc <HAL_RCC_OscConfig+0x190>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003830:	f7fe facc 	bl	8001dcc <HAL_GetTick>
 8003834:	1b40      	subs	r0, r0, r5
 8003836:	2802      	cmp	r0, #2
 8003838:	d9f5      	bls.n	8003826 <HAL_RCC_OscConfig+0xba>
            return HAL_TIMEOUT;
 800383a:	2003      	movs	r0, #3
 800383c:	e17d      	b.n	8003b3a <HAL_RCC_OscConfig+0x3ce>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800383e:	4a7b      	ldr	r2, [pc, #492]	; (8003a2c <HAL_RCC_OscConfig+0x2c0>)
 8003840:	6813      	ldr	r3, [r2, #0]
 8003842:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003846:	6013      	str	r3, [r2, #0]
 8003848:	e7b5      	b.n	80037b6 <HAL_RCC_OscConfig+0x4a>
 800384a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800384e:	d009      	beq.n	8003864 <HAL_RCC_OscConfig+0xf8>
 8003850:	4b76      	ldr	r3, [pc, #472]	; (8003a2c <HAL_RCC_OscConfig+0x2c0>)
 8003852:	681a      	ldr	r2, [r3, #0]
 8003854:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003858:	601a      	str	r2, [r3, #0]
 800385a:	681a      	ldr	r2, [r3, #0]
 800385c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003860:	601a      	str	r2, [r3, #0]
 8003862:	e7a8      	b.n	80037b6 <HAL_RCC_OscConfig+0x4a>
 8003864:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003868:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 800386c:	681a      	ldr	r2, [r3, #0]
 800386e:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8003872:	601a      	str	r2, [r3, #0]
 8003874:	681a      	ldr	r2, [r3, #0]
 8003876:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800387a:	601a      	str	r2, [r3, #0]
 800387c:	e79b      	b.n	80037b6 <HAL_RCC_OscConfig+0x4a>
        tickstart = HAL_GetTick();
 800387e:	f7fe faa5 	bl	8001dcc <HAL_GetTick>
 8003882:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003884:	4b69      	ldr	r3, [pc, #420]	; (8003a2c <HAL_RCC_OscConfig+0x2c0>)
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800388c:	d0b3      	beq.n	80037f6 <HAL_RCC_OscConfig+0x8a>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800388e:	f7fe fa9d 	bl	8001dcc <HAL_GetTick>
 8003892:	1b40      	subs	r0, r0, r5
 8003894:	2864      	cmp	r0, #100	; 0x64
 8003896:	d9f5      	bls.n	8003884 <HAL_RCC_OscConfig+0x118>
            return HAL_TIMEOUT;
 8003898:	2003      	movs	r0, #3
 800389a:	e14e      	b.n	8003b3a <HAL_RCC_OscConfig+0x3ce>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800389c:	4b63      	ldr	r3, [pc, #396]	; (8003a2c <HAL_RCC_OscConfig+0x2c0>)
 800389e:	685b      	ldr	r3, [r3, #4]
 80038a0:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80038a4:	d1b6      	bne.n	8003814 <HAL_RCC_OscConfig+0xa8>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80038a6:	4b61      	ldr	r3, [pc, #388]	; (8003a2c <HAL_RCC_OscConfig+0x2c0>)
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f013 0f02 	tst.w	r3, #2
 80038ae:	d004      	beq.n	80038ba <HAL_RCC_OscConfig+0x14e>
 80038b0:	6923      	ldr	r3, [r4, #16]
 80038b2:	2b01      	cmp	r3, #1
 80038b4:	d001      	beq.n	80038ba <HAL_RCC_OscConfig+0x14e>
        return HAL_ERROR;
 80038b6:	2001      	movs	r0, #1
 80038b8:	e13f      	b.n	8003b3a <HAL_RCC_OscConfig+0x3ce>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038ba:	4a5c      	ldr	r2, [pc, #368]	; (8003a2c <HAL_RCC_OscConfig+0x2c0>)
 80038bc:	6813      	ldr	r3, [r2, #0]
 80038be:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80038c2:	6961      	ldr	r1, [r4, #20]
 80038c4:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80038c8:	6013      	str	r3, [r2, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80038ca:	6823      	ldr	r3, [r4, #0]
 80038cc:	f013 0f08 	tst.w	r3, #8
 80038d0:	d032      	beq.n	8003938 <HAL_RCC_OscConfig+0x1cc>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80038d2:	69a3      	ldr	r3, [r4, #24]
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d06e      	beq.n	80039b6 <HAL_RCC_OscConfig+0x24a>
      __HAL_RCC_LSI_ENABLE();
 80038d8:	2201      	movs	r2, #1
 80038da:	4b56      	ldr	r3, [pc, #344]	; (8003a34 <HAL_RCC_OscConfig+0x2c8>)
 80038dc:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80038de:	f7fe fa75 	bl	8001dcc <HAL_GetTick>
 80038e2:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80038e4:	4b51      	ldr	r3, [pc, #324]	; (8003a2c <HAL_RCC_OscConfig+0x2c0>)
 80038e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038e8:	f013 0f02 	tst.w	r3, #2
 80038ec:	d121      	bne.n	8003932 <HAL_RCC_OscConfig+0x1c6>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80038ee:	f7fe fa6d 	bl	8001dcc <HAL_GetTick>
 80038f2:	1b40      	subs	r0, r0, r5
 80038f4:	2802      	cmp	r0, #2
 80038f6:	d9f5      	bls.n	80038e4 <HAL_RCC_OscConfig+0x178>
          return HAL_TIMEOUT;
 80038f8:	2003      	movs	r0, #3
 80038fa:	e11e      	b.n	8003b3a <HAL_RCC_OscConfig+0x3ce>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038fc:	4a4b      	ldr	r2, [pc, #300]	; (8003a2c <HAL_RCC_OscConfig+0x2c0>)
 80038fe:	6813      	ldr	r3, [r2, #0]
 8003900:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8003904:	6961      	ldr	r1, [r4, #20]
 8003906:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800390a:	6013      	str	r3, [r2, #0]
 800390c:	e7dd      	b.n	80038ca <HAL_RCC_OscConfig+0x15e>
        __HAL_RCC_HSI_DISABLE();
 800390e:	2200      	movs	r2, #0
 8003910:	4b47      	ldr	r3, [pc, #284]	; (8003a30 <HAL_RCC_OscConfig+0x2c4>)
 8003912:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8003914:	f7fe fa5a 	bl	8001dcc <HAL_GetTick>
 8003918:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800391a:	4b44      	ldr	r3, [pc, #272]	; (8003a2c <HAL_RCC_OscConfig+0x2c0>)
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f013 0f02 	tst.w	r3, #2
 8003922:	d0d2      	beq.n	80038ca <HAL_RCC_OscConfig+0x15e>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003924:	f7fe fa52 	bl	8001dcc <HAL_GetTick>
 8003928:	1b40      	subs	r0, r0, r5
 800392a:	2802      	cmp	r0, #2
 800392c:	d9f5      	bls.n	800391a <HAL_RCC_OscConfig+0x1ae>
            return HAL_TIMEOUT;
 800392e:	2003      	movs	r0, #3
 8003930:	e103      	b.n	8003b3a <HAL_RCC_OscConfig+0x3ce>
      RCC_Delay(1);
 8003932:	2001      	movs	r0, #1
 8003934:	f7ff fe8e 	bl	8003654 <RCC_Delay>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003938:	6823      	ldr	r3, [r4, #0]
 800393a:	f013 0f04 	tst.w	r3, #4
 800393e:	f000 8099 	beq.w	8003a74 <HAL_RCC_OscConfig+0x308>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003942:	4b3a      	ldr	r3, [pc, #232]	; (8003a2c <HAL_RCC_OscConfig+0x2c0>)
 8003944:	69db      	ldr	r3, [r3, #28]
 8003946:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 800394a:	d146      	bne.n	80039da <HAL_RCC_OscConfig+0x26e>
      __HAL_RCC_PWR_CLK_ENABLE();
 800394c:	4b37      	ldr	r3, [pc, #220]	; (8003a2c <HAL_RCC_OscConfig+0x2c0>)
 800394e:	69da      	ldr	r2, [r3, #28]
 8003950:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003954:	61da      	str	r2, [r3, #28]
 8003956:	69db      	ldr	r3, [r3, #28]
 8003958:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800395c:	9301      	str	r3, [sp, #4]
 800395e:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8003960:	2501      	movs	r5, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003962:	4b35      	ldr	r3, [pc, #212]	; (8003a38 <HAL_RCC_OscConfig+0x2cc>)
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f413 7f80 	tst.w	r3, #256	; 0x100
 800396a:	d038      	beq.n	80039de <HAL_RCC_OscConfig+0x272>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800396c:	68e3      	ldr	r3, [r4, #12]
 800396e:	2b01      	cmp	r3, #1
 8003970:	d049      	beq.n	8003a06 <HAL_RCC_OscConfig+0x29a>
 8003972:	2b00      	cmp	r3, #0
 8003974:	d14d      	bne.n	8003a12 <HAL_RCC_OscConfig+0x2a6>
 8003976:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800397a:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 800397e:	6a1a      	ldr	r2, [r3, #32]
 8003980:	f022 0201 	bic.w	r2, r2, #1
 8003984:	621a      	str	r2, [r3, #32]
 8003986:	6a1a      	ldr	r2, [r3, #32]
 8003988:	f022 0204 	bic.w	r2, r2, #4
 800398c:	621a      	str	r2, [r3, #32]
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800398e:	68e3      	ldr	r3, [r4, #12]
 8003990:	2b00      	cmp	r3, #0
 8003992:	d05d      	beq.n	8003a50 <HAL_RCC_OscConfig+0x2e4>
      tickstart = HAL_GetTick();
 8003994:	f7fe fa1a 	bl	8001dcc <HAL_GetTick>
 8003998:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800399a:	4b24      	ldr	r3, [pc, #144]	; (8003a2c <HAL_RCC_OscConfig+0x2c0>)
 800399c:	6a1b      	ldr	r3, [r3, #32]
 800399e:	f013 0f02 	tst.w	r3, #2
 80039a2:	d166      	bne.n	8003a72 <HAL_RCC_OscConfig+0x306>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80039a4:	f7fe fa12 	bl	8001dcc <HAL_GetTick>
 80039a8:	1b80      	subs	r0, r0, r6
 80039aa:	f241 3388 	movw	r3, #5000	; 0x1388
 80039ae:	4298      	cmp	r0, r3
 80039b0:	d9f3      	bls.n	800399a <HAL_RCC_OscConfig+0x22e>
          return HAL_TIMEOUT;
 80039b2:	2003      	movs	r0, #3
 80039b4:	e0c1      	b.n	8003b3a <HAL_RCC_OscConfig+0x3ce>
      __HAL_RCC_LSI_DISABLE();
 80039b6:	2200      	movs	r2, #0
 80039b8:	4b1e      	ldr	r3, [pc, #120]	; (8003a34 <HAL_RCC_OscConfig+0x2c8>)
 80039ba:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80039bc:	f7fe fa06 	bl	8001dcc <HAL_GetTick>
 80039c0:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80039c2:	4b1a      	ldr	r3, [pc, #104]	; (8003a2c <HAL_RCC_OscConfig+0x2c0>)
 80039c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039c6:	f013 0f02 	tst.w	r3, #2
 80039ca:	d0b5      	beq.n	8003938 <HAL_RCC_OscConfig+0x1cc>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80039cc:	f7fe f9fe 	bl	8001dcc <HAL_GetTick>
 80039d0:	1b40      	subs	r0, r0, r5
 80039d2:	2802      	cmp	r0, #2
 80039d4:	d9f5      	bls.n	80039c2 <HAL_RCC_OscConfig+0x256>
          return HAL_TIMEOUT;
 80039d6:	2003      	movs	r0, #3
 80039d8:	e0af      	b.n	8003b3a <HAL_RCC_OscConfig+0x3ce>
    FlagStatus       pwrclkchanged = RESET;
 80039da:	2500      	movs	r5, #0
 80039dc:	e7c1      	b.n	8003962 <HAL_RCC_OscConfig+0x1f6>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80039de:	4a16      	ldr	r2, [pc, #88]	; (8003a38 <HAL_RCC_OscConfig+0x2cc>)
 80039e0:	6813      	ldr	r3, [r2, #0]
 80039e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039e6:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 80039e8:	f7fe f9f0 	bl	8001dcc <HAL_GetTick>
 80039ec:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039ee:	4b12      	ldr	r3, [pc, #72]	; (8003a38 <HAL_RCC_OscConfig+0x2cc>)
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f413 7f80 	tst.w	r3, #256	; 0x100
 80039f6:	d1b9      	bne.n	800396c <HAL_RCC_OscConfig+0x200>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80039f8:	f7fe f9e8 	bl	8001dcc <HAL_GetTick>
 80039fc:	1b80      	subs	r0, r0, r6
 80039fe:	2864      	cmp	r0, #100	; 0x64
 8003a00:	d9f5      	bls.n	80039ee <HAL_RCC_OscConfig+0x282>
          return HAL_TIMEOUT;
 8003a02:	2003      	movs	r0, #3
 8003a04:	e099      	b.n	8003b3a <HAL_RCC_OscConfig+0x3ce>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a06:	4a09      	ldr	r2, [pc, #36]	; (8003a2c <HAL_RCC_OscConfig+0x2c0>)
 8003a08:	6a13      	ldr	r3, [r2, #32]
 8003a0a:	f043 0301 	orr.w	r3, r3, #1
 8003a0e:	6213      	str	r3, [r2, #32]
 8003a10:	e7bd      	b.n	800398e <HAL_RCC_OscConfig+0x222>
 8003a12:	2b05      	cmp	r3, #5
 8003a14:	d012      	beq.n	8003a3c <HAL_RCC_OscConfig+0x2d0>
 8003a16:	4b05      	ldr	r3, [pc, #20]	; (8003a2c <HAL_RCC_OscConfig+0x2c0>)
 8003a18:	6a1a      	ldr	r2, [r3, #32]
 8003a1a:	f022 0201 	bic.w	r2, r2, #1
 8003a1e:	621a      	str	r2, [r3, #32]
 8003a20:	6a1a      	ldr	r2, [r3, #32]
 8003a22:	f022 0204 	bic.w	r2, r2, #4
 8003a26:	621a      	str	r2, [r3, #32]
 8003a28:	e7b1      	b.n	800398e <HAL_RCC_OscConfig+0x222>
 8003a2a:	bf00      	nop
 8003a2c:	40021000 	.word	0x40021000
 8003a30:	42420000 	.word	0x42420000
 8003a34:	42420480 	.word	0x42420480
 8003a38:	40007000 	.word	0x40007000
 8003a3c:	4b41      	ldr	r3, [pc, #260]	; (8003b44 <HAL_RCC_OscConfig+0x3d8>)
 8003a3e:	6a1a      	ldr	r2, [r3, #32]
 8003a40:	f042 0204 	orr.w	r2, r2, #4
 8003a44:	621a      	str	r2, [r3, #32]
 8003a46:	6a1a      	ldr	r2, [r3, #32]
 8003a48:	f042 0201 	orr.w	r2, r2, #1
 8003a4c:	621a      	str	r2, [r3, #32]
 8003a4e:	e79e      	b.n	800398e <HAL_RCC_OscConfig+0x222>
      tickstart = HAL_GetTick();
 8003a50:	f7fe f9bc 	bl	8001dcc <HAL_GetTick>
 8003a54:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a56:	4b3b      	ldr	r3, [pc, #236]	; (8003b44 <HAL_RCC_OscConfig+0x3d8>)
 8003a58:	6a1b      	ldr	r3, [r3, #32]
 8003a5a:	f013 0f02 	tst.w	r3, #2
 8003a5e:	d008      	beq.n	8003a72 <HAL_RCC_OscConfig+0x306>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a60:	f7fe f9b4 	bl	8001dcc <HAL_GetTick>
 8003a64:	1b80      	subs	r0, r0, r6
 8003a66:	f241 3388 	movw	r3, #5000	; 0x1388
 8003a6a:	4298      	cmp	r0, r3
 8003a6c:	d9f3      	bls.n	8003a56 <HAL_RCC_OscConfig+0x2ea>
          return HAL_TIMEOUT;
 8003a6e:	2003      	movs	r0, #3
 8003a70:	e063      	b.n	8003b3a <HAL_RCC_OscConfig+0x3ce>
    if(pwrclkchanged == SET)
 8003a72:	b9e5      	cbnz	r5, 8003aae <HAL_RCC_OscConfig+0x342>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003a74:	69e3      	ldr	r3, [r4, #28]
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d05e      	beq.n	8003b38 <HAL_RCC_OscConfig+0x3cc>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003a7a:	4a32      	ldr	r2, [pc, #200]	; (8003b44 <HAL_RCC_OscConfig+0x3d8>)
 8003a7c:	6852      	ldr	r2, [r2, #4]
 8003a7e:	f002 020c 	and.w	r2, r2, #12
 8003a82:	2a08      	cmp	r2, #8
 8003a84:	d05b      	beq.n	8003b3e <HAL_RCC_OscConfig+0x3d2>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003a86:	2b02      	cmp	r3, #2
 8003a88:	d017      	beq.n	8003aba <HAL_RCC_OscConfig+0x34e>
        __HAL_RCC_PLL_DISABLE();
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	4b2e      	ldr	r3, [pc, #184]	; (8003b48 <HAL_RCC_OscConfig+0x3dc>)
 8003a8e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8003a90:	f7fe f99c 	bl	8001dcc <HAL_GetTick>
 8003a94:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003a96:	4b2b      	ldr	r3, [pc, #172]	; (8003b44 <HAL_RCC_OscConfig+0x3d8>)
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8003a9e:	d047      	beq.n	8003b30 <HAL_RCC_OscConfig+0x3c4>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003aa0:	f7fe f994 	bl	8001dcc <HAL_GetTick>
 8003aa4:	1b00      	subs	r0, r0, r4
 8003aa6:	2802      	cmp	r0, #2
 8003aa8:	d9f5      	bls.n	8003a96 <HAL_RCC_OscConfig+0x32a>
            return HAL_TIMEOUT;
 8003aaa:	2003      	movs	r0, #3
 8003aac:	e045      	b.n	8003b3a <HAL_RCC_OscConfig+0x3ce>
      __HAL_RCC_PWR_CLK_DISABLE();
 8003aae:	4a25      	ldr	r2, [pc, #148]	; (8003b44 <HAL_RCC_OscConfig+0x3d8>)
 8003ab0:	69d3      	ldr	r3, [r2, #28]
 8003ab2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ab6:	61d3      	str	r3, [r2, #28]
 8003ab8:	e7dc      	b.n	8003a74 <HAL_RCC_OscConfig+0x308>
        __HAL_RCC_PLL_DISABLE();
 8003aba:	2200      	movs	r2, #0
 8003abc:	4b22      	ldr	r3, [pc, #136]	; (8003b48 <HAL_RCC_OscConfig+0x3dc>)
 8003abe:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8003ac0:	f7fe f984 	bl	8001dcc <HAL_GetTick>
 8003ac4:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003ac6:	4b1f      	ldr	r3, [pc, #124]	; (8003b44 <HAL_RCC_OscConfig+0x3d8>)
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8003ace:	d006      	beq.n	8003ade <HAL_RCC_OscConfig+0x372>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ad0:	f7fe f97c 	bl	8001dcc <HAL_GetTick>
 8003ad4:	1b40      	subs	r0, r0, r5
 8003ad6:	2802      	cmp	r0, #2
 8003ad8:	d9f5      	bls.n	8003ac6 <HAL_RCC_OscConfig+0x35a>
            return HAL_TIMEOUT;
 8003ada:	2003      	movs	r0, #3
 8003adc:	e02d      	b.n	8003b3a <HAL_RCC_OscConfig+0x3ce>
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003ade:	6a23      	ldr	r3, [r4, #32]
 8003ae0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ae4:	d01a      	beq.n	8003b1c <HAL_RCC_OscConfig+0x3b0>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003ae6:	4917      	ldr	r1, [pc, #92]	; (8003b44 <HAL_RCC_OscConfig+0x3d8>)
 8003ae8:	684b      	ldr	r3, [r1, #4]
 8003aea:	f423 1374 	bic.w	r3, r3, #3997696	; 0x3d0000
 8003aee:	6a22      	ldr	r2, [r4, #32]
 8003af0:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8003af2:	4302      	orrs	r2, r0
 8003af4:	4313      	orrs	r3, r2
 8003af6:	604b      	str	r3, [r1, #4]
        __HAL_RCC_PLL_ENABLE();
 8003af8:	2201      	movs	r2, #1
 8003afa:	4b13      	ldr	r3, [pc, #76]	; (8003b48 <HAL_RCC_OscConfig+0x3dc>)
 8003afc:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8003afe:	f7fe f965 	bl	8001dcc <HAL_GetTick>
 8003b02:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003b04:	4b0f      	ldr	r3, [pc, #60]	; (8003b44 <HAL_RCC_OscConfig+0x3d8>)
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8003b0c:	d10e      	bne.n	8003b2c <HAL_RCC_OscConfig+0x3c0>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b0e:	f7fe f95d 	bl	8001dcc <HAL_GetTick>
 8003b12:	1b00      	subs	r0, r0, r4
 8003b14:	2802      	cmp	r0, #2
 8003b16:	d9f5      	bls.n	8003b04 <HAL_RCC_OscConfig+0x398>
            return HAL_TIMEOUT;
 8003b18:	2003      	movs	r0, #3
 8003b1a:	e00e      	b.n	8003b3a <HAL_RCC_OscConfig+0x3ce>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003b1c:	4a09      	ldr	r2, [pc, #36]	; (8003b44 <HAL_RCC_OscConfig+0x3d8>)
 8003b1e:	6853      	ldr	r3, [r2, #4]
 8003b20:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8003b24:	68a1      	ldr	r1, [r4, #8]
 8003b26:	430b      	orrs	r3, r1
 8003b28:	6053      	str	r3, [r2, #4]
 8003b2a:	e7dc      	b.n	8003ae6 <HAL_RCC_OscConfig+0x37a>
  return HAL_OK;
 8003b2c:	2000      	movs	r0, #0
 8003b2e:	e004      	b.n	8003b3a <HAL_RCC_OscConfig+0x3ce>
 8003b30:	2000      	movs	r0, #0
 8003b32:	e002      	b.n	8003b3a <HAL_RCC_OscConfig+0x3ce>
        return HAL_ERROR;
 8003b34:	2001      	movs	r0, #1
 8003b36:	e000      	b.n	8003b3a <HAL_RCC_OscConfig+0x3ce>
  return HAL_OK;
 8003b38:	2000      	movs	r0, #0
}
 8003b3a:	b002      	add	sp, #8
 8003b3c:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8003b3e:	2001      	movs	r0, #1
 8003b40:	e7fb      	b.n	8003b3a <HAL_RCC_OscConfig+0x3ce>
 8003b42:	bf00      	nop
 8003b44:	40021000 	.word	0x40021000
 8003b48:	42420060 	.word	0x42420060

08003b4c <HAL_RCC_MCOConfig>:
{
 8003b4c:	b530      	push	{r4, r5, lr}
 8003b4e:	b087      	sub	sp, #28
 8003b50:	460d      	mov	r5, r1
  GPIO_InitTypeDef gpio = {0U};
 8003b52:	2300      	movs	r3, #0
 8003b54:	9304      	str	r3, [sp, #16]
  gpio.Mode      = GPIO_MODE_AF_PP;
 8003b56:	2302      	movs	r3, #2
 8003b58:	9303      	str	r3, [sp, #12]
  gpio.Speed     = GPIO_SPEED_FREQ_HIGH;
 8003b5a:	2303      	movs	r3, #3
 8003b5c:	9305      	str	r3, [sp, #20]
  gpio.Pin       = MCO1_PIN;
 8003b5e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003b62:	9302      	str	r3, [sp, #8]
  MCO1_CLK_ENABLE();
 8003b64:	4c0a      	ldr	r4, [pc, #40]	; (8003b90 <HAL_RCC_MCOConfig+0x44>)
 8003b66:	69a3      	ldr	r3, [r4, #24]
 8003b68:	f043 0304 	orr.w	r3, r3, #4
 8003b6c:	61a3      	str	r3, [r4, #24]
 8003b6e:	69a3      	ldr	r3, [r4, #24]
 8003b70:	f003 0304 	and.w	r3, r3, #4
 8003b74:	9301      	str	r3, [sp, #4]
 8003b76:	9b01      	ldr	r3, [sp, #4]
  HAL_GPIO_Init(MCO1_GPIO_PORT, &gpio);
 8003b78:	a902      	add	r1, sp, #8
 8003b7a:	4806      	ldr	r0, [pc, #24]	; (8003b94 <HAL_RCC_MCOConfig+0x48>)
 8003b7c:	f7ff fab4 	bl	80030e8 <HAL_GPIO_Init>
  __HAL_RCC_MCO1_CONFIG(RCC_MCOSource, RCC_MCODiv);
 8003b80:	6861      	ldr	r1, [r4, #4]
 8003b82:	f021 61e0 	bic.w	r1, r1, #117440512	; 0x7000000
 8003b86:	4329      	orrs	r1, r5
 8003b88:	6061      	str	r1, [r4, #4]
}
 8003b8a:	b007      	add	sp, #28
 8003b8c:	bd30      	pop	{r4, r5, pc}
 8003b8e:	bf00      	nop
 8003b90:	40021000 	.word	0x40021000
 8003b94:	40010800 	.word	0x40010800

08003b98 <HAL_RCC_EnableCSS>:
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 8003b98:	2201      	movs	r2, #1
 8003b9a:	4b01      	ldr	r3, [pc, #4]	; (8003ba0 <HAL_RCC_EnableCSS+0x8>)
 8003b9c:	601a      	str	r2, [r3, #0]
 8003b9e:	4770      	bx	lr
 8003ba0:	4242004c 	.word	0x4242004c

08003ba4 <HAL_RCC_DisableCSS>:
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)DISABLE;
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	4b01      	ldr	r3, [pc, #4]	; (8003bac <HAL_RCC_DisableCSS+0x8>)
 8003ba8:	601a      	str	r2, [r3, #0]
 8003baa:	4770      	bx	lr
 8003bac:	4242004c 	.word	0x4242004c

08003bb0 <HAL_RCC_GetSysClockFreq>:
{
 8003bb0:	b510      	push	{r4, lr}
 8003bb2:	b086      	sub	sp, #24
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003bb4:	4c15      	ldr	r4, [pc, #84]	; (8003c0c <HAL_RCC_GetSysClockFreq+0x5c>)
 8003bb6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8003bba:	f10d 0e18 	add.w	lr, sp, #24
 8003bbe:	e90e 000f 	stmdb	lr, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003bc2:	8a23      	ldrh	r3, [r4, #16]
 8003bc4:	f8ad 3004 	strh.w	r3, [sp, #4]
  tmpreg = RCC->CFGR;
 8003bc8:	4b11      	ldr	r3, [pc, #68]	; (8003c10 <HAL_RCC_GetSysClockFreq+0x60>)
 8003bca:	685b      	ldr	r3, [r3, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8003bcc:	f003 020c 	and.w	r2, r3, #12
 8003bd0:	2a08      	cmp	r2, #8
 8003bd2:	d118      	bne.n	8003c06 <HAL_RCC_GetSysClockFreq+0x56>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003bd4:	f3c3 4283 	ubfx	r2, r3, #18, #4
 8003bd8:	4472      	add	r2, lr
 8003bda:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003bde:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8003be2:	d103      	bne.n	8003bec <HAL_RCC_GetSysClockFreq+0x3c>
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003be4:	480b      	ldr	r0, [pc, #44]	; (8003c14 <HAL_RCC_GetSysClockFreq+0x64>)
 8003be6:	fb00 f002 	mul.w	r0, r0, r2
 8003bea:	e00d      	b.n	8003c08 <HAL_RCC_GetSysClockFreq+0x58>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003bec:	4b08      	ldr	r3, [pc, #32]	; (8003c10 <HAL_RCC_GetSysClockFreq+0x60>)
 8003bee:	685b      	ldr	r3, [r3, #4]
 8003bf0:	f3c3 4340 	ubfx	r3, r3, #17, #1
 8003bf4:	4473      	add	r3, lr
 8003bf6:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003bfa:	4807      	ldr	r0, [pc, #28]	; (8003c18 <HAL_RCC_GetSysClockFreq+0x68>)
 8003bfc:	fb00 f002 	mul.w	r0, r0, r2
 8003c00:	fbb0 f0f3 	udiv	r0, r0, r3
 8003c04:	e000      	b.n	8003c08 <HAL_RCC_GetSysClockFreq+0x58>
      sysclockfreq = HSE_VALUE;
 8003c06:	4804      	ldr	r0, [pc, #16]	; (8003c18 <HAL_RCC_GetSysClockFreq+0x68>)
}
 8003c08:	b006      	add	sp, #24
 8003c0a:	bd10      	pop	{r4, pc}
 8003c0c:	0800bcdc 	.word	0x0800bcdc
 8003c10:	40021000 	.word	0x40021000
 8003c14:	003d0900 	.word	0x003d0900
 8003c18:	007a1200 	.word	0x007a1200

08003c1c <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8003c1c:	4b59      	ldr	r3, [pc, #356]	; (8003d84 <HAL_RCC_ClockConfig+0x168>)
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f003 0307 	and.w	r3, r3, #7
 8003c24:	428b      	cmp	r3, r1
 8003c26:	d20c      	bcs.n	8003c42 <HAL_RCC_ClockConfig+0x26>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c28:	4a56      	ldr	r2, [pc, #344]	; (8003d84 <HAL_RCC_ClockConfig+0x168>)
 8003c2a:	6813      	ldr	r3, [r2, #0]
 8003c2c:	f023 0307 	bic.w	r3, r3, #7
 8003c30:	430b      	orrs	r3, r1
 8003c32:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003c34:	6813      	ldr	r3, [r2, #0]
 8003c36:	f003 0307 	and.w	r3, r3, #7
 8003c3a:	4299      	cmp	r1, r3
 8003c3c:	d001      	beq.n	8003c42 <HAL_RCC_ClockConfig+0x26>
      return HAL_ERROR;
 8003c3e:	2001      	movs	r0, #1
 8003c40:	4770      	bx	lr
{
 8003c42:	b570      	push	{r4, r5, r6, lr}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c44:	6803      	ldr	r3, [r0, #0]
 8003c46:	f013 0f02 	tst.w	r3, #2
 8003c4a:	d006      	beq.n	8003c5a <HAL_RCC_ClockConfig+0x3e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c4c:	4a4e      	ldr	r2, [pc, #312]	; (8003d88 <HAL_RCC_ClockConfig+0x16c>)
 8003c4e:	6853      	ldr	r3, [r2, #4]
 8003c50:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003c54:	6884      	ldr	r4, [r0, #8]
 8003c56:	4323      	orrs	r3, r4
 8003c58:	6053      	str	r3, [r2, #4]
 8003c5a:	460d      	mov	r5, r1
 8003c5c:	4604      	mov	r4, r0
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c5e:	6803      	ldr	r3, [r0, #0]
 8003c60:	f013 0f01 	tst.w	r3, #1
 8003c64:	d052      	beq.n	8003d0c <HAL_RCC_ClockConfig+0xf0>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c66:	6843      	ldr	r3, [r0, #4]
 8003c68:	2b01      	cmp	r3, #1
 8003c6a:	d023      	beq.n	8003cb4 <HAL_RCC_ClockConfig+0x98>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003c6c:	2b02      	cmp	r3, #2
 8003c6e:	d028      	beq.n	8003cc2 <HAL_RCC_ClockConfig+0xa6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c70:	4a45      	ldr	r2, [pc, #276]	; (8003d88 <HAL_RCC_ClockConfig+0x16c>)
 8003c72:	6812      	ldr	r2, [r2, #0]
 8003c74:	f012 0f02 	tst.w	r2, #2
 8003c78:	f000 8082 	beq.w	8003d80 <HAL_RCC_ClockConfig+0x164>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003c7c:	4942      	ldr	r1, [pc, #264]	; (8003d88 <HAL_RCC_ClockConfig+0x16c>)
 8003c7e:	684a      	ldr	r2, [r1, #4]
 8003c80:	f022 0203 	bic.w	r2, r2, #3
 8003c84:	4313      	orrs	r3, r2
 8003c86:	604b      	str	r3, [r1, #4]
    tickstart = HAL_GetTick();
 8003c88:	f7fe f8a0 	bl	8001dcc <HAL_GetTick>
 8003c8c:	4606      	mov	r6, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c8e:	6863      	ldr	r3, [r4, #4]
 8003c90:	2b01      	cmp	r3, #1
 8003c92:	d01d      	beq.n	8003cd0 <HAL_RCC_ClockConfig+0xb4>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003c94:	2b02      	cmp	r3, #2
 8003c96:	d02a      	beq.n	8003cee <HAL_RCC_ClockConfig+0xd2>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003c98:	4b3b      	ldr	r3, [pc, #236]	; (8003d88 <HAL_RCC_ClockConfig+0x16c>)
 8003c9a:	685b      	ldr	r3, [r3, #4]
 8003c9c:	f013 0f0c 	tst.w	r3, #12
 8003ca0:	d034      	beq.n	8003d0c <HAL_RCC_ClockConfig+0xf0>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ca2:	f7fe f893 	bl	8001dcc <HAL_GetTick>
 8003ca6:	1b80      	subs	r0, r0, r6
 8003ca8:	f241 3388 	movw	r3, #5000	; 0x1388
 8003cac:	4298      	cmp	r0, r3
 8003cae:	d9f3      	bls.n	8003c98 <HAL_RCC_ClockConfig+0x7c>
          return HAL_TIMEOUT;
 8003cb0:	2003      	movs	r0, #3
 8003cb2:	bd70      	pop	{r4, r5, r6, pc}
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003cb4:	4a34      	ldr	r2, [pc, #208]	; (8003d88 <HAL_RCC_ClockConfig+0x16c>)
 8003cb6:	6812      	ldr	r2, [r2, #0]
 8003cb8:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8003cbc:	d1de      	bne.n	8003c7c <HAL_RCC_ClockConfig+0x60>
        return HAL_ERROR;
 8003cbe:	2001      	movs	r0, #1
 8003cc0:	bd70      	pop	{r4, r5, r6, pc}
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003cc2:	4a31      	ldr	r2, [pc, #196]	; (8003d88 <HAL_RCC_ClockConfig+0x16c>)
 8003cc4:	6812      	ldr	r2, [r2, #0]
 8003cc6:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8003cca:	d1d7      	bne.n	8003c7c <HAL_RCC_ClockConfig+0x60>
        return HAL_ERROR;
 8003ccc:	2001      	movs	r0, #1
 8003cce:	bd70      	pop	{r4, r5, r6, pc}
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003cd0:	4b2d      	ldr	r3, [pc, #180]	; (8003d88 <HAL_RCC_ClockConfig+0x16c>)
 8003cd2:	685b      	ldr	r3, [r3, #4]
 8003cd4:	f003 030c 	and.w	r3, r3, #12
 8003cd8:	2b04      	cmp	r3, #4
 8003cda:	d017      	beq.n	8003d0c <HAL_RCC_ClockConfig+0xf0>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003cdc:	f7fe f876 	bl	8001dcc <HAL_GetTick>
 8003ce0:	1b80      	subs	r0, r0, r6
 8003ce2:	f241 3388 	movw	r3, #5000	; 0x1388
 8003ce6:	4298      	cmp	r0, r3
 8003ce8:	d9f2      	bls.n	8003cd0 <HAL_RCC_ClockConfig+0xb4>
          return HAL_TIMEOUT;
 8003cea:	2003      	movs	r0, #3
 8003cec:	bd70      	pop	{r4, r5, r6, pc}
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003cee:	4b26      	ldr	r3, [pc, #152]	; (8003d88 <HAL_RCC_ClockConfig+0x16c>)
 8003cf0:	685b      	ldr	r3, [r3, #4]
 8003cf2:	f003 030c 	and.w	r3, r3, #12
 8003cf6:	2b08      	cmp	r3, #8
 8003cf8:	d008      	beq.n	8003d0c <HAL_RCC_ClockConfig+0xf0>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003cfa:	f7fe f867 	bl	8001dcc <HAL_GetTick>
 8003cfe:	1b80      	subs	r0, r0, r6
 8003d00:	f241 3388 	movw	r3, #5000	; 0x1388
 8003d04:	4298      	cmp	r0, r3
 8003d06:	d9f2      	bls.n	8003cee <HAL_RCC_ClockConfig+0xd2>
          return HAL_TIMEOUT;
 8003d08:	2003      	movs	r0, #3
 8003d0a:	bd70      	pop	{r4, r5, r6, pc}
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8003d0c:	4b1d      	ldr	r3, [pc, #116]	; (8003d84 <HAL_RCC_ClockConfig+0x168>)
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f003 0307 	and.w	r3, r3, #7
 8003d14:	429d      	cmp	r5, r3
 8003d16:	d20c      	bcs.n	8003d32 <HAL_RCC_ClockConfig+0x116>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d18:	4a1a      	ldr	r2, [pc, #104]	; (8003d84 <HAL_RCC_ClockConfig+0x168>)
 8003d1a:	6813      	ldr	r3, [r2, #0]
 8003d1c:	f023 0307 	bic.w	r3, r3, #7
 8003d20:	432b      	orrs	r3, r5
 8003d22:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003d24:	6813      	ldr	r3, [r2, #0]
 8003d26:	f003 0307 	and.w	r3, r3, #7
 8003d2a:	429d      	cmp	r5, r3
 8003d2c:	d001      	beq.n	8003d32 <HAL_RCC_ClockConfig+0x116>
      return HAL_ERROR;
 8003d2e:	2001      	movs	r0, #1
}
 8003d30:	bd70      	pop	{r4, r5, r6, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d32:	6823      	ldr	r3, [r4, #0]
 8003d34:	f013 0f04 	tst.w	r3, #4
 8003d38:	d006      	beq.n	8003d48 <HAL_RCC_ClockConfig+0x12c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003d3a:	4a13      	ldr	r2, [pc, #76]	; (8003d88 <HAL_RCC_ClockConfig+0x16c>)
 8003d3c:	6853      	ldr	r3, [r2, #4]
 8003d3e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003d42:	68e1      	ldr	r1, [r4, #12]
 8003d44:	430b      	orrs	r3, r1
 8003d46:	6053      	str	r3, [r2, #4]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d48:	6823      	ldr	r3, [r4, #0]
 8003d4a:	f013 0f08 	tst.w	r3, #8
 8003d4e:	d007      	beq.n	8003d60 <HAL_RCC_ClockConfig+0x144>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003d50:	4a0d      	ldr	r2, [pc, #52]	; (8003d88 <HAL_RCC_ClockConfig+0x16c>)
 8003d52:	6853      	ldr	r3, [r2, #4]
 8003d54:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8003d58:	6921      	ldr	r1, [r4, #16]
 8003d5a:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8003d5e:	6053      	str	r3, [r2, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003d60:	f7ff ff26 	bl	8003bb0 <HAL_RCC_GetSysClockFreq>
 8003d64:	4b08      	ldr	r3, [pc, #32]	; (8003d88 <HAL_RCC_ClockConfig+0x16c>)
 8003d66:	685b      	ldr	r3, [r3, #4]
 8003d68:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8003d6c:	4a07      	ldr	r2, [pc, #28]	; (8003d8c <HAL_RCC_ClockConfig+0x170>)
 8003d6e:	5cd3      	ldrb	r3, [r2, r3]
 8003d70:	40d8      	lsrs	r0, r3
 8003d72:	4b07      	ldr	r3, [pc, #28]	; (8003d90 <HAL_RCC_ClockConfig+0x174>)
 8003d74:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8003d76:	2000      	movs	r0, #0
 8003d78:	f7fd ffe6 	bl	8001d48 <HAL_InitTick>
  return HAL_OK;
 8003d7c:	2000      	movs	r0, #0
 8003d7e:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 8003d80:	2001      	movs	r0, #1
 8003d82:	bd70      	pop	{r4, r5, r6, pc}
 8003d84:	40022000 	.word	0x40022000
 8003d88:	40021000 	.word	0x40021000
 8003d8c:	0800bcc4 	.word	0x0800bcc4
 8003d90:	20000008 	.word	0x20000008

08003d94 <HAL_RCC_GetHCLKFreq>:
}
 8003d94:	4b01      	ldr	r3, [pc, #4]	; (8003d9c <HAL_RCC_GetHCLKFreq+0x8>)
 8003d96:	6818      	ldr	r0, [r3, #0]
 8003d98:	4770      	bx	lr
 8003d9a:	bf00      	nop
 8003d9c:	20000008 	.word	0x20000008

08003da0 <HAL_RCC_GetPCLK1Freq>:
{
 8003da0:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003da2:	f7ff fff7 	bl	8003d94 <HAL_RCC_GetHCLKFreq>
 8003da6:	4b04      	ldr	r3, [pc, #16]	; (8003db8 <HAL_RCC_GetPCLK1Freq+0x18>)
 8003da8:	685b      	ldr	r3, [r3, #4]
 8003daa:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8003dae:	4a03      	ldr	r2, [pc, #12]	; (8003dbc <HAL_RCC_GetPCLK1Freq+0x1c>)
 8003db0:	5cd3      	ldrb	r3, [r2, r3]
}    
 8003db2:	40d8      	lsrs	r0, r3
 8003db4:	bd08      	pop	{r3, pc}
 8003db6:	bf00      	nop
 8003db8:	40021000 	.word	0x40021000
 8003dbc:	0800bcd4 	.word	0x0800bcd4

08003dc0 <HAL_RCC_GetPCLK2Freq>:
{
 8003dc0:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003dc2:	f7ff ffe7 	bl	8003d94 <HAL_RCC_GetHCLKFreq>
 8003dc6:	4b04      	ldr	r3, [pc, #16]	; (8003dd8 <HAL_RCC_GetPCLK2Freq+0x18>)
 8003dc8:	685b      	ldr	r3, [r3, #4]
 8003dca:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8003dce:	4a03      	ldr	r2, [pc, #12]	; (8003ddc <HAL_RCC_GetPCLK2Freq+0x1c>)
 8003dd0:	5cd3      	ldrb	r3, [r2, r3]
} 
 8003dd2:	40d8      	lsrs	r0, r3
 8003dd4:	bd08      	pop	{r3, pc}
 8003dd6:	bf00      	nop
 8003dd8:	40021000 	.word	0x40021000
 8003ddc:	0800bcd4 	.word	0x0800bcd4

08003de0 <HAL_RCC_GetOscConfig>:
  RCC_OscInitStruct->OscillatorType = RCC_OSCILLATORTYPE_HSE | RCC_OSCILLATORTYPE_HSI  \
 8003de0:	230f      	movs	r3, #15
 8003de2:	6003      	str	r3, [r0, #0]
  if((RCC->CR &RCC_CR_HSEBYP) == RCC_CR_HSEBYP)
 8003de4:	4b2a      	ldr	r3, [pc, #168]	; (8003e90 <HAL_RCC_GetOscConfig+0xb0>)
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 8003dec:	d030      	beq.n	8003e50 <HAL_RCC_GetOscConfig+0x70>
    RCC_OscInitStruct->HSEState = RCC_HSE_BYPASS;
 8003dee:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8003df2:	6043      	str	r3, [r0, #4]
  RCC_OscInitStruct->HSEPredivValue = __HAL_RCC_HSE_GET_PREDIV();
 8003df4:	4a26      	ldr	r2, [pc, #152]	; (8003e90 <HAL_RCC_GetOscConfig+0xb0>)
 8003df6:	6853      	ldr	r3, [r2, #4]
 8003df8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dfc:	6083      	str	r3, [r0, #8]
  if((RCC->CR &RCC_CR_HSION) == RCC_CR_HSION)
 8003dfe:	6813      	ldr	r3, [r2, #0]
 8003e00:	f013 0f01 	tst.w	r3, #1
 8003e04:	d030      	beq.n	8003e68 <HAL_RCC_GetOscConfig+0x88>
    RCC_OscInitStruct->HSIState = RCC_HSI_ON;
 8003e06:	2301      	movs	r3, #1
 8003e08:	6103      	str	r3, [r0, #16]
  RCC_OscInitStruct->HSICalibrationValue = (uint32_t)((RCC->CR & RCC_CR_HSITRIM) >> RCC_CR_HSITRIM_Pos);
 8003e0a:	4a21      	ldr	r2, [pc, #132]	; (8003e90 <HAL_RCC_GetOscConfig+0xb0>)
 8003e0c:	6813      	ldr	r3, [r2, #0]
 8003e0e:	f3c3 03c4 	ubfx	r3, r3, #3, #5
 8003e12:	6143      	str	r3, [r0, #20]
  if((RCC->BDCR &RCC_BDCR_LSEBYP) == RCC_BDCR_LSEBYP)
 8003e14:	6a13      	ldr	r3, [r2, #32]
 8003e16:	f013 0f04 	tst.w	r3, #4
 8003e1a:	d028      	beq.n	8003e6e <HAL_RCC_GetOscConfig+0x8e>
    RCC_OscInitStruct->LSEState = RCC_LSE_BYPASS;
 8003e1c:	2305      	movs	r3, #5
 8003e1e:	60c3      	str	r3, [r0, #12]
  if((RCC->CSR &RCC_CSR_LSION) == RCC_CSR_LSION)
 8003e20:	4b1b      	ldr	r3, [pc, #108]	; (8003e90 <HAL_RCC_GetOscConfig+0xb0>)
 8003e22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e24:	f013 0f01 	tst.w	r3, #1
 8003e28:	d02c      	beq.n	8003e84 <HAL_RCC_GetOscConfig+0xa4>
    RCC_OscInitStruct->LSIState = RCC_LSI_ON;
 8003e2a:	2301      	movs	r3, #1
 8003e2c:	6183      	str	r3, [r0, #24]
  if((RCC->CR &RCC_CR_PLLON) == RCC_CR_PLLON)
 8003e2e:	4b18      	ldr	r3, [pc, #96]	; (8003e90 <HAL_RCC_GetOscConfig+0xb0>)
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8003e36:	d128      	bne.n	8003e8a <HAL_RCC_GetOscConfig+0xaa>
    RCC_OscInitStruct->PLL.PLLState = RCC_PLL_OFF;
 8003e38:	2301      	movs	r3, #1
 8003e3a:	61c3      	str	r3, [r0, #28]
  RCC_OscInitStruct->PLL.PLLSource = (uint32_t)(RCC->CFGR & RCC_CFGR_PLLSRC);
 8003e3c:	4a14      	ldr	r2, [pc, #80]	; (8003e90 <HAL_RCC_GetOscConfig+0xb0>)
 8003e3e:	6853      	ldr	r3, [r2, #4]
 8003e40:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e44:	6203      	str	r3, [r0, #32]
  RCC_OscInitStruct->PLL.PLLMUL = (uint32_t)(RCC->CFGR & RCC_CFGR_PLLMULL);
 8003e46:	6853      	ldr	r3, [r2, #4]
 8003e48:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003e4c:	6243      	str	r3, [r0, #36]	; 0x24
 8003e4e:	4770      	bx	lr
  else if((RCC->CR &RCC_CR_HSEON) == RCC_CR_HSEON)
 8003e50:	4b0f      	ldr	r3, [pc, #60]	; (8003e90 <HAL_RCC_GetOscConfig+0xb0>)
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8003e58:	d003      	beq.n	8003e62 <HAL_RCC_GetOscConfig+0x82>
    RCC_OscInitStruct->HSEState = RCC_HSE_ON;
 8003e5a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003e5e:	6043      	str	r3, [r0, #4]
 8003e60:	e7c8      	b.n	8003df4 <HAL_RCC_GetOscConfig+0x14>
    RCC_OscInitStruct->HSEState = RCC_HSE_OFF;
 8003e62:	2300      	movs	r3, #0
 8003e64:	6043      	str	r3, [r0, #4]
 8003e66:	e7c5      	b.n	8003df4 <HAL_RCC_GetOscConfig+0x14>
    RCC_OscInitStruct->HSIState = RCC_HSI_OFF;
 8003e68:	2300      	movs	r3, #0
 8003e6a:	6103      	str	r3, [r0, #16]
 8003e6c:	e7cd      	b.n	8003e0a <HAL_RCC_GetOscConfig+0x2a>
  else if((RCC->BDCR &RCC_BDCR_LSEON) == RCC_BDCR_LSEON)
 8003e6e:	4b08      	ldr	r3, [pc, #32]	; (8003e90 <HAL_RCC_GetOscConfig+0xb0>)
 8003e70:	6a1b      	ldr	r3, [r3, #32]
 8003e72:	f013 0f01 	tst.w	r3, #1
 8003e76:	d002      	beq.n	8003e7e <HAL_RCC_GetOscConfig+0x9e>
    RCC_OscInitStruct->LSEState = RCC_LSE_ON;
 8003e78:	2301      	movs	r3, #1
 8003e7a:	60c3      	str	r3, [r0, #12]
 8003e7c:	e7d0      	b.n	8003e20 <HAL_RCC_GetOscConfig+0x40>
    RCC_OscInitStruct->LSEState = RCC_LSE_OFF;
 8003e7e:	2300      	movs	r3, #0
 8003e80:	60c3      	str	r3, [r0, #12]
 8003e82:	e7cd      	b.n	8003e20 <HAL_RCC_GetOscConfig+0x40>
    RCC_OscInitStruct->LSIState = RCC_LSI_OFF;
 8003e84:	2300      	movs	r3, #0
 8003e86:	6183      	str	r3, [r0, #24]
 8003e88:	e7d1      	b.n	8003e2e <HAL_RCC_GetOscConfig+0x4e>
    RCC_OscInitStruct->PLL.PLLState = RCC_PLL_ON;
 8003e8a:	2302      	movs	r3, #2
 8003e8c:	61c3      	str	r3, [r0, #28]
 8003e8e:	e7d5      	b.n	8003e3c <HAL_RCC_GetOscConfig+0x5c>
 8003e90:	40021000 	.word	0x40021000

08003e94 <HAL_RCC_GetClockConfig>:
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003e94:	230f      	movs	r3, #15
 8003e96:	6003      	str	r3, [r0, #0]
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003e98:	4b0b      	ldr	r3, [pc, #44]	; (8003ec8 <HAL_RCC_GetClockConfig+0x34>)
 8003e9a:	685a      	ldr	r2, [r3, #4]
 8003e9c:	f002 0203 	and.w	r2, r2, #3
 8003ea0:	6042      	str	r2, [r0, #4]
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8003ea2:	685a      	ldr	r2, [r3, #4]
 8003ea4:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8003ea8:	6082      	str	r2, [r0, #8]
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 8003eaa:	685a      	ldr	r2, [r3, #4]
 8003eac:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8003eb0:	60c2      	str	r2, [r0, #12]
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8003eb2:	685b      	ldr	r3, [r3, #4]
 8003eb4:	08db      	lsrs	r3, r3, #3
 8003eb6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003eba:	6103      	str	r3, [r0, #16]
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 8003ebc:	4b03      	ldr	r3, [pc, #12]	; (8003ecc <HAL_RCC_GetClockConfig+0x38>)
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f003 0307 	and.w	r3, r3, #7
 8003ec4:	600b      	str	r3, [r1, #0]
 8003ec6:	4770      	bx	lr
 8003ec8:	40021000 	.word	0x40021000
 8003ecc:	40022000 	.word	0x40022000

08003ed0 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval none
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8003ed0:	4770      	bx	lr

08003ed2 <HAL_RCC_NMI_IRQHandler>:
{
 8003ed2:	b508      	push	{r3, lr}
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 8003ed4:	4b05      	ldr	r3, [pc, #20]	; (8003eec <HAL_RCC_NMI_IRQHandler+0x1a>)
 8003ed6:	689b      	ldr	r3, [r3, #8]
 8003ed8:	f013 0f80 	tst.w	r3, #128	; 0x80
 8003edc:	d100      	bne.n	8003ee0 <HAL_RCC_NMI_IRQHandler+0xe>
 8003ede:	bd08      	pop	{r3, pc}
    HAL_RCC_CSSCallback();
 8003ee0:	f7ff fff6 	bl	8003ed0 <HAL_RCC_CSSCallback>
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8003ee4:	2280      	movs	r2, #128	; 0x80
 8003ee6:	4b02      	ldr	r3, [pc, #8]	; (8003ef0 <HAL_RCC_NMI_IRQHandler+0x1e>)
 8003ee8:	701a      	strb	r2, [r3, #0]
}
 8003eea:	e7f8      	b.n	8003ede <HAL_RCC_NMI_IRQHandler+0xc>
 8003eec:	40021000 	.word	0x40021000
 8003ef0:	4002100a 	.word	0x4002100a

08003ef4 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003ef4:	b570      	push	{r4, r5, r6, lr}
 8003ef6:	b082      	sub	sp, #8
 8003ef8:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*------------------------------- RTC/LCD Configuration ------------------------*/ 
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003efa:	6803      	ldr	r3, [r0, #0]
 8003efc:	f013 0f01 	tst.w	r3, #1
 8003f00:	d034      	beq.n	8003f6c <HAL_RCCEx_PeriphCLKConfig+0x78>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f02:	4b3e      	ldr	r3, [pc, #248]	; (8003ffc <HAL_RCCEx_PeriphCLKConfig+0x108>)
 8003f04:	69db      	ldr	r3, [r3, #28]
 8003f06:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8003f0a:	d148      	bne.n	8003f9e <HAL_RCCEx_PeriphCLKConfig+0xaa>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003f0c:	4b3b      	ldr	r3, [pc, #236]	; (8003ffc <HAL_RCCEx_PeriphCLKConfig+0x108>)
 8003f0e:	69da      	ldr	r2, [r3, #28]
 8003f10:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003f14:	61da      	str	r2, [r3, #28]
 8003f16:	69db      	ldr	r3, [r3, #28]
 8003f18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f1c:	9301      	str	r3, [sp, #4]
 8003f1e:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8003f20:	2501      	movs	r5, #1
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f22:	4b37      	ldr	r3, [pc, #220]	; (8004000 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f413 7f80 	tst.w	r3, #256	; 0x100
 8003f2a:	d03a      	beq.n	8003fa2 <HAL_RCCEx_PeriphCLKConfig+0xae>
        }
      }
    }
      
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003f2c:	4b33      	ldr	r3, [pc, #204]	; (8003ffc <HAL_RCCEx_PeriphCLKConfig+0x108>)
 8003f2e:	6a1b      	ldr	r3, [r3, #32]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003f30:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8003f34:	d011      	beq.n	8003f5a <HAL_RCCEx_PeriphCLKConfig+0x66>
 8003f36:	6862      	ldr	r2, [r4, #4]
 8003f38:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8003f3c:	4293      	cmp	r3, r2
 8003f3e:	d00c      	beq.n	8003f5a <HAL_RCCEx_PeriphCLKConfig+0x66>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003f40:	4a2e      	ldr	r2, [pc, #184]	; (8003ffc <HAL_RCCEx_PeriphCLKConfig+0x108>)
 8003f42:	6a13      	ldr	r3, [r2, #32]
 8003f44:	f423 7040 	bic.w	r0, r3, #768	; 0x300
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003f48:	492e      	ldr	r1, [pc, #184]	; (8004004 <HAL_RCCEx_PeriphCLKConfig+0x110>)
 8003f4a:	2601      	movs	r6, #1
 8003f4c:	600e      	str	r6, [r1, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003f4e:	2600      	movs	r6, #0
 8003f50:	600e      	str	r6, [r1, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003f52:	6210      	str	r0, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003f54:	f013 0f01 	tst.w	r3, #1
 8003f58:	d137      	bne.n	8003fca <HAL_RCCEx_PeriphCLKConfig+0xd6>
            return HAL_TIMEOUT;
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003f5a:	4a28      	ldr	r2, [pc, #160]	; (8003ffc <HAL_RCCEx_PeriphCLKConfig+0x108>)
 8003f5c:	6a13      	ldr	r3, [r2, #32]
 8003f5e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f62:	6861      	ldr	r1, [r4, #4]
 8003f64:	430b      	orrs	r3, r1
 8003f66:	6213      	str	r3, [r2, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003f68:	2d00      	cmp	r5, #0
 8003f6a:	d13f      	bne.n	8003fec <HAL_RCCEx_PeriphCLKConfig+0xf8>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003f6c:	6823      	ldr	r3, [r4, #0]
 8003f6e:	f013 0f02 	tst.w	r3, #2
 8003f72:	d006      	beq.n	8003f82 <HAL_RCCEx_PeriphCLKConfig+0x8e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));
    
    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003f74:	4a21      	ldr	r2, [pc, #132]	; (8003ffc <HAL_RCCEx_PeriphCLKConfig+0x108>)
 8003f76:	6853      	ldr	r3, [r2, #4]
 8003f78:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8003f7c:	68a1      	ldr	r1, [r4, #8]
 8003f7e:	430b      	orrs	r3, r1
 8003f80:	6053      	str	r3, [r2, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003f82:	6823      	ldr	r3, [r4, #0]
 8003f84:	f013 0f10 	tst.w	r3, #16
 8003f88:	d035      	beq.n	8003ff6 <HAL_RCCEx_PeriphCLKConfig+0x102>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003f8a:	4a1c      	ldr	r2, [pc, #112]	; (8003ffc <HAL_RCCEx_PeriphCLKConfig+0x108>)
 8003f8c:	6853      	ldr	r3, [r2, #4]
 8003f8e:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8003f92:	68e1      	ldr	r1, [r4, #12]
 8003f94:	430b      	orrs	r3, r1
 8003f96:	6053      	str	r3, [r2, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003f98:	2000      	movs	r0, #0
}
 8003f9a:	b002      	add	sp, #8
 8003f9c:	bd70      	pop	{r4, r5, r6, pc}
    FlagStatus       pwrclkchanged = RESET;
 8003f9e:	2500      	movs	r5, #0
 8003fa0:	e7bf      	b.n	8003f22 <HAL_RCCEx_PeriphCLKConfig+0x2e>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003fa2:	4a17      	ldr	r2, [pc, #92]	; (8004000 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8003fa4:	6813      	ldr	r3, [r2, #0]
 8003fa6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003faa:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8003fac:	f7fd ff0e 	bl	8001dcc <HAL_GetTick>
 8003fb0:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fb2:	4b13      	ldr	r3, [pc, #76]	; (8004000 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f413 7f80 	tst.w	r3, #256	; 0x100
 8003fba:	d1b7      	bne.n	8003f2c <HAL_RCCEx_PeriphCLKConfig+0x38>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003fbc:	f7fd ff06 	bl	8001dcc <HAL_GetTick>
 8003fc0:	1b80      	subs	r0, r0, r6
 8003fc2:	2864      	cmp	r0, #100	; 0x64
 8003fc4:	d9f5      	bls.n	8003fb2 <HAL_RCCEx_PeriphCLKConfig+0xbe>
          return HAL_TIMEOUT;
 8003fc6:	2003      	movs	r0, #3
 8003fc8:	e7e7      	b.n	8003f9a <HAL_RCCEx_PeriphCLKConfig+0xa6>
        tickstart = HAL_GetTick();
 8003fca:	f7fd feff 	bl	8001dcc <HAL_GetTick>
 8003fce:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003fd0:	4b0a      	ldr	r3, [pc, #40]	; (8003ffc <HAL_RCCEx_PeriphCLKConfig+0x108>)
 8003fd2:	6a1b      	ldr	r3, [r3, #32]
 8003fd4:	f013 0f02 	tst.w	r3, #2
 8003fd8:	d1bf      	bne.n	8003f5a <HAL_RCCEx_PeriphCLKConfig+0x66>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003fda:	f7fd fef7 	bl	8001dcc <HAL_GetTick>
 8003fde:	1b80      	subs	r0, r0, r6
 8003fe0:	f241 3388 	movw	r3, #5000	; 0x1388
 8003fe4:	4298      	cmp	r0, r3
 8003fe6:	d9f3      	bls.n	8003fd0 <HAL_RCCEx_PeriphCLKConfig+0xdc>
            return HAL_TIMEOUT;
 8003fe8:	2003      	movs	r0, #3
 8003fea:	e7d6      	b.n	8003f9a <HAL_RCCEx_PeriphCLKConfig+0xa6>
      __HAL_RCC_PWR_CLK_DISABLE();
 8003fec:	69d3      	ldr	r3, [r2, #28]
 8003fee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ff2:	61d3      	str	r3, [r2, #28]
 8003ff4:	e7ba      	b.n	8003f6c <HAL_RCCEx_PeriphCLKConfig+0x78>
  return HAL_OK;
 8003ff6:	2000      	movs	r0, #0
 8003ff8:	e7cf      	b.n	8003f9a <HAL_RCCEx_PeriphCLKConfig+0xa6>
 8003ffa:	bf00      	nop
 8003ffc:	40021000 	.word	0x40021000
 8004000:	40007000 	.word	0x40007000
 8004004:	42420440 	.word	0x42420440

08004008 <HAL_RCCEx_GetPeriphCLKConfig>:
void HAL_RCCEx_GetPeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
  uint32_t srcclk = 0U;
  
  /* Set all possible values for the extended clock type parameter------------*/
  PeriphClkInit->PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8004008:	2301      	movs	r3, #1
 800400a:	6003      	str	r3, [r0, #0]

  /* Get the RTC configuration -----------------------------------------------*/
  srcclk = __HAL_RCC_GET_RTC_SOURCE();
 800400c:	4b08      	ldr	r3, [pc, #32]	; (8004030 <HAL_RCCEx_GetPeriphCLKConfig+0x28>)
 800400e:	6a1a      	ldr	r2, [r3, #32]
 8004010:	f402 7240 	and.w	r2, r2, #768	; 0x300
  /* Source clock is LSE or LSI*/
  PeriphClkInit->RTCClockSelection = srcclk;
 8004014:	6042      	str	r2, [r0, #4]

  /* Get the ADC clock configuration -----------------------------------------*/
  PeriphClkInit->PeriphClockSelection |= RCC_PERIPHCLK_ADC;
 8004016:	2203      	movs	r2, #3
 8004018:	6002      	str	r2, [r0, #0]
  PeriphClkInit->AdcClockSelection = __HAL_RCC_GET_ADC_SOURCE();
 800401a:	685a      	ldr	r2, [r3, #4]
 800401c:	f402 4240 	and.w	r2, r2, #49152	; 0xc000
 8004020:	6082      	str	r2, [r0, #8]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /* Get the USB clock configuration -----------------------------------------*/
  PeriphClkInit->PeriphClockSelection |= RCC_PERIPHCLK_USB;
 8004022:	2213      	movs	r2, #19
 8004024:	6002      	str	r2, [r0, #0]
  PeriphClkInit->UsbClockSelection = __HAL_RCC_GET_USB_SOURCE();
 8004026:	685b      	ldr	r3, [r3, #4]
 8004028:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800402c:	60c3      	str	r3, [r0, #12]
 800402e:	4770      	bx	lr
 8004030:	40021000 	.word	0x40021000

08004034 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004034:	b530      	push	{r4, r5, lr}
 8004036:	b087      	sub	sp, #28
 8004038:	4605      	mov	r5, r0
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800403a:	4c38      	ldr	r4, [pc, #224]	; (800411c <HAL_RCCEx_GetPeriphCLKFreq+0xe8>)
 800403c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8004040:	f10d 0e18 	add.w	lr, sp, #24
 8004044:	e90e 000f 	stmdb	lr, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004048:	8a23      	ldrh	r3, [r4, #16]
 800404a:	f8ad 3004 	strh.w	r3, [sp, #4]
  uint32_t temp_reg = 0U, frequency = 0U;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));
  
  switch (PeriphClk)
 800404e:	2d02      	cmp	r5, #2
 8004050:	d053      	beq.n	80040fa <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
 8004052:	2d10      	cmp	r5, #16
 8004054:	d003      	beq.n	800405e <HAL_RCCEx_GetPeriphCLKFreq+0x2a>
 8004056:	2d01      	cmp	r5, #1
 8004058:	d02b      	beq.n	80040b2 <HAL_RCCEx_GetPeriphCLKFreq+0x7e>
  uint32_t temp_reg = 0U, frequency = 0U;
 800405a:	2000      	movs	r0, #0
 800405c:	e057      	b.n	800410e <HAL_RCCEx_GetPeriphCLKFreq+0xda>
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  case RCC_PERIPHCLK_USB:  
    {
      /* Get RCC configuration ------------------------------------------------------*/
      temp_reg = RCC->CFGR;
 800405e:	4b30      	ldr	r3, [pc, #192]	; (8004120 <HAL_RCCEx_GetPeriphCLKFreq+0xec>)
 8004060:	685a      	ldr	r2, [r3, #4]
  
      /* Check if PLL is enabled */
      if (HAL_IS_BIT_SET(RCC->CR,RCC_CR_PLLON))
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8004068:	d053      	beq.n	8004112 <HAL_RCCEx_GetPeriphCLKFreq+0xde>
      {
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800406a:	f3c2 4383 	ubfx	r3, r2, #18, #4
 800406e:	a906      	add	r1, sp, #24
 8004070:	440b      	add	r3, r1
 8004072:	f813 0c10 	ldrb.w	r0, [r3, #-16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004076:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 800407a:	d016      	beq.n	80040aa <HAL_RCCEx_GetPeriphCLKFreq+0x76>
        {
#if defined(STM32F105xC) || defined(STM32F107xC) || defined(STM32F100xB)\
 || defined(STM32F100xE)
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800407c:	4b28      	ldr	r3, [pc, #160]	; (8004120 <HAL_RCCEx_GetPeriphCLKFreq+0xec>)
 800407e:	685b      	ldr	r3, [r3, #4]
 8004080:	f3c3 4340 	ubfx	r3, r3, #17, #1
 8004084:	440b      	add	r3, r1
 8004086:	f813 2c14 	ldrb.w	r2, [r3, #-20]
          }
#else
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
          {
            /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 800408a:	4b26      	ldr	r3, [pc, #152]	; (8004124 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>)
 800408c:	fbb3 f3f2 	udiv	r3, r3, r2
 8004090:	fb03 f000 	mul.w	r0, r3, r0
          /* Prescaler of 3 selected for USB */ 
          frequency = (2 * pllclk) / 3;
        }
#else
        /* USBCLK = PLLCLK / USB prescaler */
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8004094:	4b22      	ldr	r3, [pc, #136]	; (8004120 <HAL_RCCEx_GetPeriphCLKFreq+0xec>)
 8004096:	685b      	ldr	r3, [r3, #4]
 8004098:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 800409c:	d137      	bne.n	800410e <HAL_RCCEx_GetPeriphCLKFreq+0xda>
          frequency = pllclk;
        }
        else
        {
          /* Prescaler of 1.5 selected for USB */ 
          frequency = (pllclk * 2) / 3;
 800409e:	0040      	lsls	r0, r0, #1
 80040a0:	4b21      	ldr	r3, [pc, #132]	; (8004128 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>)
 80040a2:	fba3 3000 	umull	r3, r0, r3, r0
 80040a6:	0840      	lsrs	r0, r0, #1
 80040a8:	e031      	b.n	800410e <HAL_RCCEx_GetPeriphCLKFreq+0xda>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80040aa:	4b20      	ldr	r3, [pc, #128]	; (800412c <HAL_RCCEx_GetPeriphCLKFreq+0xf8>)
 80040ac:	fb03 f000 	mul.w	r0, r3, r0
 80040b0:	e7f0      	b.n	8004094 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
    }
#endif /* STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */
  case RCC_PERIPHCLK_RTC:  
    {
      /* Get RCC BDCR configuration ------------------------------------------------------*/
      temp_reg = RCC->BDCR;
 80040b2:	4b1b      	ldr	r3, [pc, #108]	; (8004120 <HAL_RCCEx_GetPeriphCLKFreq+0xec>)
 80040b4:	6a1b      	ldr	r3, [r3, #32]

      /* Check if LSE is ready if RTC clock selection is LSE */
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80040b6:	f240 3202 	movw	r2, #770	; 0x302
 80040ba:	401a      	ands	r2, r3
 80040bc:	f5b2 7f81 	cmp.w	r2, #258	; 0x102
 80040c0:	d029      	beq.n	8004116 <HAL_RCCEx_GetPeriphCLKFreq+0xe2>
      {
        frequency = LSE_VALUE;
      }
      /* Check if LSI is ready if RTC clock selection is LSI */
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80040c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80040c6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80040ca:	d004      	beq.n	80040d6 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
      {
        frequency = LSI_VALUE;
      }
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80040cc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80040d0:	d009      	beq.n	80040e6 <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
        frequency = HSE_VALUE / 128U;
      }
      /* Clock not enabled for RTC*/
      else
      {
        frequency = 0U;
 80040d2:	2000      	movs	r0, #0
 80040d4:	e01b      	b.n	800410e <HAL_RCCEx_GetPeriphCLKFreq+0xda>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80040d6:	4a12      	ldr	r2, [pc, #72]	; (8004120 <HAL_RCCEx_GetPeriphCLKFreq+0xec>)
 80040d8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80040da:	f012 0f02 	tst.w	r2, #2
 80040de:	d0f5      	beq.n	80040cc <HAL_RCCEx_GetPeriphCLKFreq+0x98>
        frequency = LSI_VALUE;
 80040e0:	f649 4040 	movw	r0, #40000	; 0x9c40
 80040e4:	e013      	b.n	800410e <HAL_RCCEx_GetPeriphCLKFreq+0xda>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80040e6:	4b0e      	ldr	r3, [pc, #56]	; (8004120 <HAL_RCCEx_GetPeriphCLKFreq+0xec>)
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80040ee:	d002      	beq.n	80040f6 <HAL_RCCEx_GetPeriphCLKFreq+0xc2>
        frequency = HSE_VALUE / 128U;
 80040f0:	f24f 4024 	movw	r0, #62500	; 0xf424
  default: 
    {
      break;
    }
  }
  return(frequency);
 80040f4:	e00b      	b.n	800410e <HAL_RCCEx_GetPeriphCLKFreq+0xda>
        frequency = 0U;
 80040f6:	2000      	movs	r0, #0
 80040f8:	e009      	b.n	800410e <HAL_RCCEx_GetPeriphCLKFreq+0xda>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80040fa:	f7ff fe61 	bl	8003dc0 <HAL_RCC_GetPCLK2Freq>
 80040fe:	4b08      	ldr	r3, [pc, #32]	; (8004120 <HAL_RCCEx_GetPeriphCLKFreq+0xec>)
 8004100:	685b      	ldr	r3, [r3, #4]
 8004102:	f3c3 3381 	ubfx	r3, r3, #14, #2
 8004106:	3301      	adds	r3, #1
 8004108:	005b      	lsls	r3, r3, #1
 800410a:	fbb0 f0f3 	udiv	r0, r0, r3
}
 800410e:	b007      	add	sp, #28
 8004110:	bd30      	pop	{r4, r5, pc}
  uint32_t temp_reg = 0U, frequency = 0U;
 8004112:	2000      	movs	r0, #0
 8004114:	e7fb      	b.n	800410e <HAL_RCCEx_GetPeriphCLKFreq+0xda>
        frequency = LSE_VALUE;
 8004116:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800411a:	e7f8      	b.n	800410e <HAL_RCCEx_GetPeriphCLKFreq+0xda>
 800411c:	0800bcf0 	.word	0x0800bcf0
 8004120:	40021000 	.word	0x40021000
 8004124:	007a1200 	.word	0x007a1200
 8004128:	aaaaaaab 	.word	0xaaaaaaab
 800412c:	003d0900 	.word	0x003d0900

08004130 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config : The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004130:	b430      	push	{r4, r5}
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;

   /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004132:	6a03      	ldr	r3, [r0, #32]
 8004134:	f023 0301 	bic.w	r3, r3, #1
 8004138:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800413a:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800413c:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800413e:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004140:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004144:	680d      	ldr	r5, [r1, #0]
 8004146:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004148:	f023 0302 	bic.w	r3, r3, #2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800414c:	688d      	ldr	r5, [r1, #8]
 800414e:	432b      	orrs	r3, r5

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004150:	4d0d      	ldr	r5, [pc, #52]	; (8004188 <TIM_OC1_SetConfig+0x58>)
 8004152:	42a8      	cmp	r0, r5
 8004154:	d009      	beq.n	800416a <TIM_OC1_SetConfig+0x3a>
    tmpccer |= OC_Config->OCNPolarity;
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8004156:	4d0c      	ldr	r5, [pc, #48]	; (8004188 <TIM_OC1_SetConfig+0x58>)
 8004158:	42a8      	cmp	r0, r5
 800415a:	d00d      	beq.n	8004178 <TIM_OC1_SetConfig+0x48>
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800415c:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800415e:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004160:	684a      	ldr	r2, [r1, #4]
 8004162:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004164:	6203      	str	r3, [r0, #32]
}
 8004166:	bc30      	pop	{r4, r5}
 8004168:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC1NP;
 800416a:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 800416e:	68cd      	ldr	r5, [r1, #12]
 8004170:	432b      	orrs	r3, r5
    tmpccer &= ~TIM_CCER_CC1NE;
 8004172:	f023 0304 	bic.w	r3, r3, #4
 8004176:	e7ee      	b.n	8004156 <TIM_OC1_SetConfig+0x26>
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004178:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    tmpcr2 |= OC_Config->OCIdleState;
 800417c:	694d      	ldr	r5, [r1, #20]
 800417e:	432c      	orrs	r4, r5
    tmpcr2 |= OC_Config->OCNIdleState;
 8004180:	698d      	ldr	r5, [r1, #24]
 8004182:	432c      	orrs	r4, r5
 8004184:	e7ea      	b.n	800415c <TIM_OC1_SetConfig+0x2c>
 8004186:	bf00      	nop
 8004188:	40012c00 	.word	0x40012c00

0800418c <TIM_OC3_SetConfig>:
  * @param  TIMx  to select the TIM peripheral
  * @param  OC_Config : The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800418c:	b430      	push	{r4, r5}
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800418e:	6a03      	ldr	r3, [r0, #32]
 8004190:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004194:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004196:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004198:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800419a:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800419c:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80041a0:	680d      	ldr	r5, [r1, #0]
 80041a2:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80041a4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80041a8:	688d      	ldr	r5, [r1, #8]
 80041aa:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80041ae:	4d0f      	ldr	r5, [pc, #60]	; (80041ec <TIM_OC3_SetConfig+0x60>)
 80041b0:	42a8      	cmp	r0, r5
 80041b2:	d009      	beq.n	80041c8 <TIM_OC3_SetConfig+0x3c>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 80041b4:	4d0d      	ldr	r5, [pc, #52]	; (80041ec <TIM_OC3_SetConfig+0x60>)
 80041b6:	42a8      	cmp	r0, r5
 80041b8:	d00e      	beq.n	80041d8 <TIM_OC3_SetConfig+0x4c>
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80041ba:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80041bc:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80041be:	684a      	ldr	r2, [r1, #4]
 80041c0:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80041c2:	6203      	str	r3, [r0, #32]
}
 80041c4:	bc30      	pop	{r4, r5}
 80041c6:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC3NP;
 80041c8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80041cc:	68cd      	ldr	r5, [r1, #12]
 80041ce:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    tmpccer &= ~TIM_CCER_CC3NE;
 80041d2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80041d6:	e7ed      	b.n	80041b4 <TIM_OC3_SetConfig+0x28>
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80041d8:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80041dc:	694d      	ldr	r5, [r1, #20]
 80041de:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80041e2:	698d      	ldr	r5, [r1, #24]
 80041e4:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
 80041e8:	e7e7      	b.n	80041ba <TIM_OC3_SetConfig+0x2e>
 80041ea:	bf00      	nop
 80041ec:	40012c00 	.word	0x40012c00

080041f0 <TIM_OC4_SetConfig>:
  * @param  TIMx  to select the TIM peripheral
  * @param  OC_Config : The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80041f0:	b430      	push	{r4, r5}
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80041f2:	6a03      	ldr	r3, [r0, #32]
 80041f4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80041f8:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80041fa:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80041fc:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80041fe:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004200:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004204:	680d      	ldr	r5, [r1, #0]
 8004206:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800420a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800420e:	688d      	ldr	r5, [r1, #8]
 8004210:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8004214:	4d07      	ldr	r5, [pc, #28]	; (8004234 <TIM_OC4_SetConfig+0x44>)
 8004216:	42a8      	cmp	r0, r5
 8004218:	d006      	beq.n	8004228 <TIM_OC4_SetConfig+0x38>
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6);
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800421a:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800421c:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800421e:	684a      	ldr	r2, [r1, #4]
 8004220:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004222:	6203      	str	r3, [r0, #32]
}
 8004224:	bc30      	pop	{r4, r5}
 8004226:	4770      	bx	lr
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004228:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6);
 800422c:	694d      	ldr	r5, [r1, #20]
 800422e:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
 8004232:	e7f2      	b.n	800421a <TIM_OC4_SetConfig+0x2a>
 8004234:	40012c00 	.word	0x40012c00

08004238 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter : Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004238:	b410      	push	{r4}
  uint32_t tmpccmr1 = 0U;
  uint32_t tmpccer = 0U;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800423a:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800423c:	6a04      	ldr	r4, [r0, #32]
 800423e:	f024 0401 	bic.w	r4, r4, #1
 8004242:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004244:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004246:	f024 04f0 	bic.w	r4, r4, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800424a:	ea44 1202 	orr.w	r2, r4, r2, lsl #4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800424e:	f023 030a 	bic.w	r3, r3, #10
  tmpccer |= TIM_ICPolarity;
 8004252:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004254:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8004256:	6203      	str	r3, [r0, #32]
}
 8004258:	bc10      	pop	{r4}
 800425a:	4770      	bx	lr

0800425c <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be 
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800425c:	b430      	push	{r4, r5}
  uint32_t tmpccmr1 = 0U;
  uint32_t tmpccer = 0U;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800425e:	6a04      	ldr	r4, [r0, #32]
 8004260:	f024 0410 	bic.w	r4, r4, #16
 8004264:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004266:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 8004268:	6a05      	ldr	r5, [r0, #32]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800426a:	f424 7440 	bic.w	r4, r4, #768	; 0x300
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800426e:	ea44 2202 	orr.w	r2, r4, r2, lsl #8

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004272:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8004276:	031b      	lsls	r3, r3, #12
 8004278:	b29b      	uxth	r3, r3
 800427a:	431a      	orrs	r2, r3

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800427c:	f025 05a0 	bic.w	r5, r5, #160	; 0xa0
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8004280:	0109      	lsls	r1, r1, #4
 8004282:	f001 01a0 	and.w	r1, r1, #160	; 0xa0
 8004286:	430d      	orrs	r5, r1

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004288:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 800428a:	6205      	str	r5, [r0, #32]
}
 800428c:	bc30      	pop	{r4, r5}
 800428e:	4770      	bx	lr

08004290 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter : Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004290:	b410      	push	{r4}
  uint32_t tmpccmr1 = 0U;
  uint32_t tmpccer = 0U;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004292:	6a03      	ldr	r3, [r0, #32]
 8004294:	f023 0310 	bic.w	r3, r3, #16
 8004298:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 800429a:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 800429c:	6a03      	ldr	r3, [r0, #32]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800429e:	f424 4470 	bic.w	r4, r4, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80042a2:	ea44 3202 	orr.w	r2, r4, r2, lsl #12

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80042a6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 80042aa:	ea43 1301 	orr.w	r3, r3, r1, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80042ae:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 80042b0:	6203      	str	r3, [r0, #32]
}
 80042b2:	bc10      	pop	{r4}
 80042b4:	4770      	bx	lr

080042b6 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be 
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80042b6:	b430      	push	{r4, r5}
  uint32_t tmpccmr2 = 0U;
  uint32_t tmpccer = 0U;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80042b8:	6a04      	ldr	r4, [r0, #32]
 80042ba:	f424 7480 	bic.w	r4, r4, #256	; 0x100
 80042be:	6204      	str	r4, [r0, #32]
  tmpccmr2 = TIMx->CCMR2;
 80042c0:	69c4      	ldr	r4, [r0, #28]
  tmpccer = TIMx->CCER;
 80042c2:	6a05      	ldr	r5, [r0, #32]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80042c4:	f024 0403 	bic.w	r4, r4, #3
  tmpccmr2 |= TIM_ICSelection;
 80042c8:	4322      	orrs	r2, r4

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80042ca:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80042ce:	011b      	lsls	r3, r3, #4
 80042d0:	b2db      	uxtb	r3, r3
 80042d2:	431a      	orrs	r2, r3

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80042d4:	f425 6520 	bic.w	r5, r5, #2560	; 0xa00
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80042d8:	0209      	lsls	r1, r1, #8
 80042da:	f401 6120 	and.w	r1, r1, #2560	; 0xa00
 80042de:	430d      	orrs	r5, r1

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80042e0:	61c2      	str	r2, [r0, #28]
  TIMx->CCER = tmpccer;
 80042e2:	6205      	str	r5, [r0, #32]
}
 80042e4:	bc30      	pop	{r4, r5}
 80042e6:	4770      	bx	lr

080042e8 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80042e8:	b430      	push	{r4, r5}
  uint32_t tmpccmr2 = 0U;
  uint32_t tmpccer = 0U;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80042ea:	6a04      	ldr	r4, [r0, #32]
 80042ec:	f424 5480 	bic.w	r4, r4, #4096	; 0x1000
 80042f0:	6204      	str	r4, [r0, #32]
  tmpccmr2 = TIMx->CCMR2;
 80042f2:	69c4      	ldr	r4, [r0, #28]
  tmpccer = TIMx->CCER;
 80042f4:	6a05      	ldr	r5, [r0, #32]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80042f6:	f424 7440 	bic.w	r4, r4, #768	; 0x300
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80042fa:	ea44 2202 	orr.w	r2, r4, r2, lsl #8

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80042fe:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8004302:	031b      	lsls	r3, r3, #12
 8004304:	b29b      	uxth	r3, r3
 8004306:	431a      	orrs	r2, r3

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~TIM_CCER_CC4P;
 8004308:	f425 5500 	bic.w	r5, r5, #8192	; 0x2000
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 800430c:	0309      	lsls	r1, r1, #12
 800430e:	f401 5100 	and.w	r1, r1, #8192	; 0x2000
 8004312:	430d      	orrs	r5, r1

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004314:	61c2      	str	r2, [r0, #28]
  TIMx->CCER = tmpccer ;
 8004316:	6205      	str	r5, [r0, #32]
}
 8004318:	bc30      	pop	{r4, r5}
 800431a:	4770      	bx	lr

0800431c <TIM_ITRx_SetConfig>:
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t InputTriggerSource)
{
  uint32_t tmpsmcr = 0U;

   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 800431c:	6883      	ldr	r3, [r0, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 800431e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8004322:	f041 0107 	orr.w	r1, r1, #7
 8004326:	430b      	orrs	r3, r1
   /* Write to TIMx SMCR */
   TIMx->SMCR = tmpsmcr;
 8004328:	6083      	str	r3, [r0, #8]
 800432a:	4770      	bx	lr

0800432c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef* TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800432c:	b410      	push	{r4}
  uint32_t tmpsmcr = 0U;

  tmpsmcr = TIMx->SMCR;
 800432e:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004330:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004334:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 8004338:	4319      	orrs	r1, r3
 800433a:	430c      	orrs	r4, r1

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800433c:	6084      	str	r4, [r0, #8]
}
 800433e:	bc10      	pop	{r4}
 8004340:	4770      	bx	lr

08004342 <TIM_SlaveTimer_SetConfig>:
{
 8004342:	b510      	push	{r4, lr}
  tmpsmcr = htim->Instance->SMCR;
 8004344:	6802      	ldr	r2, [r0, #0]
 8004346:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8004348:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800434c:	684c      	ldr	r4, [r1, #4]
 800434e:	4323      	orrs	r3, r4
  tmpsmcr &= ~TIM_SMCR_SMS;
 8004350:	f023 0307 	bic.w	r3, r3, #7
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8004354:	680c      	ldr	r4, [r1, #0]
 8004356:	4323      	orrs	r3, r4
  htim->Instance->SMCR = tmpsmcr;
 8004358:	6093      	str	r3, [r2, #8]
  switch (sSlaveConfig->InputTrigger)
 800435a:	684b      	ldr	r3, [r1, #4]
 800435c:	2b50      	cmp	r3, #80	; 0x50
 800435e:	d01f      	beq.n	80043a0 <TIM_SlaveTimer_SetConfig+0x5e>
 8004360:	d90a      	bls.n	8004378 <TIM_SlaveTimer_SetConfig+0x36>
 8004362:	2b60      	cmp	r3, #96	; 0x60
 8004364:	d022      	beq.n	80043ac <TIM_SlaveTimer_SetConfig+0x6a>
 8004366:	2b70      	cmp	r3, #112	; 0x70
 8004368:	d125      	bne.n	80043b6 <TIM_SlaveTimer_SetConfig+0x74>
      TIM_ETR_SetConfig(htim->Instance,
 800436a:	690b      	ldr	r3, [r1, #16]
 800436c:	688a      	ldr	r2, [r1, #8]
 800436e:	68c9      	ldr	r1, [r1, #12]
 8004370:	6800      	ldr	r0, [r0, #0]
 8004372:	f7ff ffdb 	bl	800432c <TIM_ETR_SetConfig>
    break;
 8004376:	bd10      	pop	{r4, pc}
  switch (sSlaveConfig->InputTrigger)
 8004378:	2b40      	cmp	r3, #64	; 0x40
 800437a:	d110      	bne.n	800439e <TIM_SlaveTimer_SetConfig+0x5c>
      tmpccer = htim->Instance->CCER;
 800437c:	6803      	ldr	r3, [r0, #0]
 800437e:	6a1c      	ldr	r4, [r3, #32]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8004380:	6a1a      	ldr	r2, [r3, #32]
 8004382:	f022 0201 	bic.w	r2, r2, #1
 8004386:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8004388:	6802      	ldr	r2, [r0, #0]
 800438a:	6993      	ldr	r3, [r2, #24]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800438c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8004390:	6909      	ldr	r1, [r1, #16]
 8004392:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
      htim->Instance->CCMR1 = tmpccmr1;
 8004396:	6193      	str	r3, [r2, #24]
      htim->Instance->CCER = tmpccer;
 8004398:	6803      	ldr	r3, [r0, #0]
 800439a:	621c      	str	r4, [r3, #32]
    break;
 800439c:	bd10      	pop	{r4, pc}
 800439e:	bd10      	pop	{r4, pc}
      TIM_TI1_ConfigInputStage(htim->Instance,
 80043a0:	690a      	ldr	r2, [r1, #16]
 80043a2:	6889      	ldr	r1, [r1, #8]
 80043a4:	6800      	ldr	r0, [r0, #0]
 80043a6:	f7ff ff47 	bl	8004238 <TIM_TI1_ConfigInputStage>
    break;
 80043aa:	bd10      	pop	{r4, pc}
      TIM_TI2_ConfigInputStage(htim->Instance,
 80043ac:	690a      	ldr	r2, [r1, #16]
 80043ae:	6889      	ldr	r1, [r1, #8]
 80043b0:	6800      	ldr	r0, [r0, #0]
 80043b2:	f7ff ff6d 	bl	8004290 <TIM_TI2_ConfigInputStage>
 80043b6:	bd10      	pop	{r4, pc}
{
 80043b8:	4770      	bx	lr
{
 80043ba:	4770      	bx	lr

080043bc <HAL_TIM_Base_DeInit>:
{
 80043bc:	b510      	push	{r4, lr}
 80043be:	4604      	mov	r4, r0
  htim->State = HAL_TIM_STATE_BUSY;
 80043c0:	2302      	movs	r3, #2
 80043c2:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_TIM_DISABLE(htim);
 80043c6:	6803      	ldr	r3, [r0, #0]
 80043c8:	6a19      	ldr	r1, [r3, #32]
 80043ca:	f241 1211 	movw	r2, #4369	; 0x1111
 80043ce:	4211      	tst	r1, r2
 80043d0:	d108      	bne.n	80043e4 <HAL_TIM_Base_DeInit+0x28>
 80043d2:	6a19      	ldr	r1, [r3, #32]
 80043d4:	f240 4244 	movw	r2, #1092	; 0x444
 80043d8:	4211      	tst	r1, r2
 80043da:	d103      	bne.n	80043e4 <HAL_TIM_Base_DeInit+0x28>
 80043dc:	681a      	ldr	r2, [r3, #0]
 80043de:	f022 0201 	bic.w	r2, r2, #1
 80043e2:	601a      	str	r2, [r3, #0]
  HAL_TIM_Base_MspDeInit(htim);
 80043e4:	4620      	mov	r0, r4
 80043e6:	f7fd f9a9 	bl	800173c <HAL_TIM_Base_MspDeInit>
  htim->State = HAL_TIM_STATE_RESET;
 80043ea:	2000      	movs	r0, #0
 80043ec:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80043f0:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 80043f4:	bd10      	pop	{r4, pc}

080043f6 <HAL_TIM_Base_Start>:
  htim->State= HAL_TIM_STATE_BUSY;
 80043f6:	2302      	movs	r3, #2
 80043f8:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_TIM_ENABLE(htim);
 80043fc:	6802      	ldr	r2, [r0, #0]
 80043fe:	6813      	ldr	r3, [r2, #0]
 8004400:	f043 0301 	orr.w	r3, r3, #1
 8004404:	6013      	str	r3, [r2, #0]
  htim->State= HAL_TIM_STATE_READY;
 8004406:	2301      	movs	r3, #1
 8004408:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
}
 800440c:	2000      	movs	r0, #0
 800440e:	4770      	bx	lr

08004410 <HAL_TIM_Base_Stop>:
  htim->State= HAL_TIM_STATE_BUSY;
 8004410:	2302      	movs	r3, #2
 8004412:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_TIM_DISABLE(htim);
 8004416:	6803      	ldr	r3, [r0, #0]
 8004418:	6a19      	ldr	r1, [r3, #32]
 800441a:	f241 1211 	movw	r2, #4369	; 0x1111
 800441e:	4211      	tst	r1, r2
 8004420:	d108      	bne.n	8004434 <HAL_TIM_Base_Stop+0x24>
 8004422:	6a19      	ldr	r1, [r3, #32]
 8004424:	f240 4244 	movw	r2, #1092	; 0x444
 8004428:	4211      	tst	r1, r2
 800442a:	d103      	bne.n	8004434 <HAL_TIM_Base_Stop+0x24>
 800442c:	681a      	ldr	r2, [r3, #0]
 800442e:	f022 0201 	bic.w	r2, r2, #1
 8004432:	601a      	str	r2, [r3, #0]
  htim->State= HAL_TIM_STATE_READY;
 8004434:	2301      	movs	r3, #1
 8004436:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
}
 800443a:	2000      	movs	r0, #0
 800443c:	4770      	bx	lr

0800443e <HAL_TIM_Base_Start_IT>:
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800443e:	6802      	ldr	r2, [r0, #0]
 8004440:	68d3      	ldr	r3, [r2, #12]
 8004442:	f043 0301 	orr.w	r3, r3, #1
 8004446:	60d3      	str	r3, [r2, #12]
  __HAL_TIM_ENABLE(htim);
 8004448:	6802      	ldr	r2, [r0, #0]
 800444a:	6813      	ldr	r3, [r2, #0]
 800444c:	f043 0301 	orr.w	r3, r3, #1
 8004450:	6013      	str	r3, [r2, #0]
}
 8004452:	2000      	movs	r0, #0
 8004454:	4770      	bx	lr

08004456 <HAL_TIM_Base_Stop_IT>:
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8004456:	6802      	ldr	r2, [r0, #0]
 8004458:	68d3      	ldr	r3, [r2, #12]
 800445a:	f023 0301 	bic.w	r3, r3, #1
 800445e:	60d3      	str	r3, [r2, #12]
  __HAL_TIM_DISABLE(htim);
 8004460:	6803      	ldr	r3, [r0, #0]
 8004462:	6a19      	ldr	r1, [r3, #32]
 8004464:	f241 1211 	movw	r2, #4369	; 0x1111
 8004468:	4211      	tst	r1, r2
 800446a:	d108      	bne.n	800447e <HAL_TIM_Base_Stop_IT+0x28>
 800446c:	6a19      	ldr	r1, [r3, #32]
 800446e:	f240 4244 	movw	r2, #1092	; 0x444
 8004472:	4211      	tst	r1, r2
 8004474:	d103      	bne.n	800447e <HAL_TIM_Base_Stop_IT+0x28>
 8004476:	681a      	ldr	r2, [r3, #0]
 8004478:	f022 0201 	bic.w	r2, r2, #1
 800447c:	601a      	str	r2, [r3, #0]
}
 800447e:	2000      	movs	r0, #0
 8004480:	4770      	bx	lr

08004482 <HAL_TIM_Base_Start_DMA>:
{
 8004482:	b538      	push	{r3, r4, r5, lr}
  if((htim->State == HAL_TIM_STATE_BUSY))
 8004484:	f890 503d 	ldrb.w	r5, [r0, #61]	; 0x3d
 8004488:	b2ed      	uxtb	r5, r5
 800448a:	2d02      	cmp	r5, #2
 800448c:	d026      	beq.n	80044dc <HAL_TIM_Base_Start_DMA+0x5a>
  else if((htim->State == HAL_TIM_STATE_READY))
 800448e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8004492:	b2db      	uxtb	r3, r3
 8004494:	2b01      	cmp	r3, #1
 8004496:	d018      	beq.n	80044ca <HAL_TIM_Base_Start_DMA+0x48>
 8004498:	4613      	mov	r3, r2
 800449a:	4604      	mov	r4, r0
  htim->hdma[TIM_DMA_ID_UPDATE]->XferCpltCallback = TIM_DMAPeriodElapsedCplt;
 800449c:	6a02      	ldr	r2, [r0, #32]
 800449e:	4810      	ldr	r0, [pc, #64]	; (80044e0 <HAL_TIM_Base_Start_DMA+0x5e>)
 80044a0:	6290      	str	r0, [r2, #40]	; 0x28
  htim->hdma[TIM_DMA_ID_UPDATE]->XferErrorCallback = TIM_DMAError ;
 80044a2:	6a22      	ldr	r2, [r4, #32]
 80044a4:	480f      	ldr	r0, [pc, #60]	; (80044e4 <HAL_TIM_Base_Start_DMA+0x62>)
 80044a6:	6310      	str	r0, [r2, #48]	; 0x30
  HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_UPDATE], (uint32_t)pData, (uint32_t)&htim->Instance->ARR, Length);
 80044a8:	6822      	ldr	r2, [r4, #0]
 80044aa:	322c      	adds	r2, #44	; 0x2c
 80044ac:	6a20      	ldr	r0, [r4, #32]
 80044ae:	f7fd fed9 	bl	8002264 <HAL_DMA_Start_IT>
  __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_UPDATE);
 80044b2:	6822      	ldr	r2, [r4, #0]
 80044b4:	68d3      	ldr	r3, [r2, #12]
 80044b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80044ba:	60d3      	str	r3, [r2, #12]
  __HAL_TIM_ENABLE(htim);
 80044bc:	6822      	ldr	r2, [r4, #0]
 80044be:	6813      	ldr	r3, [r2, #0]
 80044c0:	f043 0301 	orr.w	r3, r3, #1
 80044c4:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 80044c6:	2000      	movs	r0, #0
 80044c8:	bd38      	pop	{r3, r4, r5, pc}
    if((pData == 0U) && (Length > 0U))
 80044ca:	b119      	cbz	r1, 80044d4 <HAL_TIM_Base_Start_DMA+0x52>
      htim->State = HAL_TIM_STATE_BUSY;
 80044cc:	2302      	movs	r3, #2
 80044ce:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
 80044d2:	e7e1      	b.n	8004498 <HAL_TIM_Base_Start_DMA+0x16>
    if((pData == 0U) && (Length > 0U))
 80044d4:	2a00      	cmp	r2, #0
 80044d6:	d0f9      	beq.n	80044cc <HAL_TIM_Base_Start_DMA+0x4a>
      return HAL_ERROR;
 80044d8:	2001      	movs	r0, #1
}
 80044da:	bd38      	pop	{r3, r4, r5, pc}
     return HAL_BUSY;
 80044dc:	2002      	movs	r0, #2
 80044de:	bd38      	pop	{r3, r4, r5, pc}
 80044e0:	08004cef 	.word	0x08004cef
 80044e4:	08004f1f 	.word	0x08004f1f

080044e8 <HAL_TIM_Base_Stop_DMA>:
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_UPDATE);
 80044e8:	6802      	ldr	r2, [r0, #0]
 80044ea:	68d3      	ldr	r3, [r2, #12]
 80044ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80044f0:	60d3      	str	r3, [r2, #12]
  __HAL_TIM_DISABLE(htim);
 80044f2:	6803      	ldr	r3, [r0, #0]
 80044f4:	6a19      	ldr	r1, [r3, #32]
 80044f6:	f241 1211 	movw	r2, #4369	; 0x1111
 80044fa:	4211      	tst	r1, r2
 80044fc:	d108      	bne.n	8004510 <HAL_TIM_Base_Stop_DMA+0x28>
 80044fe:	6a19      	ldr	r1, [r3, #32]
 8004500:	f240 4244 	movw	r2, #1092	; 0x444
 8004504:	4211      	tst	r1, r2
 8004506:	d103      	bne.n	8004510 <HAL_TIM_Base_Stop_DMA+0x28>
 8004508:	681a      	ldr	r2, [r3, #0]
 800450a:	f022 0201 	bic.w	r2, r2, #1
 800450e:	601a      	str	r2, [r3, #0]
  htim->State = HAL_TIM_STATE_READY;
 8004510:	2301      	movs	r3, #1
 8004512:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
}
 8004516:	2000      	movs	r0, #0
 8004518:	4770      	bx	lr

0800451a <HAL_TIM_OC_MspInit>:
{
 800451a:	4770      	bx	lr

0800451c <HAL_TIM_OC_MspDeInit>:
{
 800451c:	4770      	bx	lr

0800451e <HAL_TIM_OC_DeInit>:
{
 800451e:	b510      	push	{r4, lr}
 8004520:	4604      	mov	r4, r0
   htim->State = HAL_TIM_STATE_BUSY;
 8004522:	2302      	movs	r3, #2
 8004524:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_TIM_DISABLE(htim);
 8004528:	6803      	ldr	r3, [r0, #0]
 800452a:	6a19      	ldr	r1, [r3, #32]
 800452c:	f241 1211 	movw	r2, #4369	; 0x1111
 8004530:	4211      	tst	r1, r2
 8004532:	d108      	bne.n	8004546 <HAL_TIM_OC_DeInit+0x28>
 8004534:	6a19      	ldr	r1, [r3, #32]
 8004536:	f240 4244 	movw	r2, #1092	; 0x444
 800453a:	4211      	tst	r1, r2
 800453c:	d103      	bne.n	8004546 <HAL_TIM_OC_DeInit+0x28>
 800453e:	681a      	ldr	r2, [r3, #0]
 8004540:	f022 0201 	bic.w	r2, r2, #1
 8004544:	601a      	str	r2, [r3, #0]
  HAL_TIM_OC_MspDeInit(htim);
 8004546:	4620      	mov	r0, r4
 8004548:	f7ff ffe8 	bl	800451c <HAL_TIM_OC_MspDeInit>
  htim->State = HAL_TIM_STATE_RESET;
 800454c:	2000      	movs	r0, #0
 800454e:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8004552:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8004556:	bd10      	pop	{r4, pc}

08004558 <HAL_TIM_PWM_MspInit>:
{
 8004558:	4770      	bx	lr

0800455a <HAL_TIM_PWM_MspDeInit>:
{
 800455a:	4770      	bx	lr

0800455c <HAL_TIM_PWM_DeInit>:
{
 800455c:	b510      	push	{r4, lr}
 800455e:	4604      	mov	r4, r0
  htim->State = HAL_TIM_STATE_BUSY;
 8004560:	2302      	movs	r3, #2
 8004562:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_TIM_DISABLE(htim);
 8004566:	6803      	ldr	r3, [r0, #0]
 8004568:	6a19      	ldr	r1, [r3, #32]
 800456a:	f241 1211 	movw	r2, #4369	; 0x1111
 800456e:	4211      	tst	r1, r2
 8004570:	d108      	bne.n	8004584 <HAL_TIM_PWM_DeInit+0x28>
 8004572:	6a19      	ldr	r1, [r3, #32]
 8004574:	f240 4244 	movw	r2, #1092	; 0x444
 8004578:	4211      	tst	r1, r2
 800457a:	d103      	bne.n	8004584 <HAL_TIM_PWM_DeInit+0x28>
 800457c:	681a      	ldr	r2, [r3, #0]
 800457e:	f022 0201 	bic.w	r2, r2, #1
 8004582:	601a      	str	r2, [r3, #0]
  HAL_TIM_PWM_MspDeInit(htim);
 8004584:	4620      	mov	r0, r4
 8004586:	f7ff ffe8 	bl	800455a <HAL_TIM_PWM_MspDeInit>
  htim->State = HAL_TIM_STATE_RESET;
 800458a:	2000      	movs	r0, #0
 800458c:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8004590:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8004594:	bd10      	pop	{r4, pc}

08004596 <HAL_TIM_IC_MspInit>:
{
 8004596:	4770      	bx	lr

08004598 <HAL_TIM_IC_MspDeInit>:
{
 8004598:	4770      	bx	lr

0800459a <HAL_TIM_IC_DeInit>:
{
 800459a:	b510      	push	{r4, lr}
 800459c:	4604      	mov	r4, r0
  htim->State = HAL_TIM_STATE_BUSY;
 800459e:	2302      	movs	r3, #2
 80045a0:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_TIM_DISABLE(htim);
 80045a4:	6803      	ldr	r3, [r0, #0]
 80045a6:	6a19      	ldr	r1, [r3, #32]
 80045a8:	f241 1211 	movw	r2, #4369	; 0x1111
 80045ac:	4211      	tst	r1, r2
 80045ae:	d108      	bne.n	80045c2 <HAL_TIM_IC_DeInit+0x28>
 80045b0:	6a19      	ldr	r1, [r3, #32]
 80045b2:	f240 4244 	movw	r2, #1092	; 0x444
 80045b6:	4211      	tst	r1, r2
 80045b8:	d103      	bne.n	80045c2 <HAL_TIM_IC_DeInit+0x28>
 80045ba:	681a      	ldr	r2, [r3, #0]
 80045bc:	f022 0201 	bic.w	r2, r2, #1
 80045c0:	601a      	str	r2, [r3, #0]
  HAL_TIM_IC_MspDeInit(htim);
 80045c2:	4620      	mov	r0, r4
 80045c4:	f7ff ffe8 	bl	8004598 <HAL_TIM_IC_MspDeInit>
  htim->State = HAL_TIM_STATE_RESET;
 80045c8:	2000      	movs	r0, #0
 80045ca:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80045ce:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 80045d2:	bd10      	pop	{r4, pc}

080045d4 <HAL_TIM_OnePulse_MspInit>:
{
 80045d4:	4770      	bx	lr

080045d6 <HAL_TIM_OnePulse_MspDeInit>:
{
 80045d6:	4770      	bx	lr

080045d8 <HAL_TIM_OnePulse_DeInit>:
{
 80045d8:	b510      	push	{r4, lr}
 80045da:	4604      	mov	r4, r0
  htim->State = HAL_TIM_STATE_BUSY;
 80045dc:	2302      	movs	r3, #2
 80045de:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_TIM_DISABLE(htim);
 80045e2:	6803      	ldr	r3, [r0, #0]
 80045e4:	6a19      	ldr	r1, [r3, #32]
 80045e6:	f241 1211 	movw	r2, #4369	; 0x1111
 80045ea:	4211      	tst	r1, r2
 80045ec:	d108      	bne.n	8004600 <HAL_TIM_OnePulse_DeInit+0x28>
 80045ee:	6a19      	ldr	r1, [r3, #32]
 80045f0:	f240 4244 	movw	r2, #1092	; 0x444
 80045f4:	4211      	tst	r1, r2
 80045f6:	d103      	bne.n	8004600 <HAL_TIM_OnePulse_DeInit+0x28>
 80045f8:	681a      	ldr	r2, [r3, #0]
 80045fa:	f022 0201 	bic.w	r2, r2, #1
 80045fe:	601a      	str	r2, [r3, #0]
  HAL_TIM_OnePulse_MspDeInit(htim);
 8004600:	4620      	mov	r0, r4
 8004602:	f7ff ffe8 	bl	80045d6 <HAL_TIM_OnePulse_MspDeInit>
  htim->State = HAL_TIM_STATE_RESET;
 8004606:	2000      	movs	r0, #0
 8004608:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800460c:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8004610:	bd10      	pop	{r4, pc}

08004612 <HAL_TIM_Encoder_MspInit>:
{
 8004612:	4770      	bx	lr

08004614 <HAL_TIM_Encoder_MspDeInit>:
{
 8004614:	4770      	bx	lr

08004616 <HAL_TIM_Encoder_DeInit>:
{
 8004616:	b510      	push	{r4, lr}
 8004618:	4604      	mov	r4, r0
  htim->State = HAL_TIM_STATE_BUSY;
 800461a:	2302      	movs	r3, #2
 800461c:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_TIM_DISABLE(htim);
 8004620:	6803      	ldr	r3, [r0, #0]
 8004622:	6a19      	ldr	r1, [r3, #32]
 8004624:	f241 1211 	movw	r2, #4369	; 0x1111
 8004628:	4211      	tst	r1, r2
 800462a:	d108      	bne.n	800463e <HAL_TIM_Encoder_DeInit+0x28>
 800462c:	6a19      	ldr	r1, [r3, #32]
 800462e:	f240 4244 	movw	r2, #1092	; 0x444
 8004632:	4211      	tst	r1, r2
 8004634:	d103      	bne.n	800463e <HAL_TIM_Encoder_DeInit+0x28>
 8004636:	681a      	ldr	r2, [r3, #0]
 8004638:	f022 0201 	bic.w	r2, r2, #1
 800463c:	601a      	str	r2, [r3, #0]
  HAL_TIM_Encoder_MspDeInit(htim);
 800463e:	4620      	mov	r0, r4
 8004640:	f7ff ffe8 	bl	8004614 <HAL_TIM_Encoder_MspDeInit>
  htim->State = HAL_TIM_STATE_RESET;
 8004644:	2000      	movs	r0, #0
 8004646:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800464a:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 800464e:	bd10      	pop	{r4, pc}

08004650 <HAL_TIM_DMABurst_WriteStart>:
{
 8004650:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004654:	9e06      	ldr	r6, [sp, #24]
  if((htim->State == HAL_TIM_STATE_BUSY))
 8004656:	f890 403d 	ldrb.w	r4, [r0, #61]	; 0x3d
 800465a:	b2e4      	uxtb	r4, r4
 800465c:	2c02      	cmp	r4, #2
 800465e:	f000 809f 	beq.w	80047a0 <HAL_TIM_DMABurst_WriteStart+0x150>
  else if((htim->State == HAL_TIM_STATE_READY))
 8004662:	f890 403d 	ldrb.w	r4, [r0, #61]	; 0x3d
 8004666:	b2e4      	uxtb	r4, r4
 8004668:	2c01      	cmp	r4, #1
 800466a:	d02c      	beq.n	80046c6 <HAL_TIM_DMABurst_WriteStart+0x76>
 800466c:	461f      	mov	r7, r3
 800466e:	4615      	mov	r5, r2
 8004670:	4688      	mov	r8, r1
 8004672:	4604      	mov	r4, r0
  switch(BurstRequestSrc)
 8004674:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8004678:	d065      	beq.n	8004746 <HAL_TIM_DMABurst_WriteStart+0xf6>
 800467a:	d82e      	bhi.n	80046da <HAL_TIM_DMABurst_WriteStart+0x8a>
 800467c:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8004680:	d043      	beq.n	800470a <HAL_TIM_DMABurst_WriteStart+0xba>
 8004682:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8004686:	d04f      	beq.n	8004728 <HAL_TIM_DMABurst_WriteStart+0xd8>
 8004688:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 800468c:	d10d      	bne.n	80046aa <HAL_TIM_DMABurst_WriteStart+0x5a>
      htim->hdma[TIM_DMA_ID_UPDATE]->XferCpltCallback = TIM_DMAPeriodElapsedCplt;
 800468e:	6a03      	ldr	r3, [r0, #32]
 8004690:	4a45      	ldr	r2, [pc, #276]	; (80047a8 <HAL_TIM_DMABurst_WriteStart+0x158>)
 8004692:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_UPDATE]->XferErrorCallback = TIM_DMAError ;
 8004694:	6a03      	ldr	r3, [r0, #32]
 8004696:	4a45      	ldr	r2, [pc, #276]	; (80047ac <HAL_TIM_DMABurst_WriteStart+0x15c>)
 8004698:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_UPDATE], (uint32_t)BurstBuffer, (uint32_t)&htim->Instance->DMAR, ((BurstLength) >> 8U) + 1U);
 800469a:	6802      	ldr	r2, [r0, #0]
 800469c:	0a33      	lsrs	r3, r6, #8
 800469e:	3301      	adds	r3, #1
 80046a0:	324c      	adds	r2, #76	; 0x4c
 80046a2:	4639      	mov	r1, r7
 80046a4:	6a00      	ldr	r0, [r0, #32]
 80046a6:	f7fd fddd 	bl	8002264 <HAL_DMA_Start_IT>
   htim->Instance->DCR = BurstBaseAddress | BurstLength;
 80046aa:	6823      	ldr	r3, [r4, #0]
 80046ac:	ea46 0608 	orr.w	r6, r6, r8
 80046b0:	649e      	str	r6, [r3, #72]	; 0x48
   __HAL_TIM_ENABLE_DMA(htim, BurstRequestSrc);
 80046b2:	6823      	ldr	r3, [r4, #0]
 80046b4:	68da      	ldr	r2, [r3, #12]
 80046b6:	432a      	orrs	r2, r5
 80046b8:	60da      	str	r2, [r3, #12]
   htim->State = HAL_TIM_STATE_READY;
 80046ba:	2301      	movs	r3, #1
 80046bc:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80046c0:	2000      	movs	r0, #0
 80046c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if((BurstBuffer == 0U) && (BurstLength > 0U))
 80046c6:	b11b      	cbz	r3, 80046d0 <HAL_TIM_DMABurst_WriteStart+0x80>
      htim->State = HAL_TIM_STATE_BUSY;
 80046c8:	2402      	movs	r4, #2
 80046ca:	f880 403d 	strb.w	r4, [r0, #61]	; 0x3d
 80046ce:	e7cd      	b.n	800466c <HAL_TIM_DMABurst_WriteStart+0x1c>
    if((BurstBuffer == 0U) && (BurstLength > 0U))
 80046d0:	2e00      	cmp	r6, #0
 80046d2:	d0f9      	beq.n	80046c8 <HAL_TIM_DMABurst_WriteStart+0x78>
      return HAL_ERROR;
 80046d4:	2001      	movs	r0, #1
}
 80046d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  switch(BurstRequestSrc)
 80046da:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 80046de:	d041      	beq.n	8004764 <HAL_TIM_DMABurst_WriteStart+0x114>
 80046e0:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 80046e4:	d04d      	beq.n	8004782 <HAL_TIM_DMABurst_WriteStart+0x132>
 80046e6:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 80046ea:	d1de      	bne.n	80046aa <HAL_TIM_DMABurst_WriteStart+0x5a>
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback =  TIM_DMADelayPulseCplt;
 80046ec:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80046ee:	4a30      	ldr	r2, [pc, #192]	; (80047b0 <HAL_TIM_DMABurst_WriteStart+0x160>)
 80046f0:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 80046f2:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80046f4:	4a2d      	ldr	r2, [pc, #180]	; (80047ac <HAL_TIM_DMABurst_WriteStart+0x15c>)
 80046f6:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)BurstBuffer, (uint32_t)&htim->Instance->DMAR, ((BurstLength) >> 8U) + 1U);
 80046f8:	6802      	ldr	r2, [r0, #0]
 80046fa:	0a33      	lsrs	r3, r6, #8
 80046fc:	3301      	adds	r3, #1
 80046fe:	324c      	adds	r2, #76	; 0x4c
 8004700:	4639      	mov	r1, r7
 8004702:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8004704:	f7fd fdae 	bl	8002264 <HAL_DMA_Start_IT>
    break;
 8004708:	e7cf      	b.n	80046aa <HAL_TIM_DMABurst_WriteStart+0x5a>
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback =  TIM_DMADelayPulseCplt;
 800470a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800470c:	4a28      	ldr	r2, [pc, #160]	; (80047b0 <HAL_TIM_DMABurst_WriteStart+0x160>)
 800470e:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8004710:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8004712:	4a26      	ldr	r2, [pc, #152]	; (80047ac <HAL_TIM_DMABurst_WriteStart+0x15c>)
 8004714:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)BurstBuffer, (uint32_t)&htim->Instance->DMAR, ((BurstLength) >> 8U) + 1U);
 8004716:	6802      	ldr	r2, [r0, #0]
 8004718:	0a33      	lsrs	r3, r6, #8
 800471a:	3301      	adds	r3, #1
 800471c:	324c      	adds	r2, #76	; 0x4c
 800471e:	4639      	mov	r1, r7
 8004720:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8004722:	f7fd fd9f 	bl	8002264 <HAL_DMA_Start_IT>
    break;
 8004726:	e7c0      	b.n	80046aa <HAL_TIM_DMABurst_WriteStart+0x5a>
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback =  TIM_DMADelayPulseCplt;
 8004728:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800472a:	4a21      	ldr	r2, [pc, #132]	; (80047b0 <HAL_TIM_DMABurst_WriteStart+0x160>)
 800472c:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 800472e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8004730:	4a1e      	ldr	r2, [pc, #120]	; (80047ac <HAL_TIM_DMABurst_WriteStart+0x15c>)
 8004732:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)BurstBuffer, (uint32_t)&htim->Instance->DMAR, ((BurstLength) >> 8U) + 1U);
 8004734:	6802      	ldr	r2, [r0, #0]
 8004736:	0a33      	lsrs	r3, r6, #8
 8004738:	3301      	adds	r3, #1
 800473a:	324c      	adds	r2, #76	; 0x4c
 800473c:	4639      	mov	r1, r7
 800473e:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8004740:	f7fd fd90 	bl	8002264 <HAL_DMA_Start_IT>
    break;
 8004744:	e7b1      	b.n	80046aa <HAL_TIM_DMABurst_WriteStart+0x5a>
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback =  TIM_DMADelayPulseCplt;
 8004746:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8004748:	4a19      	ldr	r2, [pc, #100]	; (80047b0 <HAL_TIM_DMABurst_WriteStart+0x160>)
 800474a:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 800474c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800474e:	4a17      	ldr	r2, [pc, #92]	; (80047ac <HAL_TIM_DMABurst_WriteStart+0x15c>)
 8004750:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)BurstBuffer, (uint32_t)&htim->Instance->DMAR, ((BurstLength) >> 8U) + 1U);
 8004752:	6802      	ldr	r2, [r0, #0]
 8004754:	0a33      	lsrs	r3, r6, #8
 8004756:	3301      	adds	r3, #1
 8004758:	324c      	adds	r2, #76	; 0x4c
 800475a:	4639      	mov	r1, r7
 800475c:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 800475e:	f7fd fd81 	bl	8002264 <HAL_DMA_Start_IT>
    break;
 8004762:	e7a2      	b.n	80046aa <HAL_TIM_DMABurst_WriteStart+0x5a>
      htim->hdma[TIM_DMA_ID_COMMUTATION]->XferCpltCallback =  TIMEx_DMACommutationCplt;
 8004764:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8004766:	4a13      	ldr	r2, [pc, #76]	; (80047b4 <HAL_TIM_DMABurst_WriteStart+0x164>)
 8004768:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_COMMUTATION]->XferErrorCallback = TIM_DMAError ;
 800476a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800476c:	4a0f      	ldr	r2, [pc, #60]	; (80047ac <HAL_TIM_DMABurst_WriteStart+0x15c>)
 800476e:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_COMMUTATION], (uint32_t)BurstBuffer, (uint32_t)&htim->Instance->DMAR, ((BurstLength) >> 8U) + 1U);
 8004770:	6802      	ldr	r2, [r0, #0]
 8004772:	0a33      	lsrs	r3, r6, #8
 8004774:	3301      	adds	r3, #1
 8004776:	324c      	adds	r2, #76	; 0x4c
 8004778:	4639      	mov	r1, r7
 800477a:	6b40      	ldr	r0, [r0, #52]	; 0x34
 800477c:	f7fd fd72 	bl	8002264 <HAL_DMA_Start_IT>
    break;
 8004780:	e793      	b.n	80046aa <HAL_TIM_DMABurst_WriteStart+0x5a>
      htim->hdma[TIM_DMA_ID_TRIGGER]->XferCpltCallback = TIM_DMATriggerCplt;
 8004782:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8004784:	4a0c      	ldr	r2, [pc, #48]	; (80047b8 <HAL_TIM_DMABurst_WriteStart+0x168>)
 8004786:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_TRIGGER]->XferErrorCallback = TIM_DMAError ;
 8004788:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800478a:	4a08      	ldr	r2, [pc, #32]	; (80047ac <HAL_TIM_DMABurst_WriteStart+0x15c>)
 800478c:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_TRIGGER], (uint32_t)BurstBuffer, (uint32_t)&htim->Instance->DMAR, ((BurstLength) >> 8U) + 1U);
 800478e:	6802      	ldr	r2, [r0, #0]
 8004790:	0a33      	lsrs	r3, r6, #8
 8004792:	3301      	adds	r3, #1
 8004794:	324c      	adds	r2, #76	; 0x4c
 8004796:	4639      	mov	r1, r7
 8004798:	6b80      	ldr	r0, [r0, #56]	; 0x38
 800479a:	f7fd fd63 	bl	8002264 <HAL_DMA_Start_IT>
    break;
 800479e:	e784      	b.n	80046aa <HAL_TIM_DMABurst_WriteStart+0x5a>
     return HAL_BUSY;
 80047a0:	2002      	movs	r0, #2
 80047a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80047a6:	bf00      	nop
 80047a8:	08004cef 	.word	0x08004cef
 80047ac:	08004f1f 	.word	0x08004f1f
 80047b0:	08004d4b 	.word	0x08004d4b
 80047b4:	08006db5 	.word	0x08006db5
 80047b8:	08004f0d 	.word	0x08004f0d

080047bc <HAL_TIM_DMABurst_WriteStop>:
{
 80047bc:	b538      	push	{r3, r4, r5, lr}
 80047be:	4605      	mov	r5, r0
 80047c0:	460c      	mov	r4, r1
  switch(BurstRequestSrc)
 80047c2:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 80047c6:	d028      	beq.n	800481a <HAL_TIM_DMABurst_WriteStop+0x5e>
 80047c8:	d812      	bhi.n	80047f0 <HAL_TIM_DMABurst_WriteStop+0x34>
 80047ca:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 80047ce:	d01c      	beq.n	800480a <HAL_TIM_DMABurst_WriteStop+0x4e>
 80047d0:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80047d4:	d01d      	beq.n	8004812 <HAL_TIM_DMABurst_WriteStop+0x56>
 80047d6:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 80047da:	d102      	bne.n	80047e2 <HAL_TIM_DMABurst_WriteStop+0x26>
      HAL_DMA_Abort(htim->hdma[TIM_DMA_ID_UPDATE]);
 80047dc:	6a00      	ldr	r0, [r0, #32]
 80047de:	f7fd fd7b 	bl	80022d8 <HAL_DMA_Abort>
  __HAL_TIM_DISABLE_DMA(htim, BurstRequestSrc);
 80047e2:	682a      	ldr	r2, [r5, #0]
 80047e4:	68d3      	ldr	r3, [r2, #12]
 80047e6:	ea23 0404 	bic.w	r4, r3, r4
 80047ea:	60d4      	str	r4, [r2, #12]
}
 80047ec:	2000      	movs	r0, #0
 80047ee:	bd38      	pop	{r3, r4, r5, pc}
  switch(BurstRequestSrc)
 80047f0:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
 80047f4:	d015      	beq.n	8004822 <HAL_TIM_DMABurst_WriteStop+0x66>
 80047f6:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
 80047fa:	d016      	beq.n	800482a <HAL_TIM_DMABurst_WriteStop+0x6e>
 80047fc:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 8004800:	d1ef      	bne.n	80047e2 <HAL_TIM_DMABurst_WriteStop+0x26>
      HAL_DMA_Abort(htim->hdma[TIM_DMA_ID_CC4]);
 8004802:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8004804:	f7fd fd68 	bl	80022d8 <HAL_DMA_Abort>
    break;
 8004808:	e7eb      	b.n	80047e2 <HAL_TIM_DMABurst_WriteStop+0x26>
      HAL_DMA_Abort(htim->hdma[TIM_DMA_ID_CC1]);
 800480a:	6a40      	ldr	r0, [r0, #36]	; 0x24
 800480c:	f7fd fd64 	bl	80022d8 <HAL_DMA_Abort>
    break;
 8004810:	e7e7      	b.n	80047e2 <HAL_TIM_DMABurst_WriteStop+0x26>
      HAL_DMA_Abort(htim->hdma[TIM_DMA_ID_CC2]);
 8004812:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8004814:	f7fd fd60 	bl	80022d8 <HAL_DMA_Abort>
    break;
 8004818:	e7e3      	b.n	80047e2 <HAL_TIM_DMABurst_WriteStop+0x26>
      HAL_DMA_Abort(htim->hdma[TIM_DMA_ID_CC3]);
 800481a:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 800481c:	f7fd fd5c 	bl	80022d8 <HAL_DMA_Abort>
    break;
 8004820:	e7df      	b.n	80047e2 <HAL_TIM_DMABurst_WriteStop+0x26>
      HAL_DMA_Abort(htim->hdma[TIM_DMA_ID_COMMUTATION]);
 8004822:	6b40      	ldr	r0, [r0, #52]	; 0x34
 8004824:	f7fd fd58 	bl	80022d8 <HAL_DMA_Abort>
    break;
 8004828:	e7db      	b.n	80047e2 <HAL_TIM_DMABurst_WriteStop+0x26>
      HAL_DMA_Abort(htim->hdma[TIM_DMA_ID_TRIGGER]);
 800482a:	6b80      	ldr	r0, [r0, #56]	; 0x38
 800482c:	f7fd fd54 	bl	80022d8 <HAL_DMA_Abort>
    break;
 8004830:	e7d7      	b.n	80047e2 <HAL_TIM_DMABurst_WriteStop+0x26>

08004832 <HAL_TIM_DMABurst_ReadStart>:
{
 8004832:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004836:	9e06      	ldr	r6, [sp, #24]
  if((htim->State == HAL_TIM_STATE_BUSY))
 8004838:	f890 403d 	ldrb.w	r4, [r0, #61]	; 0x3d
 800483c:	b2e4      	uxtb	r4, r4
 800483e:	2c02      	cmp	r4, #2
 8004840:	f000 809f 	beq.w	8004982 <HAL_TIM_DMABurst_ReadStart+0x150>
  else if((htim->State == HAL_TIM_STATE_READY))
 8004844:	f890 403d 	ldrb.w	r4, [r0, #61]	; 0x3d
 8004848:	b2e4      	uxtb	r4, r4
 800484a:	2c01      	cmp	r4, #1
 800484c:	d02c      	beq.n	80048a8 <HAL_TIM_DMABurst_ReadStart+0x76>
 800484e:	461f      	mov	r7, r3
 8004850:	4615      	mov	r5, r2
 8004852:	4688      	mov	r8, r1
 8004854:	4604      	mov	r4, r0
  switch(BurstRequestSrc)
 8004856:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 800485a:	d065      	beq.n	8004928 <HAL_TIM_DMABurst_ReadStart+0xf6>
 800485c:	d82e      	bhi.n	80048bc <HAL_TIM_DMABurst_ReadStart+0x8a>
 800485e:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8004862:	d043      	beq.n	80048ec <HAL_TIM_DMABurst_ReadStart+0xba>
 8004864:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8004868:	d04f      	beq.n	800490a <HAL_TIM_DMABurst_ReadStart+0xd8>
 800486a:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 800486e:	d10d      	bne.n	800488c <HAL_TIM_DMABurst_ReadStart+0x5a>
      htim->hdma[TIM_DMA_ID_UPDATE]->XferCpltCallback = TIM_DMAPeriodElapsedCplt;
 8004870:	6a03      	ldr	r3, [r0, #32]
 8004872:	4a45      	ldr	r2, [pc, #276]	; (8004988 <HAL_TIM_DMABurst_ReadStart+0x156>)
 8004874:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_UPDATE]->XferErrorCallback = TIM_DMAError ;
 8004876:	6a03      	ldr	r3, [r0, #32]
 8004878:	4a44      	ldr	r2, [pc, #272]	; (800498c <HAL_TIM_DMABurst_ReadStart+0x15a>)
 800487a:	631a      	str	r2, [r3, #48]	; 0x30
       HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_UPDATE], (uint32_t)&htim->Instance->DMAR, (uint32_t)BurstBuffer, ((BurstLength) >> 8U) + 1U);
 800487c:	6801      	ldr	r1, [r0, #0]
 800487e:	0a33      	lsrs	r3, r6, #8
 8004880:	3301      	adds	r3, #1
 8004882:	463a      	mov	r2, r7
 8004884:	314c      	adds	r1, #76	; 0x4c
 8004886:	6a00      	ldr	r0, [r0, #32]
 8004888:	f7fd fcec 	bl	8002264 <HAL_DMA_Start_IT>
  htim->Instance->DCR = BurstBaseAddress | BurstLength;
 800488c:	6823      	ldr	r3, [r4, #0]
 800488e:	ea46 0608 	orr.w	r6, r6, r8
 8004892:	649e      	str	r6, [r3, #72]	; 0x48
  __HAL_TIM_ENABLE_DMA(htim, BurstRequestSrc);
 8004894:	6823      	ldr	r3, [r4, #0]
 8004896:	68da      	ldr	r2, [r3, #12]
 8004898:	432a      	orrs	r2, r5
 800489a:	60da      	str	r2, [r3, #12]
  htim->State = HAL_TIM_STATE_READY;
 800489c:	2301      	movs	r3, #1
 800489e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80048a2:	2000      	movs	r0, #0
 80048a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if((BurstBuffer == 0U) && (BurstLength > 0U))
 80048a8:	b11b      	cbz	r3, 80048b2 <HAL_TIM_DMABurst_ReadStart+0x80>
      htim->State = HAL_TIM_STATE_BUSY;
 80048aa:	2402      	movs	r4, #2
 80048ac:	f880 403d 	strb.w	r4, [r0, #61]	; 0x3d
 80048b0:	e7cd      	b.n	800484e <HAL_TIM_DMABurst_ReadStart+0x1c>
    if((BurstBuffer == 0U) && (BurstLength > 0U))
 80048b2:	2e00      	cmp	r6, #0
 80048b4:	d0f9      	beq.n	80048aa <HAL_TIM_DMABurst_ReadStart+0x78>
      return HAL_ERROR;
 80048b6:	2001      	movs	r0, #1
}
 80048b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  switch(BurstRequestSrc)
 80048bc:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 80048c0:	d041      	beq.n	8004946 <HAL_TIM_DMABurst_ReadStart+0x114>
 80048c2:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 80048c6:	d04d      	beq.n	8004964 <HAL_TIM_DMABurst_ReadStart+0x132>
 80048c8:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 80048cc:	d1de      	bne.n	800488c <HAL_TIM_DMABurst_ReadStart+0x5a>
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback =  TIM_DMACaptureCplt;
 80048ce:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80048d0:	4a2f      	ldr	r2, [pc, #188]	; (8004990 <HAL_TIM_DMABurst_ReadStart+0x15e>)
 80048d2:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 80048d4:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80048d6:	4a2d      	ldr	r2, [pc, #180]	; (800498c <HAL_TIM_DMABurst_ReadStart+0x15a>)
 80048d8:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)&htim->Instance->DMAR, (uint32_t)BurstBuffer, ((BurstLength) >> 8U) + 1U);
 80048da:	6801      	ldr	r1, [r0, #0]
 80048dc:	0a33      	lsrs	r3, r6, #8
 80048de:	3301      	adds	r3, #1
 80048e0:	463a      	mov	r2, r7
 80048e2:	314c      	adds	r1, #76	; 0x4c
 80048e4:	6b00      	ldr	r0, [r0, #48]	; 0x30
 80048e6:	f7fd fcbd 	bl	8002264 <HAL_DMA_Start_IT>
    break;
 80048ea:	e7cf      	b.n	800488c <HAL_TIM_DMABurst_ReadStart+0x5a>
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback =  TIM_DMACaptureCplt;
 80048ec:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80048ee:	4a28      	ldr	r2, [pc, #160]	; (8004990 <HAL_TIM_DMABurst_ReadStart+0x15e>)
 80048f0:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 80048f2:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80048f4:	4a25      	ldr	r2, [pc, #148]	; (800498c <HAL_TIM_DMABurst_ReadStart+0x15a>)
 80048f6:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)&htim->Instance->DMAR, (uint32_t)BurstBuffer, ((BurstLength) >> 8U) + 1U);
 80048f8:	6801      	ldr	r1, [r0, #0]
 80048fa:	0a33      	lsrs	r3, r6, #8
 80048fc:	3301      	adds	r3, #1
 80048fe:	463a      	mov	r2, r7
 8004900:	314c      	adds	r1, #76	; 0x4c
 8004902:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8004904:	f7fd fcae 	bl	8002264 <HAL_DMA_Start_IT>
    break;
 8004908:	e7c0      	b.n	800488c <HAL_TIM_DMABurst_ReadStart+0x5a>
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback =  TIM_DMACaptureCplt;
 800490a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800490c:	4a20      	ldr	r2, [pc, #128]	; (8004990 <HAL_TIM_DMABurst_ReadStart+0x15e>)
 800490e:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8004910:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8004912:	4a1e      	ldr	r2, [pc, #120]	; (800498c <HAL_TIM_DMABurst_ReadStart+0x15a>)
 8004914:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)&htim->Instance->DMAR, (uint32_t)BurstBuffer, ((BurstLength) >> 8U) + 1U);
 8004916:	6801      	ldr	r1, [r0, #0]
 8004918:	0a33      	lsrs	r3, r6, #8
 800491a:	3301      	adds	r3, #1
 800491c:	463a      	mov	r2, r7
 800491e:	314c      	adds	r1, #76	; 0x4c
 8004920:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8004922:	f7fd fc9f 	bl	8002264 <HAL_DMA_Start_IT>
    break;
 8004926:	e7b1      	b.n	800488c <HAL_TIM_DMABurst_ReadStart+0x5a>
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback =  TIM_DMACaptureCplt;
 8004928:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800492a:	4a19      	ldr	r2, [pc, #100]	; (8004990 <HAL_TIM_DMABurst_ReadStart+0x15e>)
 800492c:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 800492e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8004930:	4a16      	ldr	r2, [pc, #88]	; (800498c <HAL_TIM_DMABurst_ReadStart+0x15a>)
 8004932:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)&htim->Instance->DMAR, (uint32_t)BurstBuffer, ((BurstLength) >> 8U) + 1U);
 8004934:	6801      	ldr	r1, [r0, #0]
 8004936:	0a33      	lsrs	r3, r6, #8
 8004938:	3301      	adds	r3, #1
 800493a:	463a      	mov	r2, r7
 800493c:	314c      	adds	r1, #76	; 0x4c
 800493e:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 8004940:	f7fd fc90 	bl	8002264 <HAL_DMA_Start_IT>
    break;
 8004944:	e7a2      	b.n	800488c <HAL_TIM_DMABurst_ReadStart+0x5a>
      htim->hdma[TIM_DMA_ID_COMMUTATION]->XferCpltCallback =  TIMEx_DMACommutationCplt;
 8004946:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8004948:	4a12      	ldr	r2, [pc, #72]	; (8004994 <HAL_TIM_DMABurst_ReadStart+0x162>)
 800494a:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_COMMUTATION]->XferErrorCallback = TIM_DMAError ;
 800494c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800494e:	4a0f      	ldr	r2, [pc, #60]	; (800498c <HAL_TIM_DMABurst_ReadStart+0x15a>)
 8004950:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_COMMUTATION], (uint32_t)&htim->Instance->DMAR, (uint32_t)BurstBuffer, ((BurstLength) >> 8U) + 1U);
 8004952:	6801      	ldr	r1, [r0, #0]
 8004954:	0a33      	lsrs	r3, r6, #8
 8004956:	3301      	adds	r3, #1
 8004958:	463a      	mov	r2, r7
 800495a:	314c      	adds	r1, #76	; 0x4c
 800495c:	6b40      	ldr	r0, [r0, #52]	; 0x34
 800495e:	f7fd fc81 	bl	8002264 <HAL_DMA_Start_IT>
    break;
 8004962:	e793      	b.n	800488c <HAL_TIM_DMABurst_ReadStart+0x5a>
      htim->hdma[TIM_DMA_ID_TRIGGER]->XferCpltCallback = TIM_DMATriggerCplt;
 8004964:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8004966:	4a0c      	ldr	r2, [pc, #48]	; (8004998 <HAL_TIM_DMABurst_ReadStart+0x166>)
 8004968:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_TRIGGER]->XferErrorCallback = TIM_DMAError ;
 800496a:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800496c:	4a07      	ldr	r2, [pc, #28]	; (800498c <HAL_TIM_DMABurst_ReadStart+0x15a>)
 800496e:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_TRIGGER], (uint32_t)&htim->Instance->DMAR, (uint32_t)BurstBuffer, ((BurstLength) >> 8U) + 1U);
 8004970:	6801      	ldr	r1, [r0, #0]
 8004972:	0a33      	lsrs	r3, r6, #8
 8004974:	3301      	adds	r3, #1
 8004976:	463a      	mov	r2, r7
 8004978:	314c      	adds	r1, #76	; 0x4c
 800497a:	6b80      	ldr	r0, [r0, #56]	; 0x38
 800497c:	f7fd fc72 	bl	8002264 <HAL_DMA_Start_IT>
    break;
 8004980:	e784      	b.n	800488c <HAL_TIM_DMABurst_ReadStart+0x5a>
     return HAL_BUSY;
 8004982:	2002      	movs	r0, #2
 8004984:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004988:	08004cef 	.word	0x08004cef
 800498c:	08004f1f 	.word	0x08004f1f
 8004990:	08004d03 	.word	0x08004d03
 8004994:	08006db5 	.word	0x08006db5
 8004998:	08004f0d 	.word	0x08004f0d

0800499c <HAL_TIM_DMABurst_ReadStop>:
{
 800499c:	b538      	push	{r3, r4, r5, lr}
 800499e:	4605      	mov	r5, r0
 80049a0:	460c      	mov	r4, r1
  switch(BurstRequestSrc)
 80049a2:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 80049a6:	d028      	beq.n	80049fa <HAL_TIM_DMABurst_ReadStop+0x5e>
 80049a8:	d812      	bhi.n	80049d0 <HAL_TIM_DMABurst_ReadStop+0x34>
 80049aa:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 80049ae:	d01c      	beq.n	80049ea <HAL_TIM_DMABurst_ReadStop+0x4e>
 80049b0:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80049b4:	d01d      	beq.n	80049f2 <HAL_TIM_DMABurst_ReadStop+0x56>
 80049b6:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 80049ba:	d102      	bne.n	80049c2 <HAL_TIM_DMABurst_ReadStop+0x26>
      HAL_DMA_Abort(htim->hdma[TIM_DMA_ID_UPDATE]);
 80049bc:	6a00      	ldr	r0, [r0, #32]
 80049be:	f7fd fc8b 	bl	80022d8 <HAL_DMA_Abort>
  __HAL_TIM_DISABLE_DMA(htim, BurstRequestSrc);
 80049c2:	682a      	ldr	r2, [r5, #0]
 80049c4:	68d3      	ldr	r3, [r2, #12]
 80049c6:	ea23 0404 	bic.w	r4, r3, r4
 80049ca:	60d4      	str	r4, [r2, #12]
}
 80049cc:	2000      	movs	r0, #0
 80049ce:	bd38      	pop	{r3, r4, r5, pc}
  switch(BurstRequestSrc)
 80049d0:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
 80049d4:	d015      	beq.n	8004a02 <HAL_TIM_DMABurst_ReadStop+0x66>
 80049d6:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
 80049da:	d016      	beq.n	8004a0a <HAL_TIM_DMABurst_ReadStop+0x6e>
 80049dc:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 80049e0:	d1ef      	bne.n	80049c2 <HAL_TIM_DMABurst_ReadStop+0x26>
      HAL_DMA_Abort(htim->hdma[TIM_DMA_ID_CC4]);
 80049e2:	6b00      	ldr	r0, [r0, #48]	; 0x30
 80049e4:	f7fd fc78 	bl	80022d8 <HAL_DMA_Abort>
    break;
 80049e8:	e7eb      	b.n	80049c2 <HAL_TIM_DMABurst_ReadStop+0x26>
      HAL_DMA_Abort(htim->hdma[TIM_DMA_ID_CC1]);
 80049ea:	6a40      	ldr	r0, [r0, #36]	; 0x24
 80049ec:	f7fd fc74 	bl	80022d8 <HAL_DMA_Abort>
    break;
 80049f0:	e7e7      	b.n	80049c2 <HAL_TIM_DMABurst_ReadStop+0x26>
      HAL_DMA_Abort(htim->hdma[TIM_DMA_ID_CC2]);
 80049f2:	6a80      	ldr	r0, [r0, #40]	; 0x28
 80049f4:	f7fd fc70 	bl	80022d8 <HAL_DMA_Abort>
    break;
 80049f8:	e7e3      	b.n	80049c2 <HAL_TIM_DMABurst_ReadStop+0x26>
      HAL_DMA_Abort(htim->hdma[TIM_DMA_ID_CC3]);
 80049fa:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 80049fc:	f7fd fc6c 	bl	80022d8 <HAL_DMA_Abort>
    break;
 8004a00:	e7df      	b.n	80049c2 <HAL_TIM_DMABurst_ReadStop+0x26>
      HAL_DMA_Abort(htim->hdma[TIM_DMA_ID_COMMUTATION]);
 8004a02:	6b40      	ldr	r0, [r0, #52]	; 0x34
 8004a04:	f7fd fc68 	bl	80022d8 <HAL_DMA_Abort>
    break;
 8004a08:	e7db      	b.n	80049c2 <HAL_TIM_DMABurst_ReadStop+0x26>
      HAL_DMA_Abort(htim->hdma[TIM_DMA_ID_TRIGGER]);
 8004a0a:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8004a0c:	f7fd fc64 	bl	80022d8 <HAL_DMA_Abort>
    break;
 8004a10:	e7d7      	b.n	80049c2 <HAL_TIM_DMABurst_ReadStop+0x26>

08004a12 <HAL_TIM_GenerateEvent>:
  __HAL_LOCK(htim);
 8004a12:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8004a16:	2b01      	cmp	r3, #1
 8004a18:	d00c      	beq.n	8004a34 <HAL_TIM_GenerateEvent+0x22>
  htim->State = HAL_TIM_STATE_BUSY;
 8004a1a:	2302      	movs	r3, #2
 8004a1c:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  htim->Instance->EGR = EventSource;
 8004a20:	6803      	ldr	r3, [r0, #0]
 8004a22:	6159      	str	r1, [r3, #20]
  htim->State = HAL_TIM_STATE_READY;
 8004a24:	2301      	movs	r3, #1
 8004a26:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8004a2a:	2300      	movs	r3, #0
 8004a2c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 8004a30:	4618      	mov	r0, r3
 8004a32:	4770      	bx	lr
  __HAL_LOCK(htim);
 8004a34:	2002      	movs	r0, #2
}
 8004a36:	4770      	bx	lr

08004a38 <HAL_TIM_ConfigOCrefClear>:
  __HAL_LOCK(htim);
 8004a38:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8004a3c:	2b01      	cmp	r3, #1
 8004a3e:	d061      	beq.n	8004b04 <HAL_TIM_ConfigOCrefClear+0xcc>
{
 8004a40:	b570      	push	{r4, r5, r6, lr}
 8004a42:	4616      	mov	r6, r2
 8004a44:	460d      	mov	r5, r1
 8004a46:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8004a48:	2301      	movs	r3, #1
 8004a4a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8004a4e:	2302      	movs	r3, #2
 8004a50:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  switch (sClearInputConfig->ClearInputSource)
 8004a54:	684b      	ldr	r3, [r1, #4]
 8004a56:	b163      	cbz	r3, 8004a72 <HAL_TIM_ConfigOCrefClear+0x3a>
 8004a58:	2b01      	cmp	r3, #1
 8004a5a:	d00e      	beq.n	8004a7a <HAL_TIM_ConfigOCrefClear+0x42>
  switch (Channel)
 8004a5c:	2e0c      	cmp	r6, #12
 8004a5e:	d81a      	bhi.n	8004a96 <HAL_TIM_ConfigOCrefClear+0x5e>
 8004a60:	e8df f006 	tbb	[pc, r6]
 8004a64:	19191912 	.word	0x19191912
 8004a68:	19191926 	.word	0x19191926
 8004a6c:	19191934 	.word	0x19191934
 8004a70:	42          	.byte	0x42
 8004a71:	00          	.byte	0x00
      htim->Instance->SMCR = tmpsmcr;
 8004a72:	6803      	ldr	r3, [r0, #0]
 8004a74:	2200      	movs	r2, #0
 8004a76:	609a      	str	r2, [r3, #8]
    break;
 8004a78:	e7f0      	b.n	8004a5c <HAL_TIM_ConfigOCrefClear+0x24>
      TIM_ETR_SetConfig(htim->Instance,
 8004a7a:	690b      	ldr	r3, [r1, #16]
 8004a7c:	688a      	ldr	r2, [r1, #8]
 8004a7e:	68c9      	ldr	r1, [r1, #12]
 8004a80:	6800      	ldr	r0, [r0, #0]
 8004a82:	f7ff fc53 	bl	800432c <TIM_ETR_SetConfig>
    break;
 8004a86:	e7e9      	b.n	8004a5c <HAL_TIM_ConfigOCrefClear+0x24>
        if(sClearInputConfig->ClearInputState != RESET)
 8004a88:	682b      	ldr	r3, [r5, #0]
 8004a8a:	b15b      	cbz	r3, 8004aa4 <HAL_TIM_ConfigOCrefClear+0x6c>
          htim->Instance->CCMR1 |= TIM_CCMR1_OC1CE;
 8004a8c:	6822      	ldr	r2, [r4, #0]
 8004a8e:	6993      	ldr	r3, [r2, #24]
 8004a90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a94:	6193      	str	r3, [r2, #24]
  htim->State = HAL_TIM_STATE_READY;
 8004a96:	2301      	movs	r3, #1
 8004a98:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8004a9c:	2000      	movs	r0, #0
 8004a9e:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
  return HAL_OK;
 8004aa2:	bd70      	pop	{r4, r5, r6, pc}
        htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1CE;
 8004aa4:	6822      	ldr	r2, [r4, #0]
 8004aa6:	6993      	ldr	r3, [r2, #24]
 8004aa8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004aac:	6193      	str	r3, [r2, #24]
 8004aae:	e7f2      	b.n	8004a96 <HAL_TIM_ConfigOCrefClear+0x5e>
        if(sClearInputConfig->ClearInputState != RESET)
 8004ab0:	682b      	ldr	r3, [r5, #0]
 8004ab2:	b12b      	cbz	r3, 8004ac0 <HAL_TIM_ConfigOCrefClear+0x88>
          htim->Instance->CCMR1 |= TIM_CCMR1_OC2CE;
 8004ab4:	6822      	ldr	r2, [r4, #0]
 8004ab6:	6993      	ldr	r3, [r2, #24]
 8004ab8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004abc:	6193      	str	r3, [r2, #24]
 8004abe:	e7ea      	b.n	8004a96 <HAL_TIM_ConfigOCrefClear+0x5e>
          htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2CE;
 8004ac0:	6822      	ldr	r2, [r4, #0]
 8004ac2:	6993      	ldr	r3, [r2, #24]
 8004ac4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004ac8:	6193      	str	r3, [r2, #24]
 8004aca:	e7e4      	b.n	8004a96 <HAL_TIM_ConfigOCrefClear+0x5e>
        if(sClearInputConfig->ClearInputState != RESET)
 8004acc:	682b      	ldr	r3, [r5, #0]
 8004ace:	b12b      	cbz	r3, 8004adc <HAL_TIM_ConfigOCrefClear+0xa4>
          htim->Instance->CCMR2 |= TIM_CCMR2_OC3CE;
 8004ad0:	6822      	ldr	r2, [r4, #0]
 8004ad2:	69d3      	ldr	r3, [r2, #28]
 8004ad4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ad8:	61d3      	str	r3, [r2, #28]
 8004ada:	e7dc      	b.n	8004a96 <HAL_TIM_ConfigOCrefClear+0x5e>
        htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3CE;
 8004adc:	6822      	ldr	r2, [r4, #0]
 8004ade:	69d3      	ldr	r3, [r2, #28]
 8004ae0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004ae4:	61d3      	str	r3, [r2, #28]
 8004ae6:	e7d6      	b.n	8004a96 <HAL_TIM_ConfigOCrefClear+0x5e>
        if(sClearInputConfig->ClearInputState != RESET)
 8004ae8:	682b      	ldr	r3, [r5, #0]
 8004aea:	b12b      	cbz	r3, 8004af8 <HAL_TIM_ConfigOCrefClear+0xc0>
          htim->Instance->CCMR2 |= TIM_CCMR2_OC4CE;
 8004aec:	6822      	ldr	r2, [r4, #0]
 8004aee:	69d3      	ldr	r3, [r2, #28]
 8004af0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004af4:	61d3      	str	r3, [r2, #28]
 8004af6:	e7ce      	b.n	8004a96 <HAL_TIM_ConfigOCrefClear+0x5e>
        htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4CE;
 8004af8:	6822      	ldr	r2, [r4, #0]
 8004afa:	69d3      	ldr	r3, [r2, #28]
 8004afc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004b00:	61d3      	str	r3, [r2, #28]
 8004b02:	e7c8      	b.n	8004a96 <HAL_TIM_ConfigOCrefClear+0x5e>
  __HAL_LOCK(htim);
 8004b04:	2002      	movs	r0, #2
 8004b06:	4770      	bx	lr

08004b08 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8004b08:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8004b0c:	2b01      	cmp	r3, #1
 8004b0e:	d07d      	beq.n	8004c0c <HAL_TIM_ConfigClockSource+0x104>
{
 8004b10:	b510      	push	{r4, lr}
 8004b12:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8004b14:	2301      	movs	r3, #1
 8004b16:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8004b1a:	2302      	movs	r3, #2
 8004b1c:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8004b20:	6802      	ldr	r2, [r0, #0]
 8004b22:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004b24:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004b28:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 8004b2c:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 8004b2e:	680b      	ldr	r3, [r1, #0]
 8004b30:	2b40      	cmp	r3, #64	; 0x40
 8004b32:	d057      	beq.n	8004be4 <HAL_TIM_ConfigClockSource+0xdc>
 8004b34:	d910      	bls.n	8004b58 <HAL_TIM_ConfigClockSource+0x50>
 8004b36:	2b70      	cmp	r3, #112	; 0x70
 8004b38:	d03e      	beq.n	8004bb8 <HAL_TIM_ConfigClockSource+0xb0>
 8004b3a:	d81f      	bhi.n	8004b7c <HAL_TIM_ConfigClockSource+0x74>
 8004b3c:	2b50      	cmp	r3, #80	; 0x50
 8004b3e:	d047      	beq.n	8004bd0 <HAL_TIM_ConfigClockSource+0xc8>
 8004b40:	2b60      	cmp	r3, #96	; 0x60
 8004b42:	d132      	bne.n	8004baa <HAL_TIM_ConfigClockSource+0xa2>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004b44:	68ca      	ldr	r2, [r1, #12]
 8004b46:	6849      	ldr	r1, [r1, #4]
 8004b48:	6800      	ldr	r0, [r0, #0]
 8004b4a:	f7ff fba1 	bl	8004290 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004b4e:	2160      	movs	r1, #96	; 0x60
 8004b50:	6820      	ldr	r0, [r4, #0]
 8004b52:	f7ff fbe3 	bl	800431c <TIM_ITRx_SetConfig>
    break;
 8004b56:	e028      	b.n	8004baa <HAL_TIM_ConfigClockSource+0xa2>
  switch (sClockSourceConfig->ClockSource)
 8004b58:	2b10      	cmp	r3, #16
 8004b5a:	d04d      	beq.n	8004bf8 <HAL_TIM_ConfigClockSource+0xf0>
 8004b5c:	d908      	bls.n	8004b70 <HAL_TIM_ConfigClockSource+0x68>
 8004b5e:	2b20      	cmp	r3, #32
 8004b60:	d04f      	beq.n	8004c02 <HAL_TIM_ConfigClockSource+0xfa>
 8004b62:	2b30      	cmp	r3, #48	; 0x30
 8004b64:	d121      	bne.n	8004baa <HAL_TIM_ConfigClockSource+0xa2>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR3);
 8004b66:	2130      	movs	r1, #48	; 0x30
 8004b68:	6800      	ldr	r0, [r0, #0]
 8004b6a:	f7ff fbd7 	bl	800431c <TIM_ITRx_SetConfig>
    break;
 8004b6e:	e01c      	b.n	8004baa <HAL_TIM_ConfigClockSource+0xa2>
  switch (sClockSourceConfig->ClockSource)
 8004b70:	b9db      	cbnz	r3, 8004baa <HAL_TIM_ConfigClockSource+0xa2>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR0);
 8004b72:	2100      	movs	r1, #0
 8004b74:	6800      	ldr	r0, [r0, #0]
 8004b76:	f7ff fbd1 	bl	800431c <TIM_ITRx_SetConfig>
    break;
 8004b7a:	e016      	b.n	8004baa <HAL_TIM_ConfigClockSource+0xa2>
  switch (sClockSourceConfig->ClockSource)
 8004b7c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b80:	d00e      	beq.n	8004ba0 <HAL_TIM_ConfigClockSource+0x98>
 8004b82:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b86:	d110      	bne.n	8004baa <HAL_TIM_ConfigClockSource+0xa2>
      TIM_ETR_SetConfig(htim->Instance,
 8004b88:	68cb      	ldr	r3, [r1, #12]
 8004b8a:	684a      	ldr	r2, [r1, #4]
 8004b8c:	6889      	ldr	r1, [r1, #8]
 8004b8e:	6800      	ldr	r0, [r0, #0]
 8004b90:	f7ff fbcc 	bl	800432c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004b94:	6822      	ldr	r2, [r4, #0]
 8004b96:	6893      	ldr	r3, [r2, #8]
 8004b98:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004b9c:	6093      	str	r3, [r2, #8]
    break;
 8004b9e:	e004      	b.n	8004baa <HAL_TIM_ConfigClockSource+0xa2>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8004ba0:	6802      	ldr	r2, [r0, #0]
 8004ba2:	6893      	ldr	r3, [r2, #8]
 8004ba4:	f023 0307 	bic.w	r3, r3, #7
 8004ba8:	6093      	str	r3, [r2, #8]
  htim->State = HAL_TIM_STATE_READY;
 8004baa:	2301      	movs	r3, #1
 8004bac:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8004bb0:	2000      	movs	r0, #0
 8004bb2:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
  return HAL_OK;
 8004bb6:	bd10      	pop	{r4, pc}
      TIM_ETR_SetConfig(htim->Instance,
 8004bb8:	68cb      	ldr	r3, [r1, #12]
 8004bba:	684a      	ldr	r2, [r1, #4]
 8004bbc:	6889      	ldr	r1, [r1, #8]
 8004bbe:	6800      	ldr	r0, [r0, #0]
 8004bc0:	f7ff fbb4 	bl	800432c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004bc4:	6822      	ldr	r2, [r4, #0]
 8004bc6:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004bc8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 8004bcc:	6093      	str	r3, [r2, #8]
    break;
 8004bce:	e7ec      	b.n	8004baa <HAL_TIM_ConfigClockSource+0xa2>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004bd0:	68ca      	ldr	r2, [r1, #12]
 8004bd2:	6849      	ldr	r1, [r1, #4]
 8004bd4:	6800      	ldr	r0, [r0, #0]
 8004bd6:	f7ff fb2f 	bl	8004238 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004bda:	2150      	movs	r1, #80	; 0x50
 8004bdc:	6820      	ldr	r0, [r4, #0]
 8004bde:	f7ff fb9d 	bl	800431c <TIM_ITRx_SetConfig>
    break;
 8004be2:	e7e2      	b.n	8004baa <HAL_TIM_ConfigClockSource+0xa2>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004be4:	68ca      	ldr	r2, [r1, #12]
 8004be6:	6849      	ldr	r1, [r1, #4]
 8004be8:	6800      	ldr	r0, [r0, #0]
 8004bea:	f7ff fb25 	bl	8004238 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004bee:	2140      	movs	r1, #64	; 0x40
 8004bf0:	6820      	ldr	r0, [r4, #0]
 8004bf2:	f7ff fb93 	bl	800431c <TIM_ITRx_SetConfig>
    break;
 8004bf6:	e7d8      	b.n	8004baa <HAL_TIM_ConfigClockSource+0xa2>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR1);
 8004bf8:	2110      	movs	r1, #16
 8004bfa:	6800      	ldr	r0, [r0, #0]
 8004bfc:	f7ff fb8e 	bl	800431c <TIM_ITRx_SetConfig>
    break;
 8004c00:	e7d3      	b.n	8004baa <HAL_TIM_ConfigClockSource+0xa2>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR2);
 8004c02:	2120      	movs	r1, #32
 8004c04:	6800      	ldr	r0, [r0, #0]
 8004c06:	f7ff fb89 	bl	800431c <TIM_ITRx_SetConfig>
    break;
 8004c0a:	e7ce      	b.n	8004baa <HAL_TIM_ConfigClockSource+0xa2>
  __HAL_LOCK(htim);
 8004c0c:	2002      	movs	r0, #2
 8004c0e:	4770      	bx	lr

08004c10 <HAL_TIM_ConfigTI1Input>:
  tmpcr2 = htim->Instance->CR2;
 8004c10:	6802      	ldr	r2, [r0, #0]
 8004c12:	6853      	ldr	r3, [r2, #4]
  tmpcr2 &= ~TIM_CR2_TI1S;
 8004c14:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  tmpcr2 |= TI1_Selection;
 8004c18:	4319      	orrs	r1, r3
  htim->Instance->CR2 = tmpcr2;
 8004c1a:	6051      	str	r1, [r2, #4]
}
 8004c1c:	2000      	movs	r0, #0
 8004c1e:	4770      	bx	lr

08004c20 <HAL_TIM_SlaveConfigSynchronization>:
{
 8004c20:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8004c22:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8004c26:	2b01      	cmp	r3, #1
 8004c28:	d101      	bne.n	8004c2e <HAL_TIM_SlaveConfigSynchronization+0xe>
 8004c2a:	2002      	movs	r0, #2
    }
 8004c2c:	bd38      	pop	{r3, r4, r5, pc}
 8004c2e:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8004c30:	2501      	movs	r5, #1
 8004c32:	f880 503c 	strb.w	r5, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8004c36:	2302      	movs	r3, #2
 8004c38:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  TIM_SlaveTimer_SetConfig(htim, sSlaveConfig);
 8004c3c:	f7ff fb81 	bl	8004342 <TIM_SlaveTimer_SetConfig>
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8004c40:	6822      	ldr	r2, [r4, #0]
 8004c42:	68d3      	ldr	r3, [r2, #12]
 8004c44:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c48:	60d3      	str	r3, [r2, #12]
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8004c4a:	6822      	ldr	r2, [r4, #0]
 8004c4c:	68d3      	ldr	r3, [r2, #12]
 8004c4e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004c52:	60d3      	str	r3, [r2, #12]
  htim->State = HAL_TIM_STATE_READY;
 8004c54:	f884 503d 	strb.w	r5, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8004c58:	2000      	movs	r0, #0
 8004c5a:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
  return HAL_OK;
 8004c5e:	bd38      	pop	{r3, r4, r5, pc}

08004c60 <HAL_TIM_SlaveConfigSynchronization_IT>:
    {
 8004c60:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8004c62:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8004c66:	2b01      	cmp	r3, #1
 8004c68:	d101      	bne.n	8004c6e <HAL_TIM_SlaveConfigSynchronization_IT+0xe>
 8004c6a:	2002      	movs	r0, #2
}
 8004c6c:	bd38      	pop	{r3, r4, r5, pc}
 8004c6e:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8004c70:	2501      	movs	r5, #1
 8004c72:	f880 503c 	strb.w	r5, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8004c76:	2302      	movs	r3, #2
 8004c78:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  TIM_SlaveTimer_SetConfig(htim, sSlaveConfig);
 8004c7c:	f7ff fb61 	bl	8004342 <TIM_SlaveTimer_SetConfig>
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_TRIGGER);
 8004c80:	6822      	ldr	r2, [r4, #0]
 8004c82:	68d3      	ldr	r3, [r2, #12]
 8004c84:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004c88:	60d3      	str	r3, [r2, #12]
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8004c8a:	6822      	ldr	r2, [r4, #0]
 8004c8c:	68d3      	ldr	r3, [r2, #12]
 8004c8e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004c92:	60d3      	str	r3, [r2, #12]
  htim->State = HAL_TIM_STATE_READY;
 8004c94:	f884 503d 	strb.w	r5, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8004c98:	2000      	movs	r0, #0
 8004c9a:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
  return HAL_OK;
 8004c9e:	bd38      	pop	{r3, r4, r5, pc}

08004ca0 <HAL_TIM_ReadCapturedValue>:
{
 8004ca0:	4603      	mov	r3, r0
  __HAL_LOCK(htim);
 8004ca2:	f890 203c 	ldrb.w	r2, [r0, #60]	; 0x3c
 8004ca6:	2a01      	cmp	r2, #1
 8004ca8:	d01e      	beq.n	8004ce8 <HAL_TIM_ReadCapturedValue+0x48>
 8004caa:	2201      	movs	r2, #1
 8004cac:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  switch (Channel)
 8004cb0:	290c      	cmp	r1, #12
 8004cb2:	d817      	bhi.n	8004ce4 <HAL_TIM_ReadCapturedValue+0x44>
 8004cb4:	e8df f001 	tbb	[pc, r1]
 8004cb8:	16161607 	.word	0x16161607
 8004cbc:	1616160d 	.word	0x1616160d
 8004cc0:	16161610 	.word	0x16161610
 8004cc4:	13          	.byte	0x13
 8004cc5:	00          	.byte	0x00
      tmpreg =  htim->Instance->CCR1;
 8004cc6:	6802      	ldr	r2, [r0, #0]
 8004cc8:	6b50      	ldr	r0, [r2, #52]	; 0x34
  __HAL_UNLOCK(htim);
 8004cca:	2200      	movs	r2, #0
 8004ccc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  return tmpreg;
 8004cd0:	4770      	bx	lr
      tmpreg =   htim->Instance->CCR2;
 8004cd2:	6802      	ldr	r2, [r0, #0]
 8004cd4:	6b90      	ldr	r0, [r2, #56]	; 0x38
      break;
 8004cd6:	e7f8      	b.n	8004cca <HAL_TIM_ReadCapturedValue+0x2a>
      tmpreg =   htim->Instance->CCR3;
 8004cd8:	6802      	ldr	r2, [r0, #0]
 8004cda:	6bd0      	ldr	r0, [r2, #60]	; 0x3c
      break;
 8004cdc:	e7f5      	b.n	8004cca <HAL_TIM_ReadCapturedValue+0x2a>
      tmpreg =   htim->Instance->CCR4;
 8004cde:	6802      	ldr	r2, [r0, #0]
 8004ce0:	6c10      	ldr	r0, [r2, #64]	; 0x40
      break;
 8004ce2:	e7f2      	b.n	8004cca <HAL_TIM_ReadCapturedValue+0x2a>
  uint32_t tmpreg = 0U;
 8004ce4:	2000      	movs	r0, #0
 8004ce6:	e7f0      	b.n	8004cca <HAL_TIM_ReadCapturedValue+0x2a>
  __HAL_LOCK(htim);
 8004ce8:	2002      	movs	r0, #2
}
 8004cea:	4770      	bx	lr

08004cec <HAL_TIM_PeriodElapsedCallback>:
{
 8004cec:	4770      	bx	lr

08004cee <TIM_DMAPeriodElapsedCplt>:
{
 8004cee:	b508      	push	{r3, lr}
  TIM_HandleTypeDef* htim = ( TIM_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004cf0:	6a40      	ldr	r0, [r0, #36]	; 0x24
  htim->State= HAL_TIM_STATE_READY;
 8004cf2:	2301      	movs	r3, #1
 8004cf4:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  HAL_TIM_PeriodElapsedCallback(htim);
 8004cf8:	f7ff fff8 	bl	8004cec <HAL_TIM_PeriodElapsedCallback>
 8004cfc:	bd08      	pop	{r3, pc}

08004cfe <HAL_TIM_OC_DelayElapsedCallback>:
{
 8004cfe:	4770      	bx	lr

08004d00 <HAL_TIM_IC_CaptureCallback>:
{
 8004d00:	4770      	bx	lr

08004d02 <TIM_DMACaptureCplt>:
{
 8004d02:	b510      	push	{r4, lr}
  TIM_HandleTypeDef* htim = ( TIM_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004d04:	6a44      	ldr	r4, [r0, #36]	; 0x24
  htim->State= HAL_TIM_STATE_READY;
 8004d06:	2301      	movs	r3, #1
 8004d08:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8004d0c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004d0e:	4298      	cmp	r0, r3
 8004d10:	d00e      	beq.n	8004d30 <TIM_DMACaptureCplt+0x2e>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8004d12:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004d14:	4298      	cmp	r0, r3
 8004d16:	d00e      	beq.n	8004d36 <TIM_DMACaptureCplt+0x34>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8004d18:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004d1a:	4298      	cmp	r0, r3
 8004d1c:	d00e      	beq.n	8004d3c <TIM_DMACaptureCplt+0x3a>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8004d1e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004d20:	4298      	cmp	r0, r3
 8004d22:	d00e      	beq.n	8004d42 <TIM_DMACaptureCplt+0x40>
  HAL_TIM_IC_CaptureCallback(htim);
 8004d24:	4620      	mov	r0, r4
 8004d26:	f7ff ffeb 	bl	8004d00 <HAL_TIM_IC_CaptureCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d2a:	2300      	movs	r3, #0
 8004d2c:	7723      	strb	r3, [r4, #28]
 8004d2e:	bd10      	pop	{r4, pc}
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004d30:	2301      	movs	r3, #1
 8004d32:	7723      	strb	r3, [r4, #28]
 8004d34:	e7f6      	b.n	8004d24 <TIM_DMACaptureCplt+0x22>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004d36:	2302      	movs	r3, #2
 8004d38:	7723      	strb	r3, [r4, #28]
 8004d3a:	e7f3      	b.n	8004d24 <TIM_DMACaptureCplt+0x22>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004d3c:	2304      	movs	r3, #4
 8004d3e:	7723      	strb	r3, [r4, #28]
 8004d40:	e7f0      	b.n	8004d24 <TIM_DMACaptureCplt+0x22>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004d42:	2308      	movs	r3, #8
 8004d44:	7723      	strb	r3, [r4, #28]
 8004d46:	e7ed      	b.n	8004d24 <TIM_DMACaptureCplt+0x22>

08004d48 <HAL_TIM_PWM_PulseFinishedCallback>:
{
 8004d48:	4770      	bx	lr

08004d4a <TIM_DMADelayPulseCplt>:
{
 8004d4a:	b510      	push	{r4, lr}
  TIM_HandleTypeDef* htim = ( TIM_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004d4c:	6a44      	ldr	r4, [r0, #36]	; 0x24
  htim->State= HAL_TIM_STATE_READY;
 8004d4e:	2301      	movs	r3, #1
 8004d50:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8004d54:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004d56:	4298      	cmp	r0, r3
 8004d58:	d00e      	beq.n	8004d78 <TIM_DMADelayPulseCplt+0x2e>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8004d5a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004d5c:	4298      	cmp	r0, r3
 8004d5e:	d00e      	beq.n	8004d7e <TIM_DMADelayPulseCplt+0x34>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8004d60:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004d62:	4298      	cmp	r0, r3
 8004d64:	d00e      	beq.n	8004d84 <TIM_DMADelayPulseCplt+0x3a>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8004d66:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004d68:	4298      	cmp	r0, r3
 8004d6a:	d00e      	beq.n	8004d8a <TIM_DMADelayPulseCplt+0x40>
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d6c:	4620      	mov	r0, r4
 8004d6e:	f7ff ffeb 	bl	8004d48 <HAL_TIM_PWM_PulseFinishedCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d72:	2300      	movs	r3, #0
 8004d74:	7723      	strb	r3, [r4, #28]
 8004d76:	bd10      	pop	{r4, pc}
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004d78:	2301      	movs	r3, #1
 8004d7a:	7723      	strb	r3, [r4, #28]
 8004d7c:	e7f6      	b.n	8004d6c <TIM_DMADelayPulseCplt+0x22>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004d7e:	2302      	movs	r3, #2
 8004d80:	7723      	strb	r3, [r4, #28]
 8004d82:	e7f3      	b.n	8004d6c <TIM_DMADelayPulseCplt+0x22>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004d84:	2304      	movs	r3, #4
 8004d86:	7723      	strb	r3, [r4, #28]
 8004d88:	e7f0      	b.n	8004d6c <TIM_DMADelayPulseCplt+0x22>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004d8a:	2308      	movs	r3, #8
 8004d8c:	7723      	strb	r3, [r4, #28]
 8004d8e:	e7ed      	b.n	8004d6c <TIM_DMADelayPulseCplt+0x22>

08004d90 <HAL_TIM_TriggerCallback>:
{
 8004d90:	4770      	bx	lr

08004d92 <HAL_TIM_IRQHandler>:
{
 8004d92:	b510      	push	{r4, lr}
 8004d94:	4604      	mov	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004d96:	6803      	ldr	r3, [r0, #0]
 8004d98:	691a      	ldr	r2, [r3, #16]
 8004d9a:	f012 0f02 	tst.w	r2, #2
 8004d9e:	d011      	beq.n	8004dc4 <HAL_TIM_IRQHandler+0x32>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8004da0:	68da      	ldr	r2, [r3, #12]
 8004da2:	f012 0f02 	tst.w	r2, #2
 8004da6:	d00d      	beq.n	8004dc4 <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004da8:	f06f 0202 	mvn.w	r2, #2
 8004dac:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004dae:	2301      	movs	r3, #1
 8004db0:	7703      	strb	r3, [r0, #28]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004db2:	6803      	ldr	r3, [r0, #0]
 8004db4:	699b      	ldr	r3, [r3, #24]
 8004db6:	f013 0f03 	tst.w	r3, #3
 8004dba:	d070      	beq.n	8004e9e <HAL_TIM_IRQHandler+0x10c>
          HAL_TIM_IC_CaptureCallback(htim);
 8004dbc:	f7ff ffa0 	bl	8004d00 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004dc0:	2300      	movs	r3, #0
 8004dc2:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004dc4:	6823      	ldr	r3, [r4, #0]
 8004dc6:	691a      	ldr	r2, [r3, #16]
 8004dc8:	f012 0f04 	tst.w	r2, #4
 8004dcc:	d012      	beq.n	8004df4 <HAL_TIM_IRQHandler+0x62>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8004dce:	68da      	ldr	r2, [r3, #12]
 8004dd0:	f012 0f04 	tst.w	r2, #4
 8004dd4:	d00e      	beq.n	8004df4 <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004dd6:	f06f 0204 	mvn.w	r2, #4
 8004dda:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004ddc:	2302      	movs	r3, #2
 8004dde:	7723      	strb	r3, [r4, #28]
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004de0:	6823      	ldr	r3, [r4, #0]
 8004de2:	699b      	ldr	r3, [r3, #24]
 8004de4:	f413 7f40 	tst.w	r3, #768	; 0x300
 8004de8:	d05f      	beq.n	8004eaa <HAL_TIM_IRQHandler+0x118>
        HAL_TIM_IC_CaptureCallback(htim);
 8004dea:	4620      	mov	r0, r4
 8004dec:	f7ff ff88 	bl	8004d00 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004df0:	2300      	movs	r3, #0
 8004df2:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004df4:	6823      	ldr	r3, [r4, #0]
 8004df6:	691a      	ldr	r2, [r3, #16]
 8004df8:	f012 0f08 	tst.w	r2, #8
 8004dfc:	d012      	beq.n	8004e24 <HAL_TIM_IRQHandler+0x92>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8004dfe:	68da      	ldr	r2, [r3, #12]
 8004e00:	f012 0f08 	tst.w	r2, #8
 8004e04:	d00e      	beq.n	8004e24 <HAL_TIM_IRQHandler+0x92>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004e06:	f06f 0208 	mvn.w	r2, #8
 8004e0a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004e0c:	2304      	movs	r3, #4
 8004e0e:	7723      	strb	r3, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004e10:	6823      	ldr	r3, [r4, #0]
 8004e12:	69db      	ldr	r3, [r3, #28]
 8004e14:	f013 0f03 	tst.w	r3, #3
 8004e18:	d04e      	beq.n	8004eb8 <HAL_TIM_IRQHandler+0x126>
        HAL_TIM_IC_CaptureCallback(htim);
 8004e1a:	4620      	mov	r0, r4
 8004e1c:	f7ff ff70 	bl	8004d00 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e20:	2300      	movs	r3, #0
 8004e22:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004e24:	6823      	ldr	r3, [r4, #0]
 8004e26:	691a      	ldr	r2, [r3, #16]
 8004e28:	f012 0f10 	tst.w	r2, #16
 8004e2c:	d012      	beq.n	8004e54 <HAL_TIM_IRQHandler+0xc2>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8004e2e:	68da      	ldr	r2, [r3, #12]
 8004e30:	f012 0f10 	tst.w	r2, #16
 8004e34:	d00e      	beq.n	8004e54 <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004e36:	f06f 0210 	mvn.w	r2, #16
 8004e3a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004e3c:	2308      	movs	r3, #8
 8004e3e:	7723      	strb	r3, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004e40:	6823      	ldr	r3, [r4, #0]
 8004e42:	69db      	ldr	r3, [r3, #28]
 8004e44:	f413 7f40 	tst.w	r3, #768	; 0x300
 8004e48:	d03d      	beq.n	8004ec6 <HAL_TIM_IRQHandler+0x134>
        HAL_TIM_IC_CaptureCallback(htim);
 8004e4a:	4620      	mov	r0, r4
 8004e4c:	f7ff ff58 	bl	8004d00 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e50:	2300      	movs	r3, #0
 8004e52:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004e54:	6823      	ldr	r3, [r4, #0]
 8004e56:	691a      	ldr	r2, [r3, #16]
 8004e58:	f012 0f01 	tst.w	r2, #1
 8004e5c:	d003      	beq.n	8004e66 <HAL_TIM_IRQHandler+0xd4>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8004e5e:	68da      	ldr	r2, [r3, #12]
 8004e60:	f012 0f01 	tst.w	r2, #1
 8004e64:	d136      	bne.n	8004ed4 <HAL_TIM_IRQHandler+0x142>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004e66:	6823      	ldr	r3, [r4, #0]
 8004e68:	691a      	ldr	r2, [r3, #16]
 8004e6a:	f012 0f80 	tst.w	r2, #128	; 0x80
 8004e6e:	d003      	beq.n	8004e78 <HAL_TIM_IRQHandler+0xe6>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8004e70:	68da      	ldr	r2, [r3, #12]
 8004e72:	f012 0f80 	tst.w	r2, #128	; 0x80
 8004e76:	d134      	bne.n	8004ee2 <HAL_TIM_IRQHandler+0x150>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004e78:	6823      	ldr	r3, [r4, #0]
 8004e7a:	691a      	ldr	r2, [r3, #16]
 8004e7c:	f012 0f40 	tst.w	r2, #64	; 0x40
 8004e80:	d003      	beq.n	8004e8a <HAL_TIM_IRQHandler+0xf8>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8004e82:	68da      	ldr	r2, [r3, #12]
 8004e84:	f012 0f40 	tst.w	r2, #64	; 0x40
 8004e88:	d132      	bne.n	8004ef0 <HAL_TIM_IRQHandler+0x15e>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004e8a:	6823      	ldr	r3, [r4, #0]
 8004e8c:	691a      	ldr	r2, [r3, #16]
 8004e8e:	f012 0f20 	tst.w	r2, #32
 8004e92:	d003      	beq.n	8004e9c <HAL_TIM_IRQHandler+0x10a>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8004e94:	68da      	ldr	r2, [r3, #12]
 8004e96:	f012 0f20 	tst.w	r2, #32
 8004e9a:	d130      	bne.n	8004efe <HAL_TIM_IRQHandler+0x16c>
 8004e9c:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e9e:	f7ff ff2e 	bl	8004cfe <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ea2:	4620      	mov	r0, r4
 8004ea4:	f7ff ff50 	bl	8004d48 <HAL_TIM_PWM_PulseFinishedCallback>
 8004ea8:	e78a      	b.n	8004dc0 <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004eaa:	4620      	mov	r0, r4
 8004eac:	f7ff ff27 	bl	8004cfe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004eb0:	4620      	mov	r0, r4
 8004eb2:	f7ff ff49 	bl	8004d48 <HAL_TIM_PWM_PulseFinishedCallback>
 8004eb6:	e79b      	b.n	8004df0 <HAL_TIM_IRQHandler+0x5e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004eb8:	4620      	mov	r0, r4
 8004eba:	f7ff ff20 	bl	8004cfe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ebe:	4620      	mov	r0, r4
 8004ec0:	f7ff ff42 	bl	8004d48 <HAL_TIM_PWM_PulseFinishedCallback>
 8004ec4:	e7ac      	b.n	8004e20 <HAL_TIM_IRQHandler+0x8e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ec6:	4620      	mov	r0, r4
 8004ec8:	f7ff ff19 	bl	8004cfe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ecc:	4620      	mov	r0, r4
 8004ece:	f7ff ff3b 	bl	8004d48 <HAL_TIM_PWM_PulseFinishedCallback>
 8004ed2:	e7bd      	b.n	8004e50 <HAL_TIM_IRQHandler+0xbe>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004ed4:	f06f 0201 	mvn.w	r2, #1
 8004ed8:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8004eda:	4620      	mov	r0, r4
 8004edc:	f7ff ff06 	bl	8004cec <HAL_TIM_PeriodElapsedCallback>
 8004ee0:	e7c1      	b.n	8004e66 <HAL_TIM_IRQHandler+0xd4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004ee2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004ee6:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8004ee8:	4620      	mov	r0, r4
 8004eea:	f001 ff6b 	bl	8006dc4 <HAL_TIMEx_BreakCallback>
 8004eee:	e7c3      	b.n	8004e78 <HAL_TIM_IRQHandler+0xe6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004ef0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004ef4:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8004ef6:	4620      	mov	r0, r4
 8004ef8:	f7ff ff4a 	bl	8004d90 <HAL_TIM_TriggerCallback>
 8004efc:	e7c5      	b.n	8004e8a <HAL_TIM_IRQHandler+0xf8>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004efe:	f06f 0220 	mvn.w	r2, #32
 8004f02:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 8004f04:	4620      	mov	r0, r4
 8004f06:	f001 ff54 	bl	8006db2 <HAL_TIMEx_CommutationCallback>
}
 8004f0a:	e7c7      	b.n	8004e9c <HAL_TIM_IRQHandler+0x10a>

08004f0c <TIM_DMATriggerCplt>:
{
 8004f0c:	b508      	push	{r3, lr}
  TIM_HandleTypeDef* htim = ( TIM_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004f0e:	6a40      	ldr	r0, [r0, #36]	; 0x24
  htim->State= HAL_TIM_STATE_READY;
 8004f10:	2301      	movs	r3, #1
 8004f12:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  HAL_TIM_TriggerCallback(htim);
 8004f16:	f7ff ff3b 	bl	8004d90 <HAL_TIM_TriggerCallback>
 8004f1a:	bd08      	pop	{r3, pc}

08004f1c <HAL_TIM_ErrorCallback>:
{
 8004f1c:	4770      	bx	lr

08004f1e <TIM_DMAError>:
{
 8004f1e:	b508      	push	{r3, lr}
  TIM_HandleTypeDef* htim = ( TIM_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004f20:	6a40      	ldr	r0, [r0, #36]	; 0x24
  htim->State= HAL_TIM_STATE_READY;
 8004f22:	2301      	movs	r3, #1
 8004f24:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  HAL_TIM_ErrorCallback(htim);
 8004f28:	f7ff fff8 	bl	8004f1c <HAL_TIM_ErrorCallback>
 8004f2c:	bd08      	pop	{r3, pc}

08004f2e <HAL_TIM_Base_GetState>:
  return htim->State;
 8004f2e:	f890 003d 	ldrb.w	r0, [r0, #61]	; 0x3d
}
 8004f32:	4770      	bx	lr

08004f34 <HAL_TIM_OC_GetState>:
  return htim->State;
 8004f34:	f890 003d 	ldrb.w	r0, [r0, #61]	; 0x3d
}
 8004f38:	4770      	bx	lr

08004f3a <HAL_TIM_PWM_GetState>:
  return htim->State;
 8004f3a:	f890 003d 	ldrb.w	r0, [r0, #61]	; 0x3d
}
 8004f3e:	4770      	bx	lr

08004f40 <HAL_TIM_IC_GetState>:
  return htim->State;
 8004f40:	f890 003d 	ldrb.w	r0, [r0, #61]	; 0x3d
}
 8004f44:	4770      	bx	lr

08004f46 <HAL_TIM_OnePulse_GetState>:
  return htim->State;
 8004f46:	f890 003d 	ldrb.w	r0, [r0, #61]	; 0x3d
}
 8004f4a:	4770      	bx	lr

08004f4c <HAL_TIM_Encoder_GetState>:
  return htim->State;
 8004f4c:	f890 003d 	ldrb.w	r0, [r0, #61]	; 0x3d
}
 8004f50:	4770      	bx	lr

08004f52 <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 8004f52:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004f54:	4a1b      	ldr	r2, [pc, #108]	; (8004fc4 <TIM_Base_SetConfig+0x72>)
 8004f56:	4290      	cmp	r0, r2
 8004f58:	d027      	beq.n	8004faa <TIM_Base_SetConfig+0x58>
 8004f5a:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8004f5e:	d024      	beq.n	8004faa <TIM_Base_SetConfig+0x58>
 8004f60:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8004f64:	4290      	cmp	r0, r2
 8004f66:	d020      	beq.n	8004faa <TIM_Base_SetConfig+0x58>
 8004f68:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004f6c:	4290      	cmp	r0, r2
 8004f6e:	d01c      	beq.n	8004faa <TIM_Base_SetConfig+0x58>
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004f70:	4a14      	ldr	r2, [pc, #80]	; (8004fc4 <TIM_Base_SetConfig+0x72>)
 8004f72:	4290      	cmp	r0, r2
 8004f74:	d01e      	beq.n	8004fb4 <TIM_Base_SetConfig+0x62>
 8004f76:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8004f7a:	d01b      	beq.n	8004fb4 <TIM_Base_SetConfig+0x62>
 8004f7c:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8004f80:	4290      	cmp	r0, r2
 8004f82:	d017      	beq.n	8004fb4 <TIM_Base_SetConfig+0x62>
 8004f84:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004f88:	4290      	cmp	r0, r2
 8004f8a:	d013      	beq.n	8004fb4 <TIM_Base_SetConfig+0x62>
  tmpcr1 &= ~TIM_CR1_ARPE;
 8004f8c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 8004f90:	694a      	ldr	r2, [r1, #20]
 8004f92:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8004f94:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004f96:	688b      	ldr	r3, [r1, #8]
 8004f98:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8004f9a:	680b      	ldr	r3, [r1, #0]
 8004f9c:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004f9e:	4b09      	ldr	r3, [pc, #36]	; (8004fc4 <TIM_Base_SetConfig+0x72>)
 8004fa0:	4298      	cmp	r0, r3
 8004fa2:	d00c      	beq.n	8004fbe <TIM_Base_SetConfig+0x6c>
  TIMx->EGR = TIM_EGR_UG;
 8004fa4:	2301      	movs	r3, #1
 8004fa6:	6143      	str	r3, [r0, #20]
 8004fa8:	4770      	bx	lr
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004faa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8004fae:	684a      	ldr	r2, [r1, #4]
 8004fb0:	4313      	orrs	r3, r2
 8004fb2:	e7dd      	b.n	8004f70 <TIM_Base_SetConfig+0x1e>
    tmpcr1 &= ~TIM_CR1_CKD;
 8004fb4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004fb8:	68ca      	ldr	r2, [r1, #12]
 8004fba:	4313      	orrs	r3, r2
 8004fbc:	e7e6      	b.n	8004f8c <TIM_Base_SetConfig+0x3a>
    TIMx->RCR = Structure->RepetitionCounter;
 8004fbe:	690b      	ldr	r3, [r1, #16]
 8004fc0:	6303      	str	r3, [r0, #48]	; 0x30
 8004fc2:	e7ef      	b.n	8004fa4 <TIM_Base_SetConfig+0x52>
 8004fc4:	40012c00 	.word	0x40012c00

08004fc8 <HAL_TIM_Base_Init>:
  if(htim == NULL)
 8004fc8:	b1a8      	cbz	r0, 8004ff6 <HAL_TIM_Base_Init+0x2e>
{
 8004fca:	b510      	push	{r4, lr}
 8004fcc:	4604      	mov	r4, r0
  if(htim->State == HAL_TIM_STATE_RESET)
 8004fce:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8004fd2:	b15b      	cbz	r3, 8004fec <HAL_TIM_Base_Init+0x24>
  htim->State= HAL_TIM_STATE_BUSY;
 8004fd4:	2302      	movs	r3, #2
 8004fd6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004fda:	1d21      	adds	r1, r4, #4
 8004fdc:	6820      	ldr	r0, [r4, #0]
 8004fde:	f7ff ffb8 	bl	8004f52 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8004fe2:	2301      	movs	r3, #1
 8004fe4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8004fe8:	2000      	movs	r0, #0
 8004fea:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8004fec:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8004ff0:	f7fc fb6c 	bl	80016cc <HAL_TIM_Base_MspInit>
 8004ff4:	e7ee      	b.n	8004fd4 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 8004ff6:	2001      	movs	r0, #1
 8004ff8:	4770      	bx	lr

08004ffa <HAL_TIM_OC_Init>:
  if(htim == NULL)
 8004ffa:	b1a8      	cbz	r0, 8005028 <HAL_TIM_OC_Init+0x2e>
{
 8004ffc:	b510      	push	{r4, lr}
 8004ffe:	4604      	mov	r4, r0
  if(htim->State == HAL_TIM_STATE_RESET)
 8005000:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8005004:	b15b      	cbz	r3, 800501e <HAL_TIM_OC_Init+0x24>
  htim->State= HAL_TIM_STATE_BUSY;
 8005006:	2302      	movs	r3, #2
 8005008:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800500c:	1d21      	adds	r1, r4, #4
 800500e:	6820      	ldr	r0, [r4, #0]
 8005010:	f7ff ff9f 	bl	8004f52 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8005014:	2301      	movs	r3, #1
 8005016:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800501a:	2000      	movs	r0, #0
 800501c:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 800501e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_OC_MspInit(htim);
 8005022:	f7ff fa7a 	bl	800451a <HAL_TIM_OC_MspInit>
 8005026:	e7ee      	b.n	8005006 <HAL_TIM_OC_Init+0xc>
    return HAL_ERROR;
 8005028:	2001      	movs	r0, #1
 800502a:	4770      	bx	lr

0800502c <HAL_TIM_PWM_Init>:
  if(htim == NULL)
 800502c:	b1a8      	cbz	r0, 800505a <HAL_TIM_PWM_Init+0x2e>
{
 800502e:	b510      	push	{r4, lr}
 8005030:	4604      	mov	r4, r0
  if(htim->State == HAL_TIM_STATE_RESET)
 8005032:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8005036:	b15b      	cbz	r3, 8005050 <HAL_TIM_PWM_Init+0x24>
  htim->State= HAL_TIM_STATE_BUSY;
 8005038:	2302      	movs	r3, #2
 800503a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800503e:	1d21      	adds	r1, r4, #4
 8005040:	6820      	ldr	r0, [r4, #0]
 8005042:	f7ff ff86 	bl	8004f52 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8005046:	2301      	movs	r3, #1
 8005048:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800504c:	2000      	movs	r0, #0
 800504e:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8005050:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8005054:	f7ff fa80 	bl	8004558 <HAL_TIM_PWM_MspInit>
 8005058:	e7ee      	b.n	8005038 <HAL_TIM_PWM_Init+0xc>
    return HAL_ERROR;
 800505a:	2001      	movs	r0, #1
 800505c:	4770      	bx	lr

0800505e <HAL_TIM_IC_Init>:
  if(htim == NULL)
 800505e:	b1a8      	cbz	r0, 800508c <HAL_TIM_IC_Init+0x2e>
{
 8005060:	b510      	push	{r4, lr}
 8005062:	4604      	mov	r4, r0
  if(htim->State == HAL_TIM_STATE_RESET)
 8005064:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8005068:	b15b      	cbz	r3, 8005082 <HAL_TIM_IC_Init+0x24>
  htim->State= HAL_TIM_STATE_BUSY;
 800506a:	2302      	movs	r3, #2
 800506c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005070:	1d21      	adds	r1, r4, #4
 8005072:	6820      	ldr	r0, [r4, #0]
 8005074:	f7ff ff6d 	bl	8004f52 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8005078:	2301      	movs	r3, #1
 800507a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800507e:	2000      	movs	r0, #0
 8005080:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8005082:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_IC_MspInit(htim);
 8005086:	f7ff fa86 	bl	8004596 <HAL_TIM_IC_MspInit>
 800508a:	e7ee      	b.n	800506a <HAL_TIM_IC_Init+0xc>
    return HAL_ERROR;
 800508c:	2001      	movs	r0, #1
 800508e:	4770      	bx	lr

08005090 <HAL_TIM_OnePulse_Init>:
  if(htim == NULL)
 8005090:	b1f8      	cbz	r0, 80050d2 <HAL_TIM_OnePulse_Init+0x42>
{
 8005092:	b538      	push	{r3, r4, r5, lr}
 8005094:	4604      	mov	r4, r0
 8005096:	460d      	mov	r5, r1
  if(htim->State == HAL_TIM_STATE_RESET)
 8005098:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800509c:	b1a3      	cbz	r3, 80050c8 <HAL_TIM_OnePulse_Init+0x38>
  htim->State= HAL_TIM_STATE_BUSY;
 800509e:	2302      	movs	r3, #2
 80050a0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80050a4:	1d21      	adds	r1, r4, #4
 80050a6:	6820      	ldr	r0, [r4, #0]
 80050a8:	f7ff ff53 	bl	8004f52 <TIM_Base_SetConfig>
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 80050ac:	6822      	ldr	r2, [r4, #0]
 80050ae:	6813      	ldr	r3, [r2, #0]
 80050b0:	f023 0308 	bic.w	r3, r3, #8
 80050b4:	6013      	str	r3, [r2, #0]
  htim->Instance->CR1 |= OnePulseMode;
 80050b6:	6822      	ldr	r2, [r4, #0]
 80050b8:	6813      	ldr	r3, [r2, #0]
 80050ba:	432b      	orrs	r3, r5
 80050bc:	6013      	str	r3, [r2, #0]
  htim->State= HAL_TIM_STATE_READY;
 80050be:	2301      	movs	r3, #1
 80050c0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80050c4:	2000      	movs	r0, #0
 80050c6:	bd38      	pop	{r3, r4, r5, pc}
    htim->Lock = HAL_UNLOCKED;
 80050c8:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_OnePulse_MspInit(htim);
 80050cc:	f7ff fa82 	bl	80045d4 <HAL_TIM_OnePulse_MspInit>
 80050d0:	e7e5      	b.n	800509e <HAL_TIM_OnePulse_Init+0xe>
    return HAL_ERROR;
 80050d2:	2001      	movs	r0, #1
 80050d4:	4770      	bx	lr

080050d6 <HAL_TIM_Encoder_Init>:
  if(htim == NULL)
 80050d6:	2800      	cmp	r0, #0
 80050d8:	d047      	beq.n	800516a <HAL_TIM_Encoder_Init+0x94>
{
 80050da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050dc:	4605      	mov	r5, r0
 80050de:	460c      	mov	r4, r1
  if(htim->State == HAL_TIM_STATE_RESET)
 80050e0:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d03b      	beq.n	8005160 <HAL_TIM_Encoder_Init+0x8a>
  htim->State= HAL_TIM_STATE_BUSY;
 80050e8:	2302      	movs	r3, #2
 80050ea:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 80050ee:	4629      	mov	r1, r5
 80050f0:	f851 2b04 	ldr.w	r2, [r1], #4
 80050f4:	6893      	ldr	r3, [r2, #8]
 80050f6:	f023 0307 	bic.w	r3, r3, #7
 80050fa:	6093      	str	r3, [r2, #8]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80050fc:	6828      	ldr	r0, [r5, #0]
 80050fe:	f7ff ff28 	bl	8004f52 <TIM_Base_SetConfig>
  tmpsmcr = htim->Instance->SMCR;
 8005102:	6828      	ldr	r0, [r5, #0]
 8005104:	6886      	ldr	r6, [r0, #8]
  tmpccmr1 = htim->Instance->CCMR1;
 8005106:	6983      	ldr	r3, [r0, #24]
  tmpccer = htim->Instance->CCER;
 8005108:	6a02      	ldr	r2, [r0, #32]
  tmpsmcr |= sConfig->EncoderMode;
 800510a:	6821      	ldr	r1, [r4, #0]
 800510c:	430e      	orrs	r6, r1
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800510e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005112:	f023 0303 	bic.w	r3, r3, #3
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005116:	68a1      	ldr	r1, [r4, #8]
 8005118:	69a7      	ldr	r7, [r4, #24]
 800511a:	ea41 2107 	orr.w	r1, r1, r7, lsl #8
 800511e:	430b      	orrs	r3, r1
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005120:	f423 437c 	bic.w	r3, r3, #64512	; 0xfc00
 8005124:	f023 03fc 	bic.w	r3, r3, #252	; 0xfc
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005128:	68e1      	ldr	r1, [r4, #12]
 800512a:	69e7      	ldr	r7, [r4, #28]
 800512c:	ea41 2107 	orr.w	r1, r1, r7, lsl #8
 8005130:	430b      	orrs	r3, r1
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005132:	6927      	ldr	r7, [r4, #16]
 8005134:	6a21      	ldr	r1, [r4, #32]
 8005136:	0309      	lsls	r1, r1, #12
 8005138:	ea41 1107 	orr.w	r1, r1, r7, lsl #4
 800513c:	430b      	orrs	r3, r1
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800513e:	f022 02aa 	bic.w	r2, r2, #170	; 0xaa
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005142:	6861      	ldr	r1, [r4, #4]
 8005144:	6964      	ldr	r4, [r4, #20]
 8005146:	ea41 1104 	orr.w	r1, r1, r4, lsl #4
 800514a:	430a      	orrs	r2, r1
  htim->Instance->SMCR = tmpsmcr;
 800514c:	6086      	str	r6, [r0, #8]
  htim->Instance->CCMR1 = tmpccmr1;
 800514e:	6829      	ldr	r1, [r5, #0]
 8005150:	618b      	str	r3, [r1, #24]
  htim->Instance->CCER = tmpccer;
 8005152:	682b      	ldr	r3, [r5, #0]
 8005154:	621a      	str	r2, [r3, #32]
  htim->State= HAL_TIM_STATE_READY;
 8005156:	2301      	movs	r3, #1
 8005158:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
  return HAL_OK;
 800515c:	2000      	movs	r0, #0
 800515e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    htim->Lock = HAL_UNLOCKED;
 8005160:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Encoder_MspInit(htim);
 8005164:	f7ff fa55 	bl	8004612 <HAL_TIM_Encoder_MspInit>
 8005168:	e7be      	b.n	80050e8 <HAL_TIM_Encoder_Init+0x12>
    return HAL_ERROR;
 800516a:	2001      	movs	r0, #1
 800516c:	4770      	bx	lr

0800516e <TIM_OC2_SetConfig>:
{
 800516e:	b430      	push	{r4, r5}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005170:	6a03      	ldr	r3, [r0, #32]
 8005172:	f023 0310 	bic.w	r3, r3, #16
 8005176:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8005178:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 800517a:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 800517c:	6982      	ldr	r2, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800517e:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005182:	680d      	ldr	r5, [r1, #0]
 8005184:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer &= ~TIM_CCER_CC2P;
 8005188:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800518c:	688d      	ldr	r5, [r1, #8]
 800518e:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005192:	4d0f      	ldr	r5, [pc, #60]	; (80051d0 <TIM_OC2_SetConfig+0x62>)
 8005194:	42a8      	cmp	r0, r5
 8005196:	d009      	beq.n	80051ac <TIM_OC2_SetConfig+0x3e>
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8005198:	4d0d      	ldr	r5, [pc, #52]	; (80051d0 <TIM_OC2_SetConfig+0x62>)
 800519a:	42a8      	cmp	r0, r5
 800519c:	d00e      	beq.n	80051bc <TIM_OC2_SetConfig+0x4e>
  TIMx->CR2 = tmpcr2;
 800519e:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 80051a0:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 80051a2:	684a      	ldr	r2, [r1, #4]
 80051a4:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 80051a6:	6203      	str	r3, [r0, #32]
}
 80051a8:	bc30      	pop	{r4, r5}
 80051aa:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC2NP;
 80051ac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80051b0:	68cd      	ldr	r5, [r1, #12]
 80051b2:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 80051b6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80051ba:	e7ed      	b.n	8005198 <TIM_OC2_SetConfig+0x2a>
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80051bc:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCIdleState << 2);
 80051c0:	694d      	ldr	r5, [r1, #20]
 80051c2:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 80051c6:	698d      	ldr	r5, [r1, #24]
 80051c8:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
 80051cc:	e7e7      	b.n	800519e <TIM_OC2_SetConfig+0x30>
 80051ce:	bf00      	nop
 80051d0:	40012c00 	.word	0x40012c00

080051d4 <HAL_TIM_OC_ConfigChannel>:
  __HAL_LOCK(htim);
 80051d4:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80051d8:	2b01      	cmp	r3, #1
 80051da:	d028      	beq.n	800522e <HAL_TIM_OC_ConfigChannel+0x5a>
{
 80051dc:	b510      	push	{r4, lr}
 80051de:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 80051e0:	2301      	movs	r3, #1
 80051e2:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 80051e6:	2302      	movs	r3, #2
 80051e8:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  switch (Channel)
 80051ec:	2a0c      	cmp	r2, #12
 80051ee:	d80b      	bhi.n	8005208 <HAL_TIM_OC_ConfigChannel+0x34>
 80051f0:	e8df f002 	tbb	[pc, r2]
 80051f4:	0a0a0a07 	.word	0x0a0a0a07
 80051f8:	0a0a0a11 	.word	0x0a0a0a11
 80051fc:	0a0a0a15 	.word	0x0a0a0a15
 8005200:	19          	.byte	0x19
 8005201:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005202:	6800      	ldr	r0, [r0, #0]
 8005204:	f7fe ff94 	bl	8004130 <TIM_OC1_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8005208:	2301      	movs	r3, #1
 800520a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800520e:	2000      	movs	r0, #0
 8005210:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
  return HAL_OK;
 8005214:	bd10      	pop	{r4, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005216:	6800      	ldr	r0, [r0, #0]
 8005218:	f7ff ffa9 	bl	800516e <TIM_OC2_SetConfig>
    break;
 800521c:	e7f4      	b.n	8005208 <HAL_TIM_OC_ConfigChannel+0x34>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800521e:	6800      	ldr	r0, [r0, #0]
 8005220:	f7fe ffb4 	bl	800418c <TIM_OC3_SetConfig>
    break;
 8005224:	e7f0      	b.n	8005208 <HAL_TIM_OC_ConfigChannel+0x34>
       TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005226:	6800      	ldr	r0, [r0, #0]
 8005228:	f7fe ffe2 	bl	80041f0 <TIM_OC4_SetConfig>
    break;
 800522c:	e7ec      	b.n	8005208 <HAL_TIM_OC_ConfigChannel+0x34>
  __HAL_LOCK(htim);
 800522e:	2002      	movs	r0, #2
 8005230:	4770      	bx	lr

08005232 <HAL_TIM_PWM_ConfigChannel>:
{
 8005232:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8005234:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8005238:	2b01      	cmp	r3, #1
 800523a:	d066      	beq.n	800530a <HAL_TIM_PWM_ConfigChannel+0xd8>
 800523c:	460d      	mov	r5, r1
 800523e:	4604      	mov	r4, r0
 8005240:	2301      	movs	r3, #1
 8005242:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8005246:	2302      	movs	r3, #2
 8005248:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  switch (Channel)
 800524c:	2a0c      	cmp	r2, #12
 800524e:	d81a      	bhi.n	8005286 <HAL_TIM_PWM_ConfigChannel+0x54>
 8005250:	e8df f002 	tbb	[pc, r2]
 8005254:	19191907 	.word	0x19191907
 8005258:	19191920 	.word	0x19191920
 800525c:	19191934 	.word	0x19191934
 8005260:	47          	.byte	0x47
 8005261:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005262:	6800      	ldr	r0, [r0, #0]
 8005264:	f7fe ff64 	bl	8004130 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005268:	6822      	ldr	r2, [r4, #0]
 800526a:	6993      	ldr	r3, [r2, #24]
 800526c:	f043 0308 	orr.w	r3, r3, #8
 8005270:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005272:	6822      	ldr	r2, [r4, #0]
 8005274:	6993      	ldr	r3, [r2, #24]
 8005276:	f023 0304 	bic.w	r3, r3, #4
 800527a:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800527c:	6822      	ldr	r2, [r4, #0]
 800527e:	6993      	ldr	r3, [r2, #24]
 8005280:	6929      	ldr	r1, [r5, #16]
 8005282:	430b      	orrs	r3, r1
 8005284:	6193      	str	r3, [r2, #24]
  htim->State = HAL_TIM_STATE_READY;
 8005286:	2301      	movs	r3, #1
 8005288:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800528c:	2000      	movs	r0, #0
 800528e:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
  return HAL_OK;
 8005292:	bd38      	pop	{r3, r4, r5, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005294:	6800      	ldr	r0, [r0, #0]
 8005296:	f7ff ff6a 	bl	800516e <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800529a:	6822      	ldr	r2, [r4, #0]
 800529c:	6993      	ldr	r3, [r2, #24]
 800529e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80052a2:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80052a4:	6822      	ldr	r2, [r4, #0]
 80052a6:	6993      	ldr	r3, [r2, #24]
 80052a8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80052ac:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 80052ae:	6822      	ldr	r2, [r4, #0]
 80052b0:	6993      	ldr	r3, [r2, #24]
 80052b2:	6929      	ldr	r1, [r5, #16]
 80052b4:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80052b8:	6193      	str	r3, [r2, #24]
    break;
 80052ba:	e7e4      	b.n	8005286 <HAL_TIM_PWM_ConfigChannel+0x54>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80052bc:	6800      	ldr	r0, [r0, #0]
 80052be:	f7fe ff65 	bl	800418c <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80052c2:	6822      	ldr	r2, [r4, #0]
 80052c4:	69d3      	ldr	r3, [r2, #28]
 80052c6:	f043 0308 	orr.w	r3, r3, #8
 80052ca:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80052cc:	6822      	ldr	r2, [r4, #0]
 80052ce:	69d3      	ldr	r3, [r2, #28]
 80052d0:	f023 0304 	bic.w	r3, r3, #4
 80052d4:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80052d6:	6822      	ldr	r2, [r4, #0]
 80052d8:	69d3      	ldr	r3, [r2, #28]
 80052da:	6929      	ldr	r1, [r5, #16]
 80052dc:	430b      	orrs	r3, r1
 80052de:	61d3      	str	r3, [r2, #28]
    break;
 80052e0:	e7d1      	b.n	8005286 <HAL_TIM_PWM_ConfigChannel+0x54>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80052e2:	6800      	ldr	r0, [r0, #0]
 80052e4:	f7fe ff84 	bl	80041f0 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80052e8:	6822      	ldr	r2, [r4, #0]
 80052ea:	69d3      	ldr	r3, [r2, #28]
 80052ec:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80052f0:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80052f2:	6822      	ldr	r2, [r4, #0]
 80052f4:	69d3      	ldr	r3, [r2, #28]
 80052f6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80052fa:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;
 80052fc:	6822      	ldr	r2, [r4, #0]
 80052fe:	69d3      	ldr	r3, [r2, #28]
 8005300:	6929      	ldr	r1, [r5, #16]
 8005302:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8005306:	61d3      	str	r3, [r2, #28]
    break;
 8005308:	e7bd      	b.n	8005286 <HAL_TIM_PWM_ConfigChannel+0x54>
  __HAL_LOCK(htim);
 800530a:	2002      	movs	r0, #2
}
 800530c:	bd38      	pop	{r3, r4, r5, pc}

0800530e <TIM_TI1_SetConfig>:
{
 800530e:	b470      	push	{r4, r5, r6}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005310:	6a04      	ldr	r4, [r0, #32]
 8005312:	f024 0401 	bic.w	r4, r4, #1
 8005316:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005318:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 800531a:	6a05      	ldr	r5, [r0, #32]
  if(IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800531c:	4e15      	ldr	r6, [pc, #84]	; (8005374 <TIM_TI1_SetConfig+0x66>)
 800531e:	42b0      	cmp	r0, r6
 8005320:	d01e      	beq.n	8005360 <TIM_TI1_SetConfig+0x52>
 8005322:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8005326:	d01d      	beq.n	8005364 <TIM_TI1_SetConfig+0x56>
 8005328:	f5a6 3694 	sub.w	r6, r6, #75776	; 0x12800
 800532c:	42b0      	cmp	r0, r6
 800532e:	d01b      	beq.n	8005368 <TIM_TI1_SetConfig+0x5a>
 8005330:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8005334:	42b0      	cmp	r0, r6
 8005336:	d011      	beq.n	800535c <TIM_TI1_SetConfig+0x4e>
 8005338:	2600      	movs	r6, #0
 800533a:	b9be      	cbnz	r6, 800536c <TIM_TI1_SetConfig+0x5e>
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800533c:	f044 0201 	orr.w	r2, r4, #1
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005340:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8005344:	011b      	lsls	r3, r3, #4
 8005346:	b2db      	uxtb	r3, r3
 8005348:	4313      	orrs	r3, r2
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800534a:	f025 020a 	bic.w	r2, r5, #10
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800534e:	f001 010a 	and.w	r1, r1, #10
 8005352:	4311      	orrs	r1, r2
  TIMx->CCMR1 = tmpccmr1;
 8005354:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8005356:	6201      	str	r1, [r0, #32]
}
 8005358:	bc70      	pop	{r4, r5, r6}
 800535a:	4770      	bx	lr
  if(IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800535c:	2601      	movs	r6, #1
 800535e:	e7ec      	b.n	800533a <TIM_TI1_SetConfig+0x2c>
 8005360:	2601      	movs	r6, #1
 8005362:	e7ea      	b.n	800533a <TIM_TI1_SetConfig+0x2c>
 8005364:	2601      	movs	r6, #1
 8005366:	e7e8      	b.n	800533a <TIM_TI1_SetConfig+0x2c>
 8005368:	2601      	movs	r6, #1
 800536a:	e7e6      	b.n	800533a <TIM_TI1_SetConfig+0x2c>
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800536c:	f024 0403 	bic.w	r4, r4, #3
    tmpccmr1 |= TIM_ICSelection;
 8005370:	4322      	orrs	r2, r4
 8005372:	e7e5      	b.n	8005340 <TIM_TI1_SetConfig+0x32>
 8005374:	40012c00 	.word	0x40012c00

08005378 <HAL_TIM_IC_ConfigChannel>:
{
 8005378:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 800537a:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800537e:	2b01      	cmp	r3, #1
 8005380:	d058      	beq.n	8005434 <HAL_TIM_IC_ConfigChannel+0xbc>
 8005382:	460d      	mov	r5, r1
 8005384:	4604      	mov	r4, r0
 8005386:	2301      	movs	r3, #1
 8005388:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 800538c:	2302      	movs	r3, #2
 800538e:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  if (Channel == TIM_CHANNEL_1)
 8005392:	b1da      	cbz	r2, 80053cc <HAL_TIM_IC_ConfigChannel+0x54>
  else if (Channel == TIM_CHANNEL_2)
 8005394:	2a04      	cmp	r2, #4
 8005396:	d02a      	beq.n	80053ee <HAL_TIM_IC_ConfigChannel+0x76>
  else if (Channel == TIM_CHANNEL_3)
 8005398:	2a08      	cmp	r2, #8
 800539a:	d03a      	beq.n	8005412 <HAL_TIM_IC_ConfigChannel+0x9a>
    TIM_TI4_SetConfig(htim->Instance,
 800539c:	68cb      	ldr	r3, [r1, #12]
 800539e:	684a      	ldr	r2, [r1, #4]
 80053a0:	6809      	ldr	r1, [r1, #0]
 80053a2:	6800      	ldr	r0, [r0, #0]
 80053a4:	f7fe ffa0 	bl	80042e8 <TIM_TI4_SetConfig>
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80053a8:	6822      	ldr	r2, [r4, #0]
 80053aa:	69d3      	ldr	r3, [r2, #28]
 80053ac:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80053b0:	61d3      	str	r3, [r2, #28]
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80053b2:	6822      	ldr	r2, [r4, #0]
 80053b4:	69d3      	ldr	r3, [r2, #28]
 80053b6:	68a9      	ldr	r1, [r5, #8]
 80053b8:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80053bc:	61d3      	str	r3, [r2, #28]
  htim->State = HAL_TIM_STATE_READY;
 80053be:	2301      	movs	r3, #1
 80053c0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80053c4:	2000      	movs	r0, #0
 80053c6:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
  return HAL_OK;
 80053ca:	bd38      	pop	{r3, r4, r5, pc}
    TIM_TI1_SetConfig(htim->Instance,
 80053cc:	68cb      	ldr	r3, [r1, #12]
 80053ce:	684a      	ldr	r2, [r1, #4]
 80053d0:	6809      	ldr	r1, [r1, #0]
 80053d2:	6800      	ldr	r0, [r0, #0]
 80053d4:	f7ff ff9b 	bl	800530e <TIM_TI1_SetConfig>
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80053d8:	6822      	ldr	r2, [r4, #0]
 80053da:	6993      	ldr	r3, [r2, #24]
 80053dc:	f023 030c 	bic.w	r3, r3, #12
 80053e0:	6193      	str	r3, [r2, #24]
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80053e2:	6822      	ldr	r2, [r4, #0]
 80053e4:	6993      	ldr	r3, [r2, #24]
 80053e6:	68a9      	ldr	r1, [r5, #8]
 80053e8:	430b      	orrs	r3, r1
 80053ea:	6193      	str	r3, [r2, #24]
 80053ec:	e7e7      	b.n	80053be <HAL_TIM_IC_ConfigChannel+0x46>
    TIM_TI2_SetConfig(htim->Instance,
 80053ee:	68cb      	ldr	r3, [r1, #12]
 80053f0:	684a      	ldr	r2, [r1, #4]
 80053f2:	6809      	ldr	r1, [r1, #0]
 80053f4:	6800      	ldr	r0, [r0, #0]
 80053f6:	f7fe ff31 	bl	800425c <TIM_TI2_SetConfig>
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80053fa:	6822      	ldr	r2, [r4, #0]
 80053fc:	6993      	ldr	r3, [r2, #24]
 80053fe:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8005402:	6193      	str	r3, [r2, #24]
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8005404:	6822      	ldr	r2, [r4, #0]
 8005406:	6993      	ldr	r3, [r2, #24]
 8005408:	68a9      	ldr	r1, [r5, #8]
 800540a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800540e:	6193      	str	r3, [r2, #24]
 8005410:	e7d5      	b.n	80053be <HAL_TIM_IC_ConfigChannel+0x46>
    TIM_TI3_SetConfig(htim->Instance,
 8005412:	68cb      	ldr	r3, [r1, #12]
 8005414:	684a      	ldr	r2, [r1, #4]
 8005416:	6809      	ldr	r1, [r1, #0]
 8005418:	6800      	ldr	r0, [r0, #0]
 800541a:	f7fe ff4c 	bl	80042b6 <TIM_TI3_SetConfig>
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800541e:	6822      	ldr	r2, [r4, #0]
 8005420:	69d3      	ldr	r3, [r2, #28]
 8005422:	f023 030c 	bic.w	r3, r3, #12
 8005426:	61d3      	str	r3, [r2, #28]
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8005428:	6822      	ldr	r2, [r4, #0]
 800542a:	69d3      	ldr	r3, [r2, #28]
 800542c:	68a9      	ldr	r1, [r5, #8]
 800542e:	430b      	orrs	r3, r1
 8005430:	61d3      	str	r3, [r2, #28]
 8005432:	e7c4      	b.n	80053be <HAL_TIM_IC_ConfigChannel+0x46>
  __HAL_LOCK(htim);
 8005434:	2002      	movs	r0, #2
}
 8005436:	bd38      	pop	{r3, r4, r5, pc}

08005438 <HAL_TIM_OnePulse_ConfigChannel>:
  if(OutputChannel != InputChannel)
 8005438:	429a      	cmp	r2, r3
 800543a:	d072      	beq.n	8005522 <HAL_TIM_OnePulse_ConfigChannel+0xea>
{
 800543c:	b570      	push	{r4, r5, r6, lr}
 800543e:	b088      	sub	sp, #32
  __HAL_LOCK(htim);
 8005440:	f890 403c 	ldrb.w	r4, [r0, #60]	; 0x3c
 8005444:	2c01      	cmp	r4, #1
 8005446:	d06e      	beq.n	8005526 <HAL_TIM_OnePulse_ConfigChannel+0xee>
 8005448:	461e      	mov	r6, r3
 800544a:	460d      	mov	r5, r1
 800544c:	4604      	mov	r4, r0
 800544e:	2301      	movs	r3, #1
 8005450:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8005454:	2302      	movs	r3, #2
 8005456:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  temp1.OCMode = sConfig->OCMode;
 800545a:	680b      	ldr	r3, [r1, #0]
 800545c:	9301      	str	r3, [sp, #4]
  temp1.Pulse = sConfig->Pulse;
 800545e:	684b      	ldr	r3, [r1, #4]
 8005460:	9302      	str	r3, [sp, #8]
  temp1.OCPolarity = sConfig->OCPolarity;
 8005462:	688b      	ldr	r3, [r1, #8]
 8005464:	9303      	str	r3, [sp, #12]
  temp1.OCNPolarity = sConfig->OCNPolarity;
 8005466:	68cb      	ldr	r3, [r1, #12]
 8005468:	9304      	str	r3, [sp, #16]
  temp1.OCIdleState = sConfig->OCIdleState;
 800546a:	690b      	ldr	r3, [r1, #16]
 800546c:	9306      	str	r3, [sp, #24]
  temp1.OCNIdleState = sConfig->OCNIdleState;
 800546e:	694b      	ldr	r3, [r1, #20]
 8005470:	9307      	str	r3, [sp, #28]
    switch (OutputChannel)
 8005472:	b162      	cbz	r2, 800548e <HAL_TIM_OnePulse_ConfigChannel+0x56>
 8005474:	2a04      	cmp	r2, #4
 8005476:	d00f      	beq.n	8005498 <HAL_TIM_OnePulse_ConfigChannel+0x60>
  switch (InputChannel)
 8005478:	b19e      	cbz	r6, 80054a2 <HAL_TIM_OnePulse_ConfigChannel+0x6a>
 800547a:	2e04      	cmp	r6, #4
 800547c:	d031      	beq.n	80054e2 <HAL_TIM_OnePulse_ConfigChannel+0xaa>
  htim->State = HAL_TIM_STATE_READY;
 800547e:	2301      	movs	r3, #1
 8005480:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8005484:	2000      	movs	r0, #0
 8005486:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 800548a:	b008      	add	sp, #32
 800548c:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC1_SetConfig(htim->Instance, &temp1);
 800548e:	a901      	add	r1, sp, #4
 8005490:	6800      	ldr	r0, [r0, #0]
 8005492:	f7fe fe4d 	bl	8004130 <TIM_OC1_SetConfig>
    break;
 8005496:	e7ef      	b.n	8005478 <HAL_TIM_OnePulse_ConfigChannel+0x40>
      TIM_OC2_SetConfig(htim->Instance, &temp1);
 8005498:	a901      	add	r1, sp, #4
 800549a:	6800      	ldr	r0, [r0, #0]
 800549c:	f7ff fe67 	bl	800516e <TIM_OC2_SetConfig>
    break;
 80054a0:	e7ea      	b.n	8005478 <HAL_TIM_OnePulse_ConfigChannel+0x40>
      TIM_TI1_SetConfig(htim->Instance, sConfig->ICPolarity,
 80054a2:	6a2b      	ldr	r3, [r5, #32]
 80054a4:	69ea      	ldr	r2, [r5, #28]
 80054a6:	69a9      	ldr	r1, [r5, #24]
 80054a8:	6820      	ldr	r0, [r4, #0]
 80054aa:	f7ff ff30 	bl	800530e <TIM_TI1_SetConfig>
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80054ae:	6822      	ldr	r2, [r4, #0]
 80054b0:	6993      	ldr	r3, [r2, #24]
 80054b2:	f023 030c 	bic.w	r3, r3, #12
 80054b6:	6193      	str	r3, [r2, #24]
        htim->Instance->SMCR &= ~TIM_SMCR_TS;
 80054b8:	6822      	ldr	r2, [r4, #0]
 80054ba:	6893      	ldr	r3, [r2, #8]
 80054bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054c0:	6093      	str	r3, [r2, #8]
      htim->Instance->SMCR |= TIM_TS_TI1FP1;
 80054c2:	6822      	ldr	r2, [r4, #0]
 80054c4:	6893      	ldr	r3, [r2, #8]
 80054c6:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 80054ca:	6093      	str	r3, [r2, #8]
        htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 80054cc:	6822      	ldr	r2, [r4, #0]
 80054ce:	6893      	ldr	r3, [r2, #8]
 80054d0:	f023 0307 	bic.w	r3, r3, #7
 80054d4:	6093      	str	r3, [r2, #8]
      htim->Instance->SMCR |= TIM_SLAVEMODE_TRIGGER;
 80054d6:	6822      	ldr	r2, [r4, #0]
 80054d8:	6893      	ldr	r3, [r2, #8]
 80054da:	f043 0306 	orr.w	r3, r3, #6
 80054de:	6093      	str	r3, [r2, #8]
    break;
 80054e0:	e7cd      	b.n	800547e <HAL_TIM_OnePulse_ConfigChannel+0x46>
      TIM_TI2_SetConfig(htim->Instance, sConfig->ICPolarity,
 80054e2:	6a2b      	ldr	r3, [r5, #32]
 80054e4:	69ea      	ldr	r2, [r5, #28]
 80054e6:	69a9      	ldr	r1, [r5, #24]
 80054e8:	6820      	ldr	r0, [r4, #0]
 80054ea:	f7fe feb7 	bl	800425c <TIM_TI2_SetConfig>
        htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80054ee:	6822      	ldr	r2, [r4, #0]
 80054f0:	6993      	ldr	r3, [r2, #24]
 80054f2:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80054f6:	6193      	str	r3, [r2, #24]
        htim->Instance->SMCR &= ~TIM_SMCR_TS;
 80054f8:	6822      	ldr	r2, [r4, #0]
 80054fa:	6893      	ldr	r3, [r2, #8]
 80054fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005500:	6093      	str	r3, [r2, #8]
      htim->Instance->SMCR |= TIM_TS_TI2FP2;
 8005502:	6822      	ldr	r2, [r4, #0]
 8005504:	6893      	ldr	r3, [r2, #8]
 8005506:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800550a:	6093      	str	r3, [r2, #8]
        htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 800550c:	6822      	ldr	r2, [r4, #0]
 800550e:	6893      	ldr	r3, [r2, #8]
 8005510:	f023 0307 	bic.w	r3, r3, #7
 8005514:	6093      	str	r3, [r2, #8]
      htim->Instance->SMCR |= TIM_SLAVEMODE_TRIGGER;
 8005516:	6822      	ldr	r2, [r4, #0]
 8005518:	6893      	ldr	r3, [r2, #8]
 800551a:	f043 0306 	orr.w	r3, r3, #6
 800551e:	6093      	str	r3, [r2, #8]
    break;
 8005520:	e7ad      	b.n	800547e <HAL_TIM_OnePulse_ConfigChannel+0x46>
    return HAL_ERROR;
 8005522:	2001      	movs	r0, #1
 8005524:	4770      	bx	lr
  __HAL_LOCK(htim);
 8005526:	2002      	movs	r0, #2
 8005528:	e7af      	b.n	800548a <HAL_TIM_OnePulse_ConfigChannel+0x52>

0800552a <TIM_CCxChannelCmd>:
  * @param  ChannelState : specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_Disable.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef* TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800552a:	b410      	push	{r4}

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;
 800552c:	2301      	movs	r3, #1
 800552e:	fa03 f401 	lsl.w	r4, r3, r1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005532:	6a03      	ldr	r3, [r0, #32]
 8005534:	ea23 0304 	bic.w	r3, r3, r4
 8005538:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |=  (uint32_t)(ChannelState << Channel);
 800553a:	6a03      	ldr	r3, [r0, #32]
 800553c:	408a      	lsls	r2, r1
 800553e:	4313      	orrs	r3, r2
 8005540:	6203      	str	r3, [r0, #32]
}
 8005542:	bc10      	pop	{r4}
 8005544:	4770      	bx	lr

08005546 <HAL_TIM_OC_Start>:
{
 8005546:	b510      	push	{r4, lr}
 8005548:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800554a:	2201      	movs	r2, #1
 800554c:	6800      	ldr	r0, [r0, #0]
 800554e:	f7ff ffec 	bl	800552a <TIM_CCxChannelCmd>
  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005552:	6823      	ldr	r3, [r4, #0]
 8005554:	4a07      	ldr	r2, [pc, #28]	; (8005574 <HAL_TIM_OC_Start+0x2e>)
 8005556:	4293      	cmp	r3, r2
 8005558:	d006      	beq.n	8005568 <HAL_TIM_OC_Start+0x22>
  __HAL_TIM_ENABLE(htim);
 800555a:	6822      	ldr	r2, [r4, #0]
 800555c:	6813      	ldr	r3, [r2, #0]
 800555e:	f043 0301 	orr.w	r3, r3, #1
 8005562:	6013      	str	r3, [r2, #0]
}
 8005564:	2000      	movs	r0, #0
 8005566:	bd10      	pop	{r4, pc}
    __HAL_TIM_MOE_ENABLE(htim);
 8005568:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800556a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800556e:	645a      	str	r2, [r3, #68]	; 0x44
 8005570:	e7f3      	b.n	800555a <HAL_TIM_OC_Start+0x14>
 8005572:	bf00      	nop
 8005574:	40012c00 	.word	0x40012c00

08005578 <HAL_TIM_OC_Stop>:
{
 8005578:	b510      	push	{r4, lr}
 800557a:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800557c:	2200      	movs	r2, #0
 800557e:	6800      	ldr	r0, [r0, #0]
 8005580:	f7ff ffd3 	bl	800552a <TIM_CCxChannelCmd>
  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005584:	6823      	ldr	r3, [r4, #0]
 8005586:	4a11      	ldr	r2, [pc, #68]	; (80055cc <HAL_TIM_OC_Stop+0x54>)
 8005588:	4293      	cmp	r3, r2
 800558a:	d010      	beq.n	80055ae <HAL_TIM_OC_Stop+0x36>
  __HAL_TIM_DISABLE(htim);
 800558c:	6823      	ldr	r3, [r4, #0]
 800558e:	6a19      	ldr	r1, [r3, #32]
 8005590:	f241 1211 	movw	r2, #4369	; 0x1111
 8005594:	4211      	tst	r1, r2
 8005596:	d108      	bne.n	80055aa <HAL_TIM_OC_Stop+0x32>
 8005598:	6a19      	ldr	r1, [r3, #32]
 800559a:	f240 4244 	movw	r2, #1092	; 0x444
 800559e:	4211      	tst	r1, r2
 80055a0:	d103      	bne.n	80055aa <HAL_TIM_OC_Stop+0x32>
 80055a2:	681a      	ldr	r2, [r3, #0]
 80055a4:	f022 0201 	bic.w	r2, r2, #1
 80055a8:	601a      	str	r2, [r3, #0]
}
 80055aa:	2000      	movs	r0, #0
 80055ac:	bd10      	pop	{r4, pc}
    __HAL_TIM_MOE_DISABLE(htim);
 80055ae:	6a19      	ldr	r1, [r3, #32]
 80055b0:	f241 1211 	movw	r2, #4369	; 0x1111
 80055b4:	4211      	tst	r1, r2
 80055b6:	d1e9      	bne.n	800558c <HAL_TIM_OC_Stop+0x14>
 80055b8:	6a19      	ldr	r1, [r3, #32]
 80055ba:	f240 4244 	movw	r2, #1092	; 0x444
 80055be:	4211      	tst	r1, r2
 80055c0:	d1e4      	bne.n	800558c <HAL_TIM_OC_Stop+0x14>
 80055c2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80055c4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80055c8:	645a      	str	r2, [r3, #68]	; 0x44
 80055ca:	e7df      	b.n	800558c <HAL_TIM_OC_Stop+0x14>
 80055cc:	40012c00 	.word	0x40012c00

080055d0 <HAL_TIM_OC_Start_IT>:
{
 80055d0:	b510      	push	{r4, lr}
 80055d2:	4604      	mov	r4, r0
  switch (Channel)
 80055d4:	290c      	cmp	r1, #12
 80055d6:	d80d      	bhi.n	80055f4 <HAL_TIM_OC_Start_IT+0x24>
 80055d8:	e8df f001 	tbb	[pc, r1]
 80055dc:	0c0c0c07 	.word	0x0c0c0c07
 80055e0:	0c0c0c1b 	.word	0x0c0c0c1b
 80055e4:	0c0c0c21 	.word	0x0c0c0c21
 80055e8:	27          	.byte	0x27
 80055e9:	00          	.byte	0x00
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80055ea:	6802      	ldr	r2, [r0, #0]
 80055ec:	68d3      	ldr	r3, [r2, #12]
 80055ee:	f043 0302 	orr.w	r3, r3, #2
 80055f2:	60d3      	str	r3, [r2, #12]
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80055f4:	2201      	movs	r2, #1
 80055f6:	6820      	ldr	r0, [r4, #0]
 80055f8:	f7ff ff97 	bl	800552a <TIM_CCxChannelCmd>
  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80055fc:	6823      	ldr	r3, [r4, #0]
 80055fe:	4a10      	ldr	r2, [pc, #64]	; (8005640 <HAL_TIM_OC_Start_IT+0x70>)
 8005600:	4293      	cmp	r3, r2
 8005602:	d018      	beq.n	8005636 <HAL_TIM_OC_Start_IT+0x66>
  __HAL_TIM_ENABLE(htim);
 8005604:	6822      	ldr	r2, [r4, #0]
 8005606:	6813      	ldr	r3, [r2, #0]
 8005608:	f043 0301 	orr.w	r3, r3, #1
 800560c:	6013      	str	r3, [r2, #0]
}
 800560e:	2000      	movs	r0, #0
 8005610:	bd10      	pop	{r4, pc}
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005612:	6802      	ldr	r2, [r0, #0]
 8005614:	68d3      	ldr	r3, [r2, #12]
 8005616:	f043 0304 	orr.w	r3, r3, #4
 800561a:	60d3      	str	r3, [r2, #12]
    break;
 800561c:	e7ea      	b.n	80055f4 <HAL_TIM_OC_Start_IT+0x24>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800561e:	6802      	ldr	r2, [r0, #0]
 8005620:	68d3      	ldr	r3, [r2, #12]
 8005622:	f043 0308 	orr.w	r3, r3, #8
 8005626:	60d3      	str	r3, [r2, #12]
    break;
 8005628:	e7e4      	b.n	80055f4 <HAL_TIM_OC_Start_IT+0x24>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800562a:	6802      	ldr	r2, [r0, #0]
 800562c:	68d3      	ldr	r3, [r2, #12]
 800562e:	f043 0310 	orr.w	r3, r3, #16
 8005632:	60d3      	str	r3, [r2, #12]
    break;
 8005634:	e7de      	b.n	80055f4 <HAL_TIM_OC_Start_IT+0x24>
    __HAL_TIM_MOE_ENABLE(htim);
 8005636:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005638:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800563c:	645a      	str	r2, [r3, #68]	; 0x44
 800563e:	e7e1      	b.n	8005604 <HAL_TIM_OC_Start_IT+0x34>
 8005640:	40012c00 	.word	0x40012c00

08005644 <HAL_TIM_OC_Stop_IT>:
{
 8005644:	b510      	push	{r4, lr}
 8005646:	4604      	mov	r4, r0
  switch (Channel)
 8005648:	290c      	cmp	r1, #12
 800564a:	d80d      	bhi.n	8005668 <HAL_TIM_OC_Stop_IT+0x24>
 800564c:	e8df f001 	tbb	[pc, r1]
 8005650:	0c0c0c07 	.word	0x0c0c0c07
 8005654:	0c0c0c25 	.word	0x0c0c0c25
 8005658:	0c0c0c2b 	.word	0x0c0c0c2b
 800565c:	31          	.byte	0x31
 800565d:	00          	.byte	0x00
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 800565e:	6802      	ldr	r2, [r0, #0]
 8005660:	68d3      	ldr	r3, [r2, #12]
 8005662:	f023 0302 	bic.w	r3, r3, #2
 8005666:	60d3      	str	r3, [r2, #12]
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8005668:	2200      	movs	r2, #0
 800566a:	6820      	ldr	r0, [r4, #0]
 800566c:	f7ff ff5d 	bl	800552a <TIM_CCxChannelCmd>
  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005670:	6823      	ldr	r3, [r4, #0]
 8005672:	4a1a      	ldr	r2, [pc, #104]	; (80056dc <HAL_TIM_OC_Stop_IT+0x98>)
 8005674:	4293      	cmp	r3, r2
 8005676:	d022      	beq.n	80056be <HAL_TIM_OC_Stop_IT+0x7a>
  __HAL_TIM_DISABLE(htim);
 8005678:	6823      	ldr	r3, [r4, #0]
 800567a:	6a19      	ldr	r1, [r3, #32]
 800567c:	f241 1211 	movw	r2, #4369	; 0x1111
 8005680:	4211      	tst	r1, r2
 8005682:	d108      	bne.n	8005696 <HAL_TIM_OC_Stop_IT+0x52>
 8005684:	6a19      	ldr	r1, [r3, #32]
 8005686:	f240 4244 	movw	r2, #1092	; 0x444
 800568a:	4211      	tst	r1, r2
 800568c:	d103      	bne.n	8005696 <HAL_TIM_OC_Stop_IT+0x52>
 800568e:	681a      	ldr	r2, [r3, #0]
 8005690:	f022 0201 	bic.w	r2, r2, #1
 8005694:	601a      	str	r2, [r3, #0]
}
 8005696:	2000      	movs	r0, #0
 8005698:	bd10      	pop	{r4, pc}
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800569a:	6802      	ldr	r2, [r0, #0]
 800569c:	68d3      	ldr	r3, [r2, #12]
 800569e:	f023 0304 	bic.w	r3, r3, #4
 80056a2:	60d3      	str	r3, [r2, #12]
    break;
 80056a4:	e7e0      	b.n	8005668 <HAL_TIM_OC_Stop_IT+0x24>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 80056a6:	6802      	ldr	r2, [r0, #0]
 80056a8:	68d3      	ldr	r3, [r2, #12]
 80056aa:	f023 0308 	bic.w	r3, r3, #8
 80056ae:	60d3      	str	r3, [r2, #12]
    break;
 80056b0:	e7da      	b.n	8005668 <HAL_TIM_OC_Stop_IT+0x24>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 80056b2:	6802      	ldr	r2, [r0, #0]
 80056b4:	68d3      	ldr	r3, [r2, #12]
 80056b6:	f023 0310 	bic.w	r3, r3, #16
 80056ba:	60d3      	str	r3, [r2, #12]
    break;
 80056bc:	e7d4      	b.n	8005668 <HAL_TIM_OC_Stop_IT+0x24>
    __HAL_TIM_MOE_DISABLE(htim);
 80056be:	6a19      	ldr	r1, [r3, #32]
 80056c0:	f241 1211 	movw	r2, #4369	; 0x1111
 80056c4:	4211      	tst	r1, r2
 80056c6:	d1d7      	bne.n	8005678 <HAL_TIM_OC_Stop_IT+0x34>
 80056c8:	6a19      	ldr	r1, [r3, #32]
 80056ca:	f240 4244 	movw	r2, #1092	; 0x444
 80056ce:	4211      	tst	r1, r2
 80056d0:	d1d2      	bne.n	8005678 <HAL_TIM_OC_Stop_IT+0x34>
 80056d2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80056d4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80056d8:	645a      	str	r2, [r3, #68]	; 0x44
 80056da:	e7cd      	b.n	8005678 <HAL_TIM_OC_Stop_IT+0x34>
 80056dc:	40012c00 	.word	0x40012c00

080056e0 <HAL_TIM_OC_Start_DMA>:
{
 80056e0:	b570      	push	{r4, r5, r6, lr}
  if((htim->State == HAL_TIM_STATE_BUSY))
 80056e2:	f890 503d 	ldrb.w	r5, [r0, #61]	; 0x3d
 80056e6:	b2ed      	uxtb	r5, r5
 80056e8:	2d02      	cmp	r5, #2
 80056ea:	d075      	beq.n	80057d8 <HAL_TIM_OC_Start_DMA+0xf8>
  else if((htim->State == HAL_TIM_STATE_READY))
 80056ec:	f890 403d 	ldrb.w	r4, [r0, #61]	; 0x3d
 80056f0:	b2e4      	uxtb	r4, r4
 80056f2:	2c01      	cmp	r4, #1
 80056f4:	d00d      	beq.n	8005712 <HAL_TIM_OC_Start_DMA+0x32>
 80056f6:	4616      	mov	r6, r2
 80056f8:	460d      	mov	r5, r1
 80056fa:	4604      	mov	r4, r0
  switch (Channel)
 80056fc:	290c      	cmp	r1, #12
 80056fe:	d820      	bhi.n	8005742 <HAL_TIM_OC_Start_DMA+0x62>
 8005700:	e8df f001 	tbb	[pc, r1]
 8005704:	1f1f1f0e 	.word	0x1f1f1f0e
 8005708:	1f1f1f2f 	.word	0x1f1f1f2f
 800570c:	1f1f1f41 	.word	0x1f1f1f41
 8005710:	53          	.byte	0x53
 8005711:	00          	.byte	0x00
    if(((uint32_t)pData == 0U) && (Length > 0U))
 8005712:	b90a      	cbnz	r2, 8005718 <HAL_TIM_OC_Start_DMA+0x38>
 8005714:	2b00      	cmp	r3, #0
 8005716:	d161      	bne.n	80057dc <HAL_TIM_OC_Start_DMA+0xfc>
      htim->State = HAL_TIM_STATE_BUSY;
 8005718:	2402      	movs	r4, #2
 800571a:	f880 403d 	strb.w	r4, [r0, #61]	; 0x3d
 800571e:	e7ea      	b.n	80056f6 <HAL_TIM_OC_Start_DMA+0x16>
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8005720:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8005722:	492f      	ldr	r1, [pc, #188]	; (80057e0 <HAL_TIM_OC_Start_DMA+0x100>)
 8005724:	6291      	str	r1, [r2, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8005726:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8005728:	492e      	ldr	r1, [pc, #184]	; (80057e4 <HAL_TIM_OC_Start_DMA+0x104>)
 800572a:	6311      	str	r1, [r2, #48]	; 0x30
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1, Length);
 800572c:	6802      	ldr	r2, [r0, #0]
 800572e:	3234      	adds	r2, #52	; 0x34
 8005730:	4631      	mov	r1, r6
 8005732:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8005734:	f7fc fd96 	bl	8002264 <HAL_DMA_Start_IT>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8005738:	6822      	ldr	r2, [r4, #0]
 800573a:	68d3      	ldr	r3, [r2, #12]
 800573c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005740:	60d3      	str	r3, [r2, #12]
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005742:	2201      	movs	r2, #1
 8005744:	4629      	mov	r1, r5
 8005746:	6820      	ldr	r0, [r4, #0]
 8005748:	f7ff feef 	bl	800552a <TIM_CCxChannelCmd>
  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800574c:	6823      	ldr	r3, [r4, #0]
 800574e:	4a26      	ldr	r2, [pc, #152]	; (80057e8 <HAL_TIM_OC_Start_DMA+0x108>)
 8005750:	4293      	cmp	r3, r2
 8005752:	d03c      	beq.n	80057ce <HAL_TIM_OC_Start_DMA+0xee>
  __HAL_TIM_ENABLE(htim);
 8005754:	6822      	ldr	r2, [r4, #0]
 8005756:	6813      	ldr	r3, [r2, #0]
 8005758:	f043 0301 	orr.w	r3, r3, #1
 800575c:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 800575e:	2000      	movs	r0, #0
 8005760:	bd70      	pop	{r4, r5, r6, pc}
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8005762:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8005764:	491e      	ldr	r1, [pc, #120]	; (80057e0 <HAL_TIM_OC_Start_DMA+0x100>)
 8005766:	6291      	str	r1, [r2, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8005768:	6a82      	ldr	r2, [r0, #40]	; 0x28
 800576a:	491e      	ldr	r1, [pc, #120]	; (80057e4 <HAL_TIM_OC_Start_DMA+0x104>)
 800576c:	6311      	str	r1, [r2, #48]	; 0x30
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2, Length);
 800576e:	6802      	ldr	r2, [r0, #0]
 8005770:	3238      	adds	r2, #56	; 0x38
 8005772:	4631      	mov	r1, r6
 8005774:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8005776:	f7fc fd75 	bl	8002264 <HAL_DMA_Start_IT>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 800577a:	6822      	ldr	r2, [r4, #0]
 800577c:	68d3      	ldr	r3, [r2, #12]
 800577e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005782:	60d3      	str	r3, [r2, #12]
    break;
 8005784:	e7dd      	b.n	8005742 <HAL_TIM_OC_Start_DMA+0x62>
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8005786:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8005788:	4915      	ldr	r1, [pc, #84]	; (80057e0 <HAL_TIM_OC_Start_DMA+0x100>)
 800578a:	6291      	str	r1, [r2, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 800578c:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 800578e:	4915      	ldr	r1, [pc, #84]	; (80057e4 <HAL_TIM_OC_Start_DMA+0x104>)
 8005790:	6311      	str	r1, [r2, #48]	; 0x30
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,Length);
 8005792:	6802      	ldr	r2, [r0, #0]
 8005794:	323c      	adds	r2, #60	; 0x3c
 8005796:	4631      	mov	r1, r6
 8005798:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 800579a:	f7fc fd63 	bl	8002264 <HAL_DMA_Start_IT>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 800579e:	6822      	ldr	r2, [r4, #0]
 80057a0:	68d3      	ldr	r3, [r2, #12]
 80057a2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80057a6:	60d3      	str	r3, [r2, #12]
    break;
 80057a8:	e7cb      	b.n	8005742 <HAL_TIM_OC_Start_DMA+0x62>
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80057aa:	6b02      	ldr	r2, [r0, #48]	; 0x30
 80057ac:	490c      	ldr	r1, [pc, #48]	; (80057e0 <HAL_TIM_OC_Start_DMA+0x100>)
 80057ae:	6291      	str	r1, [r2, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 80057b0:	6b02      	ldr	r2, [r0, #48]	; 0x30
 80057b2:	490c      	ldr	r1, [pc, #48]	; (80057e4 <HAL_TIM_OC_Start_DMA+0x104>)
 80057b4:	6311      	str	r1, [r2, #48]	; 0x30
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4, Length);
 80057b6:	6802      	ldr	r2, [r0, #0]
 80057b8:	3240      	adds	r2, #64	; 0x40
 80057ba:	4631      	mov	r1, r6
 80057bc:	6b00      	ldr	r0, [r0, #48]	; 0x30
 80057be:	f7fc fd51 	bl	8002264 <HAL_DMA_Start_IT>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 80057c2:	6822      	ldr	r2, [r4, #0]
 80057c4:	68d3      	ldr	r3, [r2, #12]
 80057c6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80057ca:	60d3      	str	r3, [r2, #12]
    break;
 80057cc:	e7b9      	b.n	8005742 <HAL_TIM_OC_Start_DMA+0x62>
    __HAL_TIM_MOE_ENABLE(htim);
 80057ce:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80057d0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80057d4:	645a      	str	r2, [r3, #68]	; 0x44
 80057d6:	e7bd      	b.n	8005754 <HAL_TIM_OC_Start_DMA+0x74>
     return HAL_BUSY;
 80057d8:	2002      	movs	r0, #2
 80057da:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 80057dc:	2001      	movs	r0, #1
}
 80057de:	bd70      	pop	{r4, r5, r6, pc}
 80057e0:	08004d4b 	.word	0x08004d4b
 80057e4:	08004f1f 	.word	0x08004f1f
 80057e8:	40012c00 	.word	0x40012c00

080057ec <HAL_TIM_OC_Stop_DMA>:
{
 80057ec:	b510      	push	{r4, lr}
 80057ee:	4604      	mov	r4, r0
  switch (Channel)
 80057f0:	290c      	cmp	r1, #12
 80057f2:	d80d      	bhi.n	8005810 <HAL_TIM_OC_Stop_DMA+0x24>
 80057f4:	e8df f001 	tbb	[pc, r1]
 80057f8:	0c0c0c07 	.word	0x0c0c0c07
 80057fc:	0c0c0c28 	.word	0x0c0c0c28
 8005800:	0c0c0c2e 	.word	0x0c0c0c2e
 8005804:	34          	.byte	0x34
 8005805:	00          	.byte	0x00
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8005806:	6802      	ldr	r2, [r0, #0]
 8005808:	68d3      	ldr	r3, [r2, #12]
 800580a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800580e:	60d3      	str	r3, [r2, #12]
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8005810:	2200      	movs	r2, #0
 8005812:	6820      	ldr	r0, [r4, #0]
 8005814:	f7ff fe89 	bl	800552a <TIM_CCxChannelCmd>
  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005818:	6823      	ldr	r3, [r4, #0]
 800581a:	4a1c      	ldr	r2, [pc, #112]	; (800588c <HAL_TIM_OC_Stop_DMA+0xa0>)
 800581c:	4293      	cmp	r3, r2
 800581e:	d025      	beq.n	800586c <HAL_TIM_OC_Stop_DMA+0x80>
  __HAL_TIM_DISABLE(htim);
 8005820:	6823      	ldr	r3, [r4, #0]
 8005822:	6a19      	ldr	r1, [r3, #32]
 8005824:	f241 1211 	movw	r2, #4369	; 0x1111
 8005828:	4211      	tst	r1, r2
 800582a:	d108      	bne.n	800583e <HAL_TIM_OC_Stop_DMA+0x52>
 800582c:	6a19      	ldr	r1, [r3, #32]
 800582e:	f240 4244 	movw	r2, #1092	; 0x444
 8005832:	4211      	tst	r1, r2
 8005834:	d103      	bne.n	800583e <HAL_TIM_OC_Stop_DMA+0x52>
 8005836:	681a      	ldr	r2, [r3, #0]
 8005838:	f022 0201 	bic.w	r2, r2, #1
 800583c:	601a      	str	r2, [r3, #0]
  htim->State = HAL_TIM_STATE_READY;
 800583e:	2301      	movs	r3, #1
 8005840:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 8005844:	2000      	movs	r0, #0
 8005846:	bd10      	pop	{r4, pc}
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8005848:	6802      	ldr	r2, [r0, #0]
 800584a:	68d3      	ldr	r3, [r2, #12]
 800584c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005850:	60d3      	str	r3, [r2, #12]
    break;
 8005852:	e7dd      	b.n	8005810 <HAL_TIM_OC_Stop_DMA+0x24>
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8005854:	6802      	ldr	r2, [r0, #0]
 8005856:	68d3      	ldr	r3, [r2, #12]
 8005858:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800585c:	60d3      	str	r3, [r2, #12]
    break;
 800585e:	e7d7      	b.n	8005810 <HAL_TIM_OC_Stop_DMA+0x24>
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8005860:	6802      	ldr	r2, [r0, #0]
 8005862:	68d3      	ldr	r3, [r2, #12]
 8005864:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005868:	60d3      	str	r3, [r2, #12]
    break;
 800586a:	e7d1      	b.n	8005810 <HAL_TIM_OC_Stop_DMA+0x24>
    __HAL_TIM_MOE_DISABLE(htim);
 800586c:	6a19      	ldr	r1, [r3, #32]
 800586e:	f241 1211 	movw	r2, #4369	; 0x1111
 8005872:	4211      	tst	r1, r2
 8005874:	d1d4      	bne.n	8005820 <HAL_TIM_OC_Stop_DMA+0x34>
 8005876:	6a19      	ldr	r1, [r3, #32]
 8005878:	f240 4244 	movw	r2, #1092	; 0x444
 800587c:	4211      	tst	r1, r2
 800587e:	d1cf      	bne.n	8005820 <HAL_TIM_OC_Stop_DMA+0x34>
 8005880:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005882:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005886:	645a      	str	r2, [r3, #68]	; 0x44
 8005888:	e7ca      	b.n	8005820 <HAL_TIM_OC_Stop_DMA+0x34>
 800588a:	bf00      	nop
 800588c:	40012c00 	.word	0x40012c00

08005890 <HAL_TIM_PWM_Start>:
{
 8005890:	b510      	push	{r4, lr}
 8005892:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005894:	2201      	movs	r2, #1
 8005896:	6800      	ldr	r0, [r0, #0]
 8005898:	f7ff fe47 	bl	800552a <TIM_CCxChannelCmd>
  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800589c:	6823      	ldr	r3, [r4, #0]
 800589e:	4a07      	ldr	r2, [pc, #28]	; (80058bc <HAL_TIM_PWM_Start+0x2c>)
 80058a0:	4293      	cmp	r3, r2
 80058a2:	d006      	beq.n	80058b2 <HAL_TIM_PWM_Start+0x22>
  __HAL_TIM_ENABLE(htim);
 80058a4:	6822      	ldr	r2, [r4, #0]
 80058a6:	6813      	ldr	r3, [r2, #0]
 80058a8:	f043 0301 	orr.w	r3, r3, #1
 80058ac:	6013      	str	r3, [r2, #0]
}
 80058ae:	2000      	movs	r0, #0
 80058b0:	bd10      	pop	{r4, pc}
    __HAL_TIM_MOE_ENABLE(htim);
 80058b2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80058b4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80058b8:	645a      	str	r2, [r3, #68]	; 0x44
 80058ba:	e7f3      	b.n	80058a4 <HAL_TIM_PWM_Start+0x14>
 80058bc:	40012c00 	.word	0x40012c00

080058c0 <HAL_TIM_PWM_Stop>:
{
 80058c0:	b510      	push	{r4, lr}
 80058c2:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80058c4:	2200      	movs	r2, #0
 80058c6:	6800      	ldr	r0, [r0, #0]
 80058c8:	f7ff fe2f 	bl	800552a <TIM_CCxChannelCmd>
  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80058cc:	6823      	ldr	r3, [r4, #0]
 80058ce:	4a13      	ldr	r2, [pc, #76]	; (800591c <HAL_TIM_PWM_Stop+0x5c>)
 80058d0:	4293      	cmp	r3, r2
 80058d2:	d013      	beq.n	80058fc <HAL_TIM_PWM_Stop+0x3c>
  __HAL_TIM_DISABLE(htim);
 80058d4:	6823      	ldr	r3, [r4, #0]
 80058d6:	6a19      	ldr	r1, [r3, #32]
 80058d8:	f241 1211 	movw	r2, #4369	; 0x1111
 80058dc:	4211      	tst	r1, r2
 80058de:	d108      	bne.n	80058f2 <HAL_TIM_PWM_Stop+0x32>
 80058e0:	6a19      	ldr	r1, [r3, #32]
 80058e2:	f240 4244 	movw	r2, #1092	; 0x444
 80058e6:	4211      	tst	r1, r2
 80058e8:	d103      	bne.n	80058f2 <HAL_TIM_PWM_Stop+0x32>
 80058ea:	681a      	ldr	r2, [r3, #0]
 80058ec:	f022 0201 	bic.w	r2, r2, #1
 80058f0:	601a      	str	r2, [r3, #0]
  htim->State = HAL_TIM_STATE_READY;
 80058f2:	2301      	movs	r3, #1
 80058f4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 80058f8:	2000      	movs	r0, #0
 80058fa:	bd10      	pop	{r4, pc}
    __HAL_TIM_MOE_DISABLE(htim);
 80058fc:	6a19      	ldr	r1, [r3, #32]
 80058fe:	f241 1211 	movw	r2, #4369	; 0x1111
 8005902:	4211      	tst	r1, r2
 8005904:	d1e6      	bne.n	80058d4 <HAL_TIM_PWM_Stop+0x14>
 8005906:	6a19      	ldr	r1, [r3, #32]
 8005908:	f240 4244 	movw	r2, #1092	; 0x444
 800590c:	4211      	tst	r1, r2
 800590e:	d1e1      	bne.n	80058d4 <HAL_TIM_PWM_Stop+0x14>
 8005910:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005912:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005916:	645a      	str	r2, [r3, #68]	; 0x44
 8005918:	e7dc      	b.n	80058d4 <HAL_TIM_PWM_Stop+0x14>
 800591a:	bf00      	nop
 800591c:	40012c00 	.word	0x40012c00

08005920 <HAL_TIM_PWM_Start_IT>:
{
 8005920:	b510      	push	{r4, lr}
 8005922:	4604      	mov	r4, r0
  switch (Channel)
 8005924:	290c      	cmp	r1, #12
 8005926:	d80d      	bhi.n	8005944 <HAL_TIM_PWM_Start_IT+0x24>
 8005928:	e8df f001 	tbb	[pc, r1]
 800592c:	0c0c0c07 	.word	0x0c0c0c07
 8005930:	0c0c0c1b 	.word	0x0c0c0c1b
 8005934:	0c0c0c21 	.word	0x0c0c0c21
 8005938:	27          	.byte	0x27
 8005939:	00          	.byte	0x00
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800593a:	6802      	ldr	r2, [r0, #0]
 800593c:	68d3      	ldr	r3, [r2, #12]
 800593e:	f043 0302 	orr.w	r3, r3, #2
 8005942:	60d3      	str	r3, [r2, #12]
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005944:	2201      	movs	r2, #1
 8005946:	6820      	ldr	r0, [r4, #0]
 8005948:	f7ff fdef 	bl	800552a <TIM_CCxChannelCmd>
  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800594c:	6823      	ldr	r3, [r4, #0]
 800594e:	4a10      	ldr	r2, [pc, #64]	; (8005990 <HAL_TIM_PWM_Start_IT+0x70>)
 8005950:	4293      	cmp	r3, r2
 8005952:	d018      	beq.n	8005986 <HAL_TIM_PWM_Start_IT+0x66>
  __HAL_TIM_ENABLE(htim);
 8005954:	6822      	ldr	r2, [r4, #0]
 8005956:	6813      	ldr	r3, [r2, #0]
 8005958:	f043 0301 	orr.w	r3, r3, #1
 800595c:	6013      	str	r3, [r2, #0]
}
 800595e:	2000      	movs	r0, #0
 8005960:	bd10      	pop	{r4, pc}
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005962:	6802      	ldr	r2, [r0, #0]
 8005964:	68d3      	ldr	r3, [r2, #12]
 8005966:	f043 0304 	orr.w	r3, r3, #4
 800596a:	60d3      	str	r3, [r2, #12]
    break;
 800596c:	e7ea      	b.n	8005944 <HAL_TIM_PWM_Start_IT+0x24>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800596e:	6802      	ldr	r2, [r0, #0]
 8005970:	68d3      	ldr	r3, [r2, #12]
 8005972:	f043 0308 	orr.w	r3, r3, #8
 8005976:	60d3      	str	r3, [r2, #12]
    break;
 8005978:	e7e4      	b.n	8005944 <HAL_TIM_PWM_Start_IT+0x24>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800597a:	6802      	ldr	r2, [r0, #0]
 800597c:	68d3      	ldr	r3, [r2, #12]
 800597e:	f043 0310 	orr.w	r3, r3, #16
 8005982:	60d3      	str	r3, [r2, #12]
    break;
 8005984:	e7de      	b.n	8005944 <HAL_TIM_PWM_Start_IT+0x24>
    __HAL_TIM_MOE_ENABLE(htim);
 8005986:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005988:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800598c:	645a      	str	r2, [r3, #68]	; 0x44
 800598e:	e7e1      	b.n	8005954 <HAL_TIM_PWM_Start_IT+0x34>
 8005990:	40012c00 	.word	0x40012c00

08005994 <HAL_TIM_PWM_Stop_IT>:
{
 8005994:	b510      	push	{r4, lr}
 8005996:	4604      	mov	r4, r0
  switch (Channel)
 8005998:	290c      	cmp	r1, #12
 800599a:	d80d      	bhi.n	80059b8 <HAL_TIM_PWM_Stop_IT+0x24>
 800599c:	e8df f001 	tbb	[pc, r1]
 80059a0:	0c0c0c07 	.word	0x0c0c0c07
 80059a4:	0c0c0c25 	.word	0x0c0c0c25
 80059a8:	0c0c0c2b 	.word	0x0c0c0c2b
 80059ac:	31          	.byte	0x31
 80059ad:	00          	.byte	0x00
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 80059ae:	6802      	ldr	r2, [r0, #0]
 80059b0:	68d3      	ldr	r3, [r2, #12]
 80059b2:	f023 0302 	bic.w	r3, r3, #2
 80059b6:	60d3      	str	r3, [r2, #12]
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80059b8:	2200      	movs	r2, #0
 80059ba:	6820      	ldr	r0, [r4, #0]
 80059bc:	f7ff fdb5 	bl	800552a <TIM_CCxChannelCmd>
  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80059c0:	6823      	ldr	r3, [r4, #0]
 80059c2:	4a1a      	ldr	r2, [pc, #104]	; (8005a2c <HAL_TIM_PWM_Stop_IT+0x98>)
 80059c4:	4293      	cmp	r3, r2
 80059c6:	d022      	beq.n	8005a0e <HAL_TIM_PWM_Stop_IT+0x7a>
  __HAL_TIM_DISABLE(htim);
 80059c8:	6823      	ldr	r3, [r4, #0]
 80059ca:	6a19      	ldr	r1, [r3, #32]
 80059cc:	f241 1211 	movw	r2, #4369	; 0x1111
 80059d0:	4211      	tst	r1, r2
 80059d2:	d108      	bne.n	80059e6 <HAL_TIM_PWM_Stop_IT+0x52>
 80059d4:	6a19      	ldr	r1, [r3, #32]
 80059d6:	f240 4244 	movw	r2, #1092	; 0x444
 80059da:	4211      	tst	r1, r2
 80059dc:	d103      	bne.n	80059e6 <HAL_TIM_PWM_Stop_IT+0x52>
 80059de:	681a      	ldr	r2, [r3, #0]
 80059e0:	f022 0201 	bic.w	r2, r2, #1
 80059e4:	601a      	str	r2, [r3, #0]
}
 80059e6:	2000      	movs	r0, #0
 80059e8:	bd10      	pop	{r4, pc}
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 80059ea:	6802      	ldr	r2, [r0, #0]
 80059ec:	68d3      	ldr	r3, [r2, #12]
 80059ee:	f023 0304 	bic.w	r3, r3, #4
 80059f2:	60d3      	str	r3, [r2, #12]
    break;
 80059f4:	e7e0      	b.n	80059b8 <HAL_TIM_PWM_Stop_IT+0x24>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 80059f6:	6802      	ldr	r2, [r0, #0]
 80059f8:	68d3      	ldr	r3, [r2, #12]
 80059fa:	f023 0308 	bic.w	r3, r3, #8
 80059fe:	60d3      	str	r3, [r2, #12]
    break;
 8005a00:	e7da      	b.n	80059b8 <HAL_TIM_PWM_Stop_IT+0x24>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8005a02:	6802      	ldr	r2, [r0, #0]
 8005a04:	68d3      	ldr	r3, [r2, #12]
 8005a06:	f023 0310 	bic.w	r3, r3, #16
 8005a0a:	60d3      	str	r3, [r2, #12]
    break;
 8005a0c:	e7d4      	b.n	80059b8 <HAL_TIM_PWM_Stop_IT+0x24>
    __HAL_TIM_MOE_DISABLE(htim);
 8005a0e:	6a19      	ldr	r1, [r3, #32]
 8005a10:	f241 1211 	movw	r2, #4369	; 0x1111
 8005a14:	4211      	tst	r1, r2
 8005a16:	d1d7      	bne.n	80059c8 <HAL_TIM_PWM_Stop_IT+0x34>
 8005a18:	6a19      	ldr	r1, [r3, #32]
 8005a1a:	f240 4244 	movw	r2, #1092	; 0x444
 8005a1e:	4211      	tst	r1, r2
 8005a20:	d1d2      	bne.n	80059c8 <HAL_TIM_PWM_Stop_IT+0x34>
 8005a22:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005a24:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005a28:	645a      	str	r2, [r3, #68]	; 0x44
 8005a2a:	e7cd      	b.n	80059c8 <HAL_TIM_PWM_Stop_IT+0x34>
 8005a2c:	40012c00 	.word	0x40012c00

08005a30 <HAL_TIM_PWM_Start_DMA>:
{
 8005a30:	b570      	push	{r4, r5, r6, lr}
  if((htim->State == HAL_TIM_STATE_BUSY))
 8005a32:	f890 503d 	ldrb.w	r5, [r0, #61]	; 0x3d
 8005a36:	b2ed      	uxtb	r5, r5
 8005a38:	2d02      	cmp	r5, #2
 8005a3a:	d075      	beq.n	8005b28 <HAL_TIM_PWM_Start_DMA+0xf8>
  else if((htim->State == HAL_TIM_STATE_READY))
 8005a3c:	f890 403d 	ldrb.w	r4, [r0, #61]	; 0x3d
 8005a40:	b2e4      	uxtb	r4, r4
 8005a42:	2c01      	cmp	r4, #1
 8005a44:	d00d      	beq.n	8005a62 <HAL_TIM_PWM_Start_DMA+0x32>
 8005a46:	4616      	mov	r6, r2
 8005a48:	460d      	mov	r5, r1
 8005a4a:	4604      	mov	r4, r0
  switch (Channel)
 8005a4c:	290c      	cmp	r1, #12
 8005a4e:	d820      	bhi.n	8005a92 <HAL_TIM_PWM_Start_DMA+0x62>
 8005a50:	e8df f001 	tbb	[pc, r1]
 8005a54:	1f1f1f0e 	.word	0x1f1f1f0e
 8005a58:	1f1f1f2f 	.word	0x1f1f1f2f
 8005a5c:	1f1f1f41 	.word	0x1f1f1f41
 8005a60:	53          	.byte	0x53
 8005a61:	00          	.byte	0x00
    if(((uint32_t)pData == 0U) && (Length > 0U))
 8005a62:	b90a      	cbnz	r2, 8005a68 <HAL_TIM_PWM_Start_DMA+0x38>
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d161      	bne.n	8005b2c <HAL_TIM_PWM_Start_DMA+0xfc>
      htim->State = HAL_TIM_STATE_BUSY;
 8005a68:	2402      	movs	r4, #2
 8005a6a:	f880 403d 	strb.w	r4, [r0, #61]	; 0x3d
 8005a6e:	e7ea      	b.n	8005a46 <HAL_TIM_PWM_Start_DMA+0x16>
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8005a70:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8005a72:	492f      	ldr	r1, [pc, #188]	; (8005b30 <HAL_TIM_PWM_Start_DMA+0x100>)
 8005a74:	6291      	str	r1, [r2, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8005a76:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8005a78:	492e      	ldr	r1, [pc, #184]	; (8005b34 <HAL_TIM_PWM_Start_DMA+0x104>)
 8005a7a:	6311      	str	r1, [r2, #48]	; 0x30
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1, Length);
 8005a7c:	6802      	ldr	r2, [r0, #0]
 8005a7e:	3234      	adds	r2, #52	; 0x34
 8005a80:	4631      	mov	r1, r6
 8005a82:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8005a84:	f7fc fbee 	bl	8002264 <HAL_DMA_Start_IT>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8005a88:	6822      	ldr	r2, [r4, #0]
 8005a8a:	68d3      	ldr	r3, [r2, #12]
 8005a8c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005a90:	60d3      	str	r3, [r2, #12]
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005a92:	2201      	movs	r2, #1
 8005a94:	4629      	mov	r1, r5
 8005a96:	6820      	ldr	r0, [r4, #0]
 8005a98:	f7ff fd47 	bl	800552a <TIM_CCxChannelCmd>
  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005a9c:	6823      	ldr	r3, [r4, #0]
 8005a9e:	4a26      	ldr	r2, [pc, #152]	; (8005b38 <HAL_TIM_PWM_Start_DMA+0x108>)
 8005aa0:	4293      	cmp	r3, r2
 8005aa2:	d03c      	beq.n	8005b1e <HAL_TIM_PWM_Start_DMA+0xee>
  __HAL_TIM_ENABLE(htim);
 8005aa4:	6822      	ldr	r2, [r4, #0]
 8005aa6:	6813      	ldr	r3, [r2, #0]
 8005aa8:	f043 0301 	orr.w	r3, r3, #1
 8005aac:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 8005aae:	2000      	movs	r0, #0
 8005ab0:	bd70      	pop	{r4, r5, r6, pc}
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8005ab2:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8005ab4:	491e      	ldr	r1, [pc, #120]	; (8005b30 <HAL_TIM_PWM_Start_DMA+0x100>)
 8005ab6:	6291      	str	r1, [r2, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8005ab8:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8005aba:	491e      	ldr	r1, [pc, #120]	; (8005b34 <HAL_TIM_PWM_Start_DMA+0x104>)
 8005abc:	6311      	str	r1, [r2, #48]	; 0x30
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2, Length);
 8005abe:	6802      	ldr	r2, [r0, #0]
 8005ac0:	3238      	adds	r2, #56	; 0x38
 8005ac2:	4631      	mov	r1, r6
 8005ac4:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8005ac6:	f7fc fbcd 	bl	8002264 <HAL_DMA_Start_IT>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8005aca:	6822      	ldr	r2, [r4, #0]
 8005acc:	68d3      	ldr	r3, [r2, #12]
 8005ace:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005ad2:	60d3      	str	r3, [r2, #12]
    break;
 8005ad4:	e7dd      	b.n	8005a92 <HAL_TIM_PWM_Start_DMA+0x62>
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8005ad6:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8005ad8:	4915      	ldr	r1, [pc, #84]	; (8005b30 <HAL_TIM_PWM_Start_DMA+0x100>)
 8005ada:	6291      	str	r1, [r2, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8005adc:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8005ade:	4915      	ldr	r1, [pc, #84]	; (8005b34 <HAL_TIM_PWM_Start_DMA+0x104>)
 8005ae0:	6311      	str	r1, [r2, #48]	; 0x30
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,Length);
 8005ae2:	6802      	ldr	r2, [r0, #0]
 8005ae4:	323c      	adds	r2, #60	; 0x3c
 8005ae6:	4631      	mov	r1, r6
 8005ae8:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 8005aea:	f7fc fbbb 	bl	8002264 <HAL_DMA_Start_IT>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8005aee:	6822      	ldr	r2, [r4, #0]
 8005af0:	68d3      	ldr	r3, [r2, #12]
 8005af2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005af6:	60d3      	str	r3, [r2, #12]
    break;
 8005af8:	e7cb      	b.n	8005a92 <HAL_TIM_PWM_Start_DMA+0x62>
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8005afa:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8005afc:	490c      	ldr	r1, [pc, #48]	; (8005b30 <HAL_TIM_PWM_Start_DMA+0x100>)
 8005afe:	6291      	str	r1, [r2, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8005b00:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8005b02:	490c      	ldr	r1, [pc, #48]	; (8005b34 <HAL_TIM_PWM_Start_DMA+0x104>)
 8005b04:	6311      	str	r1, [r2, #48]	; 0x30
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4, Length);
 8005b06:	6802      	ldr	r2, [r0, #0]
 8005b08:	3240      	adds	r2, #64	; 0x40
 8005b0a:	4631      	mov	r1, r6
 8005b0c:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8005b0e:	f7fc fba9 	bl	8002264 <HAL_DMA_Start_IT>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8005b12:	6822      	ldr	r2, [r4, #0]
 8005b14:	68d3      	ldr	r3, [r2, #12]
 8005b16:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005b1a:	60d3      	str	r3, [r2, #12]
    break;
 8005b1c:	e7b9      	b.n	8005a92 <HAL_TIM_PWM_Start_DMA+0x62>
    __HAL_TIM_MOE_ENABLE(htim);
 8005b1e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005b20:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005b24:	645a      	str	r2, [r3, #68]	; 0x44
 8005b26:	e7bd      	b.n	8005aa4 <HAL_TIM_PWM_Start_DMA+0x74>
     return HAL_BUSY;
 8005b28:	2002      	movs	r0, #2
 8005b2a:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8005b2c:	2001      	movs	r0, #1
}
 8005b2e:	bd70      	pop	{r4, r5, r6, pc}
 8005b30:	08004d4b 	.word	0x08004d4b
 8005b34:	08004f1f 	.word	0x08004f1f
 8005b38:	40012c00 	.word	0x40012c00

08005b3c <HAL_TIM_PWM_Stop_DMA>:
{
 8005b3c:	b510      	push	{r4, lr}
 8005b3e:	4604      	mov	r4, r0
  switch (Channel)
 8005b40:	290c      	cmp	r1, #12
 8005b42:	d80d      	bhi.n	8005b60 <HAL_TIM_PWM_Stop_DMA+0x24>
 8005b44:	e8df f001 	tbb	[pc, r1]
 8005b48:	0c0c0c07 	.word	0x0c0c0c07
 8005b4c:	0c0c0c28 	.word	0x0c0c0c28
 8005b50:	0c0c0c2e 	.word	0x0c0c0c2e
 8005b54:	34          	.byte	0x34
 8005b55:	00          	.byte	0x00
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8005b56:	6802      	ldr	r2, [r0, #0]
 8005b58:	68d3      	ldr	r3, [r2, #12]
 8005b5a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005b5e:	60d3      	str	r3, [r2, #12]
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8005b60:	2200      	movs	r2, #0
 8005b62:	6820      	ldr	r0, [r4, #0]
 8005b64:	f7ff fce1 	bl	800552a <TIM_CCxChannelCmd>
  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005b68:	6823      	ldr	r3, [r4, #0]
 8005b6a:	4a1c      	ldr	r2, [pc, #112]	; (8005bdc <HAL_TIM_PWM_Stop_DMA+0xa0>)
 8005b6c:	4293      	cmp	r3, r2
 8005b6e:	d025      	beq.n	8005bbc <HAL_TIM_PWM_Stop_DMA+0x80>
  __HAL_TIM_DISABLE(htim);
 8005b70:	6823      	ldr	r3, [r4, #0]
 8005b72:	6a19      	ldr	r1, [r3, #32]
 8005b74:	f241 1211 	movw	r2, #4369	; 0x1111
 8005b78:	4211      	tst	r1, r2
 8005b7a:	d108      	bne.n	8005b8e <HAL_TIM_PWM_Stop_DMA+0x52>
 8005b7c:	6a19      	ldr	r1, [r3, #32]
 8005b7e:	f240 4244 	movw	r2, #1092	; 0x444
 8005b82:	4211      	tst	r1, r2
 8005b84:	d103      	bne.n	8005b8e <HAL_TIM_PWM_Stop_DMA+0x52>
 8005b86:	681a      	ldr	r2, [r3, #0]
 8005b88:	f022 0201 	bic.w	r2, r2, #1
 8005b8c:	601a      	str	r2, [r3, #0]
  htim->State = HAL_TIM_STATE_READY;
 8005b8e:	2301      	movs	r3, #1
 8005b90:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 8005b94:	2000      	movs	r0, #0
 8005b96:	bd10      	pop	{r4, pc}
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8005b98:	6802      	ldr	r2, [r0, #0]
 8005b9a:	68d3      	ldr	r3, [r2, #12]
 8005b9c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005ba0:	60d3      	str	r3, [r2, #12]
    break;
 8005ba2:	e7dd      	b.n	8005b60 <HAL_TIM_PWM_Stop_DMA+0x24>
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8005ba4:	6802      	ldr	r2, [r0, #0]
 8005ba6:	68d3      	ldr	r3, [r2, #12]
 8005ba8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005bac:	60d3      	str	r3, [r2, #12]
    break;
 8005bae:	e7d7      	b.n	8005b60 <HAL_TIM_PWM_Stop_DMA+0x24>
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8005bb0:	6802      	ldr	r2, [r0, #0]
 8005bb2:	68d3      	ldr	r3, [r2, #12]
 8005bb4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005bb8:	60d3      	str	r3, [r2, #12]
    break;
 8005bba:	e7d1      	b.n	8005b60 <HAL_TIM_PWM_Stop_DMA+0x24>
    __HAL_TIM_MOE_DISABLE(htim);
 8005bbc:	6a19      	ldr	r1, [r3, #32]
 8005bbe:	f241 1211 	movw	r2, #4369	; 0x1111
 8005bc2:	4211      	tst	r1, r2
 8005bc4:	d1d4      	bne.n	8005b70 <HAL_TIM_PWM_Stop_DMA+0x34>
 8005bc6:	6a19      	ldr	r1, [r3, #32]
 8005bc8:	f240 4244 	movw	r2, #1092	; 0x444
 8005bcc:	4211      	tst	r1, r2
 8005bce:	d1cf      	bne.n	8005b70 <HAL_TIM_PWM_Stop_DMA+0x34>
 8005bd0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005bd2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005bd6:	645a      	str	r2, [r3, #68]	; 0x44
 8005bd8:	e7ca      	b.n	8005b70 <HAL_TIM_PWM_Stop_DMA+0x34>
 8005bda:	bf00      	nop
 8005bdc:	40012c00 	.word	0x40012c00

08005be0 <HAL_TIM_IC_Start>:
{
 8005be0:	b510      	push	{r4, lr}
 8005be2:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005be4:	2201      	movs	r2, #1
 8005be6:	6800      	ldr	r0, [r0, #0]
 8005be8:	f7ff fc9f 	bl	800552a <TIM_CCxChannelCmd>
  __HAL_TIM_ENABLE(htim);
 8005bec:	6822      	ldr	r2, [r4, #0]
 8005bee:	6813      	ldr	r3, [r2, #0]
 8005bf0:	f043 0301 	orr.w	r3, r3, #1
 8005bf4:	6013      	str	r3, [r2, #0]
}
 8005bf6:	2000      	movs	r0, #0
 8005bf8:	bd10      	pop	{r4, pc}

08005bfa <HAL_TIM_IC_Stop>:
{
 8005bfa:	b510      	push	{r4, lr}
 8005bfc:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8005bfe:	2200      	movs	r2, #0
 8005c00:	6800      	ldr	r0, [r0, #0]
 8005c02:	f7ff fc92 	bl	800552a <TIM_CCxChannelCmd>
  __HAL_TIM_DISABLE(htim);
 8005c06:	6823      	ldr	r3, [r4, #0]
 8005c08:	6a19      	ldr	r1, [r3, #32]
 8005c0a:	f241 1211 	movw	r2, #4369	; 0x1111
 8005c0e:	4211      	tst	r1, r2
 8005c10:	d108      	bne.n	8005c24 <HAL_TIM_IC_Stop+0x2a>
 8005c12:	6a19      	ldr	r1, [r3, #32]
 8005c14:	f240 4244 	movw	r2, #1092	; 0x444
 8005c18:	4211      	tst	r1, r2
 8005c1a:	d103      	bne.n	8005c24 <HAL_TIM_IC_Stop+0x2a>
 8005c1c:	681a      	ldr	r2, [r3, #0]
 8005c1e:	f022 0201 	bic.w	r2, r2, #1
 8005c22:	601a      	str	r2, [r3, #0]
}
 8005c24:	2000      	movs	r0, #0
 8005c26:	bd10      	pop	{r4, pc}

08005c28 <HAL_TIM_IC_Start_IT>:
{
 8005c28:	b510      	push	{r4, lr}
 8005c2a:	4604      	mov	r4, r0
  switch (Channel)
 8005c2c:	290c      	cmp	r1, #12
 8005c2e:	d80d      	bhi.n	8005c4c <HAL_TIM_IC_Start_IT+0x24>
 8005c30:	e8df f001 	tbb	[pc, r1]
 8005c34:	0c0c0c07 	.word	0x0c0c0c07
 8005c38:	0c0c0c17 	.word	0x0c0c0c17
 8005c3c:	0c0c0c1d 	.word	0x0c0c0c1d
 8005c40:	23          	.byte	0x23
 8005c41:	00          	.byte	0x00
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005c42:	6802      	ldr	r2, [r0, #0]
 8005c44:	68d3      	ldr	r3, [r2, #12]
 8005c46:	f043 0302 	orr.w	r3, r3, #2
 8005c4a:	60d3      	str	r3, [r2, #12]
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005c4c:	2201      	movs	r2, #1
 8005c4e:	6820      	ldr	r0, [r4, #0]
 8005c50:	f7ff fc6b 	bl	800552a <TIM_CCxChannelCmd>
  __HAL_TIM_ENABLE(htim);
 8005c54:	6822      	ldr	r2, [r4, #0]
 8005c56:	6813      	ldr	r3, [r2, #0]
 8005c58:	f043 0301 	orr.w	r3, r3, #1
 8005c5c:	6013      	str	r3, [r2, #0]
}
 8005c5e:	2000      	movs	r0, #0
 8005c60:	bd10      	pop	{r4, pc}
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005c62:	6802      	ldr	r2, [r0, #0]
 8005c64:	68d3      	ldr	r3, [r2, #12]
 8005c66:	f043 0304 	orr.w	r3, r3, #4
 8005c6a:	60d3      	str	r3, [r2, #12]
    break;
 8005c6c:	e7ee      	b.n	8005c4c <HAL_TIM_IC_Start_IT+0x24>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8005c6e:	6802      	ldr	r2, [r0, #0]
 8005c70:	68d3      	ldr	r3, [r2, #12]
 8005c72:	f043 0308 	orr.w	r3, r3, #8
 8005c76:	60d3      	str	r3, [r2, #12]
    break;
 8005c78:	e7e8      	b.n	8005c4c <HAL_TIM_IC_Start_IT+0x24>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8005c7a:	6802      	ldr	r2, [r0, #0]
 8005c7c:	68d3      	ldr	r3, [r2, #12]
 8005c7e:	f043 0310 	orr.w	r3, r3, #16
 8005c82:	60d3      	str	r3, [r2, #12]
    break;
 8005c84:	e7e2      	b.n	8005c4c <HAL_TIM_IC_Start_IT+0x24>

08005c86 <HAL_TIM_IC_Stop_IT>:
{
 8005c86:	b510      	push	{r4, lr}
 8005c88:	4604      	mov	r4, r0
  switch (Channel)
 8005c8a:	290c      	cmp	r1, #12
 8005c8c:	d80d      	bhi.n	8005caa <HAL_TIM_IC_Stop_IT+0x24>
 8005c8e:	e8df f001 	tbb	[pc, r1]
 8005c92:	0c07      	.short	0x0c07
 8005c94:	0c210c0c 	.word	0x0c210c0c
 8005c98:	0c270c0c 	.word	0x0c270c0c
 8005c9c:	0c0c      	.short	0x0c0c
 8005c9e:	2d          	.byte	0x2d
 8005c9f:	00          	.byte	0x00
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8005ca0:	6802      	ldr	r2, [r0, #0]
 8005ca2:	68d3      	ldr	r3, [r2, #12]
 8005ca4:	f023 0302 	bic.w	r3, r3, #2
 8005ca8:	60d3      	str	r3, [r2, #12]
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8005caa:	2200      	movs	r2, #0
 8005cac:	6820      	ldr	r0, [r4, #0]
 8005cae:	f7ff fc3c 	bl	800552a <TIM_CCxChannelCmd>
  __HAL_TIM_DISABLE(htim);
 8005cb2:	6823      	ldr	r3, [r4, #0]
 8005cb4:	6a19      	ldr	r1, [r3, #32]
 8005cb6:	f241 1211 	movw	r2, #4369	; 0x1111
 8005cba:	4211      	tst	r1, r2
 8005cbc:	d108      	bne.n	8005cd0 <HAL_TIM_IC_Stop_IT+0x4a>
 8005cbe:	6a19      	ldr	r1, [r3, #32]
 8005cc0:	f240 4244 	movw	r2, #1092	; 0x444
 8005cc4:	4211      	tst	r1, r2
 8005cc6:	d103      	bne.n	8005cd0 <HAL_TIM_IC_Stop_IT+0x4a>
 8005cc8:	681a      	ldr	r2, [r3, #0]
 8005cca:	f022 0201 	bic.w	r2, r2, #1
 8005cce:	601a      	str	r2, [r3, #0]
}
 8005cd0:	2000      	movs	r0, #0
 8005cd2:	bd10      	pop	{r4, pc}
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8005cd4:	6802      	ldr	r2, [r0, #0]
 8005cd6:	68d3      	ldr	r3, [r2, #12]
 8005cd8:	f023 0304 	bic.w	r3, r3, #4
 8005cdc:	60d3      	str	r3, [r2, #12]
    break;
 8005cde:	e7e4      	b.n	8005caa <HAL_TIM_IC_Stop_IT+0x24>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8005ce0:	6802      	ldr	r2, [r0, #0]
 8005ce2:	68d3      	ldr	r3, [r2, #12]
 8005ce4:	f023 0308 	bic.w	r3, r3, #8
 8005ce8:	60d3      	str	r3, [r2, #12]
    break;
 8005cea:	e7de      	b.n	8005caa <HAL_TIM_IC_Stop_IT+0x24>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8005cec:	6802      	ldr	r2, [r0, #0]
 8005cee:	68d3      	ldr	r3, [r2, #12]
 8005cf0:	f023 0310 	bic.w	r3, r3, #16
 8005cf4:	60d3      	str	r3, [r2, #12]
    break;
 8005cf6:	e7d8      	b.n	8005caa <HAL_TIM_IC_Stop_IT+0x24>

08005cf8 <HAL_TIM_IC_Start_DMA>:
{
 8005cf8:	b538      	push	{r3, r4, r5, lr}
  if((htim->State == HAL_TIM_STATE_BUSY))
 8005cfa:	f890 503d 	ldrb.w	r5, [r0, #61]	; 0x3d
 8005cfe:	b2ed      	uxtb	r5, r5
 8005d00:	2d02      	cmp	r5, #2
 8005d02:	d069      	beq.n	8005dd8 <HAL_TIM_IC_Start_DMA+0xe0>
  else if((htim->State == HAL_TIM_STATE_READY))
 8005d04:	f890 403d 	ldrb.w	r4, [r0, #61]	; 0x3d
 8005d08:	b2e4      	uxtb	r4, r4
 8005d0a:	2c01      	cmp	r4, #1
 8005d0c:	d00c      	beq.n	8005d28 <HAL_TIM_IC_Start_DMA+0x30>
 8005d0e:	460d      	mov	r5, r1
 8005d10:	4604      	mov	r4, r0
  switch (Channel)
 8005d12:	2d0c      	cmp	r5, #12
 8005d14:	d821      	bhi.n	8005d5a <HAL_TIM_IC_Start_DMA+0x62>
 8005d16:	e8df f005 	tbb	[pc, r5]
 8005d1a:	2010      	.short	0x2010
 8005d1c:	202c2020 	.word	0x202c2020
 8005d20:	203d2020 	.word	0x203d2020
 8005d24:	2020      	.short	0x2020
 8005d26:	4e          	.byte	0x4e
 8005d27:	00          	.byte	0x00
    if((pData == 0U) && (Length > 0U))
 8005d28:	b11a      	cbz	r2, 8005d32 <HAL_TIM_IC_Start_DMA+0x3a>
      htim->State = HAL_TIM_STATE_BUSY;
 8005d2a:	2402      	movs	r4, #2
 8005d2c:	f880 403d 	strb.w	r4, [r0, #61]	; 0x3d
 8005d30:	e7ed      	b.n	8005d0e <HAL_TIM_IC_Start_DMA+0x16>
    if((pData == 0U) && (Length > 0U))
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d0f9      	beq.n	8005d2a <HAL_TIM_IC_Start_DMA+0x32>
      return HAL_ERROR;
 8005d36:	2001      	movs	r0, #1
}
 8005d38:	bd38      	pop	{r3, r4, r5, pc}
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMACaptureCplt;
 8005d3a:	6a41      	ldr	r1, [r0, #36]	; 0x24
 8005d3c:	4827      	ldr	r0, [pc, #156]	; (8005ddc <HAL_TIM_IC_Start_DMA+0xe4>)
 8005d3e:	6288      	str	r0, [r1, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8005d40:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8005d42:	4827      	ldr	r0, [pc, #156]	; (8005de0 <HAL_TIM_IC_Start_DMA+0xe8>)
 8005d44:	6308      	str	r0, [r1, #48]	; 0x30
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)&htim->Instance->CCR1, (uint32_t)pData, Length);
 8005d46:	6821      	ldr	r1, [r4, #0]
 8005d48:	3134      	adds	r1, #52	; 0x34
 8005d4a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8005d4c:	f7fc fa8a 	bl	8002264 <HAL_DMA_Start_IT>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8005d50:	6822      	ldr	r2, [r4, #0]
 8005d52:	68d3      	ldr	r3, [r2, #12]
 8005d54:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005d58:	60d3      	str	r3, [r2, #12]
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005d5a:	2201      	movs	r2, #1
 8005d5c:	4629      	mov	r1, r5
 8005d5e:	6820      	ldr	r0, [r4, #0]
 8005d60:	f7ff fbe3 	bl	800552a <TIM_CCxChannelCmd>
  __HAL_TIM_ENABLE(htim);
 8005d64:	6822      	ldr	r2, [r4, #0]
 8005d66:	6813      	ldr	r3, [r2, #0]
 8005d68:	f043 0301 	orr.w	r3, r3, #1
 8005d6c:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 8005d6e:	2000      	movs	r0, #0
 8005d70:	bd38      	pop	{r3, r4, r5, pc}
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMACaptureCplt;
 8005d72:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8005d74:	4819      	ldr	r0, [pc, #100]	; (8005ddc <HAL_TIM_IC_Start_DMA+0xe4>)
 8005d76:	6288      	str	r0, [r1, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8005d78:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8005d7a:	4819      	ldr	r0, [pc, #100]	; (8005de0 <HAL_TIM_IC_Start_DMA+0xe8>)
 8005d7c:	6308      	str	r0, [r1, #48]	; 0x30
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)&htim->Instance->CCR2, (uint32_t)pData, Length);
 8005d7e:	6821      	ldr	r1, [r4, #0]
 8005d80:	3138      	adds	r1, #56	; 0x38
 8005d82:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8005d84:	f7fc fa6e 	bl	8002264 <HAL_DMA_Start_IT>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8005d88:	6822      	ldr	r2, [r4, #0]
 8005d8a:	68d3      	ldr	r3, [r2, #12]
 8005d8c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005d90:	60d3      	str	r3, [r2, #12]
    break;
 8005d92:	e7e2      	b.n	8005d5a <HAL_TIM_IC_Start_DMA+0x62>
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMACaptureCplt;
 8005d94:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8005d96:	4811      	ldr	r0, [pc, #68]	; (8005ddc <HAL_TIM_IC_Start_DMA+0xe4>)
 8005d98:	6288      	str	r0, [r1, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8005d9a:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8005d9c:	4810      	ldr	r0, [pc, #64]	; (8005de0 <HAL_TIM_IC_Start_DMA+0xe8>)
 8005d9e:	6308      	str	r0, [r1, #48]	; 0x30
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)&htim->Instance->CCR3, (uint32_t)pData, Length);
 8005da0:	6821      	ldr	r1, [r4, #0]
 8005da2:	313c      	adds	r1, #60	; 0x3c
 8005da4:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8005da6:	f7fc fa5d 	bl	8002264 <HAL_DMA_Start_IT>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8005daa:	6822      	ldr	r2, [r4, #0]
 8005dac:	68d3      	ldr	r3, [r2, #12]
 8005dae:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005db2:	60d3      	str	r3, [r2, #12]
    break;
 8005db4:	e7d1      	b.n	8005d5a <HAL_TIM_IC_Start_DMA+0x62>
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMACaptureCplt;
 8005db6:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8005db8:	4808      	ldr	r0, [pc, #32]	; (8005ddc <HAL_TIM_IC_Start_DMA+0xe4>)
 8005dba:	6288      	str	r0, [r1, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8005dbc:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8005dbe:	4808      	ldr	r0, [pc, #32]	; (8005de0 <HAL_TIM_IC_Start_DMA+0xe8>)
 8005dc0:	6308      	str	r0, [r1, #48]	; 0x30
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)&htim->Instance->CCR4, (uint32_t)pData, Length);
 8005dc2:	6821      	ldr	r1, [r4, #0]
 8005dc4:	3140      	adds	r1, #64	; 0x40
 8005dc6:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8005dc8:	f7fc fa4c 	bl	8002264 <HAL_DMA_Start_IT>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8005dcc:	6822      	ldr	r2, [r4, #0]
 8005dce:	68d3      	ldr	r3, [r2, #12]
 8005dd0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005dd4:	60d3      	str	r3, [r2, #12]
    break;
 8005dd6:	e7c0      	b.n	8005d5a <HAL_TIM_IC_Start_DMA+0x62>
     return HAL_BUSY;
 8005dd8:	2002      	movs	r0, #2
 8005dda:	bd38      	pop	{r3, r4, r5, pc}
 8005ddc:	08004d03 	.word	0x08004d03
 8005de0:	08004f1f 	.word	0x08004f1f

08005de4 <HAL_TIM_IC_Stop_DMA>:
{
 8005de4:	b510      	push	{r4, lr}
 8005de6:	4604      	mov	r4, r0
  switch (Channel)
 8005de8:	290c      	cmp	r1, #12
 8005dea:	d80d      	bhi.n	8005e08 <HAL_TIM_IC_Stop_DMA+0x24>
 8005dec:	e8df f001 	tbb	[pc, r1]
 8005df0:	0c0c0c07 	.word	0x0c0c0c07
 8005df4:	0c0c0c24 	.word	0x0c0c0c24
 8005df8:	0c0c0c2a 	.word	0x0c0c0c2a
 8005dfc:	30          	.byte	0x30
 8005dfd:	00          	.byte	0x00
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8005dfe:	6802      	ldr	r2, [r0, #0]
 8005e00:	68d3      	ldr	r3, [r2, #12]
 8005e02:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005e06:	60d3      	str	r3, [r2, #12]
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8005e08:	2200      	movs	r2, #0
 8005e0a:	6820      	ldr	r0, [r4, #0]
 8005e0c:	f7ff fb8d 	bl	800552a <TIM_CCxChannelCmd>
  __HAL_TIM_DISABLE(htim);
 8005e10:	6823      	ldr	r3, [r4, #0]
 8005e12:	6a19      	ldr	r1, [r3, #32]
 8005e14:	f241 1211 	movw	r2, #4369	; 0x1111
 8005e18:	4211      	tst	r1, r2
 8005e1a:	d108      	bne.n	8005e2e <HAL_TIM_IC_Stop_DMA+0x4a>
 8005e1c:	6a19      	ldr	r1, [r3, #32]
 8005e1e:	f240 4244 	movw	r2, #1092	; 0x444
 8005e22:	4211      	tst	r1, r2
 8005e24:	d103      	bne.n	8005e2e <HAL_TIM_IC_Stop_DMA+0x4a>
 8005e26:	681a      	ldr	r2, [r3, #0]
 8005e28:	f022 0201 	bic.w	r2, r2, #1
 8005e2c:	601a      	str	r2, [r3, #0]
  htim->State = HAL_TIM_STATE_READY;
 8005e2e:	2301      	movs	r3, #1
 8005e30:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 8005e34:	2000      	movs	r0, #0
 8005e36:	bd10      	pop	{r4, pc}
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8005e38:	6802      	ldr	r2, [r0, #0]
 8005e3a:	68d3      	ldr	r3, [r2, #12]
 8005e3c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005e40:	60d3      	str	r3, [r2, #12]
    break;
 8005e42:	e7e1      	b.n	8005e08 <HAL_TIM_IC_Stop_DMA+0x24>
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8005e44:	6802      	ldr	r2, [r0, #0]
 8005e46:	68d3      	ldr	r3, [r2, #12]
 8005e48:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005e4c:	60d3      	str	r3, [r2, #12]
    break;
 8005e4e:	e7db      	b.n	8005e08 <HAL_TIM_IC_Stop_DMA+0x24>
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8005e50:	6802      	ldr	r2, [r0, #0]
 8005e52:	68d3      	ldr	r3, [r2, #12]
 8005e54:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005e58:	60d3      	str	r3, [r2, #12]
    break;
 8005e5a:	e7d5      	b.n	8005e08 <HAL_TIM_IC_Stop_DMA+0x24>

08005e5c <HAL_TIM_OnePulse_Start>:
{
 8005e5c:	b510      	push	{r4, lr}
 8005e5e:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005e60:	2201      	movs	r2, #1
 8005e62:	2100      	movs	r1, #0
 8005e64:	6800      	ldr	r0, [r0, #0]
 8005e66:	f7ff fb60 	bl	800552a <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005e6a:	2201      	movs	r2, #1
 8005e6c:	2104      	movs	r1, #4
 8005e6e:	6820      	ldr	r0, [r4, #0]
 8005e70:	f7ff fb5b 	bl	800552a <TIM_CCxChannelCmd>
  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005e74:	6823      	ldr	r3, [r4, #0]
 8005e76:	4a05      	ldr	r2, [pc, #20]	; (8005e8c <HAL_TIM_OnePulse_Start+0x30>)
 8005e78:	4293      	cmp	r3, r2
 8005e7a:	d001      	beq.n	8005e80 <HAL_TIM_OnePulse_Start+0x24>
}
 8005e7c:	2000      	movs	r0, #0
 8005e7e:	bd10      	pop	{r4, pc}
    __HAL_TIM_MOE_ENABLE(htim);
 8005e80:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005e82:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005e86:	645a      	str	r2, [r3, #68]	; 0x44
 8005e88:	e7f8      	b.n	8005e7c <HAL_TIM_OnePulse_Start+0x20>
 8005e8a:	bf00      	nop
 8005e8c:	40012c00 	.word	0x40012c00

08005e90 <HAL_TIM_OnePulse_Stop>:
{
 8005e90:	b510      	push	{r4, lr}
 8005e92:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 8005e94:	2200      	movs	r2, #0
 8005e96:	4611      	mov	r1, r2
 8005e98:	6800      	ldr	r0, [r0, #0]
 8005e9a:	f7ff fb46 	bl	800552a <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 8005e9e:	2200      	movs	r2, #0
 8005ea0:	2104      	movs	r1, #4
 8005ea2:	6820      	ldr	r0, [r4, #0]
 8005ea4:	f7ff fb41 	bl	800552a <TIM_CCxChannelCmd>
  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005ea8:	6823      	ldr	r3, [r4, #0]
 8005eaa:	4a11      	ldr	r2, [pc, #68]	; (8005ef0 <HAL_TIM_OnePulse_Stop+0x60>)
 8005eac:	4293      	cmp	r3, r2
 8005eae:	d010      	beq.n	8005ed2 <HAL_TIM_OnePulse_Stop+0x42>
  __HAL_TIM_DISABLE(htim);
 8005eb0:	6823      	ldr	r3, [r4, #0]
 8005eb2:	6a19      	ldr	r1, [r3, #32]
 8005eb4:	f241 1211 	movw	r2, #4369	; 0x1111
 8005eb8:	4211      	tst	r1, r2
 8005eba:	d108      	bne.n	8005ece <HAL_TIM_OnePulse_Stop+0x3e>
 8005ebc:	6a19      	ldr	r1, [r3, #32]
 8005ebe:	f240 4244 	movw	r2, #1092	; 0x444
 8005ec2:	4211      	tst	r1, r2
 8005ec4:	d103      	bne.n	8005ece <HAL_TIM_OnePulse_Stop+0x3e>
 8005ec6:	681a      	ldr	r2, [r3, #0]
 8005ec8:	f022 0201 	bic.w	r2, r2, #1
 8005ecc:	601a      	str	r2, [r3, #0]
}
 8005ece:	2000      	movs	r0, #0
 8005ed0:	bd10      	pop	{r4, pc}
    __HAL_TIM_MOE_DISABLE(htim);
 8005ed2:	6a19      	ldr	r1, [r3, #32]
 8005ed4:	f241 1211 	movw	r2, #4369	; 0x1111
 8005ed8:	4211      	tst	r1, r2
 8005eda:	d1e9      	bne.n	8005eb0 <HAL_TIM_OnePulse_Stop+0x20>
 8005edc:	6a19      	ldr	r1, [r3, #32]
 8005ede:	f240 4244 	movw	r2, #1092	; 0x444
 8005ee2:	4211      	tst	r1, r2
 8005ee4:	d1e4      	bne.n	8005eb0 <HAL_TIM_OnePulse_Stop+0x20>
 8005ee6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005ee8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005eec:	645a      	str	r2, [r3, #68]	; 0x44
 8005eee:	e7df      	b.n	8005eb0 <HAL_TIM_OnePulse_Stop+0x20>
 8005ef0:	40012c00 	.word	0x40012c00

08005ef4 <HAL_TIM_OnePulse_Start_IT>:
{
 8005ef4:	b510      	push	{r4, lr}
 8005ef6:	4604      	mov	r4, r0
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005ef8:	6802      	ldr	r2, [r0, #0]
 8005efa:	68d3      	ldr	r3, [r2, #12]
 8005efc:	f043 0302 	orr.w	r3, r3, #2
 8005f00:	60d3      	str	r3, [r2, #12]
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005f02:	6802      	ldr	r2, [r0, #0]
 8005f04:	68d3      	ldr	r3, [r2, #12]
 8005f06:	f043 0304 	orr.w	r3, r3, #4
 8005f0a:	60d3      	str	r3, [r2, #12]
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005f0c:	2201      	movs	r2, #1
 8005f0e:	2100      	movs	r1, #0
 8005f10:	6800      	ldr	r0, [r0, #0]
 8005f12:	f7ff fb0a 	bl	800552a <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005f16:	2201      	movs	r2, #1
 8005f18:	2104      	movs	r1, #4
 8005f1a:	6820      	ldr	r0, [r4, #0]
 8005f1c:	f7ff fb05 	bl	800552a <TIM_CCxChannelCmd>
  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005f20:	6823      	ldr	r3, [r4, #0]
 8005f22:	4a05      	ldr	r2, [pc, #20]	; (8005f38 <HAL_TIM_OnePulse_Start_IT+0x44>)
 8005f24:	4293      	cmp	r3, r2
 8005f26:	d001      	beq.n	8005f2c <HAL_TIM_OnePulse_Start_IT+0x38>
}
 8005f28:	2000      	movs	r0, #0
 8005f2a:	bd10      	pop	{r4, pc}
    __HAL_TIM_MOE_ENABLE(htim);
 8005f2c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005f2e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005f32:	645a      	str	r2, [r3, #68]	; 0x44
 8005f34:	e7f8      	b.n	8005f28 <HAL_TIM_OnePulse_Start_IT+0x34>
 8005f36:	bf00      	nop
 8005f38:	40012c00 	.word	0x40012c00

08005f3c <HAL_TIM_OnePulse_Stop_IT>:
{
 8005f3c:	b510      	push	{r4, lr}
 8005f3e:	4604      	mov	r4, r0
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8005f40:	6802      	ldr	r2, [r0, #0]
 8005f42:	68d3      	ldr	r3, [r2, #12]
 8005f44:	f023 0302 	bic.w	r3, r3, #2
 8005f48:	60d3      	str	r3, [r2, #12]
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8005f4a:	6802      	ldr	r2, [r0, #0]
 8005f4c:	68d3      	ldr	r3, [r2, #12]
 8005f4e:	f023 0304 	bic.w	r3, r3, #4
 8005f52:	60d3      	str	r3, [r2, #12]
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 8005f54:	2200      	movs	r2, #0
 8005f56:	4611      	mov	r1, r2
 8005f58:	6800      	ldr	r0, [r0, #0]
 8005f5a:	f7ff fae6 	bl	800552a <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 8005f5e:	2200      	movs	r2, #0
 8005f60:	2104      	movs	r1, #4
 8005f62:	6820      	ldr	r0, [r4, #0]
 8005f64:	f7ff fae1 	bl	800552a <TIM_CCxChannelCmd>
  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005f68:	6823      	ldr	r3, [r4, #0]
 8005f6a:	4a11      	ldr	r2, [pc, #68]	; (8005fb0 <HAL_TIM_OnePulse_Stop_IT+0x74>)
 8005f6c:	4293      	cmp	r3, r2
 8005f6e:	d010      	beq.n	8005f92 <HAL_TIM_OnePulse_Stop_IT+0x56>
   __HAL_TIM_DISABLE(htim);
 8005f70:	6823      	ldr	r3, [r4, #0]
 8005f72:	6a19      	ldr	r1, [r3, #32]
 8005f74:	f241 1211 	movw	r2, #4369	; 0x1111
 8005f78:	4211      	tst	r1, r2
 8005f7a:	d108      	bne.n	8005f8e <HAL_TIM_OnePulse_Stop_IT+0x52>
 8005f7c:	6a19      	ldr	r1, [r3, #32]
 8005f7e:	f240 4244 	movw	r2, #1092	; 0x444
 8005f82:	4211      	tst	r1, r2
 8005f84:	d103      	bne.n	8005f8e <HAL_TIM_OnePulse_Stop_IT+0x52>
 8005f86:	681a      	ldr	r2, [r3, #0]
 8005f88:	f022 0201 	bic.w	r2, r2, #1
 8005f8c:	601a      	str	r2, [r3, #0]
}
 8005f8e:	2000      	movs	r0, #0
 8005f90:	bd10      	pop	{r4, pc}
    __HAL_TIM_MOE_DISABLE(htim);
 8005f92:	6a19      	ldr	r1, [r3, #32]
 8005f94:	f241 1211 	movw	r2, #4369	; 0x1111
 8005f98:	4211      	tst	r1, r2
 8005f9a:	d1e9      	bne.n	8005f70 <HAL_TIM_OnePulse_Stop_IT+0x34>
 8005f9c:	6a19      	ldr	r1, [r3, #32]
 8005f9e:	f240 4244 	movw	r2, #1092	; 0x444
 8005fa2:	4211      	tst	r1, r2
 8005fa4:	d1e4      	bne.n	8005f70 <HAL_TIM_OnePulse_Stop_IT+0x34>
 8005fa6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005fa8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005fac:	645a      	str	r2, [r3, #68]	; 0x44
 8005fae:	e7df      	b.n	8005f70 <HAL_TIM_OnePulse_Stop_IT+0x34>
 8005fb0:	40012c00 	.word	0x40012c00

08005fb4 <HAL_TIM_Encoder_Start>:
{
 8005fb4:	b510      	push	{r4, lr}
 8005fb6:	4604      	mov	r4, r0
  switch (Channel)
 8005fb8:	b161      	cbz	r1, 8005fd4 <HAL_TIM_Encoder_Start+0x20>
 8005fba:	2904      	cmp	r1, #4
 8005fbc:	d016      	beq.n	8005fec <HAL_TIM_Encoder_Start+0x38>
     TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005fbe:	2201      	movs	r2, #1
 8005fc0:	2100      	movs	r1, #0
 8005fc2:	6800      	ldr	r0, [r0, #0]
 8005fc4:	f7ff fab1 	bl	800552a <TIM_CCxChannelCmd>
     TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005fc8:	2201      	movs	r2, #1
 8005fca:	2104      	movs	r1, #4
 8005fcc:	6820      	ldr	r0, [r4, #0]
 8005fce:	f7ff faac 	bl	800552a <TIM_CCxChannelCmd>
     break;
 8005fd2:	e004      	b.n	8005fde <HAL_TIM_Encoder_Start+0x2a>
    TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005fd4:	2201      	movs	r2, #1
 8005fd6:	2100      	movs	r1, #0
 8005fd8:	6800      	ldr	r0, [r0, #0]
 8005fda:	f7ff faa6 	bl	800552a <TIM_CCxChannelCmd>
  __HAL_TIM_ENABLE(htim);
 8005fde:	6822      	ldr	r2, [r4, #0]
 8005fe0:	6813      	ldr	r3, [r2, #0]
 8005fe2:	f043 0301 	orr.w	r3, r3, #1
 8005fe6:	6013      	str	r3, [r2, #0]
}
 8005fe8:	2000      	movs	r0, #0
 8005fea:	bd10      	pop	{r4, pc}
    TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005fec:	2201      	movs	r2, #1
 8005fee:	2104      	movs	r1, #4
 8005ff0:	6800      	ldr	r0, [r0, #0]
 8005ff2:	f7ff fa9a 	bl	800552a <TIM_CCxChannelCmd>
      break;
 8005ff6:	e7f2      	b.n	8005fde <HAL_TIM_Encoder_Start+0x2a>

08005ff8 <HAL_TIM_Encoder_Stop>:
{
 8005ff8:	b510      	push	{r4, lr}
 8005ffa:	4604      	mov	r4, r0
  switch (Channel)
 8005ffc:	b161      	cbz	r1, 8006018 <HAL_TIM_Encoder_Stop+0x20>
 8005ffe:	2904      	cmp	r1, #4
 8006000:	d020      	beq.n	8006044 <HAL_TIM_Encoder_Stop+0x4c>
    TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 8006002:	2200      	movs	r2, #0
 8006004:	4611      	mov	r1, r2
 8006006:	6800      	ldr	r0, [r0, #0]
 8006008:	f7ff fa8f 	bl	800552a <TIM_CCxChannelCmd>
    TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 800600c:	2200      	movs	r2, #0
 800600e:	2104      	movs	r1, #4
 8006010:	6820      	ldr	r0, [r4, #0]
 8006012:	f7ff fa8a 	bl	800552a <TIM_CCxChannelCmd>
     break;
 8006016:	e004      	b.n	8006022 <HAL_TIM_Encoder_Stop+0x2a>
     TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 8006018:	2200      	movs	r2, #0
 800601a:	4611      	mov	r1, r2
 800601c:	6800      	ldr	r0, [r0, #0]
 800601e:	f7ff fa84 	bl	800552a <TIM_CCxChannelCmd>
  __HAL_TIM_DISABLE(htim);
 8006022:	6823      	ldr	r3, [r4, #0]
 8006024:	6a19      	ldr	r1, [r3, #32]
 8006026:	f241 1211 	movw	r2, #4369	; 0x1111
 800602a:	4211      	tst	r1, r2
 800602c:	d108      	bne.n	8006040 <HAL_TIM_Encoder_Stop+0x48>
 800602e:	6a19      	ldr	r1, [r3, #32]
 8006030:	f240 4244 	movw	r2, #1092	; 0x444
 8006034:	4211      	tst	r1, r2
 8006036:	d103      	bne.n	8006040 <HAL_TIM_Encoder_Stop+0x48>
 8006038:	681a      	ldr	r2, [r3, #0]
 800603a:	f022 0201 	bic.w	r2, r2, #1
 800603e:	601a      	str	r2, [r3, #0]
}
 8006040:	2000      	movs	r0, #0
 8006042:	bd10      	pop	{r4, pc}
    TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 8006044:	2200      	movs	r2, #0
 8006046:	2104      	movs	r1, #4
 8006048:	6800      	ldr	r0, [r0, #0]
 800604a:	f7ff fa6e 	bl	800552a <TIM_CCxChannelCmd>
      break;
 800604e:	e7e8      	b.n	8006022 <HAL_TIM_Encoder_Stop+0x2a>

08006050 <HAL_TIM_Encoder_Start_IT>:
{
 8006050:	b510      	push	{r4, lr}
 8006052:	4604      	mov	r4, r0
  switch (Channel)
 8006054:	b1b1      	cbz	r1, 8006084 <HAL_TIM_Encoder_Start_IT+0x34>
 8006056:	2904      	cmp	r1, #4
 8006058:	d025      	beq.n	80060a6 <HAL_TIM_Encoder_Start_IT+0x56>
     TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800605a:	2201      	movs	r2, #1
 800605c:	2100      	movs	r1, #0
 800605e:	6800      	ldr	r0, [r0, #0]
 8006060:	f7ff fa63 	bl	800552a <TIM_CCxChannelCmd>
     TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006064:	2201      	movs	r2, #1
 8006066:	2104      	movs	r1, #4
 8006068:	6820      	ldr	r0, [r4, #0]
 800606a:	f7ff fa5e 	bl	800552a <TIM_CCxChannelCmd>
     __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800606e:	6822      	ldr	r2, [r4, #0]
 8006070:	68d3      	ldr	r3, [r2, #12]
 8006072:	f043 0302 	orr.w	r3, r3, #2
 8006076:	60d3      	str	r3, [r2, #12]
     __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8006078:	6822      	ldr	r2, [r4, #0]
 800607a:	68d3      	ldr	r3, [r2, #12]
 800607c:	f043 0304 	orr.w	r3, r3, #4
 8006080:	60d3      	str	r3, [r2, #12]
     break;
 8006082:	e009      	b.n	8006098 <HAL_TIM_Encoder_Start_IT+0x48>
    TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006084:	2201      	movs	r2, #1
 8006086:	2100      	movs	r1, #0
 8006088:	6800      	ldr	r0, [r0, #0]
 800608a:	f7ff fa4e 	bl	800552a <TIM_CCxChannelCmd>
    __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800608e:	6822      	ldr	r2, [r4, #0]
 8006090:	68d3      	ldr	r3, [r2, #12]
 8006092:	f043 0302 	orr.w	r3, r3, #2
 8006096:	60d3      	str	r3, [r2, #12]
  __HAL_TIM_ENABLE(htim);
 8006098:	6822      	ldr	r2, [r4, #0]
 800609a:	6813      	ldr	r3, [r2, #0]
 800609c:	f043 0301 	orr.w	r3, r3, #1
 80060a0:	6013      	str	r3, [r2, #0]
}
 80060a2:	2000      	movs	r0, #0
 80060a4:	bd10      	pop	{r4, pc}
    TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80060a6:	2201      	movs	r2, #1
 80060a8:	2104      	movs	r1, #4
 80060aa:	6800      	ldr	r0, [r0, #0]
 80060ac:	f7ff fa3d 	bl	800552a <TIM_CCxChannelCmd>
    __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80060b0:	6822      	ldr	r2, [r4, #0]
 80060b2:	68d3      	ldr	r3, [r2, #12]
 80060b4:	f043 0304 	orr.w	r3, r3, #4
 80060b8:	60d3      	str	r3, [r2, #12]
      break;
 80060ba:	e7ed      	b.n	8006098 <HAL_TIM_Encoder_Start_IT+0x48>

080060bc <HAL_TIM_Encoder_Stop_IT>:
{
 80060bc:	b510      	push	{r4, lr}
 80060be:	4604      	mov	r4, r0
  if(Channel == TIM_CHANNEL_1)
 80060c0:	b349      	cbz	r1, 8006116 <HAL_TIM_Encoder_Stop_IT+0x5a>
  else if(Channel == TIM_CHANNEL_2)
 80060c2:	2904      	cmp	r1, #4
 80060c4:	d032      	beq.n	800612c <HAL_TIM_Encoder_Stop_IT+0x70>
    TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 80060c6:	2200      	movs	r2, #0
 80060c8:	4611      	mov	r1, r2
 80060ca:	6800      	ldr	r0, [r0, #0]
 80060cc:	f7ff fa2d 	bl	800552a <TIM_CCxChannelCmd>
    TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 80060d0:	2200      	movs	r2, #0
 80060d2:	2104      	movs	r1, #4
 80060d4:	6820      	ldr	r0, [r4, #0]
 80060d6:	f7ff fa28 	bl	800552a <TIM_CCxChannelCmd>
    __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 80060da:	6822      	ldr	r2, [r4, #0]
 80060dc:	68d3      	ldr	r3, [r2, #12]
 80060de:	f023 0302 	bic.w	r3, r3, #2
 80060e2:	60d3      	str	r3, [r2, #12]
    __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 80060e4:	6822      	ldr	r2, [r4, #0]
 80060e6:	68d3      	ldr	r3, [r2, #12]
 80060e8:	f023 0304 	bic.w	r3, r3, #4
 80060ec:	60d3      	str	r3, [r2, #12]
  __HAL_TIM_DISABLE(htim);
 80060ee:	6823      	ldr	r3, [r4, #0]
 80060f0:	6a19      	ldr	r1, [r3, #32]
 80060f2:	f241 1211 	movw	r2, #4369	; 0x1111
 80060f6:	4211      	tst	r1, r2
 80060f8:	d108      	bne.n	800610c <HAL_TIM_Encoder_Stop_IT+0x50>
 80060fa:	6a19      	ldr	r1, [r3, #32]
 80060fc:	f240 4244 	movw	r2, #1092	; 0x444
 8006100:	4211      	tst	r1, r2
 8006102:	d103      	bne.n	800610c <HAL_TIM_Encoder_Stop_IT+0x50>
 8006104:	681a      	ldr	r2, [r3, #0]
 8006106:	f022 0201 	bic.w	r2, r2, #1
 800610a:	601a      	str	r2, [r3, #0]
  htim->State = HAL_TIM_STATE_READY;
 800610c:	2301      	movs	r3, #1
 800610e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 8006112:	2000      	movs	r0, #0
 8006114:	bd10      	pop	{r4, pc}
    TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 8006116:	2200      	movs	r2, #0
 8006118:	4611      	mov	r1, r2
 800611a:	6800      	ldr	r0, [r0, #0]
 800611c:	f7ff fa05 	bl	800552a <TIM_CCxChannelCmd>
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8006120:	6822      	ldr	r2, [r4, #0]
 8006122:	68d3      	ldr	r3, [r2, #12]
 8006124:	f023 0302 	bic.w	r3, r3, #2
 8006128:	60d3      	str	r3, [r2, #12]
 800612a:	e7e0      	b.n	80060ee <HAL_TIM_Encoder_Stop_IT+0x32>
    TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 800612c:	2200      	movs	r2, #0
 800612e:	2104      	movs	r1, #4
 8006130:	6800      	ldr	r0, [r0, #0]
 8006132:	f7ff f9fa 	bl	800552a <TIM_CCxChannelCmd>
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8006136:	6822      	ldr	r2, [r4, #0]
 8006138:	68d3      	ldr	r3, [r2, #12]
 800613a:	f023 0304 	bic.w	r3, r3, #4
 800613e:	60d3      	str	r3, [r2, #12]
 8006140:	e7d5      	b.n	80060ee <HAL_TIM_Encoder_Stop_IT+0x32>

08006142 <HAL_TIM_Encoder_Start_DMA>:
{
 8006142:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006146:	f8bd 5018 	ldrh.w	r5, [sp, #24]
  if((htim->State == HAL_TIM_STATE_BUSY))
 800614a:	f890 403d 	ldrb.w	r4, [r0, #61]	; 0x3d
 800614e:	b2e4      	uxtb	r4, r4
 8006150:	2c02      	cmp	r4, #2
 8006152:	f000 808d 	beq.w	8006270 <HAL_TIM_Encoder_Start_DMA+0x12e>
  else if((htim->State == HAL_TIM_STATE_READY))
 8006156:	f890 403d 	ldrb.w	r4, [r0, #61]	; 0x3d
 800615a:	b2e4      	uxtb	r4, r4
 800615c:	2c01      	cmp	r4, #1
 800615e:	d009      	beq.n	8006174 <HAL_TIM_Encoder_Start_DMA+0x32>
 8006160:	461e      	mov	r6, r3
 8006162:	4604      	mov	r4, r0
  switch (Channel)
 8006164:	2904      	cmp	r1, #4
 8006166:	d02e      	beq.n	80061c6 <HAL_TIM_Encoder_Start_DMA+0x84>
 8006168:	2918      	cmp	r1, #24
 800616a:	d04b      	beq.n	8006204 <HAL_TIM_Encoder_Start_DMA+0xc2>
 800616c:	b169      	cbz	r1, 800618a <HAL_TIM_Encoder_Start_DMA+0x48>
  return HAL_OK;
 800616e:	2000      	movs	r0, #0
}
 8006170:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if((((pData1 == 0U) || (pData2 == 0U) )) && (Length > 0U))
 8006174:	b122      	cbz	r2, 8006180 <HAL_TIM_Encoder_Start_DMA+0x3e>
 8006176:	b11b      	cbz	r3, 8006180 <HAL_TIM_Encoder_Start_DMA+0x3e>
      htim->State = HAL_TIM_STATE_BUSY;
 8006178:	2402      	movs	r4, #2
 800617a:	f880 403d 	strb.w	r4, [r0, #61]	; 0x3d
 800617e:	e7ef      	b.n	8006160 <HAL_TIM_Encoder_Start_DMA+0x1e>
    if((((pData1 == 0U) || (pData2 == 0U) )) && (Length > 0U))
 8006180:	2d00      	cmp	r5, #0
 8006182:	d0f9      	beq.n	8006178 <HAL_TIM_Encoder_Start_DMA+0x36>
      return HAL_ERROR;
 8006184:	2001      	movs	r0, #1
 8006186:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMACaptureCplt;
 800618a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800618c:	493a      	ldr	r1, [pc, #232]	; (8006278 <HAL_TIM_Encoder_Start_DMA+0x136>)
 800618e:	6299      	str	r1, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8006190:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8006192:	493a      	ldr	r1, [pc, #232]	; (800627c <HAL_TIM_Encoder_Start_DMA+0x13a>)
 8006194:	6319      	str	r1, [r3, #48]	; 0x30
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)&htim->Instance->CCR1, (uint32_t )pData1, Length);
 8006196:	6801      	ldr	r1, [r0, #0]
 8006198:	462b      	mov	r3, r5
 800619a:	3134      	adds	r1, #52	; 0x34
 800619c:	6a40      	ldr	r0, [r0, #36]	; 0x24
 800619e:	f7fc f861 	bl	8002264 <HAL_DMA_Start_IT>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 80061a2:	6822      	ldr	r2, [r4, #0]
 80061a4:	68d3      	ldr	r3, [r2, #12]
 80061a6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80061aa:	60d3      	str	r3, [r2, #12]
      __HAL_TIM_ENABLE(htim);
 80061ac:	6822      	ldr	r2, [r4, #0]
 80061ae:	6813      	ldr	r3, [r2, #0]
 80061b0:	f043 0301 	orr.w	r3, r3, #1
 80061b4:	6013      	str	r3, [r2, #0]
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80061b6:	2201      	movs	r2, #1
 80061b8:	2100      	movs	r1, #0
 80061ba:	6820      	ldr	r0, [r4, #0]
 80061bc:	f7ff f9b5 	bl	800552a <TIM_CCxChannelCmd>
  return HAL_OK;
 80061c0:	2000      	movs	r0, #0
    break;
 80061c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMACaptureCplt;
 80061c6:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80061c8:	4a2b      	ldr	r2, [pc, #172]	; (8006278 <HAL_TIM_Encoder_Start_DMA+0x136>)
 80061ca:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError;
 80061cc:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80061ce:	4a2b      	ldr	r2, [pc, #172]	; (800627c <HAL_TIM_Encoder_Start_DMA+0x13a>)
 80061d0:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)&htim->Instance->CCR2, (uint32_t)pData2, Length);
 80061d2:	6801      	ldr	r1, [r0, #0]
 80061d4:	462b      	mov	r3, r5
 80061d6:	4632      	mov	r2, r6
 80061d8:	3138      	adds	r1, #56	; 0x38
 80061da:	6a80      	ldr	r0, [r0, #40]	; 0x28
 80061dc:	f7fc f842 	bl	8002264 <HAL_DMA_Start_IT>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 80061e0:	6822      	ldr	r2, [r4, #0]
 80061e2:	68d3      	ldr	r3, [r2, #12]
 80061e4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80061e8:	60d3      	str	r3, [r2, #12]
      __HAL_TIM_ENABLE(htim);
 80061ea:	6822      	ldr	r2, [r4, #0]
 80061ec:	6813      	ldr	r3, [r2, #0]
 80061ee:	f043 0301 	orr.w	r3, r3, #1
 80061f2:	6013      	str	r3, [r2, #0]
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80061f4:	2201      	movs	r2, #1
 80061f6:	2104      	movs	r1, #4
 80061f8:	6820      	ldr	r0, [r4, #0]
 80061fa:	f7ff f996 	bl	800552a <TIM_CCxChannelCmd>
  return HAL_OK;
 80061fe:	2000      	movs	r0, #0
    break;
 8006200:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMACaptureCplt;
 8006204:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8006206:	f8df 8070 	ldr.w	r8, [pc, #112]	; 8006278 <HAL_TIM_Encoder_Start_DMA+0x136>
 800620a:	f8c3 8028 	str.w	r8, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 800620e:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8006210:	4f1a      	ldr	r7, [pc, #104]	; (800627c <HAL_TIM_Encoder_Start_DMA+0x13a>)
 8006212:	631f      	str	r7, [r3, #48]	; 0x30
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)&htim->Instance->CCR1, (uint32_t)pData1, Length);
 8006214:	6801      	ldr	r1, [r0, #0]
 8006216:	462b      	mov	r3, r5
 8006218:	3134      	adds	r1, #52	; 0x34
 800621a:	6a40      	ldr	r0, [r0, #36]	; 0x24
 800621c:	f7fc f822 	bl	8002264 <HAL_DMA_Start_IT>
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMACaptureCplt;
 8006220:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8006222:	f8c3 8028 	str.w	r8, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8006226:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8006228:	631f      	str	r7, [r3, #48]	; 0x30
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)&htim->Instance->CCR2, (uint32_t)pData2, Length);
 800622a:	6821      	ldr	r1, [r4, #0]
 800622c:	462b      	mov	r3, r5
 800622e:	4632      	mov	r2, r6
 8006230:	3138      	adds	r1, #56	; 0x38
 8006232:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8006234:	f7fc f816 	bl	8002264 <HAL_DMA_Start_IT>
      __HAL_TIM_ENABLE(htim);
 8006238:	6822      	ldr	r2, [r4, #0]
 800623a:	6813      	ldr	r3, [r2, #0]
 800623c:	f043 0301 	orr.w	r3, r3, #1
 8006240:	6013      	str	r3, [r2, #0]
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006242:	2201      	movs	r2, #1
 8006244:	2100      	movs	r1, #0
 8006246:	6820      	ldr	r0, [r4, #0]
 8006248:	f7ff f96f 	bl	800552a <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800624c:	2201      	movs	r2, #1
 800624e:	2104      	movs	r1, #4
 8006250:	6820      	ldr	r0, [r4, #0]
 8006252:	f7ff f96a 	bl	800552a <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8006256:	6822      	ldr	r2, [r4, #0]
 8006258:	68d3      	ldr	r3, [r2, #12]
 800625a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800625e:	60d3      	str	r3, [r2, #12]
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8006260:	6822      	ldr	r2, [r4, #0]
 8006262:	68d3      	ldr	r3, [r2, #12]
 8006264:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006268:	60d3      	str	r3, [r2, #12]
  return HAL_OK;
 800626a:	2000      	movs	r0, #0
    break;
 800626c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     return HAL_BUSY;
 8006270:	2002      	movs	r0, #2
 8006272:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006276:	bf00      	nop
 8006278:	08004d03 	.word	0x08004d03
 800627c:	08004f1f 	.word	0x08004f1f

08006280 <HAL_TIM_Encoder_Stop_DMA>:
{
 8006280:	b510      	push	{r4, lr}
 8006282:	4604      	mov	r4, r0
  if(Channel == TIM_CHANNEL_1)
 8006284:	b349      	cbz	r1, 80062da <HAL_TIM_Encoder_Stop_DMA+0x5a>
  else if(Channel == TIM_CHANNEL_2)
 8006286:	2904      	cmp	r1, #4
 8006288:	d032      	beq.n	80062f0 <HAL_TIM_Encoder_Stop_DMA+0x70>
    TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 800628a:	2200      	movs	r2, #0
 800628c:	4611      	mov	r1, r2
 800628e:	6800      	ldr	r0, [r0, #0]
 8006290:	f7ff f94b 	bl	800552a <TIM_CCxChannelCmd>
    TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 8006294:	2200      	movs	r2, #0
 8006296:	2104      	movs	r1, #4
 8006298:	6820      	ldr	r0, [r4, #0]
 800629a:	f7ff f946 	bl	800552a <TIM_CCxChannelCmd>
    __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 800629e:	6822      	ldr	r2, [r4, #0]
 80062a0:	68d3      	ldr	r3, [r2, #12]
 80062a2:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80062a6:	60d3      	str	r3, [r2, #12]
    __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 80062a8:	6822      	ldr	r2, [r4, #0]
 80062aa:	68d3      	ldr	r3, [r2, #12]
 80062ac:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80062b0:	60d3      	str	r3, [r2, #12]
  __HAL_TIM_DISABLE(htim);
 80062b2:	6823      	ldr	r3, [r4, #0]
 80062b4:	6a19      	ldr	r1, [r3, #32]
 80062b6:	f241 1211 	movw	r2, #4369	; 0x1111
 80062ba:	4211      	tst	r1, r2
 80062bc:	d108      	bne.n	80062d0 <HAL_TIM_Encoder_Stop_DMA+0x50>
 80062be:	6a19      	ldr	r1, [r3, #32]
 80062c0:	f240 4244 	movw	r2, #1092	; 0x444
 80062c4:	4211      	tst	r1, r2
 80062c6:	d103      	bne.n	80062d0 <HAL_TIM_Encoder_Stop_DMA+0x50>
 80062c8:	681a      	ldr	r2, [r3, #0]
 80062ca:	f022 0201 	bic.w	r2, r2, #1
 80062ce:	601a      	str	r2, [r3, #0]
  htim->State = HAL_TIM_STATE_READY;
 80062d0:	2301      	movs	r3, #1
 80062d2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 80062d6:	2000      	movs	r0, #0
 80062d8:	bd10      	pop	{r4, pc}
    TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 80062da:	2200      	movs	r2, #0
 80062dc:	4611      	mov	r1, r2
 80062de:	6800      	ldr	r0, [r0, #0]
 80062e0:	f7ff f923 	bl	800552a <TIM_CCxChannelCmd>
    __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 80062e4:	6822      	ldr	r2, [r4, #0]
 80062e6:	68d3      	ldr	r3, [r2, #12]
 80062e8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80062ec:	60d3      	str	r3, [r2, #12]
 80062ee:	e7e0      	b.n	80062b2 <HAL_TIM_Encoder_Stop_DMA+0x32>
    TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 80062f0:	2200      	movs	r2, #0
 80062f2:	2104      	movs	r1, #4
 80062f4:	6800      	ldr	r0, [r0, #0]
 80062f6:	f7ff f918 	bl	800552a <TIM_CCxChannelCmd>
    __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 80062fa:	6822      	ldr	r2, [r4, #0]
 80062fc:	68d3      	ldr	r3, [r2, #12]
 80062fe:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006302:	60d3      	str	r3, [r2, #12]
 8006304:	e7d5      	b.n	80062b2 <HAL_TIM_Encoder_Stop_DMA+0x32>
 8006306:	bf00      	nop

08006308 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState : specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef* TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8006308:	b410      	push	{r4}
  uint32_t tmp = 0U;

  tmp = TIM_CCER_CC1NE << Channel;
 800630a:	2304      	movs	r3, #4
 800630c:	fa03 f401 	lsl.w	r4, r3, r1

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8006310:	6a03      	ldr	r3, [r0, #32]
 8006312:	ea23 0304 	bic.w	r3, r3, r4
 8006316:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |=  (uint32_t)(ChannelNState << Channel);
 8006318:	6a03      	ldr	r3, [r0, #32]
 800631a:	408a      	lsls	r2, r1
 800631c:	4313      	orrs	r3, r2
 800631e:	6203      	str	r3, [r0, #32]
}
 8006320:	bc10      	pop	{r4}
 8006322:	4770      	bx	lr

08006324 <HAL_TIMEx_HallSensor_MspInit>:
{
 8006324:	4770      	bx	lr

08006326 <HAL_TIMEx_HallSensor_Init>:
  if(htim == NULL)
 8006326:	2800      	cmp	r0, #0
 8006328:	d05a      	beq.n	80063e0 <HAL_TIMEx_HallSensor_Init+0xba>
{
 800632a:	b570      	push	{r4, r5, r6, lr}
 800632c:	b088      	sub	sp, #32
 800632e:	4604      	mov	r4, r0
 8006330:	460e      	mov	r6, r1
  if(htim->State == HAL_TIM_STATE_RESET)
 8006332:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8006336:	2b00      	cmp	r3, #0
 8006338:	d04d      	beq.n	80063d6 <HAL_TIMEx_HallSensor_Init+0xb0>
  htim->State= HAL_TIM_STATE_BUSY;
 800633a:	2302      	movs	r3, #2
 800633c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006340:	1d21      	adds	r1, r4, #4
 8006342:	6820      	ldr	r0, [r4, #0]
 8006344:	f7fe fe05 	bl	8004f52 <TIM_Base_SetConfig>
  TIM_TI1_SetConfig(htim->Instance, sConfig->IC1Polarity, TIM_ICSELECTION_TRC, sConfig->IC1Filter);
 8006348:	68b3      	ldr	r3, [r6, #8]
 800634a:	2203      	movs	r2, #3
 800634c:	6831      	ldr	r1, [r6, #0]
 800634e:	6820      	ldr	r0, [r4, #0]
 8006350:	f7fe ffdd 	bl	800530e <TIM_TI1_SetConfig>
  htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8006354:	6822      	ldr	r2, [r4, #0]
 8006356:	6993      	ldr	r3, [r2, #24]
 8006358:	f023 030c 	bic.w	r3, r3, #12
 800635c:	6193      	str	r3, [r2, #24]
  htim->Instance->CCMR1 |= sConfig->IC1Prescaler;
 800635e:	6822      	ldr	r2, [r4, #0]
 8006360:	6993      	ldr	r3, [r2, #24]
 8006362:	6871      	ldr	r1, [r6, #4]
 8006364:	430b      	orrs	r3, r1
 8006366:	6193      	str	r3, [r2, #24]
  htim->Instance->CR2 |= TIM_CR2_TI1S;
 8006368:	6822      	ldr	r2, [r4, #0]
 800636a:	6853      	ldr	r3, [r2, #4]
 800636c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006370:	6053      	str	r3, [r2, #4]
  htim->Instance->SMCR &= ~TIM_SMCR_TS;
 8006372:	6822      	ldr	r2, [r4, #0]
 8006374:	6893      	ldr	r3, [r2, #8]
 8006376:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800637a:	6093      	str	r3, [r2, #8]
  htim->Instance->SMCR |= TIM_TS_TI1F_ED;
 800637c:	6822      	ldr	r2, [r4, #0]
 800637e:	6893      	ldr	r3, [r2, #8]
 8006380:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006384:	6093      	str	r3, [r2, #8]
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8006386:	6822      	ldr	r2, [r4, #0]
 8006388:	6893      	ldr	r3, [r2, #8]
 800638a:	f023 0307 	bic.w	r3, r3, #7
 800638e:	6093      	str	r3, [r2, #8]
  htim->Instance->SMCR |= TIM_SLAVEMODE_RESET;
 8006390:	6822      	ldr	r2, [r4, #0]
 8006392:	6893      	ldr	r3, [r2, #8]
 8006394:	f043 0304 	orr.w	r3, r3, #4
 8006398:	6093      	str	r3, [r2, #8]
  OC_Config.OCFastMode = TIM_OCFAST_DISABLE;
 800639a:	2500      	movs	r5, #0
 800639c:	9505      	str	r5, [sp, #20]
  OC_Config.OCIdleState = TIM_OCIDLESTATE_RESET;
 800639e:	9506      	str	r5, [sp, #24]
  OC_Config.OCMode = TIM_OCMODE_PWM2;
 80063a0:	2370      	movs	r3, #112	; 0x70
 80063a2:	9301      	str	r3, [sp, #4]
  OC_Config.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80063a4:	9507      	str	r5, [sp, #28]
  OC_Config.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80063a6:	9504      	str	r5, [sp, #16]
  OC_Config.OCPolarity = TIM_OCPOLARITY_HIGH;
 80063a8:	9503      	str	r5, [sp, #12]
  OC_Config.Pulse = sConfig->Commutation_Delay;
 80063aa:	68f3      	ldr	r3, [r6, #12]
 80063ac:	9302      	str	r3, [sp, #8]
  TIM_OC2_SetConfig(htim->Instance, &OC_Config);
 80063ae:	a901      	add	r1, sp, #4
 80063b0:	6820      	ldr	r0, [r4, #0]
 80063b2:	f7fe fedc 	bl	800516e <TIM_OC2_SetConfig>
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 80063b6:	6822      	ldr	r2, [r4, #0]
 80063b8:	6853      	ldr	r3, [r2, #4]
 80063ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063be:	6053      	str	r3, [r2, #4]
  htim->Instance->CR2 |= TIM_TRGO_OC2REF;
 80063c0:	6822      	ldr	r2, [r4, #0]
 80063c2:	6853      	ldr	r3, [r2, #4]
 80063c4:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 80063c8:	6053      	str	r3, [r2, #4]
  htim->State= HAL_TIM_STATE_READY;
 80063ca:	2301      	movs	r3, #1
 80063cc:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80063d0:	4628      	mov	r0, r5
}
 80063d2:	b008      	add	sp, #32
 80063d4:	bd70      	pop	{r4, r5, r6, pc}
    htim->Lock = HAL_UNLOCKED;
 80063d6:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIMEx_HallSensor_MspInit(htim);
 80063da:	f7ff ffa3 	bl	8006324 <HAL_TIMEx_HallSensor_MspInit>
 80063de:	e7ac      	b.n	800633a <HAL_TIMEx_HallSensor_Init+0x14>
    return HAL_ERROR;
 80063e0:	2001      	movs	r0, #1
 80063e2:	4770      	bx	lr

080063e4 <HAL_TIMEx_HallSensor_MspDeInit>:
{
 80063e4:	4770      	bx	lr

080063e6 <HAL_TIMEx_HallSensor_DeInit>:
{
 80063e6:	b510      	push	{r4, lr}
 80063e8:	4604      	mov	r4, r0
  htim->State = HAL_TIM_STATE_BUSY;
 80063ea:	2302      	movs	r3, #2
 80063ec:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_TIM_DISABLE(htim);
 80063f0:	6803      	ldr	r3, [r0, #0]
 80063f2:	6a19      	ldr	r1, [r3, #32]
 80063f4:	f241 1211 	movw	r2, #4369	; 0x1111
 80063f8:	4211      	tst	r1, r2
 80063fa:	d108      	bne.n	800640e <HAL_TIMEx_HallSensor_DeInit+0x28>
 80063fc:	6a19      	ldr	r1, [r3, #32]
 80063fe:	f240 4244 	movw	r2, #1092	; 0x444
 8006402:	4211      	tst	r1, r2
 8006404:	d103      	bne.n	800640e <HAL_TIMEx_HallSensor_DeInit+0x28>
 8006406:	681a      	ldr	r2, [r3, #0]
 8006408:	f022 0201 	bic.w	r2, r2, #1
 800640c:	601a      	str	r2, [r3, #0]
  HAL_TIMEx_HallSensor_MspDeInit(htim);
 800640e:	4620      	mov	r0, r4
 8006410:	f7ff ffe8 	bl	80063e4 <HAL_TIMEx_HallSensor_MspDeInit>
  htim->State = HAL_TIM_STATE_RESET;
 8006414:	2000      	movs	r0, #0
 8006416:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800641a:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 800641e:	bd10      	pop	{r4, pc}

08006420 <HAL_TIMEx_HallSensor_Start>:
{
 8006420:	b510      	push	{r4, lr}
 8006422:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006424:	2201      	movs	r2, #1
 8006426:	2100      	movs	r1, #0
 8006428:	6800      	ldr	r0, [r0, #0]
 800642a:	f7ff f87e 	bl	800552a <TIM_CCxChannelCmd>
  __HAL_TIM_ENABLE(htim);
 800642e:	6822      	ldr	r2, [r4, #0]
 8006430:	6813      	ldr	r3, [r2, #0]
 8006432:	f043 0301 	orr.w	r3, r3, #1
 8006436:	6013      	str	r3, [r2, #0]
}
 8006438:	2000      	movs	r0, #0
 800643a:	bd10      	pop	{r4, pc}

0800643c <HAL_TIMEx_HallSensor_Stop>:
{
 800643c:	b510      	push	{r4, lr}
 800643e:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 8006440:	2200      	movs	r2, #0
 8006442:	4611      	mov	r1, r2
 8006444:	6800      	ldr	r0, [r0, #0]
 8006446:	f7ff f870 	bl	800552a <TIM_CCxChannelCmd>
  __HAL_TIM_DISABLE(htim);
 800644a:	6823      	ldr	r3, [r4, #0]
 800644c:	6a19      	ldr	r1, [r3, #32]
 800644e:	f241 1211 	movw	r2, #4369	; 0x1111
 8006452:	4211      	tst	r1, r2
 8006454:	d108      	bne.n	8006468 <HAL_TIMEx_HallSensor_Stop+0x2c>
 8006456:	6a19      	ldr	r1, [r3, #32]
 8006458:	f240 4244 	movw	r2, #1092	; 0x444
 800645c:	4211      	tst	r1, r2
 800645e:	d103      	bne.n	8006468 <HAL_TIMEx_HallSensor_Stop+0x2c>
 8006460:	681a      	ldr	r2, [r3, #0]
 8006462:	f022 0201 	bic.w	r2, r2, #1
 8006466:	601a      	str	r2, [r3, #0]
}
 8006468:	2000      	movs	r0, #0
 800646a:	bd10      	pop	{r4, pc}

0800646c <HAL_TIMEx_HallSensor_Start_IT>:
{
 800646c:	b510      	push	{r4, lr}
 800646e:	4604      	mov	r4, r0
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8006470:	6802      	ldr	r2, [r0, #0]
 8006472:	68d3      	ldr	r3, [r2, #12]
 8006474:	f043 0302 	orr.w	r3, r3, #2
 8006478:	60d3      	str	r3, [r2, #12]
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800647a:	2201      	movs	r2, #1
 800647c:	2100      	movs	r1, #0
 800647e:	6800      	ldr	r0, [r0, #0]
 8006480:	f7ff f853 	bl	800552a <TIM_CCxChannelCmd>
  __HAL_TIM_ENABLE(htim);
 8006484:	6822      	ldr	r2, [r4, #0]
 8006486:	6813      	ldr	r3, [r2, #0]
 8006488:	f043 0301 	orr.w	r3, r3, #1
 800648c:	6013      	str	r3, [r2, #0]
}
 800648e:	2000      	movs	r0, #0
 8006490:	bd10      	pop	{r4, pc}

08006492 <HAL_TIMEx_HallSensor_Stop_IT>:
{
 8006492:	b510      	push	{r4, lr}
 8006494:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 8006496:	2200      	movs	r2, #0
 8006498:	4611      	mov	r1, r2
 800649a:	6800      	ldr	r0, [r0, #0]
 800649c:	f7ff f845 	bl	800552a <TIM_CCxChannelCmd>
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 80064a0:	6822      	ldr	r2, [r4, #0]
 80064a2:	68d3      	ldr	r3, [r2, #12]
 80064a4:	f023 0302 	bic.w	r3, r3, #2
 80064a8:	60d3      	str	r3, [r2, #12]
  __HAL_TIM_DISABLE(htim);
 80064aa:	6823      	ldr	r3, [r4, #0]
 80064ac:	6a19      	ldr	r1, [r3, #32]
 80064ae:	f241 1211 	movw	r2, #4369	; 0x1111
 80064b2:	4211      	tst	r1, r2
 80064b4:	d108      	bne.n	80064c8 <HAL_TIMEx_HallSensor_Stop_IT+0x36>
 80064b6:	6a19      	ldr	r1, [r3, #32]
 80064b8:	f240 4244 	movw	r2, #1092	; 0x444
 80064bc:	4211      	tst	r1, r2
 80064be:	d103      	bne.n	80064c8 <HAL_TIMEx_HallSensor_Stop_IT+0x36>
 80064c0:	681a      	ldr	r2, [r3, #0]
 80064c2:	f022 0201 	bic.w	r2, r2, #1
 80064c6:	601a      	str	r2, [r3, #0]
}
 80064c8:	2000      	movs	r0, #0
 80064ca:	bd10      	pop	{r4, pc}

080064cc <HAL_TIMEx_HallSensor_Start_DMA>:
{
 80064cc:	b570      	push	{r4, r5, r6, lr}
   if((htim->State == HAL_TIM_STATE_BUSY))
 80064ce:	f890 503d 	ldrb.w	r5, [r0, #61]	; 0x3d
 80064d2:	b2ed      	uxtb	r5, r5
 80064d4:	2d02      	cmp	r5, #2
 80064d6:	d02b      	beq.n	8006530 <HAL_TIMEx_HallSensor_Start_DMA+0x64>
  else if((htim->State == HAL_TIM_STATE_READY))
 80064d8:	f890 403d 	ldrb.w	r4, [r0, #61]	; 0x3d
 80064dc:	b2e4      	uxtb	r4, r4
 80064de:	2c01      	cmp	r4, #1
 80064e0:	d020      	beq.n	8006524 <HAL_TIMEx_HallSensor_Start_DMA+0x58>
 80064e2:	4616      	mov	r6, r2
 80064e4:	460d      	mov	r5, r1
 80064e6:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80064e8:	2201      	movs	r2, #1
 80064ea:	2100      	movs	r1, #0
 80064ec:	6800      	ldr	r0, [r0, #0]
 80064ee:	f7ff f81c 	bl	800552a <TIM_CCxChannelCmd>
  htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMACaptureCplt;
 80064f2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80064f4:	4a10      	ldr	r2, [pc, #64]	; (8006538 <HAL_TIMEx_HallSensor_Start_DMA+0x6c>)
 80064f6:	629a      	str	r2, [r3, #40]	; 0x28
  htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 80064f8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80064fa:	4a10      	ldr	r2, [pc, #64]	; (800653c <HAL_TIMEx_HallSensor_Start_DMA+0x70>)
 80064fc:	631a      	str	r2, [r3, #48]	; 0x30
  HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)&htim->Instance->CCR1, (uint32_t)pData, Length);
 80064fe:	6821      	ldr	r1, [r4, #0]
 8006500:	4633      	mov	r3, r6
 8006502:	462a      	mov	r2, r5
 8006504:	3134      	adds	r1, #52	; 0x34
 8006506:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8006508:	f7fb feac 	bl	8002264 <HAL_DMA_Start_IT>
  __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 800650c:	6822      	ldr	r2, [r4, #0]
 800650e:	68d3      	ldr	r3, [r2, #12]
 8006510:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006514:	60d3      	str	r3, [r2, #12]
  __HAL_TIM_ENABLE(htim);
 8006516:	6822      	ldr	r2, [r4, #0]
 8006518:	6813      	ldr	r3, [r2, #0]
 800651a:	f043 0301 	orr.w	r3, r3, #1
 800651e:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 8006520:	2000      	movs	r0, #0
 8006522:	bd70      	pop	{r4, r5, r6, pc}
    if(((uint32_t)pData == 0U) && (Length > 0U))
 8006524:	b901      	cbnz	r1, 8006528 <HAL_TIMEx_HallSensor_Start_DMA+0x5c>
 8006526:	b92a      	cbnz	r2, 8006534 <HAL_TIMEx_HallSensor_Start_DMA+0x68>
      htim->State = HAL_TIM_STATE_BUSY;
 8006528:	2302      	movs	r3, #2
 800652a:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
 800652e:	e7d8      	b.n	80064e2 <HAL_TIMEx_HallSensor_Start_DMA+0x16>
     return HAL_BUSY;
 8006530:	2002      	movs	r0, #2
 8006532:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8006534:	2001      	movs	r0, #1
}
 8006536:	bd70      	pop	{r4, r5, r6, pc}
 8006538:	08004d03 	.word	0x08004d03
 800653c:	08004f1f 	.word	0x08004f1f

08006540 <HAL_TIMEx_HallSensor_Stop_DMA>:
{
 8006540:	b510      	push	{r4, lr}
 8006542:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 8006544:	2200      	movs	r2, #0
 8006546:	4611      	mov	r1, r2
 8006548:	6800      	ldr	r0, [r0, #0]
 800654a:	f7fe ffee 	bl	800552a <TIM_CCxChannelCmd>
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 800654e:	6822      	ldr	r2, [r4, #0]
 8006550:	68d3      	ldr	r3, [r2, #12]
 8006552:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006556:	60d3      	str	r3, [r2, #12]
  __HAL_TIM_DISABLE(htim);
 8006558:	6823      	ldr	r3, [r4, #0]
 800655a:	6a19      	ldr	r1, [r3, #32]
 800655c:	f241 1211 	movw	r2, #4369	; 0x1111
 8006560:	4211      	tst	r1, r2
 8006562:	d108      	bne.n	8006576 <HAL_TIMEx_HallSensor_Stop_DMA+0x36>
 8006564:	6a19      	ldr	r1, [r3, #32]
 8006566:	f240 4244 	movw	r2, #1092	; 0x444
 800656a:	4211      	tst	r1, r2
 800656c:	d103      	bne.n	8006576 <HAL_TIMEx_HallSensor_Stop_DMA+0x36>
 800656e:	681a      	ldr	r2, [r3, #0]
 8006570:	f022 0201 	bic.w	r2, r2, #1
 8006574:	601a      	str	r2, [r3, #0]
}
 8006576:	2000      	movs	r0, #0
 8006578:	bd10      	pop	{r4, pc}

0800657a <HAL_TIMEx_OCN_Start>:
{
 800657a:	b510      	push	{r4, lr}
 800657c:	4604      	mov	r4, r0
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 800657e:	2204      	movs	r2, #4
 8006580:	6800      	ldr	r0, [r0, #0]
 8006582:	f7ff fec1 	bl	8006308 <TIM_CCxNChannelCmd>
  __HAL_TIM_MOE_ENABLE(htim);
 8006586:	6822      	ldr	r2, [r4, #0]
 8006588:	6c53      	ldr	r3, [r2, #68]	; 0x44
 800658a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800658e:	6453      	str	r3, [r2, #68]	; 0x44
  __HAL_TIM_ENABLE(htim);
 8006590:	6822      	ldr	r2, [r4, #0]
 8006592:	6813      	ldr	r3, [r2, #0]
 8006594:	f043 0301 	orr.w	r3, r3, #1
 8006598:	6013      	str	r3, [r2, #0]
}
 800659a:	2000      	movs	r0, #0
 800659c:	bd10      	pop	{r4, pc}

0800659e <HAL_TIMEx_OCN_Stop>:
{
 800659e:	b510      	push	{r4, lr}
 80065a0:	4604      	mov	r4, r0
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 80065a2:	2200      	movs	r2, #0
 80065a4:	6800      	ldr	r0, [r0, #0]
 80065a6:	f7ff feaf 	bl	8006308 <TIM_CCxNChannelCmd>
  __HAL_TIM_MOE_DISABLE(htim);
 80065aa:	6823      	ldr	r3, [r4, #0]
 80065ac:	6a19      	ldr	r1, [r3, #32]
 80065ae:	f241 1211 	movw	r2, #4369	; 0x1111
 80065b2:	4211      	tst	r1, r2
 80065b4:	d108      	bne.n	80065c8 <HAL_TIMEx_OCN_Stop+0x2a>
 80065b6:	6a19      	ldr	r1, [r3, #32]
 80065b8:	f240 4244 	movw	r2, #1092	; 0x444
 80065bc:	4211      	tst	r1, r2
 80065be:	d103      	bne.n	80065c8 <HAL_TIMEx_OCN_Stop+0x2a>
 80065c0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80065c2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80065c6:	645a      	str	r2, [r3, #68]	; 0x44
  __HAL_TIM_DISABLE(htim);
 80065c8:	6823      	ldr	r3, [r4, #0]
 80065ca:	6a19      	ldr	r1, [r3, #32]
 80065cc:	f241 1211 	movw	r2, #4369	; 0x1111
 80065d0:	4211      	tst	r1, r2
 80065d2:	d108      	bne.n	80065e6 <HAL_TIMEx_OCN_Stop+0x48>
 80065d4:	6a19      	ldr	r1, [r3, #32]
 80065d6:	f240 4244 	movw	r2, #1092	; 0x444
 80065da:	4211      	tst	r1, r2
 80065dc:	d103      	bne.n	80065e6 <HAL_TIMEx_OCN_Stop+0x48>
 80065de:	681a      	ldr	r2, [r3, #0]
 80065e0:	f022 0201 	bic.w	r2, r2, #1
 80065e4:	601a      	str	r2, [r3, #0]
}
 80065e6:	2000      	movs	r0, #0
 80065e8:	bd10      	pop	{r4, pc}

080065ea <HAL_TIMEx_OCN_Start_IT>:
{
 80065ea:	b510      	push	{r4, lr}
 80065ec:	4604      	mov	r4, r0
  switch (Channel)
 80065ee:	2904      	cmp	r1, #4
 80065f0:	d01d      	beq.n	800662e <HAL_TIMEx_OCN_Start_IT+0x44>
 80065f2:	2908      	cmp	r1, #8
 80065f4:	d021      	beq.n	800663a <HAL_TIMEx_OCN_Start_IT+0x50>
 80065f6:	b1a1      	cbz	r1, 8006622 <HAL_TIMEx_OCN_Start_IT+0x38>
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_BREAK);
 80065f8:	6822      	ldr	r2, [r4, #0]
 80065fa:	68d3      	ldr	r3, [r2, #12]
 80065fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006600:	60d3      	str	r3, [r2, #12]
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8006602:	2204      	movs	r2, #4
 8006604:	6820      	ldr	r0, [r4, #0]
 8006606:	f7ff fe7f 	bl	8006308 <TIM_CCxNChannelCmd>
  __HAL_TIM_MOE_ENABLE(htim);
 800660a:	6822      	ldr	r2, [r4, #0]
 800660c:	6c53      	ldr	r3, [r2, #68]	; 0x44
 800660e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006612:	6453      	str	r3, [r2, #68]	; 0x44
  __HAL_TIM_ENABLE(htim);
 8006614:	6822      	ldr	r2, [r4, #0]
 8006616:	6813      	ldr	r3, [r2, #0]
 8006618:	f043 0301 	orr.w	r3, r3, #1
 800661c:	6013      	str	r3, [r2, #0]
}
 800661e:	2000      	movs	r0, #0
 8006620:	bd10      	pop	{r4, pc}
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8006622:	6802      	ldr	r2, [r0, #0]
 8006624:	68d3      	ldr	r3, [r2, #12]
 8006626:	f043 0302 	orr.w	r3, r3, #2
 800662a:	60d3      	str	r3, [r2, #12]
    break;
 800662c:	e7e4      	b.n	80065f8 <HAL_TIMEx_OCN_Start_IT+0xe>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800662e:	6802      	ldr	r2, [r0, #0]
 8006630:	68d3      	ldr	r3, [r2, #12]
 8006632:	f043 0304 	orr.w	r3, r3, #4
 8006636:	60d3      	str	r3, [r2, #12]
    break;
 8006638:	e7de      	b.n	80065f8 <HAL_TIMEx_OCN_Start_IT+0xe>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800663a:	6802      	ldr	r2, [r0, #0]
 800663c:	68d3      	ldr	r3, [r2, #12]
 800663e:	f043 0308 	orr.w	r3, r3, #8
 8006642:	60d3      	str	r3, [r2, #12]
    break;
 8006644:	e7d8      	b.n	80065f8 <HAL_TIMEx_OCN_Start_IT+0xe>

08006646 <HAL_TIMEx_OCN_Stop_IT>:
{
 8006646:	b510      	push	{r4, lr}
 8006648:	4604      	mov	r4, r0
  switch (Channel)
 800664a:	2904      	cmp	r1, #4
 800664c:	d037      	beq.n	80066be <HAL_TIMEx_OCN_Stop_IT+0x78>
 800664e:	2908      	cmp	r1, #8
 8006650:	d03b      	beq.n	80066ca <HAL_TIMEx_OCN_Stop_IT+0x84>
 8006652:	2900      	cmp	r1, #0
 8006654:	d02d      	beq.n	80066b2 <HAL_TIMEx_OCN_Stop_IT+0x6c>
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 8006656:	2200      	movs	r2, #0
 8006658:	6820      	ldr	r0, [r4, #0]
 800665a:	f7ff fe55 	bl	8006308 <TIM_CCxNChannelCmd>
  tmpccer = htim->Instance->CCER;
 800665e:	6823      	ldr	r3, [r4, #0]
 8006660:	6a19      	ldr	r1, [r3, #32]
  if ((tmpccer & (TIM_CCER_CC1NE | TIM_CCER_CC2NE | TIM_CCER_CC3NE)) == RESET)
 8006662:	f240 4244 	movw	r2, #1092	; 0x444
 8006666:	4211      	tst	r1, r2
 8006668:	d103      	bne.n	8006672 <HAL_TIMEx_OCN_Stop_IT+0x2c>
    __HAL_TIM_DISABLE_IT(htim, TIM_IT_BREAK);
 800666a:	68da      	ldr	r2, [r3, #12]
 800666c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006670:	60da      	str	r2, [r3, #12]
  __HAL_TIM_MOE_DISABLE(htim);
 8006672:	6823      	ldr	r3, [r4, #0]
 8006674:	6a19      	ldr	r1, [r3, #32]
 8006676:	f241 1211 	movw	r2, #4369	; 0x1111
 800667a:	4211      	tst	r1, r2
 800667c:	d108      	bne.n	8006690 <HAL_TIMEx_OCN_Stop_IT+0x4a>
 800667e:	6a19      	ldr	r1, [r3, #32]
 8006680:	f240 4244 	movw	r2, #1092	; 0x444
 8006684:	4211      	tst	r1, r2
 8006686:	d103      	bne.n	8006690 <HAL_TIMEx_OCN_Stop_IT+0x4a>
 8006688:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800668a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800668e:	645a      	str	r2, [r3, #68]	; 0x44
  __HAL_TIM_DISABLE(htim);
 8006690:	6823      	ldr	r3, [r4, #0]
 8006692:	6a19      	ldr	r1, [r3, #32]
 8006694:	f241 1211 	movw	r2, #4369	; 0x1111
 8006698:	4211      	tst	r1, r2
 800669a:	d108      	bne.n	80066ae <HAL_TIMEx_OCN_Stop_IT+0x68>
 800669c:	6a19      	ldr	r1, [r3, #32]
 800669e:	f240 4244 	movw	r2, #1092	; 0x444
 80066a2:	4211      	tst	r1, r2
 80066a4:	d103      	bne.n	80066ae <HAL_TIMEx_OCN_Stop_IT+0x68>
 80066a6:	681a      	ldr	r2, [r3, #0]
 80066a8:	f022 0201 	bic.w	r2, r2, #1
 80066ac:	601a      	str	r2, [r3, #0]
}
 80066ae:	2000      	movs	r0, #0
 80066b0:	bd10      	pop	{r4, pc}
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 80066b2:	6802      	ldr	r2, [r0, #0]
 80066b4:	68d3      	ldr	r3, [r2, #12]
 80066b6:	f023 0302 	bic.w	r3, r3, #2
 80066ba:	60d3      	str	r3, [r2, #12]
    break;
 80066bc:	e7cb      	b.n	8006656 <HAL_TIMEx_OCN_Stop_IT+0x10>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 80066be:	6802      	ldr	r2, [r0, #0]
 80066c0:	68d3      	ldr	r3, [r2, #12]
 80066c2:	f023 0304 	bic.w	r3, r3, #4
 80066c6:	60d3      	str	r3, [r2, #12]
    break;
 80066c8:	e7c5      	b.n	8006656 <HAL_TIMEx_OCN_Stop_IT+0x10>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 80066ca:	6802      	ldr	r2, [r0, #0]
 80066cc:	68d3      	ldr	r3, [r2, #12]
 80066ce:	f023 0308 	bic.w	r3, r3, #8
 80066d2:	60d3      	str	r3, [r2, #12]
    break;
 80066d4:	e7bf      	b.n	8006656 <HAL_TIMEx_OCN_Stop_IT+0x10>

080066d6 <HAL_TIMEx_OCN_Start_DMA>:
{
 80066d6:	b570      	push	{r4, r5, r6, lr}
  if((htim->State == HAL_TIM_STATE_BUSY))
 80066d8:	f890 503d 	ldrb.w	r5, [r0, #61]	; 0x3d
 80066dc:	b2ed      	uxtb	r5, r5
 80066de:	2d02      	cmp	r5, #2
 80066e0:	d05a      	beq.n	8006798 <HAL_TIMEx_OCN_Start_DMA+0xc2>
  else if((htim->State == HAL_TIM_STATE_READY))
 80066e2:	f890 403d 	ldrb.w	r4, [r0, #61]	; 0x3d
 80066e6:	b2e4      	uxtb	r4, r4
 80066e8:	2c01      	cmp	r4, #1
 80066ea:	d018      	beq.n	800671e <HAL_TIMEx_OCN_Start_DMA+0x48>
 80066ec:	4616      	mov	r6, r2
 80066ee:	460d      	mov	r5, r1
 80066f0:	4604      	mov	r4, r0
  switch (Channel)
 80066f2:	2904      	cmp	r1, #4
 80066f4:	d02c      	beq.n	8006750 <HAL_TIMEx_OCN_Start_DMA+0x7a>
 80066f6:	2908      	cmp	r1, #8
 80066f8:	d03c      	beq.n	8006774 <HAL_TIMEx_OCN_Start_DMA+0x9e>
 80066fa:	b1b9      	cbz	r1, 800672c <HAL_TIMEx_OCN_Start_DMA+0x56>
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 80066fc:	2204      	movs	r2, #4
 80066fe:	4629      	mov	r1, r5
 8006700:	6820      	ldr	r0, [r4, #0]
 8006702:	f7ff fe01 	bl	8006308 <TIM_CCxNChannelCmd>
  __HAL_TIM_MOE_ENABLE(htim);
 8006706:	6822      	ldr	r2, [r4, #0]
 8006708:	6c53      	ldr	r3, [r2, #68]	; 0x44
 800670a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800670e:	6453      	str	r3, [r2, #68]	; 0x44
  __HAL_TIM_ENABLE(htim);
 8006710:	6822      	ldr	r2, [r4, #0]
 8006712:	6813      	ldr	r3, [r2, #0]
 8006714:	f043 0301 	orr.w	r3, r3, #1
 8006718:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 800671a:	2000      	movs	r0, #0
 800671c:	bd70      	pop	{r4, r5, r6, pc}
    if(((uint32_t)pData == 0U) && (Length > 0U))
 800671e:	b90a      	cbnz	r2, 8006724 <HAL_TIMEx_OCN_Start_DMA+0x4e>
 8006720:	2b00      	cmp	r3, #0
 8006722:	d13b      	bne.n	800679c <HAL_TIMEx_OCN_Start_DMA+0xc6>
      htim->State = HAL_TIM_STATE_BUSY;
 8006724:	2402      	movs	r4, #2
 8006726:	f880 403d 	strb.w	r4, [r0, #61]	; 0x3d
 800672a:	e7df      	b.n	80066ec <HAL_TIMEx_OCN_Start_DMA+0x16>
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800672c:	6a42      	ldr	r2, [r0, #36]	; 0x24
 800672e:	491c      	ldr	r1, [pc, #112]	; (80067a0 <HAL_TIMEx_OCN_Start_DMA+0xca>)
 8006730:	6291      	str	r1, [r2, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8006732:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8006734:	491b      	ldr	r1, [pc, #108]	; (80067a4 <HAL_TIMEx_OCN_Start_DMA+0xce>)
 8006736:	6311      	str	r1, [r2, #48]	; 0x30
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1, Length);
 8006738:	6802      	ldr	r2, [r0, #0]
 800673a:	3234      	adds	r2, #52	; 0x34
 800673c:	4631      	mov	r1, r6
 800673e:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8006740:	f7fb fd90 	bl	8002264 <HAL_DMA_Start_IT>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8006744:	6822      	ldr	r2, [r4, #0]
 8006746:	68d3      	ldr	r3, [r2, #12]
 8006748:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800674c:	60d3      	str	r3, [r2, #12]
    break;
 800674e:	e7d5      	b.n	80066fc <HAL_TIMEx_OCN_Start_DMA+0x26>
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8006750:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8006752:	4913      	ldr	r1, [pc, #76]	; (80067a0 <HAL_TIMEx_OCN_Start_DMA+0xca>)
 8006754:	6291      	str	r1, [r2, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8006756:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8006758:	4912      	ldr	r1, [pc, #72]	; (80067a4 <HAL_TIMEx_OCN_Start_DMA+0xce>)
 800675a:	6311      	str	r1, [r2, #48]	; 0x30
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2, Length);
 800675c:	6802      	ldr	r2, [r0, #0]
 800675e:	3238      	adds	r2, #56	; 0x38
 8006760:	4631      	mov	r1, r6
 8006762:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8006764:	f7fb fd7e 	bl	8002264 <HAL_DMA_Start_IT>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8006768:	6822      	ldr	r2, [r4, #0]
 800676a:	68d3      	ldr	r3, [r2, #12]
 800676c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006770:	60d3      	str	r3, [r2, #12]
    break;
 8006772:	e7c3      	b.n	80066fc <HAL_TIMEx_OCN_Start_DMA+0x26>
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8006774:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8006776:	490a      	ldr	r1, [pc, #40]	; (80067a0 <HAL_TIMEx_OCN_Start_DMA+0xca>)
 8006778:	6291      	str	r1, [r2, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 800677a:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 800677c:	4909      	ldr	r1, [pc, #36]	; (80067a4 <HAL_TIMEx_OCN_Start_DMA+0xce>)
 800677e:	6311      	str	r1, [r2, #48]	; 0x30
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,Length);
 8006780:	6802      	ldr	r2, [r0, #0]
 8006782:	323c      	adds	r2, #60	; 0x3c
 8006784:	4631      	mov	r1, r6
 8006786:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 8006788:	f7fb fd6c 	bl	8002264 <HAL_DMA_Start_IT>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 800678c:	6822      	ldr	r2, [r4, #0]
 800678e:	68d3      	ldr	r3, [r2, #12]
 8006790:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8006794:	60d3      	str	r3, [r2, #12]
    break;
 8006796:	e7b1      	b.n	80066fc <HAL_TIMEx_OCN_Start_DMA+0x26>
     return HAL_BUSY;
 8006798:	2002      	movs	r0, #2
 800679a:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 800679c:	2001      	movs	r0, #1
}
 800679e:	bd70      	pop	{r4, r5, r6, pc}
 80067a0:	08004d4b 	.word	0x08004d4b
 80067a4:	08004f1f 	.word	0x08004f1f

080067a8 <HAL_TIMEx_OCN_Stop_DMA>:
{
 80067a8:	b510      	push	{r4, lr}
 80067aa:	4604      	mov	r4, r0
  switch (Channel)
 80067ac:	2904      	cmp	r1, #4
 80067ae:	d02f      	beq.n	8006810 <HAL_TIMEx_OCN_Stop_DMA+0x68>
 80067b0:	2908      	cmp	r1, #8
 80067b2:	d033      	beq.n	800681c <HAL_TIMEx_OCN_Stop_DMA+0x74>
 80067b4:	b331      	cbz	r1, 8006804 <HAL_TIMEx_OCN_Stop_DMA+0x5c>
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 80067b6:	2200      	movs	r2, #0
 80067b8:	6820      	ldr	r0, [r4, #0]
 80067ba:	f7ff fda5 	bl	8006308 <TIM_CCxNChannelCmd>
  __HAL_TIM_MOE_DISABLE(htim);
 80067be:	6823      	ldr	r3, [r4, #0]
 80067c0:	6a19      	ldr	r1, [r3, #32]
 80067c2:	f241 1211 	movw	r2, #4369	; 0x1111
 80067c6:	4211      	tst	r1, r2
 80067c8:	d108      	bne.n	80067dc <HAL_TIMEx_OCN_Stop_DMA+0x34>
 80067ca:	6a19      	ldr	r1, [r3, #32]
 80067cc:	f240 4244 	movw	r2, #1092	; 0x444
 80067d0:	4211      	tst	r1, r2
 80067d2:	d103      	bne.n	80067dc <HAL_TIMEx_OCN_Stop_DMA+0x34>
 80067d4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80067d6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80067da:	645a      	str	r2, [r3, #68]	; 0x44
  __HAL_TIM_DISABLE(htim);
 80067dc:	6823      	ldr	r3, [r4, #0]
 80067de:	6a19      	ldr	r1, [r3, #32]
 80067e0:	f241 1211 	movw	r2, #4369	; 0x1111
 80067e4:	4211      	tst	r1, r2
 80067e6:	d108      	bne.n	80067fa <HAL_TIMEx_OCN_Stop_DMA+0x52>
 80067e8:	6a19      	ldr	r1, [r3, #32]
 80067ea:	f240 4244 	movw	r2, #1092	; 0x444
 80067ee:	4211      	tst	r1, r2
 80067f0:	d103      	bne.n	80067fa <HAL_TIMEx_OCN_Stop_DMA+0x52>
 80067f2:	681a      	ldr	r2, [r3, #0]
 80067f4:	f022 0201 	bic.w	r2, r2, #1
 80067f8:	601a      	str	r2, [r3, #0]
  htim->State = HAL_TIM_STATE_READY;
 80067fa:	2301      	movs	r3, #1
 80067fc:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 8006800:	2000      	movs	r0, #0
 8006802:	bd10      	pop	{r4, pc}
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8006804:	6802      	ldr	r2, [r0, #0]
 8006806:	68d3      	ldr	r3, [r2, #12]
 8006808:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800680c:	60d3      	str	r3, [r2, #12]
    break;
 800680e:	e7d2      	b.n	80067b6 <HAL_TIMEx_OCN_Stop_DMA+0xe>
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8006810:	6802      	ldr	r2, [r0, #0]
 8006812:	68d3      	ldr	r3, [r2, #12]
 8006814:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006818:	60d3      	str	r3, [r2, #12]
    break;
 800681a:	e7cc      	b.n	80067b6 <HAL_TIMEx_OCN_Stop_DMA+0xe>
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 800681c:	6802      	ldr	r2, [r0, #0]
 800681e:	68d3      	ldr	r3, [r2, #12]
 8006820:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006824:	60d3      	str	r3, [r2, #12]
    break;
 8006826:	e7c6      	b.n	80067b6 <HAL_TIMEx_OCN_Stop_DMA+0xe>

08006828 <HAL_TIMEx_PWMN_Start>:
{
 8006828:	b510      	push	{r4, lr}
 800682a:	4604      	mov	r4, r0
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 800682c:	2204      	movs	r2, #4
 800682e:	6800      	ldr	r0, [r0, #0]
 8006830:	f7ff fd6a 	bl	8006308 <TIM_CCxNChannelCmd>
  __HAL_TIM_MOE_ENABLE(htim);
 8006834:	6822      	ldr	r2, [r4, #0]
 8006836:	6c53      	ldr	r3, [r2, #68]	; 0x44
 8006838:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800683c:	6453      	str	r3, [r2, #68]	; 0x44
  __HAL_TIM_ENABLE(htim);
 800683e:	6822      	ldr	r2, [r4, #0]
 8006840:	6813      	ldr	r3, [r2, #0]
 8006842:	f043 0301 	orr.w	r3, r3, #1
 8006846:	6013      	str	r3, [r2, #0]
}
 8006848:	2000      	movs	r0, #0
 800684a:	bd10      	pop	{r4, pc}

0800684c <HAL_TIMEx_PWMN_Stop>:
{
 800684c:	b510      	push	{r4, lr}
 800684e:	4604      	mov	r4, r0
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 8006850:	2200      	movs	r2, #0
 8006852:	6800      	ldr	r0, [r0, #0]
 8006854:	f7ff fd58 	bl	8006308 <TIM_CCxNChannelCmd>
  __HAL_TIM_MOE_DISABLE(htim);
 8006858:	6823      	ldr	r3, [r4, #0]
 800685a:	6a19      	ldr	r1, [r3, #32]
 800685c:	f241 1211 	movw	r2, #4369	; 0x1111
 8006860:	4211      	tst	r1, r2
 8006862:	d108      	bne.n	8006876 <HAL_TIMEx_PWMN_Stop+0x2a>
 8006864:	6a19      	ldr	r1, [r3, #32]
 8006866:	f240 4244 	movw	r2, #1092	; 0x444
 800686a:	4211      	tst	r1, r2
 800686c:	d103      	bne.n	8006876 <HAL_TIMEx_PWMN_Stop+0x2a>
 800686e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006870:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006874:	645a      	str	r2, [r3, #68]	; 0x44
  __HAL_TIM_DISABLE(htim);
 8006876:	6823      	ldr	r3, [r4, #0]
 8006878:	6a19      	ldr	r1, [r3, #32]
 800687a:	f241 1211 	movw	r2, #4369	; 0x1111
 800687e:	4211      	tst	r1, r2
 8006880:	d108      	bne.n	8006894 <HAL_TIMEx_PWMN_Stop+0x48>
 8006882:	6a19      	ldr	r1, [r3, #32]
 8006884:	f240 4244 	movw	r2, #1092	; 0x444
 8006888:	4211      	tst	r1, r2
 800688a:	d103      	bne.n	8006894 <HAL_TIMEx_PWMN_Stop+0x48>
 800688c:	681a      	ldr	r2, [r3, #0]
 800688e:	f022 0201 	bic.w	r2, r2, #1
 8006892:	601a      	str	r2, [r3, #0]
}
 8006894:	2000      	movs	r0, #0
 8006896:	bd10      	pop	{r4, pc}

08006898 <HAL_TIMEx_PWMN_Start_IT>:
{
 8006898:	b510      	push	{r4, lr}
 800689a:	4604      	mov	r4, r0
  switch (Channel)
 800689c:	2904      	cmp	r1, #4
 800689e:	d01d      	beq.n	80068dc <HAL_TIMEx_PWMN_Start_IT+0x44>
 80068a0:	2908      	cmp	r1, #8
 80068a2:	d021      	beq.n	80068e8 <HAL_TIMEx_PWMN_Start_IT+0x50>
 80068a4:	b1a1      	cbz	r1, 80068d0 <HAL_TIMEx_PWMN_Start_IT+0x38>
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_BREAK);
 80068a6:	6822      	ldr	r2, [r4, #0]
 80068a8:	68d3      	ldr	r3, [r2, #12]
 80068aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80068ae:	60d3      	str	r3, [r2, #12]
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 80068b0:	2204      	movs	r2, #4
 80068b2:	6820      	ldr	r0, [r4, #0]
 80068b4:	f7ff fd28 	bl	8006308 <TIM_CCxNChannelCmd>
  __HAL_TIM_MOE_ENABLE(htim);
 80068b8:	6822      	ldr	r2, [r4, #0]
 80068ba:	6c53      	ldr	r3, [r2, #68]	; 0x44
 80068bc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80068c0:	6453      	str	r3, [r2, #68]	; 0x44
  __HAL_TIM_ENABLE(htim);
 80068c2:	6822      	ldr	r2, [r4, #0]
 80068c4:	6813      	ldr	r3, [r2, #0]
 80068c6:	f043 0301 	orr.w	r3, r3, #1
 80068ca:	6013      	str	r3, [r2, #0]
}
 80068cc:	2000      	movs	r0, #0
 80068ce:	bd10      	pop	{r4, pc}
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80068d0:	6802      	ldr	r2, [r0, #0]
 80068d2:	68d3      	ldr	r3, [r2, #12]
 80068d4:	f043 0302 	orr.w	r3, r3, #2
 80068d8:	60d3      	str	r3, [r2, #12]
    break;
 80068da:	e7e4      	b.n	80068a6 <HAL_TIMEx_PWMN_Start_IT+0xe>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80068dc:	6802      	ldr	r2, [r0, #0]
 80068de:	68d3      	ldr	r3, [r2, #12]
 80068e0:	f043 0304 	orr.w	r3, r3, #4
 80068e4:	60d3      	str	r3, [r2, #12]
    break;
 80068e6:	e7de      	b.n	80068a6 <HAL_TIMEx_PWMN_Start_IT+0xe>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80068e8:	6802      	ldr	r2, [r0, #0]
 80068ea:	68d3      	ldr	r3, [r2, #12]
 80068ec:	f043 0308 	orr.w	r3, r3, #8
 80068f0:	60d3      	str	r3, [r2, #12]
    break;
 80068f2:	e7d8      	b.n	80068a6 <HAL_TIMEx_PWMN_Start_IT+0xe>

080068f4 <HAL_TIMEx_PWMN_Stop_IT>:
{
 80068f4:	b510      	push	{r4, lr}
 80068f6:	4604      	mov	r4, r0
  switch (Channel)
 80068f8:	2904      	cmp	r1, #4
 80068fa:	d037      	beq.n	800696c <HAL_TIMEx_PWMN_Stop_IT+0x78>
 80068fc:	2908      	cmp	r1, #8
 80068fe:	d03b      	beq.n	8006978 <HAL_TIMEx_PWMN_Stop_IT+0x84>
 8006900:	2900      	cmp	r1, #0
 8006902:	d02d      	beq.n	8006960 <HAL_TIMEx_PWMN_Stop_IT+0x6c>
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 8006904:	2200      	movs	r2, #0
 8006906:	6820      	ldr	r0, [r4, #0]
 8006908:	f7ff fcfe 	bl	8006308 <TIM_CCxNChannelCmd>
  tmpccer = htim->Instance->CCER;
 800690c:	6823      	ldr	r3, [r4, #0]
 800690e:	6a19      	ldr	r1, [r3, #32]
  if ((tmpccer & (TIM_CCER_CC1NE | TIM_CCER_CC2NE | TIM_CCER_CC3NE)) == RESET)
 8006910:	f240 4244 	movw	r2, #1092	; 0x444
 8006914:	4211      	tst	r1, r2
 8006916:	d103      	bne.n	8006920 <HAL_TIMEx_PWMN_Stop_IT+0x2c>
    __HAL_TIM_DISABLE_IT(htim, TIM_IT_BREAK);
 8006918:	68da      	ldr	r2, [r3, #12]
 800691a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800691e:	60da      	str	r2, [r3, #12]
  __HAL_TIM_MOE_DISABLE(htim);
 8006920:	6823      	ldr	r3, [r4, #0]
 8006922:	6a19      	ldr	r1, [r3, #32]
 8006924:	f241 1211 	movw	r2, #4369	; 0x1111
 8006928:	4211      	tst	r1, r2
 800692a:	d108      	bne.n	800693e <HAL_TIMEx_PWMN_Stop_IT+0x4a>
 800692c:	6a19      	ldr	r1, [r3, #32]
 800692e:	f240 4244 	movw	r2, #1092	; 0x444
 8006932:	4211      	tst	r1, r2
 8006934:	d103      	bne.n	800693e <HAL_TIMEx_PWMN_Stop_IT+0x4a>
 8006936:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006938:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800693c:	645a      	str	r2, [r3, #68]	; 0x44
  __HAL_TIM_DISABLE(htim);
 800693e:	6823      	ldr	r3, [r4, #0]
 8006940:	6a19      	ldr	r1, [r3, #32]
 8006942:	f241 1211 	movw	r2, #4369	; 0x1111
 8006946:	4211      	tst	r1, r2
 8006948:	d108      	bne.n	800695c <HAL_TIMEx_PWMN_Stop_IT+0x68>
 800694a:	6a19      	ldr	r1, [r3, #32]
 800694c:	f240 4244 	movw	r2, #1092	; 0x444
 8006950:	4211      	tst	r1, r2
 8006952:	d103      	bne.n	800695c <HAL_TIMEx_PWMN_Stop_IT+0x68>
 8006954:	681a      	ldr	r2, [r3, #0]
 8006956:	f022 0201 	bic.w	r2, r2, #1
 800695a:	601a      	str	r2, [r3, #0]
}
 800695c:	2000      	movs	r0, #0
 800695e:	bd10      	pop	{r4, pc}
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8006960:	6802      	ldr	r2, [r0, #0]
 8006962:	68d3      	ldr	r3, [r2, #12]
 8006964:	f023 0302 	bic.w	r3, r3, #2
 8006968:	60d3      	str	r3, [r2, #12]
    break;
 800696a:	e7cb      	b.n	8006904 <HAL_TIMEx_PWMN_Stop_IT+0x10>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800696c:	6802      	ldr	r2, [r0, #0]
 800696e:	68d3      	ldr	r3, [r2, #12]
 8006970:	f023 0304 	bic.w	r3, r3, #4
 8006974:	60d3      	str	r3, [r2, #12]
    break;
 8006976:	e7c5      	b.n	8006904 <HAL_TIMEx_PWMN_Stop_IT+0x10>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8006978:	6802      	ldr	r2, [r0, #0]
 800697a:	68d3      	ldr	r3, [r2, #12]
 800697c:	f023 0308 	bic.w	r3, r3, #8
 8006980:	60d3      	str	r3, [r2, #12]
    break;
 8006982:	e7bf      	b.n	8006904 <HAL_TIMEx_PWMN_Stop_IT+0x10>

08006984 <HAL_TIMEx_PWMN_Start_DMA>:
{
 8006984:	b570      	push	{r4, r5, r6, lr}
  if((htim->State == HAL_TIM_STATE_BUSY))
 8006986:	f890 503d 	ldrb.w	r5, [r0, #61]	; 0x3d
 800698a:	b2ed      	uxtb	r5, r5
 800698c:	2d02      	cmp	r5, #2
 800698e:	d05a      	beq.n	8006a46 <HAL_TIMEx_PWMN_Start_DMA+0xc2>
  else if((htim->State == HAL_TIM_STATE_READY))
 8006990:	f890 403d 	ldrb.w	r4, [r0, #61]	; 0x3d
 8006994:	b2e4      	uxtb	r4, r4
 8006996:	2c01      	cmp	r4, #1
 8006998:	d018      	beq.n	80069cc <HAL_TIMEx_PWMN_Start_DMA+0x48>
 800699a:	4616      	mov	r6, r2
 800699c:	460d      	mov	r5, r1
 800699e:	4604      	mov	r4, r0
  switch (Channel)
 80069a0:	2904      	cmp	r1, #4
 80069a2:	d02c      	beq.n	80069fe <HAL_TIMEx_PWMN_Start_DMA+0x7a>
 80069a4:	2908      	cmp	r1, #8
 80069a6:	d03c      	beq.n	8006a22 <HAL_TIMEx_PWMN_Start_DMA+0x9e>
 80069a8:	b1b9      	cbz	r1, 80069da <HAL_TIMEx_PWMN_Start_DMA+0x56>
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 80069aa:	2204      	movs	r2, #4
 80069ac:	4629      	mov	r1, r5
 80069ae:	6820      	ldr	r0, [r4, #0]
 80069b0:	f7ff fcaa 	bl	8006308 <TIM_CCxNChannelCmd>
  __HAL_TIM_MOE_ENABLE(htim);
 80069b4:	6822      	ldr	r2, [r4, #0]
 80069b6:	6c53      	ldr	r3, [r2, #68]	; 0x44
 80069b8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80069bc:	6453      	str	r3, [r2, #68]	; 0x44
  __HAL_TIM_ENABLE(htim);
 80069be:	6822      	ldr	r2, [r4, #0]
 80069c0:	6813      	ldr	r3, [r2, #0]
 80069c2:	f043 0301 	orr.w	r3, r3, #1
 80069c6:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 80069c8:	2000      	movs	r0, #0
 80069ca:	bd70      	pop	{r4, r5, r6, pc}
    if(((uint32_t)pData == 0U) && (Length > 0U))
 80069cc:	b90a      	cbnz	r2, 80069d2 <HAL_TIMEx_PWMN_Start_DMA+0x4e>
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d13b      	bne.n	8006a4a <HAL_TIMEx_PWMN_Start_DMA+0xc6>
      htim->State = HAL_TIM_STATE_BUSY;
 80069d2:	2402      	movs	r4, #2
 80069d4:	f880 403d 	strb.w	r4, [r0, #61]	; 0x3d
 80069d8:	e7df      	b.n	800699a <HAL_TIMEx_PWMN_Start_DMA+0x16>
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80069da:	6a42      	ldr	r2, [r0, #36]	; 0x24
 80069dc:	491c      	ldr	r1, [pc, #112]	; (8006a50 <HAL_TIMEx_PWMN_Start_DMA+0xcc>)
 80069de:	6291      	str	r1, [r2, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 80069e0:	6a42      	ldr	r2, [r0, #36]	; 0x24
 80069e2:	491c      	ldr	r1, [pc, #112]	; (8006a54 <HAL_TIMEx_PWMN_Start_DMA+0xd0>)
 80069e4:	6311      	str	r1, [r2, #48]	; 0x30
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1, Length);
 80069e6:	6802      	ldr	r2, [r0, #0]
 80069e8:	3234      	adds	r2, #52	; 0x34
 80069ea:	4631      	mov	r1, r6
 80069ec:	6a40      	ldr	r0, [r0, #36]	; 0x24
 80069ee:	f7fb fc39 	bl	8002264 <HAL_DMA_Start_IT>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 80069f2:	6822      	ldr	r2, [r4, #0]
 80069f4:	68d3      	ldr	r3, [r2, #12]
 80069f6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80069fa:	60d3      	str	r3, [r2, #12]
    break;
 80069fc:	e7d5      	b.n	80069aa <HAL_TIMEx_PWMN_Start_DMA+0x26>
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80069fe:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8006a00:	4913      	ldr	r1, [pc, #76]	; (8006a50 <HAL_TIMEx_PWMN_Start_DMA+0xcc>)
 8006a02:	6291      	str	r1, [r2, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8006a04:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8006a06:	4913      	ldr	r1, [pc, #76]	; (8006a54 <HAL_TIMEx_PWMN_Start_DMA+0xd0>)
 8006a08:	6311      	str	r1, [r2, #48]	; 0x30
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2, Length);
 8006a0a:	6802      	ldr	r2, [r0, #0]
 8006a0c:	3238      	adds	r2, #56	; 0x38
 8006a0e:	4631      	mov	r1, r6
 8006a10:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8006a12:	f7fb fc27 	bl	8002264 <HAL_DMA_Start_IT>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8006a16:	6822      	ldr	r2, [r4, #0]
 8006a18:	68d3      	ldr	r3, [r2, #12]
 8006a1a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006a1e:	60d3      	str	r3, [r2, #12]
    break;
 8006a20:	e7c3      	b.n	80069aa <HAL_TIMEx_PWMN_Start_DMA+0x26>
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8006a22:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8006a24:	490a      	ldr	r1, [pc, #40]	; (8006a50 <HAL_TIMEx_PWMN_Start_DMA+0xcc>)
 8006a26:	6291      	str	r1, [r2, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8006a28:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8006a2a:	490a      	ldr	r1, [pc, #40]	; (8006a54 <HAL_TIMEx_PWMN_Start_DMA+0xd0>)
 8006a2c:	6311      	str	r1, [r2, #48]	; 0x30
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,Length);
 8006a2e:	6802      	ldr	r2, [r0, #0]
 8006a30:	323c      	adds	r2, #60	; 0x3c
 8006a32:	4631      	mov	r1, r6
 8006a34:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 8006a36:	f7fb fc15 	bl	8002264 <HAL_DMA_Start_IT>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8006a3a:	6822      	ldr	r2, [r4, #0]
 8006a3c:	68d3      	ldr	r3, [r2, #12]
 8006a3e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8006a42:	60d3      	str	r3, [r2, #12]
    break;
 8006a44:	e7b1      	b.n	80069aa <HAL_TIMEx_PWMN_Start_DMA+0x26>
     return HAL_BUSY;
 8006a46:	2002      	movs	r0, #2
 8006a48:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8006a4a:	2001      	movs	r0, #1
}
 8006a4c:	bd70      	pop	{r4, r5, r6, pc}
 8006a4e:	bf00      	nop
 8006a50:	08004d4b 	.word	0x08004d4b
 8006a54:	08004f1f 	.word	0x08004f1f

08006a58 <HAL_TIMEx_PWMN_Stop_DMA>:
{
 8006a58:	b510      	push	{r4, lr}
 8006a5a:	4604      	mov	r4, r0
  switch (Channel)
 8006a5c:	2904      	cmp	r1, #4
 8006a5e:	d02f      	beq.n	8006ac0 <HAL_TIMEx_PWMN_Stop_DMA+0x68>
 8006a60:	2908      	cmp	r1, #8
 8006a62:	d033      	beq.n	8006acc <HAL_TIMEx_PWMN_Stop_DMA+0x74>
 8006a64:	b331      	cbz	r1, 8006ab4 <HAL_TIMEx_PWMN_Stop_DMA+0x5c>
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 8006a66:	2200      	movs	r2, #0
 8006a68:	6820      	ldr	r0, [r4, #0]
 8006a6a:	f7ff fc4d 	bl	8006308 <TIM_CCxNChannelCmd>
  __HAL_TIM_MOE_DISABLE(htim);
 8006a6e:	6823      	ldr	r3, [r4, #0]
 8006a70:	6a19      	ldr	r1, [r3, #32]
 8006a72:	f241 1211 	movw	r2, #4369	; 0x1111
 8006a76:	4211      	tst	r1, r2
 8006a78:	d108      	bne.n	8006a8c <HAL_TIMEx_PWMN_Stop_DMA+0x34>
 8006a7a:	6a19      	ldr	r1, [r3, #32]
 8006a7c:	f240 4244 	movw	r2, #1092	; 0x444
 8006a80:	4211      	tst	r1, r2
 8006a82:	d103      	bne.n	8006a8c <HAL_TIMEx_PWMN_Stop_DMA+0x34>
 8006a84:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006a86:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006a8a:	645a      	str	r2, [r3, #68]	; 0x44
  __HAL_TIM_DISABLE(htim);
 8006a8c:	6823      	ldr	r3, [r4, #0]
 8006a8e:	6a19      	ldr	r1, [r3, #32]
 8006a90:	f241 1211 	movw	r2, #4369	; 0x1111
 8006a94:	4211      	tst	r1, r2
 8006a96:	d108      	bne.n	8006aaa <HAL_TIMEx_PWMN_Stop_DMA+0x52>
 8006a98:	6a19      	ldr	r1, [r3, #32]
 8006a9a:	f240 4244 	movw	r2, #1092	; 0x444
 8006a9e:	4211      	tst	r1, r2
 8006aa0:	d103      	bne.n	8006aaa <HAL_TIMEx_PWMN_Stop_DMA+0x52>
 8006aa2:	681a      	ldr	r2, [r3, #0]
 8006aa4:	f022 0201 	bic.w	r2, r2, #1
 8006aa8:	601a      	str	r2, [r3, #0]
  htim->State = HAL_TIM_STATE_READY;
 8006aaa:	2301      	movs	r3, #1
 8006aac:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 8006ab0:	2000      	movs	r0, #0
 8006ab2:	bd10      	pop	{r4, pc}
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8006ab4:	6802      	ldr	r2, [r0, #0]
 8006ab6:	68d3      	ldr	r3, [r2, #12]
 8006ab8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006abc:	60d3      	str	r3, [r2, #12]
    break;
 8006abe:	e7d2      	b.n	8006a66 <HAL_TIMEx_PWMN_Stop_DMA+0xe>
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8006ac0:	6802      	ldr	r2, [r0, #0]
 8006ac2:	68d3      	ldr	r3, [r2, #12]
 8006ac4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006ac8:	60d3      	str	r3, [r2, #12]
    break;
 8006aca:	e7cc      	b.n	8006a66 <HAL_TIMEx_PWMN_Stop_DMA+0xe>
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8006acc:	6802      	ldr	r2, [r0, #0]
 8006ace:	68d3      	ldr	r3, [r2, #12]
 8006ad0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006ad4:	60d3      	str	r3, [r2, #12]
    break;
 8006ad6:	e7c6      	b.n	8006a66 <HAL_TIMEx_PWMN_Stop_DMA+0xe>

08006ad8 <HAL_TIMEx_OnePulseN_Start>:
{
 8006ad8:	b510      	push	{r4, lr}
 8006ada:	4604      	mov	r4, r0
  TIM_CCxNChannelCmd(htim->Instance, OutputChannel, TIM_CCxN_ENABLE);
 8006adc:	2204      	movs	r2, #4
 8006ade:	6800      	ldr	r0, [r0, #0]
 8006ae0:	f7ff fc12 	bl	8006308 <TIM_CCxNChannelCmd>
  __HAL_TIM_MOE_ENABLE(htim);
 8006ae4:	6822      	ldr	r2, [r4, #0]
 8006ae6:	6c53      	ldr	r3, [r2, #68]	; 0x44
 8006ae8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006aec:	6453      	str	r3, [r2, #68]	; 0x44
}
 8006aee:	2000      	movs	r0, #0
 8006af0:	bd10      	pop	{r4, pc}

08006af2 <HAL_TIMEx_OnePulseN_Stop>:
{
 8006af2:	b510      	push	{r4, lr}
 8006af4:	4604      	mov	r4, r0
  TIM_CCxNChannelCmd(htim->Instance, OutputChannel, TIM_CCxN_DISABLE);
 8006af6:	2200      	movs	r2, #0
 8006af8:	6800      	ldr	r0, [r0, #0]
 8006afa:	f7ff fc05 	bl	8006308 <TIM_CCxNChannelCmd>
  __HAL_TIM_MOE_DISABLE(htim);
 8006afe:	6823      	ldr	r3, [r4, #0]
 8006b00:	6a19      	ldr	r1, [r3, #32]
 8006b02:	f241 1211 	movw	r2, #4369	; 0x1111
 8006b06:	4211      	tst	r1, r2
 8006b08:	d108      	bne.n	8006b1c <HAL_TIMEx_OnePulseN_Stop+0x2a>
 8006b0a:	6a19      	ldr	r1, [r3, #32]
 8006b0c:	f240 4244 	movw	r2, #1092	; 0x444
 8006b10:	4211      	tst	r1, r2
 8006b12:	d103      	bne.n	8006b1c <HAL_TIMEx_OnePulseN_Stop+0x2a>
 8006b14:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006b16:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006b1a:	645a      	str	r2, [r3, #68]	; 0x44
  __HAL_TIM_DISABLE(htim);
 8006b1c:	6823      	ldr	r3, [r4, #0]
 8006b1e:	6a19      	ldr	r1, [r3, #32]
 8006b20:	f241 1211 	movw	r2, #4369	; 0x1111
 8006b24:	4211      	tst	r1, r2
 8006b26:	d108      	bne.n	8006b3a <HAL_TIMEx_OnePulseN_Stop+0x48>
 8006b28:	6a19      	ldr	r1, [r3, #32]
 8006b2a:	f240 4244 	movw	r2, #1092	; 0x444
 8006b2e:	4211      	tst	r1, r2
 8006b30:	d103      	bne.n	8006b3a <HAL_TIMEx_OnePulseN_Stop+0x48>
 8006b32:	681a      	ldr	r2, [r3, #0]
 8006b34:	f022 0201 	bic.w	r2, r2, #1
 8006b38:	601a      	str	r2, [r3, #0]
}
 8006b3a:	2000      	movs	r0, #0
 8006b3c:	bd10      	pop	{r4, pc}

08006b3e <HAL_TIMEx_OnePulseN_Start_IT>:
{
 8006b3e:	b510      	push	{r4, lr}
 8006b40:	4604      	mov	r4, r0
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8006b42:	6802      	ldr	r2, [r0, #0]
 8006b44:	68d3      	ldr	r3, [r2, #12]
 8006b46:	f043 0302 	orr.w	r3, r3, #2
 8006b4a:	60d3      	str	r3, [r2, #12]
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8006b4c:	6802      	ldr	r2, [r0, #0]
 8006b4e:	68d3      	ldr	r3, [r2, #12]
 8006b50:	f043 0304 	orr.w	r3, r3, #4
 8006b54:	60d3      	str	r3, [r2, #12]
  TIM_CCxNChannelCmd(htim->Instance, OutputChannel, TIM_CCxN_ENABLE);
 8006b56:	2204      	movs	r2, #4
 8006b58:	6800      	ldr	r0, [r0, #0]
 8006b5a:	f7ff fbd5 	bl	8006308 <TIM_CCxNChannelCmd>
  __HAL_TIM_MOE_ENABLE(htim);
 8006b5e:	6822      	ldr	r2, [r4, #0]
 8006b60:	6c53      	ldr	r3, [r2, #68]	; 0x44
 8006b62:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006b66:	6453      	str	r3, [r2, #68]	; 0x44
}
 8006b68:	2000      	movs	r0, #0
 8006b6a:	bd10      	pop	{r4, pc}

08006b6c <HAL_TIMEx_OnePulseN_Stop_IT>:
{
 8006b6c:	b510      	push	{r4, lr}
 8006b6e:	4604      	mov	r4, r0
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8006b70:	6802      	ldr	r2, [r0, #0]
 8006b72:	68d3      	ldr	r3, [r2, #12]
 8006b74:	f023 0302 	bic.w	r3, r3, #2
 8006b78:	60d3      	str	r3, [r2, #12]
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8006b7a:	6802      	ldr	r2, [r0, #0]
 8006b7c:	68d3      	ldr	r3, [r2, #12]
 8006b7e:	f023 0304 	bic.w	r3, r3, #4
 8006b82:	60d3      	str	r3, [r2, #12]
  TIM_CCxNChannelCmd(htim->Instance, OutputChannel, TIM_CCxN_DISABLE);
 8006b84:	2200      	movs	r2, #0
 8006b86:	6800      	ldr	r0, [r0, #0]
 8006b88:	f7ff fbbe 	bl	8006308 <TIM_CCxNChannelCmd>
  __HAL_TIM_MOE_DISABLE(htim);
 8006b8c:	6823      	ldr	r3, [r4, #0]
 8006b8e:	6a19      	ldr	r1, [r3, #32]
 8006b90:	f241 1211 	movw	r2, #4369	; 0x1111
 8006b94:	4211      	tst	r1, r2
 8006b96:	d108      	bne.n	8006baa <HAL_TIMEx_OnePulseN_Stop_IT+0x3e>
 8006b98:	6a19      	ldr	r1, [r3, #32]
 8006b9a:	f240 4244 	movw	r2, #1092	; 0x444
 8006b9e:	4211      	tst	r1, r2
 8006ba0:	d103      	bne.n	8006baa <HAL_TIMEx_OnePulseN_Stop_IT+0x3e>
 8006ba2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006ba4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006ba8:	645a      	str	r2, [r3, #68]	; 0x44
  __HAL_TIM_DISABLE(htim);
 8006baa:	6823      	ldr	r3, [r4, #0]
 8006bac:	6a19      	ldr	r1, [r3, #32]
 8006bae:	f241 1211 	movw	r2, #4369	; 0x1111
 8006bb2:	4211      	tst	r1, r2
 8006bb4:	d108      	bne.n	8006bc8 <HAL_TIMEx_OnePulseN_Stop_IT+0x5c>
 8006bb6:	6a19      	ldr	r1, [r3, #32]
 8006bb8:	f240 4244 	movw	r2, #1092	; 0x444
 8006bbc:	4211      	tst	r1, r2
 8006bbe:	d103      	bne.n	8006bc8 <HAL_TIMEx_OnePulseN_Stop_IT+0x5c>
 8006bc0:	681a      	ldr	r2, [r3, #0]
 8006bc2:	f022 0201 	bic.w	r2, r2, #1
 8006bc6:	601a      	str	r2, [r3, #0]
}
 8006bc8:	2000      	movs	r0, #0
 8006bca:	bd10      	pop	{r4, pc}

08006bcc <HAL_TIMEx_ConfigCommutationEvent>:
  __HAL_LOCK(htim);
 8006bcc:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8006bd0:	2b01      	cmp	r3, #1
 8006bd2:	d027      	beq.n	8006c24 <HAL_TIMEx_ConfigCommutationEvent+0x58>
{
 8006bd4:	b410      	push	{r4}
  __HAL_LOCK(htim);
 8006bd6:	2301      	movs	r3, #1
 8006bd8:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  if ((InputTrigger == TIM_TS_ITR0) || (InputTrigger == TIM_TS_ITR1) ||
 8006bdc:	b129      	cbz	r1, 8006bea <HAL_TIMEx_ConfigCommutationEvent+0x1e>
 8006bde:	2910      	cmp	r1, #16
 8006be0:	d003      	beq.n	8006bea <HAL_TIMEx_ConfigCommutationEvent+0x1e>
 8006be2:	2920      	cmp	r1, #32
 8006be4:	d001      	beq.n	8006bea <HAL_TIMEx_ConfigCommutationEvent+0x1e>
      (InputTrigger == TIM_TS_ITR2) || (InputTrigger == TIM_TS_ITR3))
 8006be6:	2930      	cmp	r1, #48	; 0x30
 8006be8:	d108      	bne.n	8006bfc <HAL_TIMEx_ConfigCommutationEvent+0x30>
    htim->Instance->SMCR &= ~TIM_SMCR_TS;
 8006bea:	6804      	ldr	r4, [r0, #0]
 8006bec:	68a3      	ldr	r3, [r4, #8]
 8006bee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006bf2:	60a3      	str	r3, [r4, #8]
    htim->Instance->SMCR |= InputTrigger;
 8006bf4:	6803      	ldr	r3, [r0, #0]
 8006bf6:	689c      	ldr	r4, [r3, #8]
 8006bf8:	4321      	orrs	r1, r4
 8006bfa:	6099      	str	r1, [r3, #8]
  htim->Instance->CR2 |= TIM_CR2_CCPC;
 8006bfc:	6801      	ldr	r1, [r0, #0]
 8006bfe:	684b      	ldr	r3, [r1, #4]
 8006c00:	f043 0301 	orr.w	r3, r3, #1
 8006c04:	604b      	str	r3, [r1, #4]
  htim->Instance->CR2 &= ~TIM_CR2_CCUS;
 8006c06:	6801      	ldr	r1, [r0, #0]
 8006c08:	684b      	ldr	r3, [r1, #4]
 8006c0a:	f023 0304 	bic.w	r3, r3, #4
 8006c0e:	604b      	str	r3, [r1, #4]
  htim->Instance->CR2 |= CommutationSource;
 8006c10:	6801      	ldr	r1, [r0, #0]
 8006c12:	684b      	ldr	r3, [r1, #4]
 8006c14:	431a      	orrs	r2, r3
 8006c16:	604a      	str	r2, [r1, #4]
  __HAL_UNLOCK(htim);
 8006c18:	2300      	movs	r3, #0
 8006c1a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 8006c1e:	4618      	mov	r0, r3
}
 8006c20:	bc10      	pop	{r4}
 8006c22:	4770      	bx	lr
  __HAL_LOCK(htim);
 8006c24:	2002      	movs	r0, #2
 8006c26:	4770      	bx	lr

08006c28 <HAL_TIMEx_ConfigCommutationEvent_IT>:
  __HAL_LOCK(htim);
 8006c28:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8006c2c:	2b01      	cmp	r3, #1
 8006c2e:	d02c      	beq.n	8006c8a <HAL_TIMEx_ConfigCommutationEvent_IT+0x62>
{
 8006c30:	b410      	push	{r4}
  __HAL_LOCK(htim);
 8006c32:	2301      	movs	r3, #1
 8006c34:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  if ((InputTrigger == TIM_TS_ITR0) || (InputTrigger == TIM_TS_ITR1) ||
 8006c38:	b129      	cbz	r1, 8006c46 <HAL_TIMEx_ConfigCommutationEvent_IT+0x1e>
 8006c3a:	2910      	cmp	r1, #16
 8006c3c:	d003      	beq.n	8006c46 <HAL_TIMEx_ConfigCommutationEvent_IT+0x1e>
 8006c3e:	2920      	cmp	r1, #32
 8006c40:	d001      	beq.n	8006c46 <HAL_TIMEx_ConfigCommutationEvent_IT+0x1e>
      (InputTrigger == TIM_TS_ITR2) || (InputTrigger == TIM_TS_ITR3))
 8006c42:	2930      	cmp	r1, #48	; 0x30
 8006c44:	d108      	bne.n	8006c58 <HAL_TIMEx_ConfigCommutationEvent_IT+0x30>
    htim->Instance->SMCR &= ~TIM_SMCR_TS;
 8006c46:	6804      	ldr	r4, [r0, #0]
 8006c48:	68a3      	ldr	r3, [r4, #8]
 8006c4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c4e:	60a3      	str	r3, [r4, #8]
    htim->Instance->SMCR |= InputTrigger;
 8006c50:	6803      	ldr	r3, [r0, #0]
 8006c52:	689c      	ldr	r4, [r3, #8]
 8006c54:	4321      	orrs	r1, r4
 8006c56:	6099      	str	r1, [r3, #8]
  htim->Instance->CR2 |= TIM_CR2_CCPC;
 8006c58:	6801      	ldr	r1, [r0, #0]
 8006c5a:	684b      	ldr	r3, [r1, #4]
 8006c5c:	f043 0301 	orr.w	r3, r3, #1
 8006c60:	604b      	str	r3, [r1, #4]
  htim->Instance->CR2 &= ~TIM_CR2_CCUS;
 8006c62:	6801      	ldr	r1, [r0, #0]
 8006c64:	684b      	ldr	r3, [r1, #4]
 8006c66:	f023 0304 	bic.w	r3, r3, #4
 8006c6a:	604b      	str	r3, [r1, #4]
  htim->Instance->CR2 |= CommutationSource;
 8006c6c:	6801      	ldr	r1, [r0, #0]
 8006c6e:	684b      	ldr	r3, [r1, #4]
 8006c70:	431a      	orrs	r2, r3
 8006c72:	604a      	str	r2, [r1, #4]
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_COM);
 8006c74:	6802      	ldr	r2, [r0, #0]
 8006c76:	68d3      	ldr	r3, [r2, #12]
 8006c78:	f043 0320 	orr.w	r3, r3, #32
 8006c7c:	60d3      	str	r3, [r2, #12]
  __HAL_UNLOCK(htim);
 8006c7e:	2300      	movs	r3, #0
 8006c80:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 8006c84:	4618      	mov	r0, r3
}
 8006c86:	bc10      	pop	{r4}
 8006c88:	4770      	bx	lr
  __HAL_LOCK(htim);
 8006c8a:	2002      	movs	r0, #2
 8006c8c:	4770      	bx	lr

08006c8e <HAL_TIMEx_ConfigCommutationEvent_DMA>:
  __HAL_LOCK(htim);
 8006c8e:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8006c92:	2b01      	cmp	r3, #1
 8006c94:	d032      	beq.n	8006cfc <HAL_TIMEx_ConfigCommutationEvent_DMA+0x6e>
{
 8006c96:	b410      	push	{r4}
  __HAL_LOCK(htim);
 8006c98:	2301      	movs	r3, #1
 8006c9a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  if ((InputTrigger == TIM_TS_ITR0) || (InputTrigger == TIM_TS_ITR1) ||
 8006c9e:	b129      	cbz	r1, 8006cac <HAL_TIMEx_ConfigCommutationEvent_DMA+0x1e>
 8006ca0:	2910      	cmp	r1, #16
 8006ca2:	d003      	beq.n	8006cac <HAL_TIMEx_ConfigCommutationEvent_DMA+0x1e>
 8006ca4:	2920      	cmp	r1, #32
 8006ca6:	d001      	beq.n	8006cac <HAL_TIMEx_ConfigCommutationEvent_DMA+0x1e>
      (InputTrigger == TIM_TS_ITR2) || (InputTrigger == TIM_TS_ITR3))
 8006ca8:	2930      	cmp	r1, #48	; 0x30
 8006caa:	d108      	bne.n	8006cbe <HAL_TIMEx_ConfigCommutationEvent_DMA+0x30>
    htim->Instance->SMCR &= ~TIM_SMCR_TS;
 8006cac:	6804      	ldr	r4, [r0, #0]
 8006cae:	68a3      	ldr	r3, [r4, #8]
 8006cb0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006cb4:	60a3      	str	r3, [r4, #8]
    htim->Instance->SMCR |= InputTrigger;
 8006cb6:	6803      	ldr	r3, [r0, #0]
 8006cb8:	689c      	ldr	r4, [r3, #8]
 8006cba:	4321      	orrs	r1, r4
 8006cbc:	6099      	str	r1, [r3, #8]
  htim->Instance->CR2 |= TIM_CR2_CCPC;
 8006cbe:	6801      	ldr	r1, [r0, #0]
 8006cc0:	684b      	ldr	r3, [r1, #4]
 8006cc2:	f043 0301 	orr.w	r3, r3, #1
 8006cc6:	604b      	str	r3, [r1, #4]
  htim->Instance->CR2 &= ~TIM_CR2_CCUS;
 8006cc8:	6801      	ldr	r1, [r0, #0]
 8006cca:	684b      	ldr	r3, [r1, #4]
 8006ccc:	f023 0304 	bic.w	r3, r3, #4
 8006cd0:	604b      	str	r3, [r1, #4]
  htim->Instance->CR2 |= CommutationSource;
 8006cd2:	6801      	ldr	r1, [r0, #0]
 8006cd4:	684b      	ldr	r3, [r1, #4]
 8006cd6:	431a      	orrs	r2, r3
 8006cd8:	604a      	str	r2, [r1, #4]
  htim->hdma[TIM_DMA_ID_COMMUTATION]->XferCpltCallback = TIMEx_DMACommutationCplt;
 8006cda:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8006cdc:	4a08      	ldr	r2, [pc, #32]	; (8006d00 <HAL_TIMEx_ConfigCommutationEvent_DMA+0x72>)
 8006cde:	629a      	str	r2, [r3, #40]	; 0x28
  htim->hdma[TIM_DMA_ID_COMMUTATION]->XferErrorCallback = TIM_DMAError;
 8006ce0:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8006ce2:	4a08      	ldr	r2, [pc, #32]	; (8006d04 <HAL_TIMEx_ConfigCommutationEvent_DMA+0x76>)
 8006ce4:	631a      	str	r2, [r3, #48]	; 0x30
  __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_COM);
 8006ce6:	6802      	ldr	r2, [r0, #0]
 8006ce8:	68d3      	ldr	r3, [r2, #12]
 8006cea:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8006cee:	60d3      	str	r3, [r2, #12]
  __HAL_UNLOCK(htim);
 8006cf0:	2300      	movs	r3, #0
 8006cf2:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 8006cf6:	4618      	mov	r0, r3
}
 8006cf8:	bc10      	pop	{r4}
 8006cfa:	4770      	bx	lr
  __HAL_LOCK(htim);
 8006cfc:	2002      	movs	r0, #2
 8006cfe:	4770      	bx	lr
 8006d00:	08006db5 	.word	0x08006db5
 8006d04:	08004f1f 	.word	0x08004f1f

08006d08 <HAL_TIMEx_ConfigBreakDeadTime>:
  __HAL_LOCK(htim);
 8006d08:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8006d0c:	2b01      	cmp	r3, #1
 8006d0e:	d025      	beq.n	8006d5c <HAL_TIMEx_ConfigBreakDeadTime+0x54>
 8006d10:	2301      	movs	r3, #1
 8006d12:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006d16:	68cb      	ldr	r3, [r1, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006d18:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006d1c:	688a      	ldr	r2, [r1, #8]
 8006d1e:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006d20:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006d24:	684a      	ldr	r2, [r1, #4]
 8006d26:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006d28:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006d2c:	680a      	ldr	r2, [r1, #0]
 8006d2e:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006d30:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006d34:	690a      	ldr	r2, [r1, #16]
 8006d36:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006d38:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006d3c:	694a      	ldr	r2, [r1, #20]
 8006d3e:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006d40:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006d44:	698a      	ldr	r2, [r1, #24]
 8006d46:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_MOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006d48:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006d4c:	4313      	orrs	r3, r2
  htim->Instance->BDTR = tmpbdtr;
 8006d4e:	6802      	ldr	r2, [r0, #0]
 8006d50:	6453      	str	r3, [r2, #68]	; 0x44
  __HAL_UNLOCK(htim);
 8006d52:	2300      	movs	r3, #0
 8006d54:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 8006d58:	4618      	mov	r0, r3
 8006d5a:	4770      	bx	lr
  __HAL_LOCK(htim);
 8006d5c:	2002      	movs	r0, #2
}
 8006d5e:	4770      	bx	lr

08006d60 <HAL_TIMEx_MasterConfigSynchronization>:
  __HAL_LOCK(htim);
 8006d60:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8006d64:	2b01      	cmp	r3, #1
 8006d66:	d022      	beq.n	8006dae <HAL_TIMEx_MasterConfigSynchronization+0x4e>
{
 8006d68:	b430      	push	{r4, r5}
  __HAL_LOCK(htim);
 8006d6a:	2201      	movs	r2, #1
 8006d6c:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8006d70:	2302      	movs	r3, #2
 8006d72:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8006d76:	6804      	ldr	r4, [r0, #0]
 8006d78:	6863      	ldr	r3, [r4, #4]
 8006d7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d7e:	6063      	str	r3, [r4, #4]
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 8006d80:	6804      	ldr	r4, [r0, #0]
 8006d82:	6863      	ldr	r3, [r4, #4]
 8006d84:	680d      	ldr	r5, [r1, #0]
 8006d86:	432b      	orrs	r3, r5
 8006d88:	6063      	str	r3, [r4, #4]
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 8006d8a:	6804      	ldr	r4, [r0, #0]
 8006d8c:	68a3      	ldr	r3, [r4, #8]
 8006d8e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006d92:	60a3      	str	r3, [r4, #8]
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8006d94:	6804      	ldr	r4, [r0, #0]
 8006d96:	68a3      	ldr	r3, [r4, #8]
 8006d98:	6849      	ldr	r1, [r1, #4]
 8006d9a:	430b      	orrs	r3, r1
 8006d9c:	60a3      	str	r3, [r4, #8]
  htim->State = HAL_TIM_STATE_READY;
 8006d9e:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8006da2:	2300      	movs	r3, #0
 8006da4:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 8006da8:	4618      	mov	r0, r3
}
 8006daa:	bc30      	pop	{r4, r5}
 8006dac:	4770      	bx	lr
  __HAL_LOCK(htim);
 8006dae:	2002      	movs	r0, #2
 8006db0:	4770      	bx	lr

08006db2 <HAL_TIMEx_CommutationCallback>:
{
 8006db2:	4770      	bx	lr

08006db4 <TIMEx_DMACommutationCplt>:
{
 8006db4:	b508      	push	{r3, lr}
  TIM_HandleTypeDef* htim = ( TIM_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8006db6:	6a40      	ldr	r0, [r0, #36]	; 0x24
  htim->State= HAL_TIM_STATE_READY;
 8006db8:	2301      	movs	r3, #1
 8006dba:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  HAL_TIMEx_CommutationCallback(htim);
 8006dbe:	f7ff fff8 	bl	8006db2 <HAL_TIMEx_CommutationCallback>
 8006dc2:	bd08      	pop	{r3, pc}

08006dc4 <HAL_TIMEx_BreakCallback>:
{
 8006dc4:	4770      	bx	lr

08006dc6 <HAL_TIMEx_HallSensor_GetState>:
  return htim->State;
 8006dc6:	f890 003d 	ldrb.w	r0, [r0, #61]	; 0x3d
}
 8006dca:	4770      	bx	lr

08006dcc <UART_EndTxTransfer>:
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8006dcc:	6802      	ldr	r2, [r0, #0]
 8006dce:	68d3      	ldr	r3, [r2, #12]
 8006dd0:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8006dd4:	60d3      	str	r3, [r2, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006dd6:	2320      	movs	r3, #32
 8006dd8:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
 8006ddc:	4770      	bx	lr

08006dde <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006dde:	6802      	ldr	r2, [r0, #0]
 8006de0:	68d3      	ldr	r3, [r2, #12]
 8006de2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006de6:	60d3      	str	r3, [r2, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006de8:	6802      	ldr	r2, [r0, #0]
 8006dea:	6953      	ldr	r3, [r2, #20]
 8006dec:	f023 0301 	bic.w	r3, r3, #1
 8006df0:	6153      	str	r3, [r2, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006df2:	2320      	movs	r3, #32
 8006df4:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
 8006df8:	4770      	bx	lr

08006dfa <UART_Transmit_IT>:
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
  uint16_t* tmp;
  
  /* Check that a Tx process is ongoing */
  if(huart->gState == HAL_UART_STATE_BUSY_TX)
 8006dfa:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8006dfe:	b2db      	uxtb	r3, r3
 8006e00:	2b21      	cmp	r3, #33	; 0x21
 8006e02:	d001      	beq.n	8006e08 <UART_Transmit_IT+0xe>
    }
    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8006e04:	2002      	movs	r0, #2
 8006e06:	4770      	bx	lr
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8006e08:	6883      	ldr	r3, [r0, #8]
 8006e0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e0e:	d017      	beq.n	8006e40 <UART_Transmit_IT+0x46>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006e10:	6802      	ldr	r2, [r0, #0]
 8006e12:	6a03      	ldr	r3, [r0, #32]
 8006e14:	1c59      	adds	r1, r3, #1
 8006e16:	6201      	str	r1, [r0, #32]
 8006e18:	781b      	ldrb	r3, [r3, #0]
 8006e1a:	6053      	str	r3, [r2, #4]
    if(--huart->TxXferCount == 0U)
 8006e1c:	8cc3      	ldrh	r3, [r0, #38]	; 0x26
 8006e1e:	b29b      	uxth	r3, r3
 8006e20:	3b01      	subs	r3, #1
 8006e22:	b29b      	uxth	r3, r3
 8006e24:	84c3      	strh	r3, [r0, #38]	; 0x26
 8006e26:	b9db      	cbnz	r3, 8006e60 <UART_Transmit_IT+0x66>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006e28:	6802      	ldr	r2, [r0, #0]
 8006e2a:	68d3      	ldr	r3, [r2, #12]
 8006e2c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006e30:	60d3      	str	r3, [r2, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006e32:	6802      	ldr	r2, [r0, #0]
 8006e34:	68d3      	ldr	r3, [r2, #12]
 8006e36:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006e3a:	60d3      	str	r3, [r2, #12]
    return HAL_OK;
 8006e3c:	2000      	movs	r0, #0
 8006e3e:	4770      	bx	lr
      tmp = (uint16_t*) huart->pTxBuffPtr;
 8006e40:	6a03      	ldr	r3, [r0, #32]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006e42:	6802      	ldr	r2, [r0, #0]
 8006e44:	881b      	ldrh	r3, [r3, #0]
 8006e46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e4a:	6053      	str	r3, [r2, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 8006e4c:	6903      	ldr	r3, [r0, #16]
 8006e4e:	b91b      	cbnz	r3, 8006e58 <UART_Transmit_IT+0x5e>
        huart->pTxBuffPtr += 2U;
 8006e50:	6a03      	ldr	r3, [r0, #32]
 8006e52:	3302      	adds	r3, #2
 8006e54:	6203      	str	r3, [r0, #32]
 8006e56:	e7e1      	b.n	8006e1c <UART_Transmit_IT+0x22>
        huart->pTxBuffPtr += 1U;
 8006e58:	6a03      	ldr	r3, [r0, #32]
 8006e5a:	3301      	adds	r3, #1
 8006e5c:	6203      	str	r3, [r0, #32]
 8006e5e:	e7dd      	b.n	8006e1c <UART_Transmit_IT+0x22>
    return HAL_OK;
 8006e60:	2000      	movs	r0, #0
  }
}
 8006e62:	4770      	bx	lr

08006e64 <UART_SetConfig>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006e64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006e68:	4605      	mov	r5, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*------- UART-associated USART registers setting : CR2 Configuration ------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according 
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006e6a:	6802      	ldr	r2, [r0, #0]
 8006e6c:	6913      	ldr	r3, [r2, #16]
 8006e6e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8006e72:	68c1      	ldr	r1, [r0, #12]
 8006e74:	430b      	orrs	r3, r1
 8006e76:	6113      	str	r3, [r2, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1, 
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8), 
             tmpreg);
#else
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8006e78:	6883      	ldr	r3, [r0, #8]
 8006e7a:	6902      	ldr	r2, [r0, #16]
 8006e7c:	4313      	orrs	r3, r2
 8006e7e:	6942      	ldr	r2, [r0, #20]
 8006e80:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, 
 8006e82:	6801      	ldr	r1, [r0, #0]
 8006e84:	68ca      	ldr	r2, [r1, #12]
 8006e86:	f422 52b0 	bic.w	r2, r2, #5632	; 0x1600
 8006e8a:	f022 020c 	bic.w	r2, r2, #12
 8006e8e:	4313      	orrs	r3, r2
 8006e90:	60cb      	str	r3, [r1, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*------- UART-associated USART registers setting : CR3 Configuration ------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006e92:	6802      	ldr	r2, [r0, #0]
 8006e94:	6953      	ldr	r3, [r2, #20]
 8006e96:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006e9a:	6981      	ldr	r1, [r0, #24]
 8006e9c:	430b      	orrs	r3, r1
 8006e9e:	6153      	str	r3, [r2, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8006ea0:	f8d0 8000 	ldr.w	r8, [r0]
 8006ea4:	4b59      	ldr	r3, [pc, #356]	; (800700c <UART_SetConfig+0x1a8>)
 8006ea6:	4598      	cmp	r8, r3
 8006ea8:	d057      	beq.n	8006f5a <UART_SetConfig+0xf6>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8006eaa:	f7fc ff79 	bl	8003da0 <HAL_RCC_GetPCLK1Freq>
 8006eae:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8006eb2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8006eb6:	686c      	ldr	r4, [r5, #4]
 8006eb8:	00a4      	lsls	r4, r4, #2
 8006eba:	fbb0 f4f4 	udiv	r4, r0, r4
 8006ebe:	4f54      	ldr	r7, [pc, #336]	; (8007010 <UART_SetConfig+0x1ac>)
 8006ec0:	fba7 3404 	umull	r3, r4, r7, r4
 8006ec4:	0964      	lsrs	r4, r4, #5
 8006ec6:	0126      	lsls	r6, r4, #4
 8006ec8:	f7fc ff6a 	bl	8003da0 <HAL_RCC_GetPCLK1Freq>
 8006ecc:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8006ed0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8006ed4:	686c      	ldr	r4, [r5, #4]
 8006ed6:	00a4      	lsls	r4, r4, #2
 8006ed8:	fbb0 faf4 	udiv	sl, r0, r4
 8006edc:	f7fc ff60 	bl	8003da0 <HAL_RCC_GetPCLK1Freq>
 8006ee0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8006ee4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8006ee8:	686c      	ldr	r4, [r5, #4]
 8006eea:	00a4      	lsls	r4, r4, #2
 8006eec:	fbb0 f4f4 	udiv	r4, r0, r4
 8006ef0:	fba7 3404 	umull	r3, r4, r7, r4
 8006ef4:	0964      	lsrs	r4, r4, #5
 8006ef6:	f04f 0964 	mov.w	r9, #100	; 0x64
 8006efa:	fb09 a414 	mls	r4, r9, r4, sl
 8006efe:	0124      	lsls	r4, r4, #4
 8006f00:	3432      	adds	r4, #50	; 0x32
 8006f02:	fba7 3404 	umull	r3, r4, r7, r4
 8006f06:	0964      	lsrs	r4, r4, #5
 8006f08:	f004 04f0 	and.w	r4, r4, #240	; 0xf0
 8006f0c:	4434      	add	r4, r6
 8006f0e:	f7fc ff47 	bl	8003da0 <HAL_RCC_GetPCLK1Freq>
 8006f12:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8006f16:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8006f1a:	686e      	ldr	r6, [r5, #4]
 8006f1c:	00b6      	lsls	r6, r6, #2
 8006f1e:	fbb0 f6f6 	udiv	r6, r0, r6
 8006f22:	f7fc ff3d 	bl	8003da0 <HAL_RCC_GetPCLK1Freq>
 8006f26:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8006f2a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8006f2e:	686b      	ldr	r3, [r5, #4]
 8006f30:	009b      	lsls	r3, r3, #2
 8006f32:	fbb0 f0f3 	udiv	r0, r0, r3
 8006f36:	fba7 3000 	umull	r3, r0, r7, r0
 8006f3a:	0940      	lsrs	r0, r0, #5
 8006f3c:	fb09 6910 	mls	r9, r9, r0, r6
 8006f40:	ea4f 1909 	mov.w	r9, r9, lsl #4
 8006f44:	f109 0932 	add.w	r9, r9, #50	; 0x32
 8006f48:	fba7 3709 	umull	r3, r7, r7, r9
 8006f4c:	f3c7 1743 	ubfx	r7, r7, #5, #4
 8006f50:	4427      	add	r7, r4
 8006f52:	f8c8 7008 	str.w	r7, [r8, #8]
 8006f56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8006f5a:	f7fc ff31 	bl	8003dc0 <HAL_RCC_GetPCLK2Freq>
 8006f5e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8006f62:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8006f66:	686c      	ldr	r4, [r5, #4]
 8006f68:	00a4      	lsls	r4, r4, #2
 8006f6a:	fbb0 f4f4 	udiv	r4, r0, r4
 8006f6e:	4f28      	ldr	r7, [pc, #160]	; (8007010 <UART_SetConfig+0x1ac>)
 8006f70:	fba7 3404 	umull	r3, r4, r7, r4
 8006f74:	0964      	lsrs	r4, r4, #5
 8006f76:	0126      	lsls	r6, r4, #4
 8006f78:	f7fc ff22 	bl	8003dc0 <HAL_RCC_GetPCLK2Freq>
 8006f7c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8006f80:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8006f84:	686c      	ldr	r4, [r5, #4]
 8006f86:	00a4      	lsls	r4, r4, #2
 8006f88:	fbb0 faf4 	udiv	sl, r0, r4
 8006f8c:	f7fc ff18 	bl	8003dc0 <HAL_RCC_GetPCLK2Freq>
 8006f90:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8006f94:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8006f98:	686c      	ldr	r4, [r5, #4]
 8006f9a:	00a4      	lsls	r4, r4, #2
 8006f9c:	fbb0 f4f4 	udiv	r4, r0, r4
 8006fa0:	fba7 3404 	umull	r3, r4, r7, r4
 8006fa4:	0964      	lsrs	r4, r4, #5
 8006fa6:	f04f 0964 	mov.w	r9, #100	; 0x64
 8006faa:	fb09 a414 	mls	r4, r9, r4, sl
 8006fae:	0124      	lsls	r4, r4, #4
 8006fb0:	3432      	adds	r4, #50	; 0x32
 8006fb2:	fba7 3404 	umull	r3, r4, r7, r4
 8006fb6:	0964      	lsrs	r4, r4, #5
 8006fb8:	f004 04f0 	and.w	r4, r4, #240	; 0xf0
 8006fbc:	4434      	add	r4, r6
 8006fbe:	f7fc feff 	bl	8003dc0 <HAL_RCC_GetPCLK2Freq>
 8006fc2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8006fc6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8006fca:	686e      	ldr	r6, [r5, #4]
 8006fcc:	00b6      	lsls	r6, r6, #2
 8006fce:	fbb0 f6f6 	udiv	r6, r0, r6
 8006fd2:	f7fc fef5 	bl	8003dc0 <HAL_RCC_GetPCLK2Freq>
 8006fd6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8006fda:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8006fde:	686b      	ldr	r3, [r5, #4]
 8006fe0:	009b      	lsls	r3, r3, #2
 8006fe2:	fbb0 f3f3 	udiv	r3, r0, r3
 8006fe6:	fba7 2303 	umull	r2, r3, r7, r3
 8006fea:	095b      	lsrs	r3, r3, #5
 8006fec:	fb09 6913 	mls	r9, r9, r3, r6
 8006ff0:	ea4f 1909 	mov.w	r9, r9, lsl #4
 8006ff4:	f109 0932 	add.w	r9, r9, #50	; 0x32
 8006ff8:	fba7 3709 	umull	r3, r7, r7, r9
 8006ffc:	f3c7 1743 	ubfx	r7, r7, #5, #4
 8007000:	4427      	add	r7, r4
 8007002:	f8c8 7008 	str.w	r7, [r8, #8]
 8007006:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800700a:	bf00      	nop
 800700c:	40013800 	.word	0x40013800
 8007010:	51eb851f 	.word	0x51eb851f

08007014 <UART_WaitOnFlagUntilTimeout>:
{
 8007014:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007018:	4605      	mov	r5, r0
 800701a:	460f      	mov	r7, r1
 800701c:	4616      	mov	r6, r2
 800701e:	4698      	mov	r8, r3
 8007020:	9c06      	ldr	r4, [sp, #24]
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 8007022:	682b      	ldr	r3, [r5, #0]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	ea37 0303 	bics.w	r3, r7, r3
 800702a:	bf0c      	ite	eq
 800702c:	2301      	moveq	r3, #1
 800702e:	2300      	movne	r3, #0
 8007030:	42b3      	cmp	r3, r6
 8007032:	d11e      	bne.n	8007072 <UART_WaitOnFlagUntilTimeout+0x5e>
    if(Timeout != HAL_MAX_DELAY)
 8007034:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 8007038:	d0f3      	beq.n	8007022 <UART_WaitOnFlagUntilTimeout+0xe>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 800703a:	b12c      	cbz	r4, 8007048 <UART_WaitOnFlagUntilTimeout+0x34>
 800703c:	f7fa fec6 	bl	8001dcc <HAL_GetTick>
 8007040:	eba0 0008 	sub.w	r0, r0, r8
 8007044:	4284      	cmp	r4, r0
 8007046:	d2ec      	bcs.n	8007022 <UART_WaitOnFlagUntilTimeout+0xe>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007048:	682a      	ldr	r2, [r5, #0]
 800704a:	68d3      	ldr	r3, [r2, #12]
 800704c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007050:	60d3      	str	r3, [r2, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007052:	682a      	ldr	r2, [r5, #0]
 8007054:	6953      	ldr	r3, [r2, #20]
 8007056:	f023 0301 	bic.w	r3, r3, #1
 800705a:	6153      	str	r3, [r2, #20]
        huart->gState  = HAL_UART_STATE_READY;
 800705c:	2320      	movs	r3, #32
 800705e:	f885 3039 	strb.w	r3, [r5, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8007062:	f885 303a 	strb.w	r3, [r5, #58]	; 0x3a
        __HAL_UNLOCK(huart);
 8007066:	2300      	movs	r3, #0
 8007068:	f885 3038 	strb.w	r3, [r5, #56]	; 0x38
        return HAL_TIMEOUT;
 800706c:	2003      	movs	r0, #3
 800706e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return HAL_OK;
 8007072:	2000      	movs	r0, #0
}
 8007074:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
{
 8007078:	4770      	bx	lr

0800707a <HAL_UART_Init>:
  if(huart == NULL)
 800707a:	b358      	cbz	r0, 80070d4 <HAL_UART_Init+0x5a>
{
 800707c:	b510      	push	{r4, lr}
 800707e:	4604      	mov	r4, r0
  if(huart->gState == HAL_UART_STATE_RESET)
 8007080:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8007084:	b30b      	cbz	r3, 80070ca <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 8007086:	2324      	movs	r3, #36	; 0x24
 8007088:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 800708c:	6822      	ldr	r2, [r4, #0]
 800708e:	68d3      	ldr	r3, [r2, #12]
 8007090:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007094:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8007096:	4620      	mov	r0, r4
 8007098:	f7ff fee4 	bl	8006e64 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800709c:	6822      	ldr	r2, [r4, #0]
 800709e:	6913      	ldr	r3, [r2, #16]
 80070a0:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 80070a4:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80070a6:	6822      	ldr	r2, [r4, #0]
 80070a8:	6953      	ldr	r3, [r2, #20]
 80070aa:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 80070ae:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 80070b0:	6822      	ldr	r2, [r4, #0]
 80070b2:	68d3      	ldr	r3, [r2, #12]
 80070b4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80070b8:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80070ba:	2000      	movs	r0, #0
 80070bc:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 80070be:	2320      	movs	r3, #32
 80070c0:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 80070c4:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 80070c8:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 80070ca:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 80070ce:	f7fa fb57 	bl	8001780 <HAL_UART_MspInit>
 80070d2:	e7d8      	b.n	8007086 <HAL_UART_Init+0xc>
    return HAL_ERROR;
 80070d4:	2001      	movs	r0, #1
 80070d6:	4770      	bx	lr

080070d8 <HAL_HalfDuplex_Init>:
  if(huart == NULL)
 80070d8:	2800      	cmp	r0, #0
 80070da:	d030      	beq.n	800713e <HAL_HalfDuplex_Init+0x66>
{
 80070dc:	b510      	push	{r4, lr}
 80070de:	4604      	mov	r4, r0
  if(huart->gState == HAL_UART_STATE_RESET)
 80070e0:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80070e4:	b333      	cbz	r3, 8007134 <HAL_HalfDuplex_Init+0x5c>
  huart->gState = HAL_UART_STATE_BUSY;
 80070e6:	2324      	movs	r3, #36	; 0x24
 80070e8:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 80070ec:	6822      	ldr	r2, [r4, #0]
 80070ee:	68d3      	ldr	r3, [r2, #12]
 80070f0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80070f4:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 80070f6:	4620      	mov	r0, r4
 80070f8:	f7ff feb4 	bl	8006e64 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80070fc:	6822      	ldr	r2, [r4, #0]
 80070fe:	6913      	ldr	r3, [r2, #16]
 8007100:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8007104:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 8007106:	6822      	ldr	r2, [r4, #0]
 8007108:	6953      	ldr	r3, [r2, #20]
 800710a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800710e:	6153      	str	r3, [r2, #20]
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8007110:	6822      	ldr	r2, [r4, #0]
 8007112:	6953      	ldr	r3, [r2, #20]
 8007114:	f043 0308 	orr.w	r3, r3, #8
 8007118:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 800711a:	6822      	ldr	r2, [r4, #0]
 800711c:	68d3      	ldr	r3, [r2, #12]
 800711e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8007122:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007124:	2000      	movs	r0, #0
 8007126:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 8007128:	2320      	movs	r3, #32
 800712a:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 800712e:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 8007132:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8007134:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8007138:	f7fa fb22 	bl	8001780 <HAL_UART_MspInit>
 800713c:	e7d3      	b.n	80070e6 <HAL_HalfDuplex_Init+0xe>
    return HAL_ERROR;
 800713e:	2001      	movs	r0, #1
 8007140:	4770      	bx	lr

08007142 <HAL_LIN_Init>:
  if(huart == NULL)
 8007142:	2800      	cmp	r0, #0
 8007144:	d038      	beq.n	80071b8 <HAL_LIN_Init+0x76>
{
 8007146:	b538      	push	{r3, r4, r5, lr}
 8007148:	4604      	mov	r4, r0
 800714a:	460d      	mov	r5, r1
  if(huart->gState == HAL_UART_STATE_RESET)
 800714c:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8007150:	2b00      	cmp	r3, #0
 8007152:	d02c      	beq.n	80071ae <HAL_LIN_Init+0x6c>
  huart->gState = HAL_UART_STATE_BUSY;
 8007154:	2324      	movs	r3, #36	; 0x24
 8007156:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 800715a:	6822      	ldr	r2, [r4, #0]
 800715c:	68d3      	ldr	r3, [r2, #12]
 800715e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007162:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8007164:	4620      	mov	r0, r4
 8007166:	f7ff fe7d 	bl	8006e64 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 800716a:	6822      	ldr	r2, [r4, #0]
 800716c:	6913      	ldr	r3, [r2, #16]
 800716e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007172:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN | USART_CR3_SCEN));
 8007174:	6822      	ldr	r2, [r4, #0]
 8007176:	6953      	ldr	r3, [r2, #20]
 8007178:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 800717c:	6153      	str	r3, [r2, #20]
  SET_BIT(huart->Instance->CR2, USART_CR2_LINEN);
 800717e:	6822      	ldr	r2, [r4, #0]
 8007180:	6913      	ldr	r3, [r2, #16]
 8007182:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007186:	6113      	str	r3, [r2, #16]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_LBDL, BreakDetectLength);
 8007188:	6822      	ldr	r2, [r4, #0]
 800718a:	6913      	ldr	r3, [r2, #16]
 800718c:	f023 0320 	bic.w	r3, r3, #32
 8007190:	432b      	orrs	r3, r5
 8007192:	6113      	str	r3, [r2, #16]
  __HAL_UART_ENABLE(huart);
 8007194:	6822      	ldr	r2, [r4, #0]
 8007196:	68d3      	ldr	r3, [r2, #12]
 8007198:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800719c:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800719e:	2000      	movs	r0, #0
 80071a0:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 80071a2:	2320      	movs	r3, #32
 80071a4:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 80071a8:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 80071ac:	bd38      	pop	{r3, r4, r5, pc}
    huart->Lock = HAL_UNLOCKED;
 80071ae:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 80071b2:	f7fa fae5 	bl	8001780 <HAL_UART_MspInit>
 80071b6:	e7cd      	b.n	8007154 <HAL_LIN_Init+0x12>
    return HAL_ERROR;
 80071b8:	2001      	movs	r0, #1
 80071ba:	4770      	bx	lr

080071bc <HAL_MultiProcessor_Init>:
  if(huart == NULL)
 80071bc:	2800      	cmp	r0, #0
 80071be:	d03a      	beq.n	8007236 <HAL_MultiProcessor_Init+0x7a>
{
 80071c0:	b570      	push	{r4, r5, r6, lr}
 80071c2:	4604      	mov	r4, r0
 80071c4:	4616      	mov	r6, r2
 80071c6:	460d      	mov	r5, r1
  if(huart->gState == HAL_UART_STATE_RESET)
 80071c8:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d02d      	beq.n	800722c <HAL_MultiProcessor_Init+0x70>
  huart->gState = HAL_UART_STATE_BUSY;
 80071d0:	2324      	movs	r3, #36	; 0x24
 80071d2:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 80071d6:	6822      	ldr	r2, [r4, #0]
 80071d8:	68d3      	ldr	r3, [r2, #12]
 80071da:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80071de:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 80071e0:	4620      	mov	r0, r4
 80071e2:	f7ff fe3f 	bl	8006e64 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80071e6:	6822      	ldr	r2, [r4, #0]
 80071e8:	6913      	ldr	r3, [r2, #16]
 80071ea:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 80071ee:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80071f0:	6822      	ldr	r2, [r4, #0]
 80071f2:	6953      	ldr	r3, [r2, #20]
 80071f4:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 80071f8:	6153      	str	r3, [r2, #20]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADD, Address);
 80071fa:	6823      	ldr	r3, [r4, #0]
 80071fc:	6919      	ldr	r1, [r3, #16]
 80071fe:	f021 010f 	bic.w	r1, r1, #15
 8007202:	430d      	orrs	r5, r1
 8007204:	611d      	str	r5, [r3, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_WAKE, WakeUpMethod);
 8007206:	6821      	ldr	r1, [r4, #0]
 8007208:	68cb      	ldr	r3, [r1, #12]
 800720a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800720e:	4333      	orrs	r3, r6
 8007210:	60cb      	str	r3, [r1, #12]
  __HAL_UART_ENABLE(huart);
 8007212:	6822      	ldr	r2, [r4, #0]
 8007214:	68d3      	ldr	r3, [r2, #12]
 8007216:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800721a:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800721c:	2000      	movs	r0, #0
 800721e:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8007220:	2320      	movs	r3, #32
 8007222:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8007226:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 800722a:	bd70      	pop	{r4, r5, r6, pc}
    huart->Lock = HAL_UNLOCKED;
 800722c:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8007230:	f7fa faa6 	bl	8001780 <HAL_UART_MspInit>
 8007234:	e7cc      	b.n	80071d0 <HAL_MultiProcessor_Init+0x14>
    return HAL_ERROR;
 8007236:	2001      	movs	r0, #1
 8007238:	4770      	bx	lr
{
 800723a:	4770      	bx	lr

0800723c <HAL_UART_DeInit>:
  if(huart == NULL)
 800723c:	b178      	cbz	r0, 800725e <HAL_UART_DeInit+0x22>
{
 800723e:	b510      	push	{r4, lr}
 8007240:	4604      	mov	r4, r0
  huart->gState = HAL_UART_STATE_BUSY;
 8007242:	2324      	movs	r3, #36	; 0x24
 8007244:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  HAL_UART_MspDeInit(huart);
 8007248:	f7fa fb10 	bl	800186c <HAL_UART_MspDeInit>
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800724c:	2000      	movs	r0, #0
 800724e:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_RESET;
 8007250:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_RESET;
 8007254:	f884 003a 	strb.w	r0, [r4, #58]	; 0x3a
  __HAL_UNLOCK(huart);
 8007258:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
  return HAL_OK;
 800725c:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800725e:	2001      	movs	r0, #1
 8007260:	4770      	bx	lr

08007262 <HAL_UART_Transmit>:
{
 8007262:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007266:	b082      	sub	sp, #8
 8007268:	461e      	mov	r6, r3
  if(huart->gState == HAL_UART_STATE_READY)
 800726a:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800726e:	b2db      	uxtb	r3, r3
 8007270:	2b20      	cmp	r3, #32
 8007272:	d004      	beq.n	800727e <HAL_UART_Transmit+0x1c>
    return HAL_BUSY;
 8007274:	2302      	movs	r3, #2
}
 8007276:	4618      	mov	r0, r3
 8007278:	b002      	add	sp, #8
 800727a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800727e:	4604      	mov	r4, r0
 8007280:	460d      	mov	r5, r1
 8007282:	4690      	mov	r8, r2
    if((pData == NULL) || (Size == 0U))
 8007284:	2900      	cmp	r1, #0
 8007286:	d055      	beq.n	8007334 <HAL_UART_Transmit+0xd2>
 8007288:	2a00      	cmp	r2, #0
 800728a:	d055      	beq.n	8007338 <HAL_UART_Transmit+0xd6>
    __HAL_LOCK(huart);
 800728c:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8007290:	2b01      	cmp	r3, #1
 8007292:	d101      	bne.n	8007298 <HAL_UART_Transmit+0x36>
 8007294:	2302      	movs	r3, #2
 8007296:	e7ee      	b.n	8007276 <HAL_UART_Transmit+0x14>
 8007298:	2301      	movs	r3, #1
 800729a:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800729e:	2300      	movs	r3, #0
 80072a0:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80072a2:	2321      	movs	r3, #33	; 0x21
 80072a4:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 80072a8:	f7fa fd90 	bl	8001dcc <HAL_GetTick>
 80072ac:	4607      	mov	r7, r0
    huart->TxXferSize = Size;
 80072ae:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    huart->TxXferCount = Size;
 80072b2:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    while(huart->TxXferCount > 0U)
 80072b6:	e010      	b.n	80072da <HAL_UART_Transmit+0x78>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80072b8:	9600      	str	r6, [sp, #0]
 80072ba:	463b      	mov	r3, r7
 80072bc:	2200      	movs	r2, #0
 80072be:	2180      	movs	r1, #128	; 0x80
 80072c0:	4620      	mov	r0, r4
 80072c2:	f7ff fea7 	bl	8007014 <UART_WaitOnFlagUntilTimeout>
 80072c6:	2800      	cmp	r0, #0
 80072c8:	d138      	bne.n	800733c <HAL_UART_Transmit+0xda>
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80072ca:	6822      	ldr	r2, [r4, #0]
 80072cc:	882b      	ldrh	r3, [r5, #0]
 80072ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80072d2:	6053      	str	r3, [r2, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 80072d4:	6923      	ldr	r3, [r4, #16]
 80072d6:	b9cb      	cbnz	r3, 800730c <HAL_UART_Transmit+0xaa>
          pData +=2U;
 80072d8:	3502      	adds	r5, #2
    while(huart->TxXferCount > 0U)
 80072da:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 80072dc:	b29b      	uxth	r3, r3
 80072de:	b1bb      	cbz	r3, 8007310 <HAL_UART_Transmit+0xae>
      huart->TxXferCount--;
 80072e0:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 80072e2:	b29b      	uxth	r3, r3
 80072e4:	3b01      	subs	r3, #1
 80072e6:	b29b      	uxth	r3, r3
 80072e8:	84e3      	strh	r3, [r4, #38]	; 0x26
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 80072ea:	68a3      	ldr	r3, [r4, #8]
 80072ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80072f0:	d0e2      	beq.n	80072b8 <HAL_UART_Transmit+0x56>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80072f2:	9600      	str	r6, [sp, #0]
 80072f4:	463b      	mov	r3, r7
 80072f6:	2200      	movs	r2, #0
 80072f8:	2180      	movs	r1, #128	; 0x80
 80072fa:	4620      	mov	r0, r4
 80072fc:	f7ff fe8a 	bl	8007014 <UART_WaitOnFlagUntilTimeout>
 8007300:	b9f0      	cbnz	r0, 8007340 <HAL_UART_Transmit+0xde>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8007302:	6823      	ldr	r3, [r4, #0]
 8007304:	782a      	ldrb	r2, [r5, #0]
 8007306:	605a      	str	r2, [r3, #4]
 8007308:	3501      	adds	r5, #1
 800730a:	e7e6      	b.n	80072da <HAL_UART_Transmit+0x78>
          pData +=1U;
 800730c:	3501      	adds	r5, #1
 800730e:	e7e4      	b.n	80072da <HAL_UART_Transmit+0x78>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007310:	9600      	str	r6, [sp, #0]
 8007312:	463b      	mov	r3, r7
 8007314:	2200      	movs	r2, #0
 8007316:	2140      	movs	r1, #64	; 0x40
 8007318:	4620      	mov	r0, r4
 800731a:	f7ff fe7b 	bl	8007014 <UART_WaitOnFlagUntilTimeout>
 800731e:	4603      	mov	r3, r0
 8007320:	b108      	cbz	r0, 8007326 <HAL_UART_Transmit+0xc4>
      return HAL_TIMEOUT;
 8007322:	2303      	movs	r3, #3
 8007324:	e7a7      	b.n	8007276 <HAL_UART_Transmit+0x14>
    huart->gState = HAL_UART_STATE_READY;
 8007326:	2220      	movs	r2, #32
 8007328:	f884 2039 	strb.w	r2, [r4, #57]	; 0x39
    __HAL_UNLOCK(huart);
 800732c:	2200      	movs	r2, #0
 800732e:	f884 2038 	strb.w	r2, [r4, #56]	; 0x38
    return HAL_OK;
 8007332:	e7a0      	b.n	8007276 <HAL_UART_Transmit+0x14>
      return  HAL_ERROR;
 8007334:	2301      	movs	r3, #1
 8007336:	e79e      	b.n	8007276 <HAL_UART_Transmit+0x14>
 8007338:	2301      	movs	r3, #1
 800733a:	e79c      	b.n	8007276 <HAL_UART_Transmit+0x14>
          return HAL_TIMEOUT;
 800733c:	2303      	movs	r3, #3
 800733e:	e79a      	b.n	8007276 <HAL_UART_Transmit+0x14>
          return HAL_TIMEOUT;
 8007340:	2303      	movs	r3, #3
 8007342:	e798      	b.n	8007276 <HAL_UART_Transmit+0x14>

08007344 <HAL_UART_Receive>:
{
 8007344:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007348:	b082      	sub	sp, #8
 800734a:	461e      	mov	r6, r3
  if(huart->RxState == HAL_UART_STATE_READY)
 800734c:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 8007350:	b2db      	uxtb	r3, r3
 8007352:	2b20      	cmp	r3, #32
 8007354:	d003      	beq.n	800735e <HAL_UART_Receive+0x1a>
    return HAL_BUSY;
 8007356:	2002      	movs	r0, #2
}
 8007358:	b002      	add	sp, #8
 800735a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800735e:	4604      	mov	r4, r0
 8007360:	460d      	mov	r5, r1
 8007362:	4690      	mov	r8, r2
    if((pData == NULL) || (Size == 0U))
 8007364:	2900      	cmp	r1, #0
 8007366:	d058      	beq.n	800741a <HAL_UART_Receive+0xd6>
 8007368:	2a00      	cmp	r2, #0
 800736a:	d058      	beq.n	800741e <HAL_UART_Receive+0xda>
    __HAL_LOCK(huart);
 800736c:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8007370:	2b01      	cmp	r3, #1
 8007372:	d101      	bne.n	8007378 <HAL_UART_Receive+0x34>
 8007374:	2002      	movs	r0, #2
 8007376:	e7ef      	b.n	8007358 <HAL_UART_Receive+0x14>
 8007378:	2301      	movs	r3, #1
 800737a:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800737e:	2300      	movs	r3, #0
 8007380:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007382:	2322      	movs	r3, #34	; 0x22
 8007384:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
    tickstart = HAL_GetTick();
 8007388:	f7fa fd20 	bl	8001dcc <HAL_GetTick>
 800738c:	4607      	mov	r7, r0
    huart->RxXferSize = Size;
 800738e:	f8a4 802c 	strh.w	r8, [r4, #44]	; 0x2c
    huart->RxXferCount = Size;
 8007392:	f8a4 802e 	strh.w	r8, [r4, #46]	; 0x2e
    while(huart->RxXferCount > 0U)
 8007396:	e01d      	b.n	80073d4 <HAL_UART_Receive+0x90>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8007398:	9600      	str	r6, [sp, #0]
 800739a:	463b      	mov	r3, r7
 800739c:	2200      	movs	r2, #0
 800739e:	2120      	movs	r1, #32
 80073a0:	4620      	mov	r0, r4
 80073a2:	f7ff fe37 	bl	8007014 <UART_WaitOnFlagUntilTimeout>
 80073a6:	2800      	cmp	r0, #0
 80073a8:	d13b      	bne.n	8007422 <HAL_UART_Receive+0xde>
        if(huart->Init.Parity == UART_PARITY_NONE)
 80073aa:	6923      	ldr	r3, [r4, #16]
 80073ac:	b933      	cbnz	r3, 80073bc <HAL_UART_Receive+0x78>
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80073ae:	6823      	ldr	r3, [r4, #0]
 80073b0:	685b      	ldr	r3, [r3, #4]
 80073b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80073b6:	f825 3b02 	strh.w	r3, [r5], #2
 80073ba:	e00b      	b.n	80073d4 <HAL_UART_Receive+0x90>
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80073bc:	6823      	ldr	r3, [r4, #0]
 80073be:	685b      	ldr	r3, [r3, #4]
 80073c0:	b2db      	uxtb	r3, r3
 80073c2:	f825 3b01 	strh.w	r3, [r5], #1
 80073c6:	e005      	b.n	80073d4 <HAL_UART_Receive+0x90>
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80073c8:	6823      	ldr	r3, [r4, #0]
 80073ca:	685b      	ldr	r3, [r3, #4]
 80073cc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80073d0:	702b      	strb	r3, [r5, #0]
 80073d2:	3501      	adds	r5, #1
    while(huart->RxXferCount > 0U)
 80073d4:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 80073d6:	b29b      	uxth	r3, r3
 80073d8:	b1c3      	cbz	r3, 800740c <HAL_UART_Receive+0xc8>
      huart->RxXferCount--;
 80073da:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 80073dc:	b29b      	uxth	r3, r3
 80073de:	3b01      	subs	r3, #1
 80073e0:	b29b      	uxth	r3, r3
 80073e2:	85e3      	strh	r3, [r4, #46]	; 0x2e
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 80073e4:	68a3      	ldr	r3, [r4, #8]
 80073e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80073ea:	d0d5      	beq.n	8007398 <HAL_UART_Receive+0x54>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80073ec:	9600      	str	r6, [sp, #0]
 80073ee:	463b      	mov	r3, r7
 80073f0:	2200      	movs	r2, #0
 80073f2:	2120      	movs	r1, #32
 80073f4:	4620      	mov	r0, r4
 80073f6:	f7ff fe0d 	bl	8007014 <UART_WaitOnFlagUntilTimeout>
 80073fa:	b9a0      	cbnz	r0, 8007426 <HAL_UART_Receive+0xe2>
        if(huart->Init.Parity == UART_PARITY_NONE)
 80073fc:	6923      	ldr	r3, [r4, #16]
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d1e2      	bne.n	80073c8 <HAL_UART_Receive+0x84>
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007402:	6823      	ldr	r3, [r4, #0]
 8007404:	685b      	ldr	r3, [r3, #4]
 8007406:	702b      	strb	r3, [r5, #0]
 8007408:	3501      	adds	r5, #1
 800740a:	e7e3      	b.n	80073d4 <HAL_UART_Receive+0x90>
    huart->RxState = HAL_UART_STATE_READY;
 800740c:	2320      	movs	r3, #32
 800740e:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
    __HAL_UNLOCK(huart);
 8007412:	2000      	movs	r0, #0
 8007414:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
    return HAL_OK;
 8007418:	e79e      	b.n	8007358 <HAL_UART_Receive+0x14>
      return  HAL_ERROR;
 800741a:	2001      	movs	r0, #1
 800741c:	e79c      	b.n	8007358 <HAL_UART_Receive+0x14>
 800741e:	2001      	movs	r0, #1
 8007420:	e79a      	b.n	8007358 <HAL_UART_Receive+0x14>
          return HAL_TIMEOUT;
 8007422:	2003      	movs	r0, #3
 8007424:	e798      	b.n	8007358 <HAL_UART_Receive+0x14>
          return HAL_TIMEOUT;
 8007426:	2003      	movs	r0, #3
 8007428:	e796      	b.n	8007358 <HAL_UART_Receive+0x14>

0800742a <HAL_UART_Transmit_IT>:
  if(huart->gState == HAL_UART_STATE_READY)
 800742a:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800742e:	b2db      	uxtb	r3, r3
 8007430:	2b20      	cmp	r3, #32
 8007432:	d001      	beq.n	8007438 <HAL_UART_Transmit_IT+0xe>
    return HAL_BUSY;
 8007434:	2002      	movs	r0, #2
 8007436:	4770      	bx	lr
    if((pData == NULL) || (Size == 0U)) 
 8007438:	b1a9      	cbz	r1, 8007466 <HAL_UART_Transmit_IT+0x3c>
 800743a:	b1b2      	cbz	r2, 800746a <HAL_UART_Transmit_IT+0x40>
    __HAL_LOCK(huart);
 800743c:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8007440:	2b01      	cmp	r3, #1
 8007442:	d014      	beq.n	800746e <HAL_UART_Transmit_IT+0x44>
    huart->pTxBuffPtr = pData;
 8007444:	6201      	str	r1, [r0, #32]
    huart->TxXferSize = Size;
 8007446:	8482      	strh	r2, [r0, #36]	; 0x24
    huart->TxXferCount = Size;
 8007448:	84c2      	strh	r2, [r0, #38]	; 0x26
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800744a:	2300      	movs	r3, #0
 800744c:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800744e:	2221      	movs	r2, #33	; 0x21
 8007450:	f880 2039 	strb.w	r2, [r0, #57]	; 0x39
    __HAL_UNLOCK(huart);
 8007454:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8007458:	6801      	ldr	r1, [r0, #0]
 800745a:	68ca      	ldr	r2, [r1, #12]
 800745c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007460:	60ca      	str	r2, [r1, #12]
    return HAL_OK;
 8007462:	4618      	mov	r0, r3
 8007464:	4770      	bx	lr
      return HAL_ERROR;
 8007466:	2001      	movs	r0, #1
 8007468:	4770      	bx	lr
 800746a:	2001      	movs	r0, #1
 800746c:	4770      	bx	lr
    __HAL_LOCK(huart);
 800746e:	2002      	movs	r0, #2
}
 8007470:	4770      	bx	lr

08007472 <HAL_UART_Receive_IT>:
  if(huart->RxState == HAL_UART_STATE_READY)
 8007472:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 8007476:	b2db      	uxtb	r3, r3
 8007478:	2b20      	cmp	r3, #32
 800747a:	d001      	beq.n	8007480 <HAL_UART_Receive_IT+0xe>
    return HAL_BUSY;
 800747c:	2002      	movs	r0, #2
 800747e:	4770      	bx	lr
    if((pData == NULL) || (Size == 0U))
 8007480:	b1f9      	cbz	r1, 80074c2 <HAL_UART_Receive_IT+0x50>
 8007482:	b302      	cbz	r2, 80074c6 <HAL_UART_Receive_IT+0x54>
    __HAL_LOCK(huart);
 8007484:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8007488:	2b01      	cmp	r3, #1
 800748a:	d01e      	beq.n	80074ca <HAL_UART_Receive_IT+0x58>
    huart->pRxBuffPtr = pData;
 800748c:	6281      	str	r1, [r0, #40]	; 0x28
    huart->RxXferSize = Size;
 800748e:	8582      	strh	r2, [r0, #44]	; 0x2c
    huart->RxXferCount = Size;
 8007490:	85c2      	strh	r2, [r0, #46]	; 0x2e
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007492:	2300      	movs	r3, #0
 8007494:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007496:	2222      	movs	r2, #34	; 0x22
 8007498:	f880 203a 	strb.w	r2, [r0, #58]	; 0x3a
    __HAL_UNLOCK(huart);
 800749c:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80074a0:	6801      	ldr	r1, [r0, #0]
 80074a2:	68ca      	ldr	r2, [r1, #12]
 80074a4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80074a8:	60ca      	str	r2, [r1, #12]
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80074aa:	6801      	ldr	r1, [r0, #0]
 80074ac:	694a      	ldr	r2, [r1, #20]
 80074ae:	f042 0201 	orr.w	r2, r2, #1
 80074b2:	614a      	str	r2, [r1, #20]
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80074b4:	6801      	ldr	r1, [r0, #0]
 80074b6:	68ca      	ldr	r2, [r1, #12]
 80074b8:	f042 0220 	orr.w	r2, r2, #32
 80074bc:	60ca      	str	r2, [r1, #12]
    return HAL_OK;
 80074be:	4618      	mov	r0, r3
 80074c0:	4770      	bx	lr
      return HAL_ERROR;
 80074c2:	2001      	movs	r0, #1
 80074c4:	4770      	bx	lr
 80074c6:	2001      	movs	r0, #1
 80074c8:	4770      	bx	lr
    __HAL_LOCK(huart);
 80074ca:	2002      	movs	r0, #2
}
 80074cc:	4770      	bx	lr

080074ce <HAL_UART_Transmit_DMA>:
{
 80074ce:	b538      	push	{r3, r4, r5, lr}
  if(huart->gState == HAL_UART_STATE_READY)
 80074d0:	f890 4039 	ldrb.w	r4, [r0, #57]	; 0x39
 80074d4:	b2e4      	uxtb	r4, r4
 80074d6:	2c20      	cmp	r4, #32
 80074d8:	d001      	beq.n	80074de <HAL_UART_Transmit_DMA+0x10>
    return HAL_BUSY;
 80074da:	2002      	movs	r0, #2
 80074dc:	bd38      	pop	{r3, r4, r5, pc}
    if((pData == NULL) || (Size == 0U))
 80074de:	2900      	cmp	r1, #0
 80074e0:	d031      	beq.n	8007546 <HAL_UART_Transmit_DMA+0x78>
 80074e2:	2a00      	cmp	r2, #0
 80074e4:	d031      	beq.n	800754a <HAL_UART_Transmit_DMA+0x7c>
    __HAL_LOCK(huart);
 80074e6:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 80074ea:	2b01      	cmp	r3, #1
 80074ec:	d101      	bne.n	80074f2 <HAL_UART_Transmit_DMA+0x24>
 80074ee:	2002      	movs	r0, #2
}
 80074f0:	bd38      	pop	{r3, r4, r5, pc}
 80074f2:	4613      	mov	r3, r2
 80074f4:	4604      	mov	r4, r0
    __HAL_LOCK(huart);
 80074f6:	2201      	movs	r2, #1
 80074f8:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    huart->pTxBuffPtr = pData;
 80074fc:	6201      	str	r1, [r0, #32]
    huart->TxXferSize = Size;
 80074fe:	8483      	strh	r3, [r0, #36]	; 0x24
    huart->TxXferCount = Size;
 8007500:	84c3      	strh	r3, [r0, #38]	; 0x26
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007502:	2500      	movs	r5, #0
 8007504:	63c5      	str	r5, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007506:	2221      	movs	r2, #33	; 0x21
 8007508:	f880 2039 	strb.w	r2, [r0, #57]	; 0x39
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800750c:	6b02      	ldr	r2, [r0, #48]	; 0x30
 800750e:	4810      	ldr	r0, [pc, #64]	; (8007550 <HAL_UART_Transmit_DMA+0x82>)
 8007510:	6290      	str	r0, [r2, #40]	; 0x28
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8007512:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8007514:	480f      	ldr	r0, [pc, #60]	; (8007554 <HAL_UART_Transmit_DMA+0x86>)
 8007516:	62d0      	str	r0, [r2, #44]	; 0x2c
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8007518:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800751a:	480f      	ldr	r0, [pc, #60]	; (8007558 <HAL_UART_Transmit_DMA+0x8a>)
 800751c:	6310      	str	r0, [r2, #48]	; 0x30
    huart->hdmatx->XferAbortCallback = NULL;
 800751e:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8007520:	6355      	str	r5, [r2, #52]	; 0x34
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t*)tmp, (uint32_t)&huart->Instance->DR, Size);
 8007522:	6822      	ldr	r2, [r4, #0]
 8007524:	3204      	adds	r2, #4
 8007526:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8007528:	f7fa fe9c 	bl	8002264 <HAL_DMA_Start_IT>
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800752c:	6823      	ldr	r3, [r4, #0]
 800752e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007532:	601a      	str	r2, [r3, #0]
    __HAL_UNLOCK(huart);
 8007534:	f884 5038 	strb.w	r5, [r4, #56]	; 0x38
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007538:	6822      	ldr	r2, [r4, #0]
 800753a:	6953      	ldr	r3, [r2, #20]
 800753c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007540:	6153      	str	r3, [r2, #20]
    return HAL_OK;
 8007542:	4628      	mov	r0, r5
 8007544:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_ERROR;
 8007546:	2001      	movs	r0, #1
 8007548:	bd38      	pop	{r3, r4, r5, pc}
 800754a:	2001      	movs	r0, #1
 800754c:	bd38      	pop	{r3, r4, r5, pc}
 800754e:	bf00      	nop
 8007550:	0800783b 	.word	0x0800783b
 8007554:	08007887 	.word	0x08007887
 8007558:	0800797d 	.word	0x0800797d

0800755c <HAL_UART_Receive_DMA>:
{
 800755c:	b530      	push	{r4, r5, lr}
 800755e:	b083      	sub	sp, #12
  if(huart->RxState == HAL_UART_STATE_READY) 
 8007560:	f890 403a 	ldrb.w	r4, [r0, #58]	; 0x3a
 8007564:	b2e4      	uxtb	r4, r4
 8007566:	2c20      	cmp	r4, #32
 8007568:	d002      	beq.n	8007570 <HAL_UART_Receive_DMA+0x14>
    return HAL_BUSY;
 800756a:	2002      	movs	r0, #2
}
 800756c:	b003      	add	sp, #12
 800756e:	bd30      	pop	{r4, r5, pc}
    if((pData == NULL) || (Size == 0U))
 8007570:	2900      	cmp	r1, #0
 8007572:	d03d      	beq.n	80075f0 <HAL_UART_Receive_DMA+0x94>
 8007574:	2a00      	cmp	r2, #0
 8007576:	d03d      	beq.n	80075f4 <HAL_UART_Receive_DMA+0x98>
    __HAL_LOCK(huart);
 8007578:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 800757c:	2b01      	cmp	r3, #1
 800757e:	d101      	bne.n	8007584 <HAL_UART_Receive_DMA+0x28>
 8007580:	2002      	movs	r0, #2
 8007582:	e7f3      	b.n	800756c <HAL_UART_Receive_DMA+0x10>
 8007584:	4613      	mov	r3, r2
 8007586:	460a      	mov	r2, r1
 8007588:	4604      	mov	r4, r0
 800758a:	2101      	movs	r1, #1
 800758c:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
    huart->pRxBuffPtr = pData;
 8007590:	6282      	str	r2, [r0, #40]	; 0x28
    huart->RxXferSize = Size;
 8007592:	8583      	strh	r3, [r0, #44]	; 0x2c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007594:	2500      	movs	r5, #0
 8007596:	63c5      	str	r5, [r0, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007598:	2122      	movs	r1, #34	; 0x22
 800759a:	f880 103a 	strb.w	r1, [r0, #58]	; 0x3a
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800759e:	6b41      	ldr	r1, [r0, #52]	; 0x34
 80075a0:	4815      	ldr	r0, [pc, #84]	; (80075f8 <HAL_UART_Receive_DMA+0x9c>)
 80075a2:	6288      	str	r0, [r1, #40]	; 0x28
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80075a4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80075a6:	4815      	ldr	r0, [pc, #84]	; (80075fc <HAL_UART_Receive_DMA+0xa0>)
 80075a8:	62c8      	str	r0, [r1, #44]	; 0x2c
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80075aa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80075ac:	4814      	ldr	r0, [pc, #80]	; (8007600 <HAL_UART_Receive_DMA+0xa4>)
 80075ae:	6308      	str	r0, [r1, #48]	; 0x30
    huart->hdmarx->XferAbortCallback = NULL;
 80075b0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80075b2:	634d      	str	r5, [r1, #52]	; 0x34
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t*)tmp, Size);
 80075b4:	6821      	ldr	r1, [r4, #0]
 80075b6:	3104      	adds	r1, #4
 80075b8:	6b60      	ldr	r0, [r4, #52]	; 0x34
 80075ba:	f7fa fe53 	bl	8002264 <HAL_DMA_Start_IT>
    __HAL_UART_CLEAR_OREFLAG(huart);
 80075be:	9501      	str	r5, [sp, #4]
 80075c0:	6823      	ldr	r3, [r4, #0]
 80075c2:	681a      	ldr	r2, [r3, #0]
 80075c4:	9201      	str	r2, [sp, #4]
 80075c6:	685a      	ldr	r2, [r3, #4]
 80075c8:	9201      	str	r2, [sp, #4]
 80075ca:	9a01      	ldr	r2, [sp, #4]
    __HAL_UNLOCK(huart);
 80075cc:	f884 5038 	strb.w	r5, [r4, #56]	; 0x38
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80075d0:	68da      	ldr	r2, [r3, #12]
 80075d2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80075d6:	60da      	str	r2, [r3, #12]
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80075d8:	6822      	ldr	r2, [r4, #0]
 80075da:	6953      	ldr	r3, [r2, #20]
 80075dc:	f043 0301 	orr.w	r3, r3, #1
 80075e0:	6153      	str	r3, [r2, #20]
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80075e2:	6822      	ldr	r2, [r4, #0]
 80075e4:	6953      	ldr	r3, [r2, #20]
 80075e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80075ea:	6153      	str	r3, [r2, #20]
    return HAL_OK;
 80075ec:	4628      	mov	r0, r5
 80075ee:	e7bd      	b.n	800756c <HAL_UART_Receive_DMA+0x10>
      return HAL_ERROR;
 80075f0:	2001      	movs	r0, #1
 80075f2:	e7bb      	b.n	800756c <HAL_UART_Receive_DMA+0x10>
 80075f4:	2001      	movs	r0, #1
 80075f6:	e7b9      	b.n	800756c <HAL_UART_Receive_DMA+0x10>
 80075f8:	08007893 	.word	0x08007893
 80075fc:	08007971 	.word	0x08007971
 8007600:	0800797d 	.word	0x0800797d

08007604 <HAL_UART_DMAPause>:
  __HAL_LOCK(huart);
 8007604:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8007608:	2b01      	cmp	r3, #1
 800760a:	d031      	beq.n	8007670 <HAL_UART_DMAPause+0x6c>
 800760c:	2301      	movs	r3, #1
 800760e:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8007612:	6801      	ldr	r1, [r0, #0]
 8007614:	694a      	ldr	r2, [r1, #20]
 8007616:	f002 0280 	and.w	r2, r2, #128	; 0x80
  if((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800761a:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800761e:	b2db      	uxtb	r3, r3
 8007620:	2b21      	cmp	r3, #33	; 0x21
 8007622:	d00d      	beq.n	8007640 <HAL_UART_DMAPause+0x3c>
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007624:	6801      	ldr	r1, [r0, #0]
 8007626:	694a      	ldr	r2, [r1, #20]
 8007628:	f002 0240 	and.w	r2, r2, #64	; 0x40
  if((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800762c:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 8007630:	b2db      	uxtb	r3, r3
 8007632:	2b22      	cmp	r3, #34	; 0x22
 8007634:	d00b      	beq.n	800764e <HAL_UART_DMAPause+0x4a>
  __HAL_UNLOCK(huart);
 8007636:	2300      	movs	r3, #0
 8007638:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  return HAL_OK;
 800763c:	4618      	mov	r0, r3
 800763e:	4770      	bx	lr
  if((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8007640:	2a00      	cmp	r2, #0
 8007642:	d0ef      	beq.n	8007624 <HAL_UART_DMAPause+0x20>
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007644:	694b      	ldr	r3, [r1, #20]
 8007646:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800764a:	614b      	str	r3, [r1, #20]
 800764c:	e7ea      	b.n	8007624 <HAL_UART_DMAPause+0x20>
  if((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800764e:	2a00      	cmp	r2, #0
 8007650:	d0f1      	beq.n	8007636 <HAL_UART_DMAPause+0x32>
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007652:	68cb      	ldr	r3, [r1, #12]
 8007654:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007658:	60cb      	str	r3, [r1, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800765a:	6802      	ldr	r2, [r0, #0]
 800765c:	6953      	ldr	r3, [r2, #20]
 800765e:	f023 0301 	bic.w	r3, r3, #1
 8007662:	6153      	str	r3, [r2, #20]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007664:	6802      	ldr	r2, [r0, #0]
 8007666:	6953      	ldr	r3, [r2, #20]
 8007668:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800766c:	6153      	str	r3, [r2, #20]
 800766e:	e7e2      	b.n	8007636 <HAL_UART_DMAPause+0x32>
  __HAL_LOCK(huart);
 8007670:	2002      	movs	r0, #2
}
 8007672:	4770      	bx	lr

08007674 <HAL_UART_DMAResume>:
  __HAL_LOCK(huart);
 8007674:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8007678:	2b01      	cmp	r3, #1
 800767a:	d034      	beq.n	80076e6 <HAL_UART_DMAResume+0x72>
 800767c:	2301      	movs	r3, #1
 800767e:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  if(huart->gState == HAL_UART_STATE_BUSY_TX)
 8007682:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8007686:	b2db      	uxtb	r3, r3
 8007688:	2b21      	cmp	r3, #33	; 0x21
 800768a:	d009      	beq.n	80076a0 <HAL_UART_DMAResume+0x2c>
  if(huart->RxState == HAL_UART_STATE_BUSY_RX)
 800768c:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 8007690:	b2db      	uxtb	r3, r3
 8007692:	2b22      	cmp	r3, #34	; 0x22
 8007694:	d00a      	beq.n	80076ac <HAL_UART_DMAResume+0x38>
  __HAL_UNLOCK(huart);
 8007696:	2300      	movs	r3, #0
 8007698:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  return HAL_OK;
 800769c:	4618      	mov	r0, r3
}
 800769e:	4770      	bx	lr
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80076a0:	6802      	ldr	r2, [r0, #0]
 80076a2:	6953      	ldr	r3, [r2, #20]
 80076a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80076a8:	6153      	str	r3, [r2, #20]
 80076aa:	e7ef      	b.n	800768c <HAL_UART_DMAResume+0x18>
{
 80076ac:	b082      	sub	sp, #8
    __HAL_UART_CLEAR_OREFLAG(huart);
 80076ae:	2300      	movs	r3, #0
 80076b0:	9301      	str	r3, [sp, #4]
 80076b2:	6803      	ldr	r3, [r0, #0]
 80076b4:	681a      	ldr	r2, [r3, #0]
 80076b6:	9201      	str	r2, [sp, #4]
 80076b8:	685a      	ldr	r2, [r3, #4]
 80076ba:	9201      	str	r2, [sp, #4]
 80076bc:	9a01      	ldr	r2, [sp, #4]
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80076be:	68da      	ldr	r2, [r3, #12]
 80076c0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80076c4:	60da      	str	r2, [r3, #12]
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80076c6:	6802      	ldr	r2, [r0, #0]
 80076c8:	6953      	ldr	r3, [r2, #20]
 80076ca:	f043 0301 	orr.w	r3, r3, #1
 80076ce:	6153      	str	r3, [r2, #20]
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80076d0:	6802      	ldr	r2, [r0, #0]
 80076d2:	6953      	ldr	r3, [r2, #20]
 80076d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80076d8:	6153      	str	r3, [r2, #20]
  __HAL_UNLOCK(huart);
 80076da:	2300      	movs	r3, #0
 80076dc:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  return HAL_OK;
 80076e0:	4618      	mov	r0, r3
}
 80076e2:	b002      	add	sp, #8
 80076e4:	4770      	bx	lr
  __HAL_LOCK(huart);
 80076e6:	2002      	movs	r0, #2
 80076e8:	4770      	bx	lr

080076ea <HAL_UART_DMAStop>:
{
 80076ea:	b510      	push	{r4, lr}
 80076ec:	4604      	mov	r4, r0
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80076ee:	6801      	ldr	r1, [r0, #0]
 80076f0:	694a      	ldr	r2, [r1, #20]
  if((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80076f2:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80076f6:	b2db      	uxtb	r3, r3
 80076f8:	2b21      	cmp	r3, #33	; 0x21
 80076fa:	d00a      	beq.n	8007712 <HAL_UART_DMAStop+0x28>
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80076fc:	6821      	ldr	r1, [r4, #0]
 80076fe:	694a      	ldr	r2, [r1, #20]
 8007700:	f002 0240 	and.w	r2, r2, #64	; 0x40
  if((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8007704:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
 8007708:	b2db      	uxtb	r3, r3
 800770a:	2b22      	cmp	r3, #34	; 0x22
 800770c:	d011      	beq.n	8007732 <HAL_UART_DMAStop+0x48>
}
 800770e:	2000      	movs	r0, #0
 8007710:	bd10      	pop	{r4, pc}
 8007712:	f002 0280 	and.w	r2, r2, #128	; 0x80
  if((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8007716:	2a00      	cmp	r2, #0
 8007718:	d0f0      	beq.n	80076fc <HAL_UART_DMAStop+0x12>
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800771a:	694b      	ldr	r3, [r1, #20]
 800771c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007720:	614b      	str	r3, [r1, #20]
    if(huart->hdmatx != NULL)
 8007722:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8007724:	b108      	cbz	r0, 800772a <HAL_UART_DMAStop+0x40>
      HAL_DMA_Abort(huart->hdmatx);
 8007726:	f7fa fdd7 	bl	80022d8 <HAL_DMA_Abort>
    UART_EndTxTransfer(huart);
 800772a:	4620      	mov	r0, r4
 800772c:	f7ff fb4e 	bl	8006dcc <UART_EndTxTransfer>
 8007730:	e7e4      	b.n	80076fc <HAL_UART_DMAStop+0x12>
  if((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8007732:	2a00      	cmp	r2, #0
 8007734:	d0eb      	beq.n	800770e <HAL_UART_DMAStop+0x24>
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007736:	694b      	ldr	r3, [r1, #20]
 8007738:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800773c:	614b      	str	r3, [r1, #20]
    if(huart->hdmarx != NULL)
 800773e:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8007740:	b108      	cbz	r0, 8007746 <HAL_UART_DMAStop+0x5c>
      HAL_DMA_Abort(huart->hdmarx);
 8007742:	f7fa fdc9 	bl	80022d8 <HAL_DMA_Abort>
    UART_EndRxTransfer(huart);
 8007746:	4620      	mov	r0, r4
 8007748:	f7ff fb49 	bl	8006dde <UART_EndRxTransfer>
 800774c:	e7df      	b.n	800770e <HAL_UART_DMAStop+0x24>

0800774e <HAL_UART_Abort>:
{
 800774e:	b510      	push	{r4, lr}
 8007750:	4604      	mov	r4, r0
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TCIE));
 8007752:	6802      	ldr	r2, [r0, #0]
 8007754:	68d3      	ldr	r3, [r2, #12]
 8007756:	f423 73f0 	bic.w	r3, r3, #480	; 0x1e0
 800775a:	60d3      	str	r3, [r2, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800775c:	6802      	ldr	r2, [r0, #0]
 800775e:	6953      	ldr	r3, [r2, #20]
 8007760:	f023 0301 	bic.w	r3, r3, #1
 8007764:	6153      	str	r3, [r2, #20]
  if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8007766:	6803      	ldr	r3, [r0, #0]
 8007768:	695a      	ldr	r2, [r3, #20]
 800776a:	f012 0f80 	tst.w	r2, #128	; 0x80
 800776e:	d00a      	beq.n	8007786 <HAL_UART_Abort+0x38>
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007770:	695a      	ldr	r2, [r3, #20]
 8007772:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007776:	615a      	str	r2, [r3, #20]
    if(huart->hdmatx != NULL)
 8007778:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800777a:	b123      	cbz	r3, 8007786 <HAL_UART_Abort+0x38>
      huart->hdmatx->XferAbortCallback = NULL;
 800777c:	2200      	movs	r2, #0
 800777e:	635a      	str	r2, [r3, #52]	; 0x34
      HAL_DMA_Abort(huart->hdmatx);
 8007780:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8007782:	f7fa fda9 	bl	80022d8 <HAL_DMA_Abort>
  if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007786:	6823      	ldr	r3, [r4, #0]
 8007788:	695a      	ldr	r2, [r3, #20]
 800778a:	f012 0f40 	tst.w	r2, #64	; 0x40
 800778e:	d00a      	beq.n	80077a6 <HAL_UART_Abort+0x58>
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007790:	695a      	ldr	r2, [r3, #20]
 8007792:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007796:	615a      	str	r2, [r3, #20]
    if(huart->hdmarx != NULL)
 8007798:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800779a:	b123      	cbz	r3, 80077a6 <HAL_UART_Abort+0x58>
      huart->hdmarx->XferAbortCallback = NULL;
 800779c:	2200      	movs	r2, #0
 800779e:	635a      	str	r2, [r3, #52]	; 0x34
      HAL_DMA_Abort(huart->hdmarx);
 80077a0:	6b60      	ldr	r0, [r4, #52]	; 0x34
 80077a2:	f7fa fd99 	bl	80022d8 <HAL_DMA_Abort>
  huart->TxXferCount = 0x00U;
 80077a6:	2000      	movs	r0, #0
 80077a8:	84e0      	strh	r0, [r4, #38]	; 0x26
  huart->RxXferCount = 0x00U;
 80077aa:	85e0      	strh	r0, [r4, #46]	; 0x2e
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80077ac:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->RxState = HAL_UART_STATE_READY;
 80077ae:	2320      	movs	r3, #32
 80077b0:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  huart->gState = HAL_UART_STATE_READY;
 80077b4:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
}
 80077b8:	bd10      	pop	{r4, pc}

080077ba <HAL_UART_AbortTransmit>:
{
 80077ba:	b510      	push	{r4, lr}
 80077bc:	4604      	mov	r4, r0
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80077be:	6802      	ldr	r2, [r0, #0]
 80077c0:	68d3      	ldr	r3, [r2, #12]
 80077c2:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80077c6:	60d3      	str	r3, [r2, #12]
  if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 80077c8:	6803      	ldr	r3, [r0, #0]
 80077ca:	695a      	ldr	r2, [r3, #20]
 80077cc:	f012 0f80 	tst.w	r2, #128	; 0x80
 80077d0:	d00a      	beq.n	80077e8 <HAL_UART_AbortTransmit+0x2e>
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80077d2:	695a      	ldr	r2, [r3, #20]
 80077d4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80077d8:	615a      	str	r2, [r3, #20]
    if(huart->hdmatx != NULL)
 80077da:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80077dc:	b123      	cbz	r3, 80077e8 <HAL_UART_AbortTransmit+0x2e>
      huart->hdmatx->XferAbortCallback = NULL;
 80077de:	2200      	movs	r2, #0
 80077e0:	635a      	str	r2, [r3, #52]	; 0x34
      HAL_DMA_Abort(huart->hdmatx);
 80077e2:	6b00      	ldr	r0, [r0, #48]	; 0x30
 80077e4:	f7fa fd78 	bl	80022d8 <HAL_DMA_Abort>
  huart->TxXferCount = 0x00U;
 80077e8:	2000      	movs	r0, #0
 80077ea:	84e0      	strh	r0, [r4, #38]	; 0x26
  huart->gState = HAL_UART_STATE_READY;
 80077ec:	2320      	movs	r3, #32
 80077ee:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
}
 80077f2:	bd10      	pop	{r4, pc}

080077f4 <HAL_UART_AbortReceive>:
{
 80077f4:	b510      	push	{r4, lr}
 80077f6:	4604      	mov	r4, r0
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80077f8:	6802      	ldr	r2, [r0, #0]
 80077fa:	68d3      	ldr	r3, [r2, #12]
 80077fc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007800:	60d3      	str	r3, [r2, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007802:	6802      	ldr	r2, [r0, #0]
 8007804:	6953      	ldr	r3, [r2, #20]
 8007806:	f023 0301 	bic.w	r3, r3, #1
 800780a:	6153      	str	r3, [r2, #20]
  if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800780c:	6803      	ldr	r3, [r0, #0]
 800780e:	695a      	ldr	r2, [r3, #20]
 8007810:	f012 0f40 	tst.w	r2, #64	; 0x40
 8007814:	d00a      	beq.n	800782c <HAL_UART_AbortReceive+0x38>
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007816:	695a      	ldr	r2, [r3, #20]
 8007818:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800781c:	615a      	str	r2, [r3, #20]
    if(huart->hdmarx != NULL)
 800781e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8007820:	b123      	cbz	r3, 800782c <HAL_UART_AbortReceive+0x38>
      huart->hdmarx->XferAbortCallback = NULL;
 8007822:	2200      	movs	r2, #0
 8007824:	635a      	str	r2, [r3, #52]	; 0x34
      HAL_DMA_Abort(huart->hdmarx);
 8007826:	6b40      	ldr	r0, [r0, #52]	; 0x34
 8007828:	f7fa fd56 	bl	80022d8 <HAL_DMA_Abort>
  huart->RxXferCount = 0x00U;
 800782c:	2000      	movs	r0, #0
 800782e:	85e0      	strh	r0, [r4, #46]	; 0x2e
  huart->RxState = HAL_UART_STATE_READY;
 8007830:	2320      	movs	r3, #32
 8007832:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
}
 8007836:	bd10      	pop	{r4, pc}
{
 8007838:	4770      	bx	lr

0800783a <UART_DMATransmitCplt>:
{
 800783a:	b508      	push	{r3, lr}
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800783c:	6a43      	ldr	r3, [r0, #36]	; 0x24
  if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800783e:	6802      	ldr	r2, [r0, #0]
 8007840:	6812      	ldr	r2, [r2, #0]
 8007842:	f012 0f20 	tst.w	r2, #32
 8007846:	d10c      	bne.n	8007862 <UART_DMATransmitCplt+0x28>
    huart->TxXferCount = 0U;
 8007848:	2200      	movs	r2, #0
 800784a:	84da      	strh	r2, [r3, #38]	; 0x26
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800784c:	6819      	ldr	r1, [r3, #0]
 800784e:	694a      	ldr	r2, [r1, #20]
 8007850:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007854:	614a      	str	r2, [r1, #20]
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007856:	681a      	ldr	r2, [r3, #0]
 8007858:	68d3      	ldr	r3, [r2, #12]
 800785a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800785e:	60d3      	str	r3, [r2, #12]
 8007860:	bd08      	pop	{r3, pc}
    HAL_UART_TxCpltCallback(huart);
 8007862:	4618      	mov	r0, r3
 8007864:	f7f8 fe82 	bl	800056c <HAL_UART_TxCpltCallback>
 8007868:	bd08      	pop	{r3, pc}

0800786a <UART_EndTransmit_IT>:
{
 800786a:	b508      	push	{r3, lr}
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800786c:	6801      	ldr	r1, [r0, #0]
 800786e:	68cb      	ldr	r3, [r1, #12]
 8007870:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007874:	60cb      	str	r3, [r1, #12]
  huart->gState = HAL_UART_STATE_READY;
 8007876:	2320      	movs	r3, #32
 8007878:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 800787c:	f7f8 fe76 	bl	800056c <HAL_UART_TxCpltCallback>
}
 8007880:	2000      	movs	r0, #0
 8007882:	bd08      	pop	{r3, pc}

08007884 <HAL_UART_TxHalfCpltCallback>:
{
 8007884:	4770      	bx	lr

08007886 <UART_DMATxHalfCplt>:
{
 8007886:	b508      	push	{r3, lr}
  HAL_UART_TxHalfCpltCallback(huart);
 8007888:	6a40      	ldr	r0, [r0, #36]	; 0x24
 800788a:	f7ff fffb 	bl	8007884 <HAL_UART_TxHalfCpltCallback>
 800788e:	bd08      	pop	{r3, pc}

08007890 <HAL_UART_RxCpltCallback>:
{
 8007890:	4770      	bx	lr

08007892 <UART_DMAReceiveCplt>:
{
 8007892:	b508      	push	{r3, lr}
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8007894:	6a43      	ldr	r3, [r0, #36]	; 0x24
  if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8007896:	6802      	ldr	r2, [r0, #0]
 8007898:	6812      	ldr	r2, [r2, #0]
 800789a:	f012 0f20 	tst.w	r2, #32
 800789e:	d113      	bne.n	80078c8 <UART_DMAReceiveCplt+0x36>
    huart->RxXferCount = 0U;
 80078a0:	2200      	movs	r2, #0
 80078a2:	85da      	strh	r2, [r3, #46]	; 0x2e
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80078a4:	6819      	ldr	r1, [r3, #0]
 80078a6:	68ca      	ldr	r2, [r1, #12]
 80078a8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80078ac:	60ca      	str	r2, [r1, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80078ae:	6819      	ldr	r1, [r3, #0]
 80078b0:	694a      	ldr	r2, [r1, #20]
 80078b2:	f022 0201 	bic.w	r2, r2, #1
 80078b6:	614a      	str	r2, [r1, #20]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80078b8:	6819      	ldr	r1, [r3, #0]
 80078ba:	694a      	ldr	r2, [r1, #20]
 80078bc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80078c0:	614a      	str	r2, [r1, #20]
    huart->RxState = HAL_UART_STATE_READY;
 80078c2:	2220      	movs	r2, #32
 80078c4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  HAL_UART_RxCpltCallback(huart);
 80078c8:	4618      	mov	r0, r3
 80078ca:	f7ff ffe1 	bl	8007890 <HAL_UART_RxCpltCallback>
 80078ce:	bd08      	pop	{r3, pc}

080078d0 <UART_Receive_IT>:
{
 80078d0:	b508      	push	{r3, lr}
  if(huart->RxState == HAL_UART_STATE_BUSY_RX) 
 80078d2:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 80078d6:	b2db      	uxtb	r3, r3
 80078d8:	2b22      	cmp	r3, #34	; 0x22
 80078da:	d001      	beq.n	80078e0 <UART_Receive_IT+0x10>
    return HAL_BUSY;
 80078dc:	2002      	movs	r0, #2
 80078de:	bd08      	pop	{r3, pc}
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 80078e0:	6883      	ldr	r3, [r0, #8]
 80078e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80078e6:	d00f      	beq.n	8007908 <UART_Receive_IT+0x38>
      if(huart->Init.Parity == UART_PARITY_NONE)
 80078e8:	6903      	ldr	r3, [r0, #16]
 80078ea:	bb0b      	cbnz	r3, 8007930 <UART_Receive_IT+0x60>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80078ec:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80078ee:	1c5a      	adds	r2, r3, #1
 80078f0:	6282      	str	r2, [r0, #40]	; 0x28
 80078f2:	6802      	ldr	r2, [r0, #0]
 80078f4:	6852      	ldr	r2, [r2, #4]
 80078f6:	701a      	strb	r2, [r3, #0]
    if(--huart->RxXferCount == 0U)
 80078f8:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 80078fa:	b29b      	uxth	r3, r3
 80078fc:	3b01      	subs	r3, #1
 80078fe:	b29b      	uxth	r3, r3
 8007900:	85c3      	strh	r3, [r0, #46]	; 0x2e
 8007902:	b1f3      	cbz	r3, 8007942 <UART_Receive_IT+0x72>
    return HAL_OK;
 8007904:	2000      	movs	r0, #0
}
 8007906:	bd08      	pop	{r3, pc}
      tmp = (uint16_t*) huart->pRxBuffPtr;
 8007908:	6a82      	ldr	r2, [r0, #40]	; 0x28
      if(huart->Init.Parity == UART_PARITY_NONE)
 800790a:	6903      	ldr	r3, [r0, #16]
 800790c:	b943      	cbnz	r3, 8007920 <UART_Receive_IT+0x50>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800790e:	6803      	ldr	r3, [r0, #0]
 8007910:	685b      	ldr	r3, [r3, #4]
 8007912:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007916:	8013      	strh	r3, [r2, #0]
        huart->pRxBuffPtr += 2U;
 8007918:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800791a:	3302      	adds	r3, #2
 800791c:	6283      	str	r3, [r0, #40]	; 0x28
 800791e:	e7eb      	b.n	80078f8 <UART_Receive_IT+0x28>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8007920:	6803      	ldr	r3, [r0, #0]
 8007922:	685b      	ldr	r3, [r3, #4]
 8007924:	b2db      	uxtb	r3, r3
 8007926:	8013      	strh	r3, [r2, #0]
        huart->pRxBuffPtr += 1U;
 8007928:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800792a:	3301      	adds	r3, #1
 800792c:	6283      	str	r3, [r0, #40]	; 0x28
 800792e:	e7e3      	b.n	80078f8 <UART_Receive_IT+0x28>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007930:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8007932:	1c53      	adds	r3, r2, #1
 8007934:	6283      	str	r3, [r0, #40]	; 0x28
 8007936:	6803      	ldr	r3, [r0, #0]
 8007938:	685b      	ldr	r3, [r3, #4]
 800793a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800793e:	7013      	strb	r3, [r2, #0]
 8007940:	e7da      	b.n	80078f8 <UART_Receive_IT+0x28>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007942:	6802      	ldr	r2, [r0, #0]
 8007944:	68d3      	ldr	r3, [r2, #12]
 8007946:	f023 0320 	bic.w	r3, r3, #32
 800794a:	60d3      	str	r3, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800794c:	6802      	ldr	r2, [r0, #0]
 800794e:	68d3      	ldr	r3, [r2, #12]
 8007950:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007954:	60d3      	str	r3, [r2, #12]
        __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007956:	6802      	ldr	r2, [r0, #0]
 8007958:	6953      	ldr	r3, [r2, #20]
 800795a:	f023 0301 	bic.w	r3, r3, #1
 800795e:	6153      	str	r3, [r2, #20]
      huart->RxState = HAL_UART_STATE_READY;
 8007960:	2320      	movs	r3, #32
 8007962:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
      HAL_UART_RxCpltCallback(huart);
 8007966:	f7ff ff93 	bl	8007890 <HAL_UART_RxCpltCallback>
      return HAL_OK;
 800796a:	2000      	movs	r0, #0
 800796c:	bd08      	pop	{r3, pc}

0800796e <HAL_UART_RxHalfCpltCallback>:
{
 800796e:	4770      	bx	lr

08007970 <UART_DMARxHalfCplt>:
{
 8007970:	b508      	push	{r3, lr}
  HAL_UART_RxHalfCpltCallback(huart); 
 8007972:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8007974:	f7ff fffb 	bl	800796e <HAL_UART_RxHalfCpltCallback>
 8007978:	bd08      	pop	{r3, pc}

0800797a <HAL_UART_ErrorCallback>:
{
 800797a:	4770      	bx	lr

0800797c <UART_DMAError>:
{
 800797c:	b510      	push	{r4, lr}
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800797e:	6a44      	ldr	r4, [r0, #36]	; 0x24
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8007980:	6823      	ldr	r3, [r4, #0]
 8007982:	695a      	ldr	r2, [r3, #20]
  if((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8007984:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 8007988:	b2db      	uxtb	r3, r3
 800798a:	2b21      	cmp	r3, #33	; 0x21
 800798c:	d010      	beq.n	80079b0 <UART_DMAError+0x34>
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR); 
 800798e:	6823      	ldr	r3, [r4, #0]
 8007990:	695a      	ldr	r2, [r3, #20]
 8007992:	f002 0240 	and.w	r2, r2, #64	; 0x40
  if((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8007996:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
 800799a:	b2db      	uxtb	r3, r3
 800799c:	2b22      	cmp	r3, #34	; 0x22
 800799e:	d011      	beq.n	80079c4 <UART_DMAError+0x48>
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80079a0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80079a2:	f043 0310 	orr.w	r3, r3, #16
 80079a6:	63e3      	str	r3, [r4, #60]	; 0x3c
  HAL_UART_ErrorCallback(huart);
 80079a8:	4620      	mov	r0, r4
 80079aa:	f7ff ffe6 	bl	800797a <HAL_UART_ErrorCallback>
 80079ae:	bd10      	pop	{r4, pc}
 80079b0:	f002 0280 	and.w	r2, r2, #128	; 0x80
  if((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80079b4:	2a00      	cmp	r2, #0
 80079b6:	d0ea      	beq.n	800798e <UART_DMAError+0x12>
    huart->TxXferCount = 0U;
 80079b8:	2300      	movs	r3, #0
 80079ba:	84e3      	strh	r3, [r4, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80079bc:	4620      	mov	r0, r4
 80079be:	f7ff fa05 	bl	8006dcc <UART_EndTxTransfer>
 80079c2:	e7e4      	b.n	800798e <UART_DMAError+0x12>
  if((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80079c4:	2a00      	cmp	r2, #0
 80079c6:	d0eb      	beq.n	80079a0 <UART_DMAError+0x24>
    huart->RxXferCount = 0U;
 80079c8:	2300      	movs	r3, #0
 80079ca:	85e3      	strh	r3, [r4, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80079cc:	4620      	mov	r0, r4
 80079ce:	f7ff fa06 	bl	8006dde <UART_EndRxTransfer>
 80079d2:	e7e5      	b.n	80079a0 <UART_DMAError+0x24>

080079d4 <HAL_UART_IRQHandler>:
{
 80079d4:	b510      	push	{r4, lr}
 80079d6:	4604      	mov	r4, r0
   uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80079d8:	6802      	ldr	r2, [r0, #0]
 80079da:	6813      	ldr	r3, [r2, #0]
   uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80079dc:	68d1      	ldr	r1, [r2, #12]
   uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80079de:	6952      	ldr	r2, [r2, #20]
  if(errorflags == RESET)
 80079e0:	f013 000f 	ands.w	r0, r3, #15
 80079e4:	d105      	bne.n	80079f2 <HAL_UART_IRQHandler+0x1e>
    if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80079e6:	f013 0f20 	tst.w	r3, #32
 80079ea:	d002      	beq.n	80079f2 <HAL_UART_IRQHandler+0x1e>
 80079ec:	f011 0f20 	tst.w	r1, #32
 80079f0:	d153      	bne.n	8007a9a <HAL_UART_IRQHandler+0xc6>
  if((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80079f2:	2800      	cmp	r0, #0
 80079f4:	d067      	beq.n	8007ac6 <HAL_UART_IRQHandler+0xf2>
 80079f6:	f012 0201 	ands.w	r2, r2, #1
 80079fa:	d102      	bne.n	8007a02 <HAL_UART_IRQHandler+0x2e>
 80079fc:	f411 7f90 	tst.w	r1, #288	; 0x120
 8007a00:	d061      	beq.n	8007ac6 <HAL_UART_IRQHandler+0xf2>
    if(((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007a02:	f013 0f01 	tst.w	r3, #1
 8007a06:	d006      	beq.n	8007a16 <HAL_UART_IRQHandler+0x42>
 8007a08:	f411 7f80 	tst.w	r1, #256	; 0x100
 8007a0c:	d003      	beq.n	8007a16 <HAL_UART_IRQHandler+0x42>
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007a0e:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8007a10:	f040 0001 	orr.w	r0, r0, #1
 8007a14:	63e0      	str	r0, [r4, #60]	; 0x3c
    if(((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007a16:	f013 0f04 	tst.w	r3, #4
 8007a1a:	d004      	beq.n	8007a26 <HAL_UART_IRQHandler+0x52>
 8007a1c:	b11a      	cbz	r2, 8007a26 <HAL_UART_IRQHandler+0x52>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007a1e:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8007a20:	f040 0002 	orr.w	r0, r0, #2
 8007a24:	63e0      	str	r0, [r4, #60]	; 0x3c
    if(((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007a26:	f013 0f02 	tst.w	r3, #2
 8007a2a:	d004      	beq.n	8007a36 <HAL_UART_IRQHandler+0x62>
 8007a2c:	b11a      	cbz	r2, 8007a36 <HAL_UART_IRQHandler+0x62>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007a2e:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8007a30:	f040 0004 	orr.w	r0, r0, #4
 8007a34:	63e0      	str	r0, [r4, #60]	; 0x3c
    if(((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007a36:	f013 0f08 	tst.w	r3, #8
 8007a3a:	d004      	beq.n	8007a46 <HAL_UART_IRQHandler+0x72>
 8007a3c:	b11a      	cbz	r2, 8007a46 <HAL_UART_IRQHandler+0x72>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007a3e:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8007a40:	f042 0208 	orr.w	r2, r2, #8
 8007a44:	63e2      	str	r2, [r4, #60]	; 0x3c
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007a46:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8007a48:	2a00      	cmp	r2, #0
 8007a4a:	d048      	beq.n	8007ade <HAL_UART_IRQHandler+0x10a>
      if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007a4c:	f013 0f20 	tst.w	r3, #32
 8007a50:	d002      	beq.n	8007a58 <HAL_UART_IRQHandler+0x84>
 8007a52:	f011 0f20 	tst.w	r1, #32
 8007a56:	d124      	bne.n	8007aa2 <HAL_UART_IRQHandler+0xce>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007a58:	6823      	ldr	r3, [r4, #0]
 8007a5a:	695b      	ldr	r3, [r3, #20]
 8007a5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
      if(((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007a60:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8007a62:	f012 0f08 	tst.w	r2, #8
 8007a66:	d100      	bne.n	8007a6a <HAL_UART_IRQHandler+0x96>
 8007a68:	b33b      	cbz	r3, 8007aba <HAL_UART_IRQHandler+0xe6>
        UART_EndRxTransfer(huart);
 8007a6a:	4620      	mov	r0, r4
 8007a6c:	f7ff f9b7 	bl	8006dde <UART_EndRxTransfer>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a70:	6823      	ldr	r3, [r4, #0]
 8007a72:	695a      	ldr	r2, [r3, #20]
 8007a74:	f012 0f40 	tst.w	r2, #64	; 0x40
 8007a78:	d01b      	beq.n	8007ab2 <HAL_UART_IRQHandler+0xde>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007a7a:	695a      	ldr	r2, [r3, #20]
 8007a7c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007a80:	615a      	str	r2, [r3, #20]
          if(huart->hdmarx != NULL)
 8007a82:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007a84:	b18b      	cbz	r3, 8007aaa <HAL_UART_IRQHandler+0xd6>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007a86:	4a1a      	ldr	r2, [pc, #104]	; (8007af0 <HAL_UART_IRQHandler+0x11c>)
 8007a88:	635a      	str	r2, [r3, #52]	; 0x34
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007a8a:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8007a8c:	f7fa fc3b 	bl	8002306 <HAL_DMA_Abort_IT>
 8007a90:	b328      	cbz	r0, 8007ade <HAL_UART_IRQHandler+0x10a>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007a92:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8007a94:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8007a96:	4798      	blx	r3
 8007a98:	bd10      	pop	{r4, pc}
      UART_Receive_IT(huart);
 8007a9a:	4620      	mov	r0, r4
 8007a9c:	f7ff ff18 	bl	80078d0 <UART_Receive_IT>
      return;
 8007aa0:	bd10      	pop	{r4, pc}
        UART_Receive_IT(huart);
 8007aa2:	4620      	mov	r0, r4
 8007aa4:	f7ff ff14 	bl	80078d0 <UART_Receive_IT>
 8007aa8:	e7d6      	b.n	8007a58 <HAL_UART_IRQHandler+0x84>
            HAL_UART_ErrorCallback(huart);
 8007aaa:	4620      	mov	r0, r4
 8007aac:	f7ff ff65 	bl	800797a <HAL_UART_ErrorCallback>
 8007ab0:	bd10      	pop	{r4, pc}
          HAL_UART_ErrorCallback(huart);
 8007ab2:	4620      	mov	r0, r4
 8007ab4:	f7ff ff61 	bl	800797a <HAL_UART_ErrorCallback>
 8007ab8:	bd10      	pop	{r4, pc}
        HAL_UART_ErrorCallback(huart);
 8007aba:	4620      	mov	r0, r4
 8007abc:	f7ff ff5d 	bl	800797a <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007ac0:	2300      	movs	r3, #0
 8007ac2:	63e3      	str	r3, [r4, #60]	; 0x3c
 8007ac4:	bd10      	pop	{r4, pc}
  if(((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007ac6:	f013 0f80 	tst.w	r3, #128	; 0x80
 8007aca:	d002      	beq.n	8007ad2 <HAL_UART_IRQHandler+0xfe>
 8007acc:	f011 0f80 	tst.w	r1, #128	; 0x80
 8007ad0:	d106      	bne.n	8007ae0 <HAL_UART_IRQHandler+0x10c>
  if(((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007ad2:	f013 0f40 	tst.w	r3, #64	; 0x40
 8007ad6:	d002      	beq.n	8007ade <HAL_UART_IRQHandler+0x10a>
 8007ad8:	f011 0f40 	tst.w	r1, #64	; 0x40
 8007adc:	d104      	bne.n	8007ae8 <HAL_UART_IRQHandler+0x114>
 8007ade:	bd10      	pop	{r4, pc}
    UART_Transmit_IT(huart);
 8007ae0:	4620      	mov	r0, r4
 8007ae2:	f7ff f98a 	bl	8006dfa <UART_Transmit_IT>
    return;
 8007ae6:	bd10      	pop	{r4, pc}
    UART_EndTransmit_IT(huart);
 8007ae8:	4620      	mov	r0, r4
 8007aea:	f7ff febe 	bl	800786a <UART_EndTransmit_IT>
    return;
 8007aee:	e7f6      	b.n	8007ade <HAL_UART_IRQHandler+0x10a>
 8007af0:	08007af5 	.word	0x08007af5

08007af4 <UART_DMAAbortOnError>:
{
 8007af4:	b508      	push	{r3, lr}
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8007af6:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0x00U;
 8007af8:	2300      	movs	r3, #0
 8007afa:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8007afc:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 8007afe:	f7ff ff3c 	bl	800797a <HAL_UART_ErrorCallback>
 8007b02:	bd08      	pop	{r3, pc}

08007b04 <HAL_UART_AbortCpltCallback>:
{
 8007b04:	4770      	bx	lr

08007b06 <HAL_UART_Abort_IT>:
{
 8007b06:	b510      	push	{r4, lr}
 8007b08:	4604      	mov	r4, r0
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TCIE));
 8007b0a:	6802      	ldr	r2, [r0, #0]
 8007b0c:	68d3      	ldr	r3, [r2, #12]
 8007b0e:	f423 73f0 	bic.w	r3, r3, #480	; 0x1e0
 8007b12:	60d3      	str	r3, [r2, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b14:	6802      	ldr	r2, [r0, #0]
 8007b16:	6953      	ldr	r3, [r2, #20]
 8007b18:	f023 0301 	bic.w	r3, r3, #1
 8007b1c:	6153      	str	r3, [r2, #20]
  if(huart->hdmatx != NULL)
 8007b1e:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8007b20:	b133      	cbz	r3, 8007b30 <HAL_UART_Abort_IT+0x2a>
    if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8007b22:	6802      	ldr	r2, [r0, #0]
 8007b24:	6952      	ldr	r2, [r2, #20]
 8007b26:	f012 0f80 	tst.w	r2, #128	; 0x80
 8007b2a:	d01d      	beq.n	8007b68 <HAL_UART_Abort_IT+0x62>
      huart->hdmatx->XferAbortCallback = UART_DMATxAbortCallback;
 8007b2c:	4a26      	ldr	r2, [pc, #152]	; (8007bc8 <HAL_UART_Abort_IT+0xc2>)
 8007b2e:	635a      	str	r2, [r3, #52]	; 0x34
  if(huart->hdmarx != NULL)
 8007b30:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007b32:	b133      	cbz	r3, 8007b42 <HAL_UART_Abort_IT+0x3c>
    if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b34:	6822      	ldr	r2, [r4, #0]
 8007b36:	6952      	ldr	r2, [r2, #20]
 8007b38:	f012 0f40 	tst.w	r2, #64	; 0x40
 8007b3c:	d017      	beq.n	8007b6e <HAL_UART_Abort_IT+0x68>
      huart->hdmarx->XferAbortCallback = UART_DMARxAbortCallback;
 8007b3e:	4a23      	ldr	r2, [pc, #140]	; (8007bcc <HAL_UART_Abort_IT+0xc6>)
 8007b40:	635a      	str	r2, [r3, #52]	; 0x34
  if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8007b42:	6823      	ldr	r3, [r4, #0]
 8007b44:	695a      	ldr	r2, [r3, #20]
 8007b46:	f012 0f80 	tst.w	r2, #128	; 0x80
 8007b4a:	d013      	beq.n	8007b74 <HAL_UART_Abort_IT+0x6e>
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007b4c:	695a      	ldr	r2, [r3, #20]
 8007b4e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007b52:	615a      	str	r2, [r3, #20]
    if(huart->hdmatx != NULL)
 8007b54:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8007b56:	b318      	cbz	r0, 8007ba0 <HAL_UART_Abort_IT+0x9a>
      if(HAL_DMA_Abort_IT(huart->hdmatx) != HAL_OK)
 8007b58:	f7fa fbd5 	bl	8002306 <HAL_DMA_Abort_IT>
 8007b5c:	b310      	cbz	r0, 8007ba4 <HAL_UART_Abort_IT+0x9e>
        huart->hdmatx->XferAbortCallback = NULL;
 8007b5e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8007b60:	2200      	movs	r2, #0
 8007b62:	635a      	str	r2, [r3, #52]	; 0x34
  uint32_t AbortCplt = 0x01U;
 8007b64:	2201      	movs	r2, #1
 8007b66:	e006      	b.n	8007b76 <HAL_UART_Abort_IT+0x70>
      huart->hdmatx->XferAbortCallback = NULL;
 8007b68:	2200      	movs	r2, #0
 8007b6a:	635a      	str	r2, [r3, #52]	; 0x34
 8007b6c:	e7e0      	b.n	8007b30 <HAL_UART_Abort_IT+0x2a>
      huart->hdmarx->XferAbortCallback = NULL;
 8007b6e:	2200      	movs	r2, #0
 8007b70:	635a      	str	r2, [r3, #52]	; 0x34
 8007b72:	e7e6      	b.n	8007b42 <HAL_UART_Abort_IT+0x3c>
  uint32_t AbortCplt = 0x01U;
 8007b74:	2201      	movs	r2, #1
  if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b76:	6823      	ldr	r3, [r4, #0]
 8007b78:	6959      	ldr	r1, [r3, #20]
 8007b7a:	f011 0f40 	tst.w	r1, #64	; 0x40
 8007b7e:	d00c      	beq.n	8007b9a <HAL_UART_Abort_IT+0x94>
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007b80:	6959      	ldr	r1, [r3, #20]
 8007b82:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 8007b86:	6159      	str	r1, [r3, #20]
    if(huart->hdmarx != NULL)
 8007b88:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8007b8a:	b130      	cbz	r0, 8007b9a <HAL_UART_Abort_IT+0x94>
      if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007b8c:	f7fa fbbb 	bl	8002306 <HAL_DMA_Abort_IT>
 8007b90:	b150      	cbz	r0, 8007ba8 <HAL_UART_Abort_IT+0xa2>
        huart->hdmarx->XferAbortCallback = NULL;
 8007b92:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007b94:	2200      	movs	r2, #0
 8007b96:	635a      	str	r2, [r3, #52]	; 0x34
        AbortCplt = 0x01U;
 8007b98:	2201      	movs	r2, #1
  if(AbortCplt == 0x01U)
 8007b9a:	b93a      	cbnz	r2, 8007bac <HAL_UART_Abort_IT+0xa6>
}
 8007b9c:	2000      	movs	r0, #0
 8007b9e:	bd10      	pop	{r4, pc}
  uint32_t AbortCplt = 0x01U;
 8007ba0:	2201      	movs	r2, #1
 8007ba2:	e7e8      	b.n	8007b76 <HAL_UART_Abort_IT+0x70>
        AbortCplt = 0x00U;
 8007ba4:	2200      	movs	r2, #0
 8007ba6:	e7e6      	b.n	8007b76 <HAL_UART_Abort_IT+0x70>
        AbortCplt = 0x00U;
 8007ba8:	2200      	movs	r2, #0
 8007baa:	e7f6      	b.n	8007b9a <HAL_UART_Abort_IT+0x94>
    huart->TxXferCount = 0x00U; 
 8007bac:	2300      	movs	r3, #0
 8007bae:	84e3      	strh	r3, [r4, #38]	; 0x26
    huart->RxXferCount = 0x00U;
 8007bb0:	85e3      	strh	r3, [r4, #46]	; 0x2e
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007bb2:	63e3      	str	r3, [r4, #60]	; 0x3c
    huart->gState  = HAL_UART_STATE_READY;
 8007bb4:	2320      	movs	r3, #32
 8007bb6:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    huart->RxState = HAL_UART_STATE_READY;
 8007bba:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
    HAL_UART_AbortCpltCallback(huart);
 8007bbe:	4620      	mov	r0, r4
 8007bc0:	f7ff ffa0 	bl	8007b04 <HAL_UART_AbortCpltCallback>
 8007bc4:	e7ea      	b.n	8007b9c <HAL_UART_Abort_IT+0x96>
 8007bc6:	bf00      	nop
 8007bc8:	08007bfd 	.word	0x08007bfd
 8007bcc:	08007bd1 	.word	0x08007bd1

08007bd0 <UART_DMARxAbortCallback>:
{
 8007bd0:	b508      	push	{r3, lr}
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8007bd2:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->hdmarx->XferAbortCallback = NULL;
 8007bd4:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8007bd6:	2200      	movs	r2, #0
 8007bd8:	635a      	str	r2, [r3, #52]	; 0x34
  if(huart->hdmatx != NULL)
 8007bda:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8007bdc:	b113      	cbz	r3, 8007be4 <UART_DMARxAbortCallback+0x14>
    if(huart->hdmatx->XferAbortCallback != NULL)
 8007bde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007be0:	b103      	cbz	r3, 8007be4 <UART_DMARxAbortCallback+0x14>
 8007be2:	bd08      	pop	{r3, pc}
  huart->TxXferCount = 0x00U;
 8007be4:	2300      	movs	r3, #0
 8007be6:	84c3      	strh	r3, [r0, #38]	; 0x26
  huart->RxXferCount = 0x00U;
 8007be8:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007bea:	63c3      	str	r3, [r0, #60]	; 0x3c
  huart->gState  = HAL_UART_STATE_READY;
 8007bec:	2320      	movs	r3, #32
 8007bee:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8007bf2:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
  HAL_UART_AbortCpltCallback(huart);
 8007bf6:	f7ff ff85 	bl	8007b04 <HAL_UART_AbortCpltCallback>
 8007bfa:	e7f2      	b.n	8007be2 <UART_DMARxAbortCallback+0x12>

08007bfc <UART_DMATxAbortCallback>:
{
 8007bfc:	b508      	push	{r3, lr}
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8007bfe:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->hdmatx->XferAbortCallback = NULL;
 8007c00:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8007c02:	2200      	movs	r2, #0
 8007c04:	635a      	str	r2, [r3, #52]	; 0x34
  if(huart->hdmarx != NULL)
 8007c06:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8007c08:	b113      	cbz	r3, 8007c10 <UART_DMATxAbortCallback+0x14>
    if(huart->hdmarx->XferAbortCallback != NULL)
 8007c0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c0c:	b103      	cbz	r3, 8007c10 <UART_DMATxAbortCallback+0x14>
 8007c0e:	bd08      	pop	{r3, pc}
  huart->TxXferCount = 0x00U;
 8007c10:	2300      	movs	r3, #0
 8007c12:	84c3      	strh	r3, [r0, #38]	; 0x26
  huart->RxXferCount = 0x00U;
 8007c14:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007c16:	63c3      	str	r3, [r0, #60]	; 0x3c
  huart->gState  = HAL_UART_STATE_READY;
 8007c18:	2320      	movs	r3, #32
 8007c1a:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8007c1e:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
  HAL_UART_AbortCpltCallback(huart);
 8007c22:	f7ff ff6f 	bl	8007b04 <HAL_UART_AbortCpltCallback>
 8007c26:	e7f2      	b.n	8007c0e <UART_DMATxAbortCallback+0x12>

08007c28 <HAL_UART_AbortTransmitCpltCallback>:
{
 8007c28:	4770      	bx	lr

08007c2a <HAL_UART_AbortTransmit_IT>:
{
 8007c2a:	b510      	push	{r4, lr}
 8007c2c:	4604      	mov	r4, r0
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8007c2e:	6802      	ldr	r2, [r0, #0]
 8007c30:	68d3      	ldr	r3, [r2, #12]
 8007c32:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8007c36:	60d3      	str	r3, [r2, #12]
  if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8007c38:	6803      	ldr	r3, [r0, #0]
 8007c3a:	695a      	ldr	r2, [r3, #20]
 8007c3c:	f012 0f80 	tst.w	r2, #128	; 0x80
 8007c40:	d019      	beq.n	8007c76 <HAL_UART_AbortTransmit_IT+0x4c>
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007c42:	695a      	ldr	r2, [r3, #20]
 8007c44:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007c48:	615a      	str	r2, [r3, #20]
    if(huart->hdmatx != NULL)
 8007c4a:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8007c4c:	b15b      	cbz	r3, 8007c66 <HAL_UART_AbortTransmit_IT+0x3c>
      huart->hdmatx->XferAbortCallback = UART_DMATxOnlyAbortCallback;
 8007c4e:	4a0e      	ldr	r2, [pc, #56]	; (8007c88 <HAL_UART_AbortTransmit_IT+0x5e>)
 8007c50:	635a      	str	r2, [r3, #52]	; 0x34
      if(HAL_DMA_Abort_IT(huart->hdmatx) != HAL_OK)
 8007c52:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8007c54:	f7fa fb57 	bl	8002306 <HAL_DMA_Abort_IT>
 8007c58:	b908      	cbnz	r0, 8007c5e <HAL_UART_AbortTransmit_IT+0x34>
}
 8007c5a:	2000      	movs	r0, #0
 8007c5c:	bd10      	pop	{r4, pc}
        huart->hdmatx->XferAbortCallback(huart->hdmatx);
 8007c5e:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8007c60:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8007c62:	4798      	blx	r3
 8007c64:	e7f9      	b.n	8007c5a <HAL_UART_AbortTransmit_IT+0x30>
      huart->TxXferCount = 0x00U;
 8007c66:	2300      	movs	r3, #0
 8007c68:	84c3      	strh	r3, [r0, #38]	; 0x26
      huart->gState = HAL_UART_STATE_READY;
 8007c6a:	2320      	movs	r3, #32
 8007c6c:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
      HAL_UART_AbortTransmitCpltCallback(huart);
 8007c70:	f7ff ffda 	bl	8007c28 <HAL_UART_AbortTransmitCpltCallback>
 8007c74:	e7f1      	b.n	8007c5a <HAL_UART_AbortTransmit_IT+0x30>
    huart->TxXferCount = 0x00U;
 8007c76:	2300      	movs	r3, #0
 8007c78:	84c3      	strh	r3, [r0, #38]	; 0x26
    huart->gState = HAL_UART_STATE_READY;
 8007c7a:	2320      	movs	r3, #32
 8007c7c:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    HAL_UART_AbortTransmitCpltCallback(huart);
 8007c80:	f7ff ffd2 	bl	8007c28 <HAL_UART_AbortTransmitCpltCallback>
 8007c84:	e7e9      	b.n	8007c5a <HAL_UART_AbortTransmit_IT+0x30>
 8007c86:	bf00      	nop
 8007c88:	08007c8d 	.word	0x08007c8d

08007c8c <UART_DMATxOnlyAbortCallback>:
{
 8007c8c:	b508      	push	{r3, lr}
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8007c8e:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->TxXferCount = 0x00U;
 8007c90:	2300      	movs	r3, #0
 8007c92:	84c3      	strh	r3, [r0, #38]	; 0x26
  huart->gState = HAL_UART_STATE_READY;
 8007c94:	2320      	movs	r3, #32
 8007c96:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  HAL_UART_AbortTransmitCpltCallback(huart);
 8007c9a:	f7ff ffc5 	bl	8007c28 <HAL_UART_AbortTransmitCpltCallback>
 8007c9e:	bd08      	pop	{r3, pc}

08007ca0 <HAL_UART_AbortReceiveCpltCallback>:
{
 8007ca0:	4770      	bx	lr

08007ca2 <HAL_UART_AbortReceive_IT>:
{
 8007ca2:	b510      	push	{r4, lr}
 8007ca4:	4604      	mov	r4, r0
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007ca6:	6802      	ldr	r2, [r0, #0]
 8007ca8:	68d3      	ldr	r3, [r2, #12]
 8007caa:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007cae:	60d3      	str	r3, [r2, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007cb0:	6802      	ldr	r2, [r0, #0]
 8007cb2:	6953      	ldr	r3, [r2, #20]
 8007cb4:	f023 0301 	bic.w	r3, r3, #1
 8007cb8:	6153      	str	r3, [r2, #20]
  if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007cba:	6803      	ldr	r3, [r0, #0]
 8007cbc:	695a      	ldr	r2, [r3, #20]
 8007cbe:	f012 0f40 	tst.w	r2, #64	; 0x40
 8007cc2:	d019      	beq.n	8007cf8 <HAL_UART_AbortReceive_IT+0x56>
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007cc4:	695a      	ldr	r2, [r3, #20]
 8007cc6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007cca:	615a      	str	r2, [r3, #20]
    if(huart->hdmarx != NULL)
 8007ccc:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8007cce:	b15b      	cbz	r3, 8007ce8 <HAL_UART_AbortReceive_IT+0x46>
      huart->hdmarx->XferAbortCallback = UART_DMARxOnlyAbortCallback;
 8007cd0:	4a0d      	ldr	r2, [pc, #52]	; (8007d08 <HAL_UART_AbortReceive_IT+0x66>)
 8007cd2:	635a      	str	r2, [r3, #52]	; 0x34
      if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007cd4:	6b40      	ldr	r0, [r0, #52]	; 0x34
 8007cd6:	f7fa fb16 	bl	8002306 <HAL_DMA_Abort_IT>
 8007cda:	b908      	cbnz	r0, 8007ce0 <HAL_UART_AbortReceive_IT+0x3e>
}
 8007cdc:	2000      	movs	r0, #0
 8007cde:	bd10      	pop	{r4, pc}
        huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007ce0:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8007ce2:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8007ce4:	4798      	blx	r3
 8007ce6:	e7f9      	b.n	8007cdc <HAL_UART_AbortReceive_IT+0x3a>
      huart->RxXferCount = 0x00U;
 8007ce8:	2300      	movs	r3, #0
 8007cea:	85c3      	strh	r3, [r0, #46]	; 0x2e
      huart->RxState = HAL_UART_STATE_READY;
 8007cec:	2320      	movs	r3, #32
 8007cee:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
      HAL_UART_AbortReceiveCpltCallback(huart);
 8007cf2:	f7ff ffd5 	bl	8007ca0 <HAL_UART_AbortReceiveCpltCallback>
 8007cf6:	e7f1      	b.n	8007cdc <HAL_UART_AbortReceive_IT+0x3a>
    huart->RxXferCount = 0x00U;
 8007cf8:	2300      	movs	r3, #0
 8007cfa:	85c3      	strh	r3, [r0, #46]	; 0x2e
    huart->RxState = HAL_UART_STATE_READY;
 8007cfc:	2320      	movs	r3, #32
 8007cfe:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
    HAL_UART_AbortReceiveCpltCallback(huart);
 8007d02:	f7ff ffcd 	bl	8007ca0 <HAL_UART_AbortReceiveCpltCallback>
 8007d06:	e7e9      	b.n	8007cdc <HAL_UART_AbortReceive_IT+0x3a>
 8007d08:	08007d0d 	.word	0x08007d0d

08007d0c <UART_DMARxOnlyAbortCallback>:
{
 8007d0c:	b508      	push	{r3, lr}
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8007d0e:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0x00U;
 8007d10:	2300      	movs	r3, #0
 8007d12:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->RxState = HAL_UART_STATE_READY;
 8007d14:	2320      	movs	r3, #32
 8007d16:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
  HAL_UART_AbortReceiveCpltCallback(huart);
 8007d1a:	f7ff ffc1 	bl	8007ca0 <HAL_UART_AbortReceiveCpltCallback>
 8007d1e:	bd08      	pop	{r3, pc}

08007d20 <HAL_LIN_SendBreak>:
  __HAL_LOCK(huart);
 8007d20:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8007d24:	2b01      	cmp	r3, #1
 8007d26:	d012      	beq.n	8007d4e <HAL_LIN_SendBreak+0x2e>
 8007d28:	2301      	movs	r3, #1
 8007d2a:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  huart->gState = HAL_UART_STATE_BUSY;
 8007d2e:	2324      	movs	r3, #36	; 0x24
 8007d30:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  SET_BIT(huart->Instance->CR1, USART_CR1_SBK);
 8007d34:	6802      	ldr	r2, [r0, #0]
 8007d36:	68d3      	ldr	r3, [r2, #12]
 8007d38:	f043 0301 	orr.w	r3, r3, #1
 8007d3c:	60d3      	str	r3, [r2, #12]
  huart->gState = HAL_UART_STATE_READY;
 8007d3e:	2320      	movs	r3, #32
 8007d40:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  __HAL_UNLOCK(huart);
 8007d44:	2300      	movs	r3, #0
 8007d46:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  return HAL_OK; 
 8007d4a:	4618      	mov	r0, r3
 8007d4c:	4770      	bx	lr
  __HAL_LOCK(huart);
 8007d4e:	2002      	movs	r0, #2
}
 8007d50:	4770      	bx	lr

08007d52 <HAL_MultiProcessor_EnterMuteMode>:
  __HAL_LOCK(huart);
 8007d52:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8007d56:	2b01      	cmp	r3, #1
 8007d58:	d012      	beq.n	8007d80 <HAL_MultiProcessor_EnterMuteMode+0x2e>
 8007d5a:	2301      	movs	r3, #1
 8007d5c:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  huart->gState = HAL_UART_STATE_BUSY;
 8007d60:	2324      	movs	r3, #36	; 0x24
 8007d62:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  SET_BIT(huart->Instance->CR1, USART_CR1_RWU);
 8007d66:	6802      	ldr	r2, [r0, #0]
 8007d68:	68d3      	ldr	r3, [r2, #12]
 8007d6a:	f043 0302 	orr.w	r3, r3, #2
 8007d6e:	60d3      	str	r3, [r2, #12]
  huart->gState = HAL_UART_STATE_READY;
 8007d70:	2320      	movs	r3, #32
 8007d72:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  __HAL_UNLOCK(huart);
 8007d76:	2300      	movs	r3, #0
 8007d78:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  return HAL_OK; 
 8007d7c:	4618      	mov	r0, r3
 8007d7e:	4770      	bx	lr
  __HAL_LOCK(huart);
 8007d80:	2002      	movs	r0, #2
}
 8007d82:	4770      	bx	lr

08007d84 <HAL_MultiProcessor_ExitMuteMode>:
  __HAL_LOCK(huart);
 8007d84:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8007d88:	2b01      	cmp	r3, #1
 8007d8a:	d012      	beq.n	8007db2 <HAL_MultiProcessor_ExitMuteMode+0x2e>
 8007d8c:	2301      	movs	r3, #1
 8007d8e:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  huart->gState = HAL_UART_STATE_BUSY;
 8007d92:	2324      	movs	r3, #36	; 0x24
 8007d94:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_RWU);
 8007d98:	6802      	ldr	r2, [r0, #0]
 8007d9a:	68d3      	ldr	r3, [r2, #12]
 8007d9c:	f023 0302 	bic.w	r3, r3, #2
 8007da0:	60d3      	str	r3, [r2, #12]
  huart->gState = HAL_UART_STATE_READY;
 8007da2:	2320      	movs	r3, #32
 8007da4:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  __HAL_UNLOCK(huart);
 8007da8:	2300      	movs	r3, #0
 8007daa:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  return HAL_OK; 
 8007dae:	4618      	mov	r0, r3
 8007db0:	4770      	bx	lr
  __HAL_LOCK(huart);
 8007db2:	2002      	movs	r0, #2
}
 8007db4:	4770      	bx	lr

08007db6 <HAL_HalfDuplex_EnableTransmitter>:
  __HAL_LOCK(huart);
 8007db6:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8007dba:	2b01      	cmp	r3, #1
 8007dbc:	d014      	beq.n	8007de8 <HAL_HalfDuplex_EnableTransmitter+0x32>
 8007dbe:	2301      	movs	r3, #1
 8007dc0:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  huart->gState = HAL_UART_STATE_BUSY;
 8007dc4:	2324      	movs	r3, #36	; 0x24
 8007dc6:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  tmpreg = huart->Instance->CR1;
 8007dca:	6802      	ldr	r2, [r0, #0]
 8007dcc:	68d3      	ldr	r3, [r2, #12]
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_TE | USART_CR1_RE));
 8007dce:	f023 030c 	bic.w	r3, r3, #12
  tmpreg |= (uint32_t)USART_CR1_TE;
 8007dd2:	f043 0308 	orr.w	r3, r3, #8
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 8007dd6:	60d3      	str	r3, [r2, #12]
  huart->gState = HAL_UART_STATE_READY;
 8007dd8:	2320      	movs	r3, #32
 8007dda:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  __HAL_UNLOCK(huart);
 8007dde:	2300      	movs	r3, #0
 8007de0:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  return HAL_OK; 
 8007de4:	4618      	mov	r0, r3
 8007de6:	4770      	bx	lr
  __HAL_LOCK(huart);
 8007de8:	2002      	movs	r0, #2
}
 8007dea:	4770      	bx	lr

08007dec <HAL_HalfDuplex_EnableReceiver>:
  __HAL_LOCK(huart);
 8007dec:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8007df0:	2b01      	cmp	r3, #1
 8007df2:	d014      	beq.n	8007e1e <HAL_HalfDuplex_EnableReceiver+0x32>
 8007df4:	2301      	movs	r3, #1
 8007df6:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  huart->gState = HAL_UART_STATE_BUSY;
 8007dfa:	2324      	movs	r3, #36	; 0x24
 8007dfc:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  tmpreg = huart->Instance->CR1;
 8007e00:	6802      	ldr	r2, [r0, #0]
 8007e02:	68d3      	ldr	r3, [r2, #12]
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_TE | USART_CR1_RE));
 8007e04:	f023 030c 	bic.w	r3, r3, #12
  tmpreg |= (uint32_t)USART_CR1_RE;
 8007e08:	f043 0304 	orr.w	r3, r3, #4
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 8007e0c:	60d3      	str	r3, [r2, #12]
  huart->gState = HAL_UART_STATE_READY;
 8007e0e:	2320      	movs	r3, #32
 8007e10:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  __HAL_UNLOCK(huart);
 8007e14:	2300      	movs	r3, #0
 8007e16:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  return HAL_OK; 
 8007e1a:	4618      	mov	r0, r3
 8007e1c:	4770      	bx	lr
  __HAL_LOCK(huart);
 8007e1e:	2002      	movs	r0, #2
}
 8007e20:	4770      	bx	lr

08007e22 <HAL_UART_GetState>:
  temp1 = huart->gState;
 8007e22:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
  temp2 = huart->RxState;
 8007e26:	f890 003a 	ldrb.w	r0, [r0, #58]	; 0x3a
}
 8007e2a:	4318      	orrs	r0, r3
 8007e2c:	4770      	bx	lr

08007e2e <HAL_UART_GetError>:
  return huart->ErrorCode;
 8007e2e:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
}
 8007e30:	4770      	bx	lr
 8007e32:	bf00      	nop

08007e34 <_ZN3ros22normalizeSecNSecSignedERlS0_>:
#include "ros/duration.h"

namespace ros
{
void normalizeSecNSecSigned(int32_t &sec, int32_t &nsec)
{
 8007e34:	b410      	push	{r4}
  int32_t nsec_part = nsec;
 8007e36:	680b      	ldr	r3, [r1, #0]
  int32_t sec_part = sec;
 8007e38:	6802      	ldr	r2, [r0, #0]

  while (nsec_part > 1000000000L)
 8007e3a:	4c0c      	ldr	r4, [pc, #48]	; (8007e6c <_ZN3ros22normalizeSecNSecSignedERlS0_+0x38>)
 8007e3c:	42a3      	cmp	r3, r4
 8007e3e:	dd07      	ble.n	8007e50 <_ZN3ros22normalizeSecNSecSignedERlS0_+0x1c>
  {
    nsec_part -= 1000000000L;
 8007e40:	f103 4344 	add.w	r3, r3, #3288334336	; 0xc4000000
 8007e44:	f503 03ca 	add.w	r3, r3, #6619136	; 0x650000
 8007e48:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    ++sec_part;
 8007e4c:	3201      	adds	r2, #1
  while (nsec_part > 1000000000L)
 8007e4e:	e7f4      	b.n	8007e3a <_ZN3ros22normalizeSecNSecSignedERlS0_+0x6>
  }
  while (nsec_part < 0)
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	da07      	bge.n	8007e64 <_ZN3ros22normalizeSecNSecSignedERlS0_+0x30>
  {
    nsec_part += 1000000000L;
 8007e54:	f103 536e 	add.w	r3, r3, #998244352	; 0x3b800000
 8007e58:	f503 13d6 	add.w	r3, r3, #1753088	; 0x1ac000
 8007e5c:	f503 6320 	add.w	r3, r3, #2560	; 0xa00
    --sec_part;
 8007e60:	3a01      	subs	r2, #1
  while (nsec_part < 0)
 8007e62:	e7f5      	b.n	8007e50 <_ZN3ros22normalizeSecNSecSignedERlS0_+0x1c>
  }
  sec = sec_part;
 8007e64:	6002      	str	r2, [r0, #0]
  nsec = nsec_part;
 8007e66:	600b      	str	r3, [r1, #0]
}
 8007e68:	bc10      	pop	{r4}
 8007e6a:	4770      	bx	lr
 8007e6c:	3b9aca00 	.word	0x3b9aca00

08007e70 <_ZN3ros8DurationpLERKS0_>:

Duration& Duration::operator+=(const Duration &rhs)
{
 8007e70:	b510      	push	{r4, lr}
 8007e72:	4604      	mov	r4, r0
  sec += rhs.sec;
 8007e74:	6803      	ldr	r3, [r0, #0]
 8007e76:	680a      	ldr	r2, [r1, #0]
 8007e78:	4413      	add	r3, r2
 8007e7a:	6003      	str	r3, [r0, #0]
  nsec += rhs.nsec;
 8007e7c:	6843      	ldr	r3, [r0, #4]
 8007e7e:	684a      	ldr	r2, [r1, #4]
 8007e80:	4413      	add	r3, r2
 8007e82:	4601      	mov	r1, r0
 8007e84:	f841 3f04 	str.w	r3, [r1, #4]!
  normalizeSecNSecSigned(sec, nsec);
 8007e88:	f7ff ffd4 	bl	8007e34 <_ZN3ros22normalizeSecNSecSignedERlS0_>
  return *this;
}
 8007e8c:	4620      	mov	r0, r4
 8007e8e:	bd10      	pop	{r4, pc}

08007e90 <_ZN3ros8DurationmIERKS0_>:

Duration& Duration::operator-=(const Duration &rhs)
{
 8007e90:	b510      	push	{r4, lr}
 8007e92:	4604      	mov	r4, r0
  sec += -rhs.sec;
 8007e94:	6803      	ldr	r3, [r0, #0]
 8007e96:	680a      	ldr	r2, [r1, #0]
 8007e98:	1a9b      	subs	r3, r3, r2
 8007e9a:	6003      	str	r3, [r0, #0]
  nsec += -rhs.nsec;
 8007e9c:	6843      	ldr	r3, [r0, #4]
 8007e9e:	684a      	ldr	r2, [r1, #4]
 8007ea0:	1a9b      	subs	r3, r3, r2
 8007ea2:	4601      	mov	r1, r0
 8007ea4:	f841 3f04 	str.w	r3, [r1, #4]!
  normalizeSecNSecSigned(sec, nsec);
 8007ea8:	f7ff ffc4 	bl	8007e34 <_ZN3ros22normalizeSecNSecSignedERlS0_>
  return *this;
}
 8007eac:	4620      	mov	r0, r4
 8007eae:	bd10      	pop	{r4, pc}

08007eb0 <_ZN3ros8DurationmLEd>:

Duration& Duration::operator*=(double scale)
{
 8007eb0:	b5d0      	push	{r4, r6, r7, lr}
 8007eb2:	4604      	mov	r4, r0
 8007eb4:	4616      	mov	r6, r2
 8007eb6:	461f      	mov	r7, r3
  sec *= scale;
 8007eb8:	6800      	ldr	r0, [r0, #0]
 8007eba:	f000 f9d5 	bl	8008268 <__aeabi_i2d>
 8007ebe:	4632      	mov	r2, r6
 8007ec0:	463b      	mov	r3, r7
 8007ec2:	f000 fa37 	bl	8008334 <__aeabi_dmul>
 8007ec6:	f000 fce5 	bl	8008894 <__aeabi_d2iz>
 8007eca:	6020      	str	r0, [r4, #0]
  nsec *= scale;
 8007ecc:	6860      	ldr	r0, [r4, #4]
 8007ece:	f000 f9cb 	bl	8008268 <__aeabi_i2d>
 8007ed2:	4632      	mov	r2, r6
 8007ed4:	463b      	mov	r3, r7
 8007ed6:	f000 fa2d 	bl	8008334 <__aeabi_dmul>
 8007eda:	f000 fcdb 	bl	8008894 <__aeabi_d2iz>
 8007ede:	4621      	mov	r1, r4
 8007ee0:	f841 0f04 	str.w	r0, [r1, #4]!
  normalizeSecNSecSigned(sec, nsec);
 8007ee4:	4620      	mov	r0, r4
 8007ee6:	f7ff ffa5 	bl	8007e34 <_ZN3ros22normalizeSecNSecSignedERlS0_>
  return *this;
}
 8007eea:	4620      	mov	r0, r4
 8007eec:	bdd0      	pop	{r4, r6, r7, pc}
 8007eee:	bf00      	nop

08007ef0 <_ZN3ros16normalizeSecNSecERmS0_>:
#include "ros/time.h"

namespace ros
{
void normalizeSecNSec(uint32_t& sec, uint32_t& nsec)
{
 8007ef0:	b430      	push	{r4, r5}
  uint32_t nsec_part = nsec % 1000000000UL;
 8007ef2:	680c      	ldr	r4, [r1, #0]
 8007ef4:	0a63      	lsrs	r3, r4, #9
 8007ef6:	4a07      	ldr	r2, [pc, #28]	; (8007f14 <_ZN3ros16normalizeSecNSecERmS0_+0x24>)
 8007ef8:	fba2 2303 	umull	r2, r3, r2, r3
 8007efc:	09da      	lsrs	r2, r3, #7
 8007efe:	4d06      	ldr	r5, [pc, #24]	; (8007f18 <_ZN3ros16normalizeSecNSecERmS0_+0x28>)
 8007f00:	fb05 4212 	mls	r2, r5, r2, r4
  uint32_t sec_part = nsec / 1000000000UL;
  sec += sec_part;
 8007f04:	6804      	ldr	r4, [r0, #0]
 8007f06:	eb04 13d3 	add.w	r3, r4, r3, lsr #7
 8007f0a:	6003      	str	r3, [r0, #0]
  nsec = nsec_part;
 8007f0c:	600a      	str	r2, [r1, #0]
}
 8007f0e:	bc30      	pop	{r4, r5}
 8007f10:	4770      	bx	lr
 8007f12:	bf00      	nop
 8007f14:	00044b83 	.word	0x00044b83
 8007f18:	3b9aca00 	.word	0x3b9aca00

08007f1c <_ZN3ros4Time8fromNSecEl>:

Time& Time::fromNSec(int32_t t)
{
 8007f1c:	b510      	push	{r4, lr}
 8007f1e:	4604      	mov	r4, r0
  sec = t / 1000000000;
 8007f20:	4a08      	ldr	r2, [pc, #32]	; (8007f44 <_ZN3ros4Time8fromNSecEl+0x28>)
 8007f22:	fb82 3201 	smull	r3, r2, r2, r1
 8007f26:	17cb      	asrs	r3, r1, #31
 8007f28:	ebc3 7322 	rsb	r3, r3, r2, asr #28
 8007f2c:	6003      	str	r3, [r0, #0]
  nsec = t % 1000000000;
 8007f2e:	4a06      	ldr	r2, [pc, #24]	; (8007f48 <_ZN3ros4Time8fromNSecEl+0x2c>)
 8007f30:	fb02 1213 	mls	r2, r2, r3, r1
 8007f34:	4601      	mov	r1, r0
 8007f36:	f841 2f04 	str.w	r2, [r1, #4]!
  normalizeSecNSec(sec, nsec);
 8007f3a:	f7ff ffd9 	bl	8007ef0 <_ZN3ros16normalizeSecNSecERmS0_>
  return *this;
}
 8007f3e:	4620      	mov	r0, r4
 8007f40:	bd10      	pop	{r4, pc}
 8007f42:	bf00      	nop
 8007f44:	44b82fa1 	.word	0x44b82fa1
 8007f48:	3b9aca00 	.word	0x3b9aca00

08007f4c <_ZN3ros4TimepLERKNS_8DurationE>:

Time& Time::operator +=(const Duration &rhs)
{
 8007f4c:	b510      	push	{r4, lr}
 8007f4e:	4604      	mov	r4, r0
  sec += rhs.sec;
 8007f50:	6803      	ldr	r3, [r0, #0]
 8007f52:	680a      	ldr	r2, [r1, #0]
 8007f54:	4413      	add	r3, r2
 8007f56:	6003      	str	r3, [r0, #0]
  nsec += rhs.nsec;
 8007f58:	6843      	ldr	r3, [r0, #4]
 8007f5a:	684a      	ldr	r2, [r1, #4]
 8007f5c:	4413      	add	r3, r2
 8007f5e:	4601      	mov	r1, r0
 8007f60:	f841 3f04 	str.w	r3, [r1, #4]!
  normalizeSecNSec(sec, nsec);
 8007f64:	f7ff ffc4 	bl	8007ef0 <_ZN3ros16normalizeSecNSecERmS0_>
  return *this;
}
 8007f68:	4620      	mov	r0, r4
 8007f6a:	bd10      	pop	{r4, pc}

08007f6c <_ZN3ros4TimemIERKNS_8DurationE>:

Time& Time::operator -=(const Duration &rhs)
{
 8007f6c:	b510      	push	{r4, lr}
 8007f6e:	4604      	mov	r4, r0
  sec += -rhs.sec;
 8007f70:	6803      	ldr	r3, [r0, #0]
 8007f72:	680a      	ldr	r2, [r1, #0]
 8007f74:	1a9b      	subs	r3, r3, r2
 8007f76:	6003      	str	r3, [r0, #0]
  nsec += -rhs.nsec;
 8007f78:	6843      	ldr	r3, [r0, #4]
 8007f7a:	684a      	ldr	r2, [r1, #4]
 8007f7c:	1a9b      	subs	r3, r3, r2
 8007f7e:	4601      	mov	r1, r0
 8007f80:	f841 3f04 	str.w	r3, [r1, #4]!
  normalizeSecNSec(sec, nsec);
 8007f84:	f7ff ffb4 	bl	8007ef0 <_ZN3ros16normalizeSecNSecERmS0_>
  return *this;
}
 8007f88:	4620      	mov	r0, r4
 8007f8a:	bd10      	pop	{r4, pc}
 8007f8c:	0800c7d0 	.word	0x0800c7d0
 8007f90:	20000000 	.word	0x20000000
 8007f94:	2000051c 	.word	0x2000051c
 8007f98:	20000520 	.word	0x20000520
 8007f9c:	20001c18 	.word	0x20001c18

08007fa0 <strcmp>:
 8007fa0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007fa4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007fa8:	2a01      	cmp	r2, #1
 8007faa:	bf28      	it	cs
 8007fac:	429a      	cmpcs	r2, r3
 8007fae:	d0f7      	beq.n	8007fa0 <strcmp>
 8007fb0:	1ad0      	subs	r0, r2, r3
 8007fb2:	4770      	bx	lr

08007fb4 <strlen>:
 8007fb4:	4603      	mov	r3, r0
 8007fb6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007fba:	2a00      	cmp	r2, #0
 8007fbc:	d1fb      	bne.n	8007fb6 <strlen+0x2>
 8007fbe:	1a18      	subs	r0, r3, r0
 8007fc0:	3801      	subs	r0, #1
 8007fc2:	4770      	bx	lr

08007fc4 <__aeabi_drsub>:
 8007fc4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8007fc8:	e002      	b.n	8007fd0 <__adddf3>
 8007fca:	bf00      	nop

08007fcc <__aeabi_dsub>:
 8007fcc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08007fd0 <__adddf3>:
 8007fd0:	b530      	push	{r4, r5, lr}
 8007fd2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8007fd6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8007fda:	ea94 0f05 	teq	r4, r5
 8007fde:	bf08      	it	eq
 8007fe0:	ea90 0f02 	teqeq	r0, r2
 8007fe4:	bf1f      	itttt	ne
 8007fe6:	ea54 0c00 	orrsne.w	ip, r4, r0
 8007fea:	ea55 0c02 	orrsne.w	ip, r5, r2
 8007fee:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8007ff2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8007ff6:	f000 80e2 	beq.w	80081be <__adddf3+0x1ee>
 8007ffa:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8007ffe:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8008002:	bfb8      	it	lt
 8008004:	426d      	neglt	r5, r5
 8008006:	dd0c      	ble.n	8008022 <__adddf3+0x52>
 8008008:	442c      	add	r4, r5
 800800a:	ea80 0202 	eor.w	r2, r0, r2
 800800e:	ea81 0303 	eor.w	r3, r1, r3
 8008012:	ea82 0000 	eor.w	r0, r2, r0
 8008016:	ea83 0101 	eor.w	r1, r3, r1
 800801a:	ea80 0202 	eor.w	r2, r0, r2
 800801e:	ea81 0303 	eor.w	r3, r1, r3
 8008022:	2d36      	cmp	r5, #54	; 0x36
 8008024:	bf88      	it	hi
 8008026:	bd30      	pophi	{r4, r5, pc}
 8008028:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800802c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8008030:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8008034:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8008038:	d002      	beq.n	8008040 <__adddf3+0x70>
 800803a:	4240      	negs	r0, r0
 800803c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8008040:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8008044:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8008048:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800804c:	d002      	beq.n	8008054 <__adddf3+0x84>
 800804e:	4252      	negs	r2, r2
 8008050:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8008054:	ea94 0f05 	teq	r4, r5
 8008058:	f000 80a7 	beq.w	80081aa <__adddf3+0x1da>
 800805c:	f1a4 0401 	sub.w	r4, r4, #1
 8008060:	f1d5 0e20 	rsbs	lr, r5, #32
 8008064:	db0d      	blt.n	8008082 <__adddf3+0xb2>
 8008066:	fa02 fc0e 	lsl.w	ip, r2, lr
 800806a:	fa22 f205 	lsr.w	r2, r2, r5
 800806e:	1880      	adds	r0, r0, r2
 8008070:	f141 0100 	adc.w	r1, r1, #0
 8008074:	fa03 f20e 	lsl.w	r2, r3, lr
 8008078:	1880      	adds	r0, r0, r2
 800807a:	fa43 f305 	asr.w	r3, r3, r5
 800807e:	4159      	adcs	r1, r3
 8008080:	e00e      	b.n	80080a0 <__adddf3+0xd0>
 8008082:	f1a5 0520 	sub.w	r5, r5, #32
 8008086:	f10e 0e20 	add.w	lr, lr, #32
 800808a:	2a01      	cmp	r2, #1
 800808c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8008090:	bf28      	it	cs
 8008092:	f04c 0c02 	orrcs.w	ip, ip, #2
 8008096:	fa43 f305 	asr.w	r3, r3, r5
 800809a:	18c0      	adds	r0, r0, r3
 800809c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80080a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80080a4:	d507      	bpl.n	80080b6 <__adddf3+0xe6>
 80080a6:	f04f 0e00 	mov.w	lr, #0
 80080aa:	f1dc 0c00 	rsbs	ip, ip, #0
 80080ae:	eb7e 0000 	sbcs.w	r0, lr, r0
 80080b2:	eb6e 0101 	sbc.w	r1, lr, r1
 80080b6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80080ba:	d31b      	bcc.n	80080f4 <__adddf3+0x124>
 80080bc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80080c0:	d30c      	bcc.n	80080dc <__adddf3+0x10c>
 80080c2:	0849      	lsrs	r1, r1, #1
 80080c4:	ea5f 0030 	movs.w	r0, r0, rrx
 80080c8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80080cc:	f104 0401 	add.w	r4, r4, #1
 80080d0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80080d4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80080d8:	f080 809a 	bcs.w	8008210 <__adddf3+0x240>
 80080dc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80080e0:	bf08      	it	eq
 80080e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80080e6:	f150 0000 	adcs.w	r0, r0, #0
 80080ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80080ee:	ea41 0105 	orr.w	r1, r1, r5
 80080f2:	bd30      	pop	{r4, r5, pc}
 80080f4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80080f8:	4140      	adcs	r0, r0
 80080fa:	eb41 0101 	adc.w	r1, r1, r1
 80080fe:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8008102:	f1a4 0401 	sub.w	r4, r4, #1
 8008106:	d1e9      	bne.n	80080dc <__adddf3+0x10c>
 8008108:	f091 0f00 	teq	r1, #0
 800810c:	bf04      	itt	eq
 800810e:	4601      	moveq	r1, r0
 8008110:	2000      	moveq	r0, #0
 8008112:	fab1 f381 	clz	r3, r1
 8008116:	bf08      	it	eq
 8008118:	3320      	addeq	r3, #32
 800811a:	f1a3 030b 	sub.w	r3, r3, #11
 800811e:	f1b3 0220 	subs.w	r2, r3, #32
 8008122:	da0c      	bge.n	800813e <__adddf3+0x16e>
 8008124:	320c      	adds	r2, #12
 8008126:	dd08      	ble.n	800813a <__adddf3+0x16a>
 8008128:	f102 0c14 	add.w	ip, r2, #20
 800812c:	f1c2 020c 	rsb	r2, r2, #12
 8008130:	fa01 f00c 	lsl.w	r0, r1, ip
 8008134:	fa21 f102 	lsr.w	r1, r1, r2
 8008138:	e00c      	b.n	8008154 <__adddf3+0x184>
 800813a:	f102 0214 	add.w	r2, r2, #20
 800813e:	bfd8      	it	le
 8008140:	f1c2 0c20 	rsble	ip, r2, #32
 8008144:	fa01 f102 	lsl.w	r1, r1, r2
 8008148:	fa20 fc0c 	lsr.w	ip, r0, ip
 800814c:	bfdc      	itt	le
 800814e:	ea41 010c 	orrle.w	r1, r1, ip
 8008152:	4090      	lslle	r0, r2
 8008154:	1ae4      	subs	r4, r4, r3
 8008156:	bfa2      	ittt	ge
 8008158:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800815c:	4329      	orrge	r1, r5
 800815e:	bd30      	popge	{r4, r5, pc}
 8008160:	ea6f 0404 	mvn.w	r4, r4
 8008164:	3c1f      	subs	r4, #31
 8008166:	da1c      	bge.n	80081a2 <__adddf3+0x1d2>
 8008168:	340c      	adds	r4, #12
 800816a:	dc0e      	bgt.n	800818a <__adddf3+0x1ba>
 800816c:	f104 0414 	add.w	r4, r4, #20
 8008170:	f1c4 0220 	rsb	r2, r4, #32
 8008174:	fa20 f004 	lsr.w	r0, r0, r4
 8008178:	fa01 f302 	lsl.w	r3, r1, r2
 800817c:	ea40 0003 	orr.w	r0, r0, r3
 8008180:	fa21 f304 	lsr.w	r3, r1, r4
 8008184:	ea45 0103 	orr.w	r1, r5, r3
 8008188:	bd30      	pop	{r4, r5, pc}
 800818a:	f1c4 040c 	rsb	r4, r4, #12
 800818e:	f1c4 0220 	rsb	r2, r4, #32
 8008192:	fa20 f002 	lsr.w	r0, r0, r2
 8008196:	fa01 f304 	lsl.w	r3, r1, r4
 800819a:	ea40 0003 	orr.w	r0, r0, r3
 800819e:	4629      	mov	r1, r5
 80081a0:	bd30      	pop	{r4, r5, pc}
 80081a2:	fa21 f004 	lsr.w	r0, r1, r4
 80081a6:	4629      	mov	r1, r5
 80081a8:	bd30      	pop	{r4, r5, pc}
 80081aa:	f094 0f00 	teq	r4, #0
 80081ae:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80081b2:	bf06      	itte	eq
 80081b4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80081b8:	3401      	addeq	r4, #1
 80081ba:	3d01      	subne	r5, #1
 80081bc:	e74e      	b.n	800805c <__adddf3+0x8c>
 80081be:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80081c2:	bf18      	it	ne
 80081c4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80081c8:	d029      	beq.n	800821e <__adddf3+0x24e>
 80081ca:	ea94 0f05 	teq	r4, r5
 80081ce:	bf08      	it	eq
 80081d0:	ea90 0f02 	teqeq	r0, r2
 80081d4:	d005      	beq.n	80081e2 <__adddf3+0x212>
 80081d6:	ea54 0c00 	orrs.w	ip, r4, r0
 80081da:	bf04      	itt	eq
 80081dc:	4619      	moveq	r1, r3
 80081de:	4610      	moveq	r0, r2
 80081e0:	bd30      	pop	{r4, r5, pc}
 80081e2:	ea91 0f03 	teq	r1, r3
 80081e6:	bf1e      	ittt	ne
 80081e8:	2100      	movne	r1, #0
 80081ea:	2000      	movne	r0, #0
 80081ec:	bd30      	popne	{r4, r5, pc}
 80081ee:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80081f2:	d105      	bne.n	8008200 <__adddf3+0x230>
 80081f4:	0040      	lsls	r0, r0, #1
 80081f6:	4149      	adcs	r1, r1
 80081f8:	bf28      	it	cs
 80081fa:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80081fe:	bd30      	pop	{r4, r5, pc}
 8008200:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8008204:	bf3c      	itt	cc
 8008206:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800820a:	bd30      	popcc	{r4, r5, pc}
 800820c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8008210:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8008214:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8008218:	f04f 0000 	mov.w	r0, #0
 800821c:	bd30      	pop	{r4, r5, pc}
 800821e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8008222:	bf1a      	itte	ne
 8008224:	4619      	movne	r1, r3
 8008226:	4610      	movne	r0, r2
 8008228:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800822c:	bf1c      	itt	ne
 800822e:	460b      	movne	r3, r1
 8008230:	4602      	movne	r2, r0
 8008232:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8008236:	bf06      	itte	eq
 8008238:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800823c:	ea91 0f03 	teqeq	r1, r3
 8008240:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8008244:	bd30      	pop	{r4, r5, pc}
 8008246:	bf00      	nop

08008248 <__aeabi_ui2d>:
 8008248:	f090 0f00 	teq	r0, #0
 800824c:	bf04      	itt	eq
 800824e:	2100      	moveq	r1, #0
 8008250:	4770      	bxeq	lr
 8008252:	b530      	push	{r4, r5, lr}
 8008254:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8008258:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800825c:	f04f 0500 	mov.w	r5, #0
 8008260:	f04f 0100 	mov.w	r1, #0
 8008264:	e750      	b.n	8008108 <__adddf3+0x138>
 8008266:	bf00      	nop

08008268 <__aeabi_i2d>:
 8008268:	f090 0f00 	teq	r0, #0
 800826c:	bf04      	itt	eq
 800826e:	2100      	moveq	r1, #0
 8008270:	4770      	bxeq	lr
 8008272:	b530      	push	{r4, r5, lr}
 8008274:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8008278:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800827c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8008280:	bf48      	it	mi
 8008282:	4240      	negmi	r0, r0
 8008284:	f04f 0100 	mov.w	r1, #0
 8008288:	e73e      	b.n	8008108 <__adddf3+0x138>
 800828a:	bf00      	nop

0800828c <__aeabi_f2d>:
 800828c:	0042      	lsls	r2, r0, #1
 800828e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8008292:	ea4f 0131 	mov.w	r1, r1, rrx
 8008296:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800829a:	bf1f      	itttt	ne
 800829c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80082a0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80082a4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80082a8:	4770      	bxne	lr
 80082aa:	f092 0f00 	teq	r2, #0
 80082ae:	bf14      	ite	ne
 80082b0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80082b4:	4770      	bxeq	lr
 80082b6:	b530      	push	{r4, r5, lr}
 80082b8:	f44f 7460 	mov.w	r4, #896	; 0x380
 80082bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80082c0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80082c4:	e720      	b.n	8008108 <__adddf3+0x138>
 80082c6:	bf00      	nop

080082c8 <__aeabi_ul2d>:
 80082c8:	ea50 0201 	orrs.w	r2, r0, r1
 80082cc:	bf08      	it	eq
 80082ce:	4770      	bxeq	lr
 80082d0:	b530      	push	{r4, r5, lr}
 80082d2:	f04f 0500 	mov.w	r5, #0
 80082d6:	e00a      	b.n	80082ee <__aeabi_l2d+0x16>

080082d8 <__aeabi_l2d>:
 80082d8:	ea50 0201 	orrs.w	r2, r0, r1
 80082dc:	bf08      	it	eq
 80082de:	4770      	bxeq	lr
 80082e0:	b530      	push	{r4, r5, lr}
 80082e2:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80082e6:	d502      	bpl.n	80082ee <__aeabi_l2d+0x16>
 80082e8:	4240      	negs	r0, r0
 80082ea:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80082ee:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80082f2:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80082f6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80082fa:	f43f aedc 	beq.w	80080b6 <__adddf3+0xe6>
 80082fe:	f04f 0203 	mov.w	r2, #3
 8008302:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8008306:	bf18      	it	ne
 8008308:	3203      	addne	r2, #3
 800830a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800830e:	bf18      	it	ne
 8008310:	3203      	addne	r2, #3
 8008312:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8008316:	f1c2 0320 	rsb	r3, r2, #32
 800831a:	fa00 fc03 	lsl.w	ip, r0, r3
 800831e:	fa20 f002 	lsr.w	r0, r0, r2
 8008322:	fa01 fe03 	lsl.w	lr, r1, r3
 8008326:	ea40 000e 	orr.w	r0, r0, lr
 800832a:	fa21 f102 	lsr.w	r1, r1, r2
 800832e:	4414      	add	r4, r2
 8008330:	e6c1      	b.n	80080b6 <__adddf3+0xe6>
 8008332:	bf00      	nop

08008334 <__aeabi_dmul>:
 8008334:	b570      	push	{r4, r5, r6, lr}
 8008336:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800833a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800833e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8008342:	bf1d      	ittte	ne
 8008344:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8008348:	ea94 0f0c 	teqne	r4, ip
 800834c:	ea95 0f0c 	teqne	r5, ip
 8008350:	f000 f8de 	bleq	8008510 <__aeabi_dmul+0x1dc>
 8008354:	442c      	add	r4, r5
 8008356:	ea81 0603 	eor.w	r6, r1, r3
 800835a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800835e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8008362:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8008366:	bf18      	it	ne
 8008368:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 800836c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8008370:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008374:	d038      	beq.n	80083e8 <__aeabi_dmul+0xb4>
 8008376:	fba0 ce02 	umull	ip, lr, r0, r2
 800837a:	f04f 0500 	mov.w	r5, #0
 800837e:	fbe1 e502 	umlal	lr, r5, r1, r2
 8008382:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8008386:	fbe0 e503 	umlal	lr, r5, r0, r3
 800838a:	f04f 0600 	mov.w	r6, #0
 800838e:	fbe1 5603 	umlal	r5, r6, r1, r3
 8008392:	f09c 0f00 	teq	ip, #0
 8008396:	bf18      	it	ne
 8008398:	f04e 0e01 	orrne.w	lr, lr, #1
 800839c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80083a0:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80083a4:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80083a8:	d204      	bcs.n	80083b4 <__aeabi_dmul+0x80>
 80083aa:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80083ae:	416d      	adcs	r5, r5
 80083b0:	eb46 0606 	adc.w	r6, r6, r6
 80083b4:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80083b8:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80083bc:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80083c0:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80083c4:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80083c8:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80083cc:	bf88      	it	hi
 80083ce:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80083d2:	d81e      	bhi.n	8008412 <__aeabi_dmul+0xde>
 80083d4:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80083d8:	bf08      	it	eq
 80083da:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80083de:	f150 0000 	adcs.w	r0, r0, #0
 80083e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80083e6:	bd70      	pop	{r4, r5, r6, pc}
 80083e8:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80083ec:	ea46 0101 	orr.w	r1, r6, r1
 80083f0:	ea40 0002 	orr.w	r0, r0, r2
 80083f4:	ea81 0103 	eor.w	r1, r1, r3
 80083f8:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80083fc:	bfc2      	ittt	gt
 80083fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8008402:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8008406:	bd70      	popgt	{r4, r5, r6, pc}
 8008408:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800840c:	f04f 0e00 	mov.w	lr, #0
 8008410:	3c01      	subs	r4, #1
 8008412:	f300 80ab 	bgt.w	800856c <__aeabi_dmul+0x238>
 8008416:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800841a:	bfde      	ittt	le
 800841c:	2000      	movle	r0, #0
 800841e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8008422:	bd70      	pople	{r4, r5, r6, pc}
 8008424:	f1c4 0400 	rsb	r4, r4, #0
 8008428:	3c20      	subs	r4, #32
 800842a:	da35      	bge.n	8008498 <__aeabi_dmul+0x164>
 800842c:	340c      	adds	r4, #12
 800842e:	dc1b      	bgt.n	8008468 <__aeabi_dmul+0x134>
 8008430:	f104 0414 	add.w	r4, r4, #20
 8008434:	f1c4 0520 	rsb	r5, r4, #32
 8008438:	fa00 f305 	lsl.w	r3, r0, r5
 800843c:	fa20 f004 	lsr.w	r0, r0, r4
 8008440:	fa01 f205 	lsl.w	r2, r1, r5
 8008444:	ea40 0002 	orr.w	r0, r0, r2
 8008448:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 800844c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8008450:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8008454:	fa21 f604 	lsr.w	r6, r1, r4
 8008458:	eb42 0106 	adc.w	r1, r2, r6
 800845c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8008460:	bf08      	it	eq
 8008462:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8008466:	bd70      	pop	{r4, r5, r6, pc}
 8008468:	f1c4 040c 	rsb	r4, r4, #12
 800846c:	f1c4 0520 	rsb	r5, r4, #32
 8008470:	fa00 f304 	lsl.w	r3, r0, r4
 8008474:	fa20 f005 	lsr.w	r0, r0, r5
 8008478:	fa01 f204 	lsl.w	r2, r1, r4
 800847c:	ea40 0002 	orr.w	r0, r0, r2
 8008480:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8008484:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8008488:	f141 0100 	adc.w	r1, r1, #0
 800848c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8008490:	bf08      	it	eq
 8008492:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8008496:	bd70      	pop	{r4, r5, r6, pc}
 8008498:	f1c4 0520 	rsb	r5, r4, #32
 800849c:	fa00 f205 	lsl.w	r2, r0, r5
 80084a0:	ea4e 0e02 	orr.w	lr, lr, r2
 80084a4:	fa20 f304 	lsr.w	r3, r0, r4
 80084a8:	fa01 f205 	lsl.w	r2, r1, r5
 80084ac:	ea43 0302 	orr.w	r3, r3, r2
 80084b0:	fa21 f004 	lsr.w	r0, r1, r4
 80084b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80084b8:	fa21 f204 	lsr.w	r2, r1, r4
 80084bc:	ea20 0002 	bic.w	r0, r0, r2
 80084c0:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80084c4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80084c8:	bf08      	it	eq
 80084ca:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80084ce:	bd70      	pop	{r4, r5, r6, pc}
 80084d0:	f094 0f00 	teq	r4, #0
 80084d4:	d10f      	bne.n	80084f6 <__aeabi_dmul+0x1c2>
 80084d6:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80084da:	0040      	lsls	r0, r0, #1
 80084dc:	eb41 0101 	adc.w	r1, r1, r1
 80084e0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80084e4:	bf08      	it	eq
 80084e6:	3c01      	subeq	r4, #1
 80084e8:	d0f7      	beq.n	80084da <__aeabi_dmul+0x1a6>
 80084ea:	ea41 0106 	orr.w	r1, r1, r6
 80084ee:	f095 0f00 	teq	r5, #0
 80084f2:	bf18      	it	ne
 80084f4:	4770      	bxne	lr
 80084f6:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80084fa:	0052      	lsls	r2, r2, #1
 80084fc:	eb43 0303 	adc.w	r3, r3, r3
 8008500:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8008504:	bf08      	it	eq
 8008506:	3d01      	subeq	r5, #1
 8008508:	d0f7      	beq.n	80084fa <__aeabi_dmul+0x1c6>
 800850a:	ea43 0306 	orr.w	r3, r3, r6
 800850e:	4770      	bx	lr
 8008510:	ea94 0f0c 	teq	r4, ip
 8008514:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8008518:	bf18      	it	ne
 800851a:	ea95 0f0c 	teqne	r5, ip
 800851e:	d00c      	beq.n	800853a <__aeabi_dmul+0x206>
 8008520:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8008524:	bf18      	it	ne
 8008526:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800852a:	d1d1      	bne.n	80084d0 <__aeabi_dmul+0x19c>
 800852c:	ea81 0103 	eor.w	r1, r1, r3
 8008530:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8008534:	f04f 0000 	mov.w	r0, #0
 8008538:	bd70      	pop	{r4, r5, r6, pc}
 800853a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800853e:	bf06      	itte	eq
 8008540:	4610      	moveq	r0, r2
 8008542:	4619      	moveq	r1, r3
 8008544:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8008548:	d019      	beq.n	800857e <__aeabi_dmul+0x24a>
 800854a:	ea94 0f0c 	teq	r4, ip
 800854e:	d102      	bne.n	8008556 <__aeabi_dmul+0x222>
 8008550:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8008554:	d113      	bne.n	800857e <__aeabi_dmul+0x24a>
 8008556:	ea95 0f0c 	teq	r5, ip
 800855a:	d105      	bne.n	8008568 <__aeabi_dmul+0x234>
 800855c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8008560:	bf1c      	itt	ne
 8008562:	4610      	movne	r0, r2
 8008564:	4619      	movne	r1, r3
 8008566:	d10a      	bne.n	800857e <__aeabi_dmul+0x24a>
 8008568:	ea81 0103 	eor.w	r1, r1, r3
 800856c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8008570:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8008574:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8008578:	f04f 0000 	mov.w	r0, #0
 800857c:	bd70      	pop	{r4, r5, r6, pc}
 800857e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8008582:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8008586:	bd70      	pop	{r4, r5, r6, pc}

08008588 <__aeabi_ddiv>:
 8008588:	b570      	push	{r4, r5, r6, lr}
 800858a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800858e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8008592:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8008596:	bf1d      	ittte	ne
 8008598:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800859c:	ea94 0f0c 	teqne	r4, ip
 80085a0:	ea95 0f0c 	teqne	r5, ip
 80085a4:	f000 f8a7 	bleq	80086f6 <__aeabi_ddiv+0x16e>
 80085a8:	eba4 0405 	sub.w	r4, r4, r5
 80085ac:	ea81 0e03 	eor.w	lr, r1, r3
 80085b0:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80085b4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80085b8:	f000 8088 	beq.w	80086cc <__aeabi_ddiv+0x144>
 80085bc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80085c0:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80085c4:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80085c8:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80085cc:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80085d0:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80085d4:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80085d8:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80085dc:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80085e0:	429d      	cmp	r5, r3
 80085e2:	bf08      	it	eq
 80085e4:	4296      	cmpeq	r6, r2
 80085e6:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80085ea:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80085ee:	d202      	bcs.n	80085f6 <__aeabi_ddiv+0x6e>
 80085f0:	085b      	lsrs	r3, r3, #1
 80085f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80085f6:	1ab6      	subs	r6, r6, r2
 80085f8:	eb65 0503 	sbc.w	r5, r5, r3
 80085fc:	085b      	lsrs	r3, r3, #1
 80085fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8008602:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8008606:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800860a:	ebb6 0e02 	subs.w	lr, r6, r2
 800860e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8008612:	bf22      	ittt	cs
 8008614:	1ab6      	subcs	r6, r6, r2
 8008616:	4675      	movcs	r5, lr
 8008618:	ea40 000c 	orrcs.w	r0, r0, ip
 800861c:	085b      	lsrs	r3, r3, #1
 800861e:	ea4f 0232 	mov.w	r2, r2, rrx
 8008622:	ebb6 0e02 	subs.w	lr, r6, r2
 8008626:	eb75 0e03 	sbcs.w	lr, r5, r3
 800862a:	bf22      	ittt	cs
 800862c:	1ab6      	subcs	r6, r6, r2
 800862e:	4675      	movcs	r5, lr
 8008630:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8008634:	085b      	lsrs	r3, r3, #1
 8008636:	ea4f 0232 	mov.w	r2, r2, rrx
 800863a:	ebb6 0e02 	subs.w	lr, r6, r2
 800863e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8008642:	bf22      	ittt	cs
 8008644:	1ab6      	subcs	r6, r6, r2
 8008646:	4675      	movcs	r5, lr
 8008648:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800864c:	085b      	lsrs	r3, r3, #1
 800864e:	ea4f 0232 	mov.w	r2, r2, rrx
 8008652:	ebb6 0e02 	subs.w	lr, r6, r2
 8008656:	eb75 0e03 	sbcs.w	lr, r5, r3
 800865a:	bf22      	ittt	cs
 800865c:	1ab6      	subcs	r6, r6, r2
 800865e:	4675      	movcs	r5, lr
 8008660:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8008664:	ea55 0e06 	orrs.w	lr, r5, r6
 8008668:	d018      	beq.n	800869c <__aeabi_ddiv+0x114>
 800866a:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800866e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8008672:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8008676:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800867a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800867e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8008682:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8008686:	d1c0      	bne.n	800860a <__aeabi_ddiv+0x82>
 8008688:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800868c:	d10b      	bne.n	80086a6 <__aeabi_ddiv+0x11e>
 800868e:	ea41 0100 	orr.w	r1, r1, r0
 8008692:	f04f 0000 	mov.w	r0, #0
 8008696:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800869a:	e7b6      	b.n	800860a <__aeabi_ddiv+0x82>
 800869c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80086a0:	bf04      	itt	eq
 80086a2:	4301      	orreq	r1, r0
 80086a4:	2000      	moveq	r0, #0
 80086a6:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80086aa:	bf88      	it	hi
 80086ac:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80086b0:	f63f aeaf 	bhi.w	8008412 <__aeabi_dmul+0xde>
 80086b4:	ebb5 0c03 	subs.w	ip, r5, r3
 80086b8:	bf04      	itt	eq
 80086ba:	ebb6 0c02 	subseq.w	ip, r6, r2
 80086be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80086c2:	f150 0000 	adcs.w	r0, r0, #0
 80086c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80086ca:	bd70      	pop	{r4, r5, r6, pc}
 80086cc:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80086d0:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80086d4:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80086d8:	bfc2      	ittt	gt
 80086da:	ebd4 050c 	rsbsgt	r5, r4, ip
 80086de:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80086e2:	bd70      	popgt	{r4, r5, r6, pc}
 80086e4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80086e8:	f04f 0e00 	mov.w	lr, #0
 80086ec:	3c01      	subs	r4, #1
 80086ee:	e690      	b.n	8008412 <__aeabi_dmul+0xde>
 80086f0:	ea45 0e06 	orr.w	lr, r5, r6
 80086f4:	e68d      	b.n	8008412 <__aeabi_dmul+0xde>
 80086f6:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80086fa:	ea94 0f0c 	teq	r4, ip
 80086fe:	bf08      	it	eq
 8008700:	ea95 0f0c 	teqeq	r5, ip
 8008704:	f43f af3b 	beq.w	800857e <__aeabi_dmul+0x24a>
 8008708:	ea94 0f0c 	teq	r4, ip
 800870c:	d10a      	bne.n	8008724 <__aeabi_ddiv+0x19c>
 800870e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8008712:	f47f af34 	bne.w	800857e <__aeabi_dmul+0x24a>
 8008716:	ea95 0f0c 	teq	r5, ip
 800871a:	f47f af25 	bne.w	8008568 <__aeabi_dmul+0x234>
 800871e:	4610      	mov	r0, r2
 8008720:	4619      	mov	r1, r3
 8008722:	e72c      	b.n	800857e <__aeabi_dmul+0x24a>
 8008724:	ea95 0f0c 	teq	r5, ip
 8008728:	d106      	bne.n	8008738 <__aeabi_ddiv+0x1b0>
 800872a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800872e:	f43f aefd 	beq.w	800852c <__aeabi_dmul+0x1f8>
 8008732:	4610      	mov	r0, r2
 8008734:	4619      	mov	r1, r3
 8008736:	e722      	b.n	800857e <__aeabi_dmul+0x24a>
 8008738:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800873c:	bf18      	it	ne
 800873e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8008742:	f47f aec5 	bne.w	80084d0 <__aeabi_dmul+0x19c>
 8008746:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800874a:	f47f af0d 	bne.w	8008568 <__aeabi_dmul+0x234>
 800874e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8008752:	f47f aeeb 	bne.w	800852c <__aeabi_dmul+0x1f8>
 8008756:	e712      	b.n	800857e <__aeabi_dmul+0x24a>

08008758 <__gedf2>:
 8008758:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 800875c:	e006      	b.n	800876c <__cmpdf2+0x4>
 800875e:	bf00      	nop

08008760 <__ledf2>:
 8008760:	f04f 0c01 	mov.w	ip, #1
 8008764:	e002      	b.n	800876c <__cmpdf2+0x4>
 8008766:	bf00      	nop

08008768 <__cmpdf2>:
 8008768:	f04f 0c01 	mov.w	ip, #1
 800876c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8008770:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8008774:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8008778:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800877c:	bf18      	it	ne
 800877e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8008782:	d01b      	beq.n	80087bc <__cmpdf2+0x54>
 8008784:	b001      	add	sp, #4
 8008786:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800878a:	bf0c      	ite	eq
 800878c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8008790:	ea91 0f03 	teqne	r1, r3
 8008794:	bf02      	ittt	eq
 8008796:	ea90 0f02 	teqeq	r0, r2
 800879a:	2000      	moveq	r0, #0
 800879c:	4770      	bxeq	lr
 800879e:	f110 0f00 	cmn.w	r0, #0
 80087a2:	ea91 0f03 	teq	r1, r3
 80087a6:	bf58      	it	pl
 80087a8:	4299      	cmppl	r1, r3
 80087aa:	bf08      	it	eq
 80087ac:	4290      	cmpeq	r0, r2
 80087ae:	bf2c      	ite	cs
 80087b0:	17d8      	asrcs	r0, r3, #31
 80087b2:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80087b6:	f040 0001 	orr.w	r0, r0, #1
 80087ba:	4770      	bx	lr
 80087bc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80087c0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80087c4:	d102      	bne.n	80087cc <__cmpdf2+0x64>
 80087c6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80087ca:	d107      	bne.n	80087dc <__cmpdf2+0x74>
 80087cc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80087d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80087d4:	d1d6      	bne.n	8008784 <__cmpdf2+0x1c>
 80087d6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80087da:	d0d3      	beq.n	8008784 <__cmpdf2+0x1c>
 80087dc:	f85d 0b04 	ldr.w	r0, [sp], #4
 80087e0:	4770      	bx	lr
 80087e2:	bf00      	nop

080087e4 <__aeabi_cdrcmple>:
 80087e4:	4684      	mov	ip, r0
 80087e6:	4610      	mov	r0, r2
 80087e8:	4662      	mov	r2, ip
 80087ea:	468c      	mov	ip, r1
 80087ec:	4619      	mov	r1, r3
 80087ee:	4663      	mov	r3, ip
 80087f0:	e000      	b.n	80087f4 <__aeabi_cdcmpeq>
 80087f2:	bf00      	nop

080087f4 <__aeabi_cdcmpeq>:
 80087f4:	b501      	push	{r0, lr}
 80087f6:	f7ff ffb7 	bl	8008768 <__cmpdf2>
 80087fa:	2800      	cmp	r0, #0
 80087fc:	bf48      	it	mi
 80087fe:	f110 0f00 	cmnmi.w	r0, #0
 8008802:	bd01      	pop	{r0, pc}

08008804 <__aeabi_dcmpeq>:
 8008804:	f84d ed08 	str.w	lr, [sp, #-8]!
 8008808:	f7ff fff4 	bl	80087f4 <__aeabi_cdcmpeq>
 800880c:	bf0c      	ite	eq
 800880e:	2001      	moveq	r0, #1
 8008810:	2000      	movne	r0, #0
 8008812:	f85d fb08 	ldr.w	pc, [sp], #8
 8008816:	bf00      	nop

08008818 <__aeabi_dcmplt>:
 8008818:	f84d ed08 	str.w	lr, [sp, #-8]!
 800881c:	f7ff ffea 	bl	80087f4 <__aeabi_cdcmpeq>
 8008820:	bf34      	ite	cc
 8008822:	2001      	movcc	r0, #1
 8008824:	2000      	movcs	r0, #0
 8008826:	f85d fb08 	ldr.w	pc, [sp], #8
 800882a:	bf00      	nop

0800882c <__aeabi_dcmple>:
 800882c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8008830:	f7ff ffe0 	bl	80087f4 <__aeabi_cdcmpeq>
 8008834:	bf94      	ite	ls
 8008836:	2001      	movls	r0, #1
 8008838:	2000      	movhi	r0, #0
 800883a:	f85d fb08 	ldr.w	pc, [sp], #8
 800883e:	bf00      	nop

08008840 <__aeabi_dcmpge>:
 8008840:	f84d ed08 	str.w	lr, [sp, #-8]!
 8008844:	f7ff ffce 	bl	80087e4 <__aeabi_cdrcmple>
 8008848:	bf94      	ite	ls
 800884a:	2001      	movls	r0, #1
 800884c:	2000      	movhi	r0, #0
 800884e:	f85d fb08 	ldr.w	pc, [sp], #8
 8008852:	bf00      	nop

08008854 <__aeabi_dcmpgt>:
 8008854:	f84d ed08 	str.w	lr, [sp, #-8]!
 8008858:	f7ff ffc4 	bl	80087e4 <__aeabi_cdrcmple>
 800885c:	bf34      	ite	cc
 800885e:	2001      	movcc	r0, #1
 8008860:	2000      	movcs	r0, #0
 8008862:	f85d fb08 	ldr.w	pc, [sp], #8
 8008866:	bf00      	nop

08008868 <__aeabi_dcmpun>:
 8008868:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800886c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8008870:	d102      	bne.n	8008878 <__aeabi_dcmpun+0x10>
 8008872:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8008876:	d10a      	bne.n	800888e <__aeabi_dcmpun+0x26>
 8008878:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800887c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8008880:	d102      	bne.n	8008888 <__aeabi_dcmpun+0x20>
 8008882:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8008886:	d102      	bne.n	800888e <__aeabi_dcmpun+0x26>
 8008888:	f04f 0000 	mov.w	r0, #0
 800888c:	4770      	bx	lr
 800888e:	f04f 0001 	mov.w	r0, #1
 8008892:	4770      	bx	lr

08008894 <__aeabi_d2iz>:
 8008894:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8008898:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 800889c:	d215      	bcs.n	80088ca <__aeabi_d2iz+0x36>
 800889e:	d511      	bpl.n	80088c4 <__aeabi_d2iz+0x30>
 80088a0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80088a4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80088a8:	d912      	bls.n	80088d0 <__aeabi_d2iz+0x3c>
 80088aa:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80088ae:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80088b2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80088b6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80088ba:	fa23 f002 	lsr.w	r0, r3, r2
 80088be:	bf18      	it	ne
 80088c0:	4240      	negne	r0, r0
 80088c2:	4770      	bx	lr
 80088c4:	f04f 0000 	mov.w	r0, #0
 80088c8:	4770      	bx	lr
 80088ca:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80088ce:	d105      	bne.n	80088dc <__aeabi_d2iz+0x48>
 80088d0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80088d4:	bf08      	it	eq
 80088d6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80088da:	4770      	bx	lr
 80088dc:	f04f 0000 	mov.w	r0, #0
 80088e0:	4770      	bx	lr
 80088e2:	bf00      	nop

080088e4 <selfrel_offset31>:
 80088e4:	6803      	ldr	r3, [r0, #0]
 80088e6:	005a      	lsls	r2, r3, #1
 80088e8:	bf4c      	ite	mi
 80088ea:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 80088ee:	f023 4300 	bicpl.w	r3, r3, #2147483648	; 0x80000000
 80088f2:	4418      	add	r0, r3
 80088f4:	4770      	bx	lr
 80088f6:	bf00      	nop

080088f8 <search_EIT_table>:
 80088f8:	b361      	cbz	r1, 8008954 <search_EIT_table+0x5c>
 80088fa:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088fe:	f101 3aff 	add.w	sl, r1, #4294967295	; 0xffffffff
 8008902:	4690      	mov	r8, r2
 8008904:	4606      	mov	r6, r0
 8008906:	46d1      	mov	r9, sl
 8008908:	2700      	movs	r7, #0
 800890a:	eb07 0409 	add.w	r4, r7, r9
 800890e:	eb04 74d4 	add.w	r4, r4, r4, lsr #31
 8008912:	1064      	asrs	r4, r4, #1
 8008914:	00e5      	lsls	r5, r4, #3
 8008916:	1971      	adds	r1, r6, r5
 8008918:	4608      	mov	r0, r1
 800891a:	f7ff ffe3 	bl	80088e4 <selfrel_offset31>
 800891e:	45a2      	cmp	sl, r4
 8008920:	4683      	mov	fp, r0
 8008922:	f105 0008 	add.w	r0, r5, #8
 8008926:	4430      	add	r0, r6
 8008928:	d009      	beq.n	800893e <search_EIT_table+0x46>
 800892a:	f7ff ffdb 	bl	80088e4 <selfrel_offset31>
 800892e:	45c3      	cmp	fp, r8
 8008930:	f100 30ff 	add.w	r0, r0, #4294967295	; 0xffffffff
 8008934:	d805      	bhi.n	8008942 <search_EIT_table+0x4a>
 8008936:	4540      	cmp	r0, r8
 8008938:	d209      	bcs.n	800894e <search_EIT_table+0x56>
 800893a:	1c67      	adds	r7, r4, #1
 800893c:	e7e5      	b.n	800890a <search_EIT_table+0x12>
 800893e:	45c3      	cmp	fp, r8
 8008940:	d905      	bls.n	800894e <search_EIT_table+0x56>
 8008942:	42a7      	cmp	r7, r4
 8008944:	d002      	beq.n	800894c <search_EIT_table+0x54>
 8008946:	f104 39ff 	add.w	r9, r4, #4294967295	; 0xffffffff
 800894a:	e7de      	b.n	800890a <search_EIT_table+0x12>
 800894c:	2100      	movs	r1, #0
 800894e:	4608      	mov	r0, r1
 8008950:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008954:	4608      	mov	r0, r1
 8008956:	4770      	bx	lr

08008958 <__gnu_unwind_get_pr_addr>:
 8008958:	2801      	cmp	r0, #1
 800895a:	d007      	beq.n	800896c <__gnu_unwind_get_pr_addr+0x14>
 800895c:	2802      	cmp	r0, #2
 800895e:	d007      	beq.n	8008970 <__gnu_unwind_get_pr_addr+0x18>
 8008960:	4b04      	ldr	r3, [pc, #16]	; (8008974 <__gnu_unwind_get_pr_addr+0x1c>)
 8008962:	2800      	cmp	r0, #0
 8008964:	bf0c      	ite	eq
 8008966:	4618      	moveq	r0, r3
 8008968:	2000      	movne	r0, #0
 800896a:	4770      	bx	lr
 800896c:	4802      	ldr	r0, [pc, #8]	; (8008978 <__gnu_unwind_get_pr_addr+0x20>)
 800896e:	4770      	bx	lr
 8008970:	4802      	ldr	r0, [pc, #8]	; (800897c <__gnu_unwind_get_pr_addr+0x24>)
 8008972:	4770      	bx	lr
 8008974:	08009069 	.word	0x08009069
 8008978:	0800906d 	.word	0x0800906d
 800897c:	08009071 	.word	0x08009071

08008980 <get_eit_entry>:
 8008980:	b530      	push	{r4, r5, lr}
 8008982:	4b25      	ldr	r3, [pc, #148]	; (8008a18 <get_eit_entry+0x98>)
 8008984:	b083      	sub	sp, #12
 8008986:	4604      	mov	r4, r0
 8008988:	1e8d      	subs	r5, r1, #2
 800898a:	b373      	cbz	r3, 80089ea <get_eit_entry+0x6a>
 800898c:	a901      	add	r1, sp, #4
 800898e:	4628      	mov	r0, r5
 8008990:	f3af 8000 	nop.w
 8008994:	b318      	cbz	r0, 80089de <get_eit_entry+0x5e>
 8008996:	9901      	ldr	r1, [sp, #4]
 8008998:	462a      	mov	r2, r5
 800899a:	f7ff ffad 	bl	80088f8 <search_EIT_table>
 800899e:	4601      	mov	r1, r0
 80089a0:	b1e8      	cbz	r0, 80089de <get_eit_entry+0x5e>
 80089a2:	f7ff ff9f 	bl	80088e4 <selfrel_offset31>
 80089a6:	684b      	ldr	r3, [r1, #4]
 80089a8:	64a0      	str	r0, [r4, #72]	; 0x48
 80089aa:	2b01      	cmp	r3, #1
 80089ac:	d011      	beq.n	80089d2 <get_eit_entry+0x52>
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	db22      	blt.n	80089f8 <get_eit_entry+0x78>
 80089b2:	1d08      	adds	r0, r1, #4
 80089b4:	f7ff ff96 	bl	80088e4 <selfrel_offset31>
 80089b8:	2300      	movs	r3, #0
 80089ba:	64e0      	str	r0, [r4, #76]	; 0x4c
 80089bc:	6523      	str	r3, [r4, #80]	; 0x50
 80089be:	6803      	ldr	r3, [r0, #0]
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	db1e      	blt.n	8008a02 <get_eit_entry+0x82>
 80089c4:	f7ff ff8e 	bl	80088e4 <selfrel_offset31>
 80089c8:	2300      	movs	r3, #0
 80089ca:	6120      	str	r0, [r4, #16]
 80089cc:	4618      	mov	r0, r3
 80089ce:	b003      	add	sp, #12
 80089d0:	bd30      	pop	{r4, r5, pc}
 80089d2:	2305      	movs	r3, #5
 80089d4:	2200      	movs	r2, #0
 80089d6:	4618      	mov	r0, r3
 80089d8:	6122      	str	r2, [r4, #16]
 80089da:	b003      	add	sp, #12
 80089dc:	bd30      	pop	{r4, r5, pc}
 80089de:	2309      	movs	r3, #9
 80089e0:	2200      	movs	r2, #0
 80089e2:	4618      	mov	r0, r3
 80089e4:	6122      	str	r2, [r4, #16]
 80089e6:	b003      	add	sp, #12
 80089e8:	bd30      	pop	{r4, r5, pc}
 80089ea:	4b0c      	ldr	r3, [pc, #48]	; (8008a1c <get_eit_entry+0x9c>)
 80089ec:	490c      	ldr	r1, [pc, #48]	; (8008a20 <get_eit_entry+0xa0>)
 80089ee:	4618      	mov	r0, r3
 80089f0:	1ac9      	subs	r1, r1, r3
 80089f2:	10c9      	asrs	r1, r1, #3
 80089f4:	9101      	str	r1, [sp, #4]
 80089f6:	e7cf      	b.n	8008998 <get_eit_entry+0x18>
 80089f8:	2301      	movs	r3, #1
 80089fa:	1d08      	adds	r0, r1, #4
 80089fc:	64e0      	str	r0, [r4, #76]	; 0x4c
 80089fe:	6523      	str	r3, [r4, #80]	; 0x50
 8008a00:	e7dd      	b.n	80089be <get_eit_entry+0x3e>
 8008a02:	f3c3 6003 	ubfx	r0, r3, #24, #4
 8008a06:	f7ff ffa7 	bl	8008958 <__gnu_unwind_get_pr_addr>
 8008a0a:	2800      	cmp	r0, #0
 8008a0c:	6120      	str	r0, [r4, #16]
 8008a0e:	bf14      	ite	ne
 8008a10:	2300      	movne	r3, #0
 8008a12:	2309      	moveq	r3, #9
 8008a14:	e7da      	b.n	80089cc <get_eit_entry+0x4c>
 8008a16:	bf00      	nop
 8008a18:	00000000 	.word	0x00000000
 8008a1c:	0800c5bc 	.word	0x0800c5bc
 8008a20:	0800c7c4 	.word	0x0800c7c4

08008a24 <restore_non_core_regs>:
 8008a24:	6803      	ldr	r3, [r0, #0]
 8008a26:	b510      	push	{r4, lr}
 8008a28:	07da      	lsls	r2, r3, #31
 8008a2a:	4604      	mov	r4, r0
 8008a2c:	d406      	bmi.n	8008a3c <restore_non_core_regs+0x18>
 8008a2e:	079b      	lsls	r3, r3, #30
 8008a30:	f100 0048 	add.w	r0, r0, #72	; 0x48
 8008a34:	d509      	bpl.n	8008a4a <restore_non_core_regs+0x26>
 8008a36:	f000 fc57 	bl	80092e8 <__gnu_Unwind_Restore_VFP_D>
 8008a3a:	6823      	ldr	r3, [r4, #0]
 8008a3c:	0759      	lsls	r1, r3, #29
 8008a3e:	d509      	bpl.n	8008a54 <restore_non_core_regs+0x30>
 8008a40:	071a      	lsls	r2, r3, #28
 8008a42:	d50e      	bpl.n	8008a62 <restore_non_core_regs+0x3e>
 8008a44:	06db      	lsls	r3, r3, #27
 8008a46:	d513      	bpl.n	8008a70 <restore_non_core_regs+0x4c>
 8008a48:	bd10      	pop	{r4, pc}
 8008a4a:	f000 fc45 	bl	80092d8 <__gnu_Unwind_Restore_VFP>
 8008a4e:	6823      	ldr	r3, [r4, #0]
 8008a50:	0759      	lsls	r1, r3, #29
 8008a52:	d4f5      	bmi.n	8008a40 <restore_non_core_regs+0x1c>
 8008a54:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8008a58:	f000 fc4e 	bl	80092f8 <__gnu_Unwind_Restore_VFP_D_16_to_31>
 8008a5c:	6823      	ldr	r3, [r4, #0]
 8008a5e:	071a      	lsls	r2, r3, #28
 8008a60:	d4f0      	bmi.n	8008a44 <restore_non_core_regs+0x20>
 8008a62:	f504 70a8 	add.w	r0, r4, #336	; 0x150
 8008a66:	f000 fc4f 	bl	8009308 <__gnu_Unwind_Restore_WMMXD>
 8008a6a:	6823      	ldr	r3, [r4, #0]
 8008a6c:	06db      	lsls	r3, r3, #27
 8008a6e:	d4eb      	bmi.n	8008a48 <restore_non_core_regs+0x24>
 8008a70:	f504 70e8 	add.w	r0, r4, #464	; 0x1d0
 8008a74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008a78:	f000 bc8a 	b.w	8009390 <__gnu_Unwind_Restore_WMMXC>

08008a7c <_Unwind_decode_typeinfo_ptr.isra.0>:
 8008a7c:	6803      	ldr	r3, [r0, #0]
 8008a7e:	b103      	cbz	r3, 8008a82 <_Unwind_decode_typeinfo_ptr.isra.0+0x6>
 8008a80:	4403      	add	r3, r0
 8008a82:	4618      	mov	r0, r3
 8008a84:	4770      	bx	lr
 8008a86:	bf00      	nop

08008a88 <__gnu_unwind_24bit.isra.1>:
 8008a88:	2009      	movs	r0, #9
 8008a8a:	4770      	bx	lr

08008a8c <_Unwind_DebugHook>:
 8008a8c:	4770      	bx	lr
 8008a8e:	bf00      	nop

08008a90 <unwind_phase2>:
 8008a90:	b570      	push	{r4, r5, r6, lr}
 8008a92:	4604      	mov	r4, r0
 8008a94:	460d      	mov	r5, r1
 8008a96:	e008      	b.n	8008aaa <unwind_phase2+0x1a>
 8008a98:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8008a9a:	6923      	ldr	r3, [r4, #16]
 8008a9c:	6162      	str	r2, [r4, #20]
 8008a9e:	4621      	mov	r1, r4
 8008aa0:	462a      	mov	r2, r5
 8008aa2:	2001      	movs	r0, #1
 8008aa4:	4798      	blx	r3
 8008aa6:	2808      	cmp	r0, #8
 8008aa8:	d108      	bne.n	8008abc <unwind_phase2+0x2c>
 8008aaa:	6c29      	ldr	r1, [r5, #64]	; 0x40
 8008aac:	4620      	mov	r0, r4
 8008aae:	f7ff ff67 	bl	8008980 <get_eit_entry>
 8008ab2:	4606      	mov	r6, r0
 8008ab4:	2800      	cmp	r0, #0
 8008ab6:	d0ef      	beq.n	8008a98 <unwind_phase2+0x8>
 8008ab8:	f003 f816 	bl	800bae8 <abort>
 8008abc:	2807      	cmp	r0, #7
 8008abe:	d1fb      	bne.n	8008ab8 <unwind_phase2+0x28>
 8008ac0:	4630      	mov	r0, r6
 8008ac2:	6c29      	ldr	r1, [r5, #64]	; 0x40
 8008ac4:	f7ff ffe2 	bl	8008a8c <_Unwind_DebugHook>
 8008ac8:	1d28      	adds	r0, r5, #4
 8008aca:	f000 fbf9 	bl	80092c0 <__restore_core_regs>
 8008ace:	bf00      	nop

08008ad0 <unwind_phase2_forced>:
 8008ad0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008ad4:	4605      	mov	r5, r0
 8008ad6:	2700      	movs	r7, #0
 8008ad8:	f5ad 7d72 	sub.w	sp, sp, #968	; 0x3c8
 8008adc:	ac03      	add	r4, sp, #12
 8008ade:	1d0e      	adds	r6, r1, #4
 8008ae0:	4692      	mov	sl, r2
 8008ae2:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8008ae4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008ae6:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8008ae8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008aea:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8008aec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008aee:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8008af2:	f8d5 800c 	ldr.w	r8, [r5, #12]
 8008af6:	f8d5 9018 	ldr.w	r9, [r5, #24]
 8008afa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8008afe:	ac02      	add	r4, sp, #8
 8008b00:	4628      	mov	r0, r5
 8008b02:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8008b04:	6027      	str	r7, [r4, #0]
 8008b06:	f7ff ff3b 	bl	8008980 <get_eit_entry>
 8008b0a:	f1ba 0f00 	cmp.w	sl, #0
 8008b0e:	4607      	mov	r7, r0
 8008b10:	bf14      	ite	ne
 8008b12:	260a      	movne	r6, #10
 8008b14:	2609      	moveq	r6, #9
 8008b16:	b17f      	cbz	r7, 8008b38 <unwind_phase2_forced+0x68>
 8008b18:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8008b1a:	f046 0110 	orr.w	r1, r6, #16
 8008b1e:	e88d 0210 	stmia.w	sp, {r4, r9}
 8008b22:	462a      	mov	r2, r5
 8008b24:	6463      	str	r3, [r4, #68]	; 0x44
 8008b26:	2001      	movs	r0, #1
 8008b28:	462b      	mov	r3, r5
 8008b2a:	47c0      	blx	r8
 8008b2c:	bb78      	cbnz	r0, 8008b8e <unwind_phase2_forced+0xbe>
 8008b2e:	4638      	mov	r0, r7
 8008b30:	f50d 7d72 	add.w	sp, sp, #968	; 0x3c8
 8008b34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b38:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008b3a:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8008b3e:	616b      	str	r3, [r5, #20]
 8008b40:	4621      	mov	r1, r4
 8008b42:	a87a      	add	r0, sp, #488	; 0x1e8
 8008b44:	f002 fc6a 	bl	800b41c <memcpy>
 8008b48:	692b      	ldr	r3, [r5, #16]
 8008b4a:	aa7a      	add	r2, sp, #488	; 0x1e8
 8008b4c:	4629      	mov	r1, r5
 8008b4e:	4630      	mov	r0, r6
 8008b50:	4798      	blx	r3
 8008b52:	9b88      	ldr	r3, [sp, #544]	; 0x220
 8008b54:	4682      	mov	sl, r0
 8008b56:	e88d 0210 	stmia.w	sp, {r4, r9}
 8008b5a:	4631      	mov	r1, r6
 8008b5c:	6463      	str	r3, [r4, #68]	; 0x44
 8008b5e:	462a      	mov	r2, r5
 8008b60:	462b      	mov	r3, r5
 8008b62:	2001      	movs	r0, #1
 8008b64:	47c0      	blx	r8
 8008b66:	b990      	cbnz	r0, 8008b8e <unwind_phase2_forced+0xbe>
 8008b68:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8008b6c:	a97a      	add	r1, sp, #488	; 0x1e8
 8008b6e:	4620      	mov	r0, r4
 8008b70:	f002 fc54 	bl	800b41c <memcpy>
 8008b74:	f1ba 0f08 	cmp.w	sl, #8
 8008b78:	d106      	bne.n	8008b88 <unwind_phase2_forced+0xb8>
 8008b7a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8008b7c:	4628      	mov	r0, r5
 8008b7e:	f7ff feff 	bl	8008980 <get_eit_entry>
 8008b82:	2609      	movs	r6, #9
 8008b84:	4607      	mov	r7, r0
 8008b86:	e7c6      	b.n	8008b16 <unwind_phase2_forced+0x46>
 8008b88:	f1ba 0f07 	cmp.w	sl, #7
 8008b8c:	d005      	beq.n	8008b9a <unwind_phase2_forced+0xca>
 8008b8e:	2709      	movs	r7, #9
 8008b90:	4638      	mov	r0, r7
 8008b92:	f50d 7d72 	add.w	sp, sp, #968	; 0x3c8
 8008b96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b9a:	4638      	mov	r0, r7
 8008b9c:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8008b9e:	f7ff ff75 	bl	8008a8c <_Unwind_DebugHook>
 8008ba2:	a803      	add	r0, sp, #12
 8008ba4:	f000 fb8c 	bl	80092c0 <__restore_core_regs>

08008ba8 <_Unwind_GetCFA>:
 8008ba8:	6c40      	ldr	r0, [r0, #68]	; 0x44
 8008baa:	4770      	bx	lr

08008bac <__gnu_Unwind_RaiseException>:
 8008bac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008bae:	f04f 3eff 	mov.w	lr, #4294967295	; 0xffffffff
 8008bb2:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 8008bb4:	b0f9      	sub	sp, #484	; 0x1e4
 8008bb6:	640b      	str	r3, [r1, #64]	; 0x40
 8008bb8:	1d0e      	adds	r6, r1, #4
 8008bba:	ad01      	add	r5, sp, #4
 8008bbc:	460f      	mov	r7, r1
 8008bbe:	4604      	mov	r4, r0
 8008bc0:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8008bc2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008bc4:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8008bc6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008bc8:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8008bca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008bcc:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8008bd0:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8008bd4:	f8cd e000 	str.w	lr, [sp]
 8008bd8:	e006      	b.n	8008be8 <__gnu_Unwind_RaiseException+0x3c>
 8008bda:	6923      	ldr	r3, [r4, #16]
 8008bdc:	466a      	mov	r2, sp
 8008bde:	4621      	mov	r1, r4
 8008be0:	4798      	blx	r3
 8008be2:	2808      	cmp	r0, #8
 8008be4:	4605      	mov	r5, r0
 8008be6:	d108      	bne.n	8008bfa <__gnu_Unwind_RaiseException+0x4e>
 8008be8:	9910      	ldr	r1, [sp, #64]	; 0x40
 8008bea:	4620      	mov	r0, r4
 8008bec:	f7ff fec8 	bl	8008980 <get_eit_entry>
 8008bf0:	2800      	cmp	r0, #0
 8008bf2:	d0f2      	beq.n	8008bda <__gnu_Unwind_RaiseException+0x2e>
 8008bf4:	2009      	movs	r0, #9
 8008bf6:	b079      	add	sp, #484	; 0x1e4
 8008bf8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008bfa:	4668      	mov	r0, sp
 8008bfc:	f7ff ff12 	bl	8008a24 <restore_non_core_regs>
 8008c00:	2d06      	cmp	r5, #6
 8008c02:	d1f7      	bne.n	8008bf4 <__gnu_Unwind_RaiseException+0x48>
 8008c04:	4639      	mov	r1, r7
 8008c06:	4620      	mov	r0, r4
 8008c08:	f7ff ff42 	bl	8008a90 <unwind_phase2>

08008c0c <__gnu_Unwind_ForcedUnwind>:
 8008c0c:	b430      	push	{r4, r5}
 8008c0e:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 8008c10:	60c1      	str	r1, [r0, #12]
 8008c12:	6182      	str	r2, [r0, #24]
 8008c14:	4619      	mov	r1, r3
 8008c16:	641d      	str	r5, [r3, #64]	; 0x40
 8008c18:	2200      	movs	r2, #0
 8008c1a:	bc30      	pop	{r4, r5}
 8008c1c:	e758      	b.n	8008ad0 <unwind_phase2_forced>
 8008c1e:	bf00      	nop

08008c20 <__gnu_Unwind_Resume>:
 8008c20:	b570      	push	{r4, r5, r6, lr}
 8008c22:	6943      	ldr	r3, [r0, #20]
 8008c24:	68c6      	ldr	r6, [r0, #12]
 8008c26:	640b      	str	r3, [r1, #64]	; 0x40
 8008c28:	b126      	cbz	r6, 8008c34 <__gnu_Unwind_Resume+0x14>
 8008c2a:	2201      	movs	r2, #1
 8008c2c:	f7ff ff50 	bl	8008ad0 <unwind_phase2_forced>
 8008c30:	f002 ff5a 	bl	800bae8 <abort>
 8008c34:	6903      	ldr	r3, [r0, #16]
 8008c36:	460a      	mov	r2, r1
 8008c38:	4604      	mov	r4, r0
 8008c3a:	460d      	mov	r5, r1
 8008c3c:	4601      	mov	r1, r0
 8008c3e:	2002      	movs	r0, #2
 8008c40:	4798      	blx	r3
 8008c42:	2807      	cmp	r0, #7
 8008c44:	d007      	beq.n	8008c56 <__gnu_Unwind_Resume+0x36>
 8008c46:	2808      	cmp	r0, #8
 8008c48:	d103      	bne.n	8008c52 <__gnu_Unwind_Resume+0x32>
 8008c4a:	4629      	mov	r1, r5
 8008c4c:	4620      	mov	r0, r4
 8008c4e:	f7ff ff1f 	bl	8008a90 <unwind_phase2>
 8008c52:	f002 ff49 	bl	800bae8 <abort>
 8008c56:	4630      	mov	r0, r6
 8008c58:	6c29      	ldr	r1, [r5, #64]	; 0x40
 8008c5a:	f7ff ff17 	bl	8008a8c <_Unwind_DebugHook>
 8008c5e:	1d28      	adds	r0, r5, #4
 8008c60:	f000 fb2e 	bl	80092c0 <__restore_core_regs>

08008c64 <__gnu_Unwind_Resume_or_Rethrow>:
 8008c64:	68c2      	ldr	r2, [r0, #12]
 8008c66:	b12a      	cbz	r2, 8008c74 <__gnu_Unwind_Resume_or_Rethrow+0x10>
 8008c68:	b410      	push	{r4}
 8008c6a:	6bcc      	ldr	r4, [r1, #60]	; 0x3c
 8008c6c:	2200      	movs	r2, #0
 8008c6e:	640c      	str	r4, [r1, #64]	; 0x40
 8008c70:	bc10      	pop	{r4}
 8008c72:	e72d      	b.n	8008ad0 <unwind_phase2_forced>
 8008c74:	e79a      	b.n	8008bac <__gnu_Unwind_RaiseException>
 8008c76:	bf00      	nop

08008c78 <_Unwind_Complete>:
 8008c78:	4770      	bx	lr
 8008c7a:	bf00      	nop

08008c7c <_Unwind_DeleteException>:
 8008c7c:	6883      	ldr	r3, [r0, #8]
 8008c7e:	b113      	cbz	r3, 8008c86 <_Unwind_DeleteException+0xa>
 8008c80:	4601      	mov	r1, r0
 8008c82:	2001      	movs	r0, #1
 8008c84:	4718      	bx	r3
 8008c86:	4770      	bx	lr

08008c88 <_Unwind_VRS_Get>:
 8008c88:	b500      	push	{lr}
 8008c8a:	2904      	cmp	r1, #4
 8008c8c:	d807      	bhi.n	8008c9e <_Unwind_VRS_Get+0x16>
 8008c8e:	e8df f001 	tbb	[pc, r1]
 8008c92:	0903      	.short	0x0903
 8008c94:	0906      	.short	0x0906
 8008c96:	09          	.byte	0x09
 8008c97:	00          	.byte	0x00
 8008c98:	b90b      	cbnz	r3, 8008c9e <_Unwind_VRS_Get+0x16>
 8008c9a:	2a0f      	cmp	r2, #15
 8008c9c:	d905      	bls.n	8008caa <_Unwind_VRS_Get+0x22>
 8008c9e:	2002      	movs	r0, #2
 8008ca0:	f85d fb04 	ldr.w	pc, [sp], #4
 8008ca4:	2001      	movs	r0, #1
 8008ca6:	f85d fb04 	ldr.w	pc, [sp], #4
 8008caa:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8008cae:	6852      	ldr	r2, [r2, #4]
 8008cb0:	4618      	mov	r0, r3
 8008cb2:	9b01      	ldr	r3, [sp, #4]
 8008cb4:	601a      	str	r2, [r3, #0]
 8008cb6:	f85d fb04 	ldr.w	pc, [sp], #4
 8008cba:	bf00      	nop

08008cbc <_Unwind_GetGR>:
 8008cbc:	2300      	movs	r3, #0
 8008cbe:	b510      	push	{r4, lr}
 8008cc0:	b084      	sub	sp, #16
 8008cc2:	ac03      	add	r4, sp, #12
 8008cc4:	460a      	mov	r2, r1
 8008cc6:	9400      	str	r4, [sp, #0]
 8008cc8:	4619      	mov	r1, r3
 8008cca:	f7ff ffdd 	bl	8008c88 <_Unwind_VRS_Get>
 8008cce:	9803      	ldr	r0, [sp, #12]
 8008cd0:	b004      	add	sp, #16
 8008cd2:	bd10      	pop	{r4, pc}

08008cd4 <_Unwind_VRS_Set>:
 8008cd4:	b500      	push	{lr}
 8008cd6:	2904      	cmp	r1, #4
 8008cd8:	d807      	bhi.n	8008cea <_Unwind_VRS_Set+0x16>
 8008cda:	e8df f001 	tbb	[pc, r1]
 8008cde:	0903      	.short	0x0903
 8008ce0:	0906      	.short	0x0906
 8008ce2:	09          	.byte	0x09
 8008ce3:	00          	.byte	0x00
 8008ce4:	b90b      	cbnz	r3, 8008cea <_Unwind_VRS_Set+0x16>
 8008ce6:	2a0f      	cmp	r2, #15
 8008ce8:	d905      	bls.n	8008cf6 <_Unwind_VRS_Set+0x22>
 8008cea:	2002      	movs	r0, #2
 8008cec:	f85d fb04 	ldr.w	pc, [sp], #4
 8008cf0:	2001      	movs	r0, #1
 8008cf2:	f85d fb04 	ldr.w	pc, [sp], #4
 8008cf6:	9901      	ldr	r1, [sp, #4]
 8008cf8:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8008cfc:	6809      	ldr	r1, [r1, #0]
 8008cfe:	4618      	mov	r0, r3
 8008d00:	6051      	str	r1, [r2, #4]
 8008d02:	f85d fb04 	ldr.w	pc, [sp], #4
 8008d06:	bf00      	nop

08008d08 <_Unwind_SetGR>:
 8008d08:	2300      	movs	r3, #0
 8008d0a:	b510      	push	{r4, lr}
 8008d0c:	b084      	sub	sp, #16
 8008d0e:	ac04      	add	r4, sp, #16
 8008d10:	f844 2d04 	str.w	r2, [r4, #-4]!
 8008d14:	9400      	str	r4, [sp, #0]
 8008d16:	460a      	mov	r2, r1
 8008d18:	4619      	mov	r1, r3
 8008d1a:	f7ff ffdb 	bl	8008cd4 <_Unwind_VRS_Set>
 8008d1e:	b004      	add	sp, #16
 8008d20:	bd10      	pop	{r4, pc}
 8008d22:	bf00      	nop

08008d24 <__gnu_Unwind_Backtrace>:
 8008d24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008d26:	f04f 3eff 	mov.w	lr, #4294967295	; 0xffffffff
 8008d2a:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 8008d2c:	f5ad 7d0f 	sub.w	sp, sp, #572	; 0x23c
 8008d30:	6413      	str	r3, [r2, #64]	; 0x40
 8008d32:	1d15      	adds	r5, r2, #4
 8008d34:	ac17      	add	r4, sp, #92	; 0x5c
 8008d36:	4607      	mov	r7, r0
 8008d38:	460e      	mov	r6, r1
 8008d3a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008d3c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008d3e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008d40:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008d42:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008d44:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008d46:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8008d4a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8008d4e:	f8cd e058 	str.w	lr, [sp, #88]	; 0x58
 8008d52:	e012      	b.n	8008d7a <__gnu_Unwind_Backtrace+0x56>
 8008d54:	210c      	movs	r1, #12
 8008d56:	a816      	add	r0, sp, #88	; 0x58
 8008d58:	466a      	mov	r2, sp
 8008d5a:	f7ff ffd5 	bl	8008d08 <_Unwind_SetGR>
 8008d5e:	4631      	mov	r1, r6
 8008d60:	a816      	add	r0, sp, #88	; 0x58
 8008d62:	47b8      	blx	r7
 8008d64:	b978      	cbnz	r0, 8008d86 <__gnu_Unwind_Backtrace+0x62>
 8008d66:	9b04      	ldr	r3, [sp, #16]
 8008d68:	aa16      	add	r2, sp, #88	; 0x58
 8008d6a:	4669      	mov	r1, sp
 8008d6c:	2008      	movs	r0, #8
 8008d6e:	4798      	blx	r3
 8008d70:	2805      	cmp	r0, #5
 8008d72:	4604      	mov	r4, r0
 8008d74:	d008      	beq.n	8008d88 <__gnu_Unwind_Backtrace+0x64>
 8008d76:	2809      	cmp	r0, #9
 8008d78:	d005      	beq.n	8008d86 <__gnu_Unwind_Backtrace+0x62>
 8008d7a:	9926      	ldr	r1, [sp, #152]	; 0x98
 8008d7c:	4668      	mov	r0, sp
 8008d7e:	f7ff fdff 	bl	8008980 <get_eit_entry>
 8008d82:	2800      	cmp	r0, #0
 8008d84:	d0e6      	beq.n	8008d54 <__gnu_Unwind_Backtrace+0x30>
 8008d86:	2409      	movs	r4, #9
 8008d88:	a816      	add	r0, sp, #88	; 0x58
 8008d8a:	f7ff fe4b 	bl	8008a24 <restore_non_core_regs>
 8008d8e:	4620      	mov	r0, r4
 8008d90:	f50d 7d0f 	add.w	sp, sp, #572	; 0x23c
 8008d94:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008d96:	bf00      	nop

08008d98 <__gnu_unwind_pr_common>:
 8008d98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d9c:	6ccc      	ldr	r4, [r1, #76]	; 0x4c
 8008d9e:	4691      	mov	r9, r2
 8008da0:	6822      	ldr	r2, [r4, #0]
 8008da2:	b08b      	sub	sp, #44	; 0x2c
 8008da4:	3404      	adds	r4, #4
 8008da6:	460d      	mov	r5, r1
 8008da8:	9207      	str	r2, [sp, #28]
 8008daa:	9408      	str	r4, [sp, #32]
 8008dac:	f000 0b03 	and.w	fp, r0, #3
 8008db0:	461e      	mov	r6, r3
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d160      	bne.n	8008e78 <__gnu_unwind_pr_common+0xe0>
 8008db6:	2303      	movs	r3, #3
 8008db8:	0212      	lsls	r2, r2, #8
 8008dba:	9207      	str	r2, [sp, #28]
 8008dbc:	f88d 6025 	strb.w	r6, [sp, #37]	; 0x25
 8008dc0:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8008dc4:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8008dc6:	f1bb 0f02 	cmp.w	fp, #2
 8008dca:	bf08      	it	eq
 8008dcc:	6bac      	ldreq	r4, [r5, #56]	; 0x38
 8008dce:	f013 0301 	ands.w	r3, r3, #1
 8008dd2:	d140      	bne.n	8008e56 <__gnu_unwind_pr_common+0xbe>
 8008dd4:	9301      	str	r3, [sp, #4]
 8008dd6:	f000 0308 	and.w	r3, r0, #8
 8008dda:	9303      	str	r3, [sp, #12]
 8008ddc:	f8d4 8000 	ldr.w	r8, [r4]
 8008de0:	f1b8 0f00 	cmp.w	r8, #0
 8008de4:	d039      	beq.n	8008e5a <__gnu_unwind_pr_common+0xc2>
 8008de6:	2e02      	cmp	r6, #2
 8008de8:	d043      	beq.n	8008e72 <__gnu_unwind_pr_common+0xda>
 8008dea:	f8b4 8000 	ldrh.w	r8, [r4]
 8008dee:	8867      	ldrh	r7, [r4, #2]
 8008df0:	3404      	adds	r4, #4
 8008df2:	6cab      	ldr	r3, [r5, #72]	; 0x48
 8008df4:	f027 0a01 	bic.w	sl, r7, #1
 8008df8:	210f      	movs	r1, #15
 8008dfa:	4648      	mov	r0, r9
 8008dfc:	449a      	add	sl, r3
 8008dfe:	f7ff ff5d 	bl	8008cbc <_Unwind_GetGR>
 8008e02:	4582      	cmp	sl, r0
 8008e04:	d833      	bhi.n	8008e6e <__gnu_unwind_pr_common+0xd6>
 8008e06:	f028 0301 	bic.w	r3, r8, #1
 8008e0a:	449a      	add	sl, r3
 8008e0c:	4550      	cmp	r0, sl
 8008e0e:	bf2c      	ite	cs
 8008e10:	2000      	movcs	r0, #0
 8008e12:	2001      	movcc	r0, #1
 8008e14:	007f      	lsls	r7, r7, #1
 8008e16:	f007 0702 	and.w	r7, r7, #2
 8008e1a:	f008 0801 	and.w	r8, r8, #1
 8008e1e:	ea47 0708 	orr.w	r7, r7, r8
 8008e22:	2f01      	cmp	r7, #1
 8008e24:	d03e      	beq.n	8008ea4 <__gnu_unwind_pr_common+0x10c>
 8008e26:	d335      	bcc.n	8008e94 <__gnu_unwind_pr_common+0xfc>
 8008e28:	2f02      	cmp	r7, #2
 8008e2a:	d11c      	bne.n	8008e66 <__gnu_unwind_pr_common+0xce>
 8008e2c:	6823      	ldr	r3, [r4, #0]
 8008e2e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8008e32:	9202      	str	r2, [sp, #8]
 8008e34:	f1bb 0f00 	cmp.w	fp, #0
 8008e38:	d176      	bne.n	8008f28 <__gnu_unwind_pr_common+0x190>
 8008e3a:	b128      	cbz	r0, 8008e48 <__gnu_unwind_pr_common+0xb0>
 8008e3c:	9903      	ldr	r1, [sp, #12]
 8008e3e:	2900      	cmp	r1, #0
 8008e40:	d07e      	beq.n	8008f40 <__gnu_unwind_pr_common+0x1a8>
 8008e42:	2a00      	cmp	r2, #0
 8008e44:	f000 80a6 	beq.w	8008f94 <__gnu_unwind_pr_common+0x1fc>
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	db77      	blt.n	8008f3c <__gnu_unwind_pr_common+0x1a4>
 8008e4c:	9b02      	ldr	r3, [sp, #8]
 8008e4e:	3301      	adds	r3, #1
 8008e50:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 8008e54:	e7c2      	b.n	8008ddc <__gnu_unwind_pr_common+0x44>
 8008e56:	2300      	movs	r3, #0
 8008e58:	9301      	str	r3, [sp, #4]
 8008e5a:	2e02      	cmp	r6, #2
 8008e5c:	dd3e      	ble.n	8008edc <__gnu_unwind_pr_common+0x144>
 8008e5e:	f7ff fe13 	bl	8008a88 <__gnu_unwind_24bit.isra.1>
 8008e62:	2800      	cmp	r0, #0
 8008e64:	d040      	beq.n	8008ee8 <__gnu_unwind_pr_common+0x150>
 8008e66:	2009      	movs	r0, #9
 8008e68:	b00b      	add	sp, #44	; 0x2c
 8008e6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e6e:	2000      	movs	r0, #0
 8008e70:	e7d0      	b.n	8008e14 <__gnu_unwind_pr_common+0x7c>
 8008e72:	6867      	ldr	r7, [r4, #4]
 8008e74:	3408      	adds	r4, #8
 8008e76:	e7bc      	b.n	8008df2 <__gnu_unwind_pr_common+0x5a>
 8008e78:	2b02      	cmp	r3, #2
 8008e7a:	dca3      	bgt.n	8008dc4 <__gnu_unwind_pr_common+0x2c>
 8008e7c:	2102      	movs	r1, #2
 8008e7e:	0c13      	lsrs	r3, r2, #16
 8008e80:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
 8008e84:	0412      	lsls	r2, r2, #16
 8008e86:	b2db      	uxtb	r3, r3
 8008e88:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 8008e8c:	9207      	str	r2, [sp, #28]
 8008e8e:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 8008e92:	e797      	b.n	8008dc4 <__gnu_unwind_pr_common+0x2c>
 8008e94:	f1bb 0f00 	cmp.w	fp, #0
 8008e98:	d002      	beq.n	8008ea0 <__gnu_unwind_pr_common+0x108>
 8008e9a:	2800      	cmp	r0, #0
 8008e9c:	f040 80bd 	bne.w	800901a <__gnu_unwind_pr_common+0x282>
 8008ea0:	3404      	adds	r4, #4
 8008ea2:	e79b      	b.n	8008ddc <__gnu_unwind_pr_common+0x44>
 8008ea4:	f1bb 0f00 	cmp.w	fp, #0
 8008ea8:	d125      	bne.n	8008ef6 <__gnu_unwind_pr_common+0x15e>
 8008eaa:	b1a8      	cbz	r0, 8008ed8 <__gnu_unwind_pr_common+0x140>
 8008eac:	e894 000c 	ldmia.w	r4, {r2, r3}
 8008eb0:	1c99      	adds	r1, r3, #2
 8008eb2:	ea4f 72d2 	mov.w	r2, r2, lsr #31
 8008eb6:	d0d6      	beq.n	8008e66 <__gnu_unwind_pr_common+0xce>
 8008eb8:	f105 0158 	add.w	r1, r5, #88	; 0x58
 8008ebc:	3301      	adds	r3, #1
 8008ebe:	9106      	str	r1, [sp, #24]
 8008ec0:	f000 80a3 	beq.w	800900a <__gnu_unwind_pr_common+0x272>
 8008ec4:	1d20      	adds	r0, r4, #4
 8008ec6:	f7ff fdd9 	bl	8008a7c <_Unwind_decode_typeinfo_ptr.isra.0>
 8008eca:	ab06      	add	r3, sp, #24
 8008ecc:	4601      	mov	r1, r0
 8008ece:	4628      	mov	r0, r5
 8008ed0:	f3af 8000 	nop.w
 8008ed4:	2800      	cmp	r0, #0
 8008ed6:	d177      	bne.n	8008fc8 <__gnu_unwind_pr_common+0x230>
 8008ed8:	3408      	adds	r4, #8
 8008eda:	e77f      	b.n	8008ddc <__gnu_unwind_pr_common+0x44>
 8008edc:	a907      	add	r1, sp, #28
 8008ede:	4648      	mov	r0, r9
 8008ee0:	f000 faf0 	bl	80094c4 <__gnu_unwind_execute>
 8008ee4:	2800      	cmp	r0, #0
 8008ee6:	d1be      	bne.n	8008e66 <__gnu_unwind_pr_common+0xce>
 8008ee8:	9b01      	ldr	r3, [sp, #4]
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	d15c      	bne.n	8008fa8 <__gnu_unwind_pr_common+0x210>
 8008eee:	2008      	movs	r0, #8
 8008ef0:	b00b      	add	sp, #44	; 0x2c
 8008ef2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ef6:	210d      	movs	r1, #13
 8008ef8:	4648      	mov	r0, r9
 8008efa:	6a2f      	ldr	r7, [r5, #32]
 8008efc:	f7ff fede 	bl	8008cbc <_Unwind_GetGR>
 8008f00:	4287      	cmp	r7, r0
 8008f02:	d1e9      	bne.n	8008ed8 <__gnu_unwind_pr_common+0x140>
 8008f04:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8008f06:	429c      	cmp	r4, r3
 8008f08:	d1e6      	bne.n	8008ed8 <__gnu_unwind_pr_common+0x140>
 8008f0a:	4620      	mov	r0, r4
 8008f0c:	f7ff fcea 	bl	80088e4 <selfrel_offset31>
 8008f10:	210f      	movs	r1, #15
 8008f12:	4602      	mov	r2, r0
 8008f14:	4648      	mov	r0, r9
 8008f16:	f7ff fef7 	bl	8008d08 <_Unwind_SetGR>
 8008f1a:	4648      	mov	r0, r9
 8008f1c:	462a      	mov	r2, r5
 8008f1e:	2100      	movs	r1, #0
 8008f20:	f7ff fef2 	bl	8008d08 <_Unwind_SetGR>
 8008f24:	2007      	movs	r0, #7
 8008f26:	e79f      	b.n	8008e68 <__gnu_unwind_pr_common+0xd0>
 8008f28:	210d      	movs	r1, #13
 8008f2a:	4648      	mov	r0, r9
 8008f2c:	6a2f      	ldr	r7, [r5, #32]
 8008f2e:	f7ff fec5 	bl	8008cbc <_Unwind_GetGR>
 8008f32:	4287      	cmp	r7, r0
 8008f34:	d058      	beq.n	8008fe8 <__gnu_unwind_pr_common+0x250>
 8008f36:	6823      	ldr	r3, [r4, #0]
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	da87      	bge.n	8008e4c <__gnu_unwind_pr_common+0xb4>
 8008f3c:	3404      	adds	r4, #4
 8008f3e:	e785      	b.n	8008e4c <__gnu_unwind_pr_common+0xb4>
 8008f40:	9b02      	ldr	r3, [sp, #8]
 8008f42:	b33b      	cbz	r3, 8008f94 <__gnu_unwind_pr_common+0x1fc>
 8008f44:	f105 0358 	add.w	r3, r5, #88	; 0x58
 8008f48:	1d27      	adds	r7, r4, #4
 8008f4a:	f8cd b010 	str.w	fp, [sp, #16]
 8008f4e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8008f52:	46a3      	mov	fp, r4
 8008f54:	f8dd a008 	ldr.w	sl, [sp, #8]
 8008f58:	461c      	mov	r4, r3
 8008f5a:	9605      	str	r6, [sp, #20]
 8008f5c:	e002      	b.n	8008f64 <__gnu_unwind_pr_common+0x1cc>
 8008f5e:	45b2      	cmp	sl, r6
 8008f60:	46b0      	mov	r8, r6
 8008f62:	d016      	beq.n	8008f92 <__gnu_unwind_pr_common+0x1fa>
 8008f64:	4638      	mov	r0, r7
 8008f66:	9406      	str	r4, [sp, #24]
 8008f68:	f7ff fd88 	bl	8008a7c <_Unwind_decode_typeinfo_ptr.isra.0>
 8008f6c:	ab06      	add	r3, sp, #24
 8008f6e:	4601      	mov	r1, r0
 8008f70:	2200      	movs	r2, #0
 8008f72:	4628      	mov	r0, r5
 8008f74:	f3af 8000 	nop.w
 8008f78:	f108 0601 	add.w	r6, r8, #1
 8008f7c:	3704      	adds	r7, #4
 8008f7e:	2800      	cmp	r0, #0
 8008f80:	d0ed      	beq.n	8008f5e <__gnu_unwind_pr_common+0x1c6>
 8008f82:	9b02      	ldr	r3, [sp, #8]
 8008f84:	465c      	mov	r4, fp
 8008f86:	4543      	cmp	r3, r8
 8008f88:	f8dd b010 	ldr.w	fp, [sp, #16]
 8008f8c:	9e05      	ldr	r6, [sp, #20]
 8008f8e:	d1d2      	bne.n	8008f36 <__gnu_unwind_pr_common+0x19e>
 8008f90:	e000      	b.n	8008f94 <__gnu_unwind_pr_common+0x1fc>
 8008f92:	465c      	mov	r4, fp
 8008f94:	4648      	mov	r0, r9
 8008f96:	210d      	movs	r1, #13
 8008f98:	f7ff fe90 	bl	8008cbc <_Unwind_GetGR>
 8008f9c:	9b06      	ldr	r3, [sp, #24]
 8008f9e:	6228      	str	r0, [r5, #32]
 8008fa0:	62ac      	str	r4, [r5, #40]	; 0x28
 8008fa2:	626b      	str	r3, [r5, #36]	; 0x24
 8008fa4:	2006      	movs	r0, #6
 8008fa6:	e75f      	b.n	8008e68 <__gnu_unwind_pr_common+0xd0>
 8008fa8:	210f      	movs	r1, #15
 8008faa:	4648      	mov	r0, r9
 8008fac:	f7ff fe86 	bl	8008cbc <_Unwind_GetGR>
 8008fb0:	210e      	movs	r1, #14
 8008fb2:	4602      	mov	r2, r0
 8008fb4:	4648      	mov	r0, r9
 8008fb6:	f7ff fea7 	bl	8008d08 <_Unwind_SetGR>
 8008fba:	4648      	mov	r0, r9
 8008fbc:	4a29      	ldr	r2, [pc, #164]	; (8009064 <__gnu_unwind_pr_common+0x2cc>)
 8008fbe:	210f      	movs	r1, #15
 8008fc0:	f7ff fea2 	bl	8008d08 <_Unwind_SetGR>
 8008fc4:	2007      	movs	r0, #7
 8008fc6:	e74f      	b.n	8008e68 <__gnu_unwind_pr_common+0xd0>
 8008fc8:	4607      	mov	r7, r0
 8008fca:	210d      	movs	r1, #13
 8008fcc:	4648      	mov	r0, r9
 8008fce:	f7ff fe75 	bl	8008cbc <_Unwind_GetGR>
 8008fd2:	2f02      	cmp	r7, #2
 8008fd4:	6228      	str	r0, [r5, #32]
 8008fd6:	d11d      	bne.n	8009014 <__gnu_unwind_pr_common+0x27c>
 8008fd8:	462b      	mov	r3, r5
 8008fda:	9a06      	ldr	r2, [sp, #24]
 8008fdc:	f843 2f2c 	str.w	r2, [r3, #44]!
 8008fe0:	626b      	str	r3, [r5, #36]	; 0x24
 8008fe2:	62ac      	str	r4, [r5, #40]	; 0x28
 8008fe4:	2006      	movs	r0, #6
 8008fe6:	e73f      	b.n	8008e68 <__gnu_unwind_pr_common+0xd0>
 8008fe8:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8008fea:	429c      	cmp	r4, r3
 8008fec:	d1a3      	bne.n	8008f36 <__gnu_unwind_pr_common+0x19e>
 8008fee:	2204      	movs	r2, #4
 8008ff0:	2700      	movs	r7, #0
 8008ff2:	9902      	ldr	r1, [sp, #8]
 8008ff4:	18a3      	adds	r3, r4, r2
 8008ff6:	62a9      	str	r1, [r5, #40]	; 0x28
 8008ff8:	62ef      	str	r7, [r5, #44]	; 0x2c
 8008ffa:	632a      	str	r2, [r5, #48]	; 0x30
 8008ffc:	636b      	str	r3, [r5, #52]	; 0x34
 8008ffe:	6823      	ldr	r3, [r4, #0]
 8009000:	42bb      	cmp	r3, r7
 8009002:	db1d      	blt.n	8009040 <__gnu_unwind_pr_common+0x2a8>
 8009004:	2301      	movs	r3, #1
 8009006:	9301      	str	r3, [sp, #4]
 8009008:	e720      	b.n	8008e4c <__gnu_unwind_pr_common+0xb4>
 800900a:	4648      	mov	r0, r9
 800900c:	210d      	movs	r1, #13
 800900e:	f7ff fe55 	bl	8008cbc <_Unwind_GetGR>
 8009012:	6228      	str	r0, [r5, #32]
 8009014:	9b06      	ldr	r3, [sp, #24]
 8009016:	626b      	str	r3, [r5, #36]	; 0x24
 8009018:	e7e3      	b.n	8008fe2 <__gnu_unwind_pr_common+0x24a>
 800901a:	4620      	mov	r0, r4
 800901c:	f7ff fc62 	bl	80088e4 <selfrel_offset31>
 8009020:	3404      	adds	r4, #4
 8009022:	4606      	mov	r6, r0
 8009024:	63ac      	str	r4, [r5, #56]	; 0x38
 8009026:	4628      	mov	r0, r5
 8009028:	f3af 8000 	nop.w
 800902c:	2800      	cmp	r0, #0
 800902e:	f43f af1a 	beq.w	8008e66 <__gnu_unwind_pr_common+0xce>
 8009032:	4648      	mov	r0, r9
 8009034:	4632      	mov	r2, r6
 8009036:	210f      	movs	r1, #15
 8009038:	f7ff fe66 	bl	8008d08 <_Unwind_SetGR>
 800903c:	2007      	movs	r0, #7
 800903e:	e713      	b.n	8008e68 <__gnu_unwind_pr_common+0xd0>
 8009040:	4608      	mov	r0, r1
 8009042:	3001      	adds	r0, #1
 8009044:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 8009048:	f7ff fc4c 	bl	80088e4 <selfrel_offset31>
 800904c:	210f      	movs	r1, #15
 800904e:	4602      	mov	r2, r0
 8009050:	4648      	mov	r0, r9
 8009052:	f7ff fe59 	bl	8008d08 <_Unwind_SetGR>
 8009056:	4648      	mov	r0, r9
 8009058:	462a      	mov	r2, r5
 800905a:	4639      	mov	r1, r7
 800905c:	f7ff fe54 	bl	8008d08 <_Unwind_SetGR>
 8009060:	2007      	movs	r0, #7
 8009062:	e701      	b.n	8008e68 <__gnu_unwind_pr_common+0xd0>
 8009064:	00000000 	.word	0x00000000

08009068 <__aeabi_unwind_cpp_pr0>:
 8009068:	2300      	movs	r3, #0
 800906a:	e695      	b.n	8008d98 <__gnu_unwind_pr_common>

0800906c <__aeabi_unwind_cpp_pr1>:
 800906c:	2301      	movs	r3, #1
 800906e:	e693      	b.n	8008d98 <__gnu_unwind_pr_common>

08009070 <__aeabi_unwind_cpp_pr2>:
 8009070:	2302      	movs	r3, #2
 8009072:	e691      	b.n	8008d98 <__gnu_unwind_pr_common>

08009074 <_Unwind_VRS_Pop>:
 8009074:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009076:	4604      	mov	r4, r0
 8009078:	b0c5      	sub	sp, #276	; 0x114
 800907a:	2904      	cmp	r1, #4
 800907c:	d80d      	bhi.n	800909a <_Unwind_VRS_Pop+0x26>
 800907e:	e8df f001 	tbb	[pc, r1]
 8009082:	0355      	.short	0x0355
 8009084:	310c      	.short	0x310c
 8009086:	0f          	.byte	0x0f
 8009087:	00          	.byte	0x00
 8009088:	2b01      	cmp	r3, #1
 800908a:	ea4f 4612 	mov.w	r6, r2, lsr #16
 800908e:	b295      	uxth	r5, r2
 8009090:	d164      	bne.n	800915c <_Unwind_VRS_Pop+0xe8>
 8009092:	1972      	adds	r2, r6, r5
 8009094:	2a10      	cmp	r2, #16
 8009096:	f240 809d 	bls.w	80091d4 <_Unwind_VRS_Pop+0x160>
 800909a:	2002      	movs	r0, #2
 800909c:	b045      	add	sp, #276	; 0x114
 800909e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	d1fa      	bne.n	800909a <_Unwind_VRS_Pop+0x26>
 80090a4:	2a10      	cmp	r2, #16
 80090a6:	d8f8      	bhi.n	800909a <_Unwind_VRS_Pop+0x26>
 80090a8:	6823      	ldr	r3, [r4, #0]
 80090aa:	06d8      	lsls	r0, r3, #27
 80090ac:	f100 80c8 	bmi.w	8009240 <_Unwind_VRS_Pop+0x1cc>
 80090b0:	ae22      	add	r6, sp, #136	; 0x88
 80090b2:	4630      	mov	r0, r6
 80090b4:	9201      	str	r2, [sp, #4]
 80090b6:	2501      	movs	r5, #1
 80090b8:	f000 f974 	bl	80093a4 <__gnu_Unwind_Save_WMMXC>
 80090bc:	2300      	movs	r3, #0
 80090be:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80090c0:	9a01      	ldr	r2, [sp, #4]
 80090c2:	fa05 f103 	lsl.w	r1, r5, r3
 80090c6:	4211      	tst	r1, r2
 80090c8:	d003      	beq.n	80090d2 <_Unwind_VRS_Pop+0x5e>
 80090ca:	6801      	ldr	r1, [r0, #0]
 80090cc:	3004      	adds	r0, #4
 80090ce:	f846 1023 	str.w	r1, [r6, r3, lsl #2]
 80090d2:	3301      	adds	r3, #1
 80090d4:	2b04      	cmp	r3, #4
 80090d6:	d1f4      	bne.n	80090c2 <_Unwind_VRS_Pop+0x4e>
 80090d8:	63a0      	str	r0, [r4, #56]	; 0x38
 80090da:	4630      	mov	r0, r6
 80090dc:	f000 f958 	bl	8009390 <__gnu_Unwind_Restore_WMMXC>
 80090e0:	2000      	movs	r0, #0
 80090e2:	e7db      	b.n	800909c <_Unwind_VRS_Pop+0x28>
 80090e4:	2b03      	cmp	r3, #3
 80090e6:	d1d8      	bne.n	800909a <_Unwind_VRS_Pop+0x26>
 80090e8:	0c15      	lsrs	r5, r2, #16
 80090ea:	b297      	uxth	r7, r2
 80090ec:	19eb      	adds	r3, r5, r7
 80090ee:	2b10      	cmp	r3, #16
 80090f0:	d8d3      	bhi.n	800909a <_Unwind_VRS_Pop+0x26>
 80090f2:	6823      	ldr	r3, [r4, #0]
 80090f4:	071e      	lsls	r6, r3, #28
 80090f6:	f100 80b7 	bmi.w	8009268 <_Unwind_VRS_Pop+0x1f4>
 80090fa:	ae22      	add	r6, sp, #136	; 0x88
 80090fc:	4630      	mov	r0, r6
 80090fe:	f000 f925 	bl	800934c <__gnu_Unwind_Save_WMMXD>
 8009102:	00ed      	lsls	r5, r5, #3
 8009104:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8009106:	b15f      	cbz	r7, 8009120 <_Unwind_VRS_Pop+0xac>
 8009108:	3d04      	subs	r5, #4
 800910a:	4603      	mov	r3, r0
 800910c:	1971      	adds	r1, r6, r5
 800910e:	eb00 00c7 	add.w	r0, r0, r7, lsl #3
 8009112:	f853 2b04 	ldr.w	r2, [r3], #4
 8009116:	4283      	cmp	r3, r0
 8009118:	f841 2f04 	str.w	r2, [r1, #4]!
 800911c:	d1f9      	bne.n	8009112 <_Unwind_VRS_Pop+0x9e>
 800911e:	4618      	mov	r0, r3
 8009120:	63a0      	str	r0, [r4, #56]	; 0x38
 8009122:	4630      	mov	r0, r6
 8009124:	f000 f8f0 	bl	8009308 <__gnu_Unwind_Restore_WMMXD>
 8009128:	2000      	movs	r0, #0
 800912a:	e7b7      	b.n	800909c <_Unwind_VRS_Pop+0x28>
 800912c:	2b00      	cmp	r3, #0
 800912e:	d1b4      	bne.n	800909a <_Unwind_VRS_Pop+0x26>
 8009130:	2701      	movs	r7, #1
 8009132:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 8009134:	b296      	uxth	r6, r2
 8009136:	1d20      	adds	r0, r4, #4
 8009138:	fa07 f103 	lsl.w	r1, r7, r3
 800913c:	4231      	tst	r1, r6
 800913e:	f103 0301 	add.w	r3, r3, #1
 8009142:	d002      	beq.n	800914a <_Unwind_VRS_Pop+0xd6>
 8009144:	6829      	ldr	r1, [r5, #0]
 8009146:	3504      	adds	r5, #4
 8009148:	6001      	str	r1, [r0, #0]
 800914a:	2b10      	cmp	r3, #16
 800914c:	f100 0004 	add.w	r0, r0, #4
 8009150:	d1f2      	bne.n	8009138 <_Unwind_VRS_Pop+0xc4>
 8009152:	f412 5000 	ands.w	r0, r2, #8192	; 0x2000
 8009156:	d13b      	bne.n	80091d0 <_Unwind_VRS_Pop+0x15c>
 8009158:	63a5      	str	r5, [r4, #56]	; 0x38
 800915a:	e79f      	b.n	800909c <_Unwind_VRS_Pop+0x28>
 800915c:	2b05      	cmp	r3, #5
 800915e:	d19c      	bne.n	800909a <_Unwind_VRS_Pop+0x26>
 8009160:	1977      	adds	r7, r6, r5
 8009162:	2f20      	cmp	r7, #32
 8009164:	d899      	bhi.n	800909a <_Unwind_VRS_Pop+0x26>
 8009166:	2e0f      	cmp	r6, #15
 8009168:	d966      	bls.n	8009238 <_Unwind_VRS_Pop+0x1c4>
 800916a:	462f      	mov	r7, r5
 800916c:	2d00      	cmp	r5, #0
 800916e:	d13a      	bne.n	80091e6 <_Unwind_VRS_Pop+0x172>
 8009170:	462a      	mov	r2, r5
 8009172:	2700      	movs	r7, #0
 8009174:	2a00      	cmp	r2, #0
 8009176:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8009178:	dd72      	ble.n	8009260 <_Unwind_VRS_Pop+0x1ec>
 800917a:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
 800917e:	4601      	mov	r1, r0
 8009180:	a844      	add	r0, sp, #272	; 0x110
 8009182:	eb00 00c6 	add.w	r0, r0, r6, lsl #3
 8009186:	388c      	subs	r0, #140	; 0x8c
 8009188:	f851 5b04 	ldr.w	r5, [r1], #4
 800918c:	4291      	cmp	r1, r2
 800918e:	f840 5f04 	str.w	r5, [r0, #4]!
 8009192:	d1f9      	bne.n	8009188 <_Unwind_VRS_Pop+0x114>
 8009194:	4608      	mov	r0, r1
 8009196:	b197      	cbz	r7, 80091be <_Unwind_VRS_Pop+0x14a>
 8009198:	2e10      	cmp	r6, #16
 800919a:	4632      	mov	r2, r6
 800919c:	bf38      	it	cc
 800919e:	2210      	movcc	r2, #16
 80091a0:	a944      	add	r1, sp, #272	; 0x110
 80091a2:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 80091a6:	f5a2 72c4 	sub.w	r2, r2, #392	; 0x188
 80091aa:	0079      	lsls	r1, r7, #1
 80091ac:	3a04      	subs	r2, #4
 80091ae:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80091b2:	f850 5b04 	ldr.w	r5, [r0], #4
 80091b6:	4288      	cmp	r0, r1
 80091b8:	f842 5f04 	str.w	r5, [r2, #4]!
 80091bc:	d1f9      	bne.n	80091b2 <_Unwind_VRS_Pop+0x13e>
 80091be:	2b01      	cmp	r3, #1
 80091c0:	d048      	beq.n	8009254 <_Unwind_VRS_Pop+0x1e0>
 80091c2:	2e0f      	cmp	r6, #15
 80091c4:	63a1      	str	r1, [r4, #56]	; 0x38
 80091c6:	d933      	bls.n	8009230 <_Unwind_VRS_Pop+0x1bc>
 80091c8:	b117      	cbz	r7, 80091d0 <_Unwind_VRS_Pop+0x15c>
 80091ca:	a802      	add	r0, sp, #8
 80091cc:	f000 f894 	bl	80092f8 <__gnu_Unwind_Restore_VFP_D_16_to_31>
 80091d0:	2000      	movs	r0, #0
 80091d2:	e763      	b.n	800909c <_Unwind_VRS_Pop+0x28>
 80091d4:	2e0f      	cmp	r6, #15
 80091d6:	f63f af60 	bhi.w	800909a <_Unwind_VRS_Pop+0x26>
 80091da:	2700      	movs	r7, #0
 80091dc:	6822      	ldr	r2, [r4, #0]
 80091de:	07d1      	lsls	r1, r2, #31
 80091e0:	d417      	bmi.n	8009212 <_Unwind_VRS_Pop+0x19e>
 80091e2:	2f00      	cmp	r7, #0
 80091e4:	d060      	beq.n	80092a8 <_Unwind_VRS_Pop+0x234>
 80091e6:	6822      	ldr	r2, [r4, #0]
 80091e8:	0751      	lsls	r1, r2, #29
 80091ea:	d445      	bmi.n	8009278 <_Unwind_VRS_Pop+0x204>
 80091ec:	2b01      	cmp	r3, #1
 80091ee:	d04d      	beq.n	800928c <_Unwind_VRS_Pop+0x218>
 80091f0:	2e0f      	cmp	r6, #15
 80091f2:	d806      	bhi.n	8009202 <_Unwind_VRS_Pop+0x18e>
 80091f4:	a822      	add	r0, sp, #136	; 0x88
 80091f6:	9301      	str	r3, [sp, #4]
 80091f8:	f000 f87a 	bl	80092f0 <__gnu_Unwind_Save_VFP_D>
 80091fc:	9b01      	ldr	r3, [sp, #4]
 80091fe:	2f00      	cmp	r7, #0
 8009200:	d0b6      	beq.n	8009170 <_Unwind_VRS_Pop+0xfc>
 8009202:	a802      	add	r0, sp, #8
 8009204:	9301      	str	r3, [sp, #4]
 8009206:	f000 f87b 	bl	8009300 <__gnu_Unwind_Save_VFP_D_16_to_31>
 800920a:	9b01      	ldr	r3, [sp, #4]
 800920c:	f1c6 0210 	rsb	r2, r6, #16
 8009210:	e7b0      	b.n	8009174 <_Unwind_VRS_Pop+0x100>
 8009212:	f022 0101 	bic.w	r1, r2, #1
 8009216:	2b05      	cmp	r3, #5
 8009218:	6021      	str	r1, [r4, #0]
 800921a:	9301      	str	r3, [sp, #4]
 800921c:	4620      	mov	r0, r4
 800921e:	d03b      	beq.n	8009298 <_Unwind_VRS_Pop+0x224>
 8009220:	f022 0203 	bic.w	r2, r2, #3
 8009224:	f840 2b48 	str.w	r2, [r0], #72
 8009228:	f000 f85a 	bl	80092e0 <__gnu_Unwind_Save_VFP>
 800922c:	9b01      	ldr	r3, [sp, #4]
 800922e:	e7d8      	b.n	80091e2 <_Unwind_VRS_Pop+0x16e>
 8009230:	a822      	add	r0, sp, #136	; 0x88
 8009232:	f000 f859 	bl	80092e8 <__gnu_Unwind_Restore_VFP_D>
 8009236:	e7c7      	b.n	80091c8 <_Unwind_VRS_Pop+0x154>
 8009238:	2f10      	cmp	r7, #16
 800923a:	d9ce      	bls.n	80091da <_Unwind_VRS_Pop+0x166>
 800923c:	3f10      	subs	r7, #16
 800923e:	e7cd      	b.n	80091dc <_Unwind_VRS_Pop+0x168>
 8009240:	f023 0310 	bic.w	r3, r3, #16
 8009244:	6023      	str	r3, [r4, #0]
 8009246:	f504 70e8 	add.w	r0, r4, #464	; 0x1d0
 800924a:	9201      	str	r2, [sp, #4]
 800924c:	f000 f8aa 	bl	80093a4 <__gnu_Unwind_Save_WMMXC>
 8009250:	9a01      	ldr	r2, [sp, #4]
 8009252:	e72d      	b.n	80090b0 <_Unwind_VRS_Pop+0x3c>
 8009254:	3104      	adds	r1, #4
 8009256:	63a1      	str	r1, [r4, #56]	; 0x38
 8009258:	a822      	add	r0, sp, #136	; 0x88
 800925a:	f000 f83d 	bl	80092d8 <__gnu_Unwind_Restore_VFP>
 800925e:	e7b7      	b.n	80091d0 <_Unwind_VRS_Pop+0x15c>
 8009260:	2f00      	cmp	r7, #0
 8009262:	d199      	bne.n	8009198 <_Unwind_VRS_Pop+0x124>
 8009264:	4601      	mov	r1, r0
 8009266:	e7aa      	b.n	80091be <_Unwind_VRS_Pop+0x14a>
 8009268:	f023 0308 	bic.w	r3, r3, #8
 800926c:	6023      	str	r3, [r4, #0]
 800926e:	f504 70a8 	add.w	r0, r4, #336	; 0x150
 8009272:	f000 f86b 	bl	800934c <__gnu_Unwind_Save_WMMXD>
 8009276:	e740      	b.n	80090fa <_Unwind_VRS_Pop+0x86>
 8009278:	4620      	mov	r0, r4
 800927a:	f022 0204 	bic.w	r2, r2, #4
 800927e:	f840 2bd0 	str.w	r2, [r0], #208
 8009282:	9301      	str	r3, [sp, #4]
 8009284:	f000 f83c 	bl	8009300 <__gnu_Unwind_Save_VFP_D_16_to_31>
 8009288:	9b01      	ldr	r3, [sp, #4]
 800928a:	e7af      	b.n	80091ec <_Unwind_VRS_Pop+0x178>
 800928c:	a822      	add	r0, sp, #136	; 0x88
 800928e:	9301      	str	r3, [sp, #4]
 8009290:	f000 f826 	bl	80092e0 <__gnu_Unwind_Save_VFP>
 8009294:	9b01      	ldr	r3, [sp, #4]
 8009296:	e7b9      	b.n	800920c <_Unwind_VRS_Pop+0x198>
 8009298:	f041 0102 	orr.w	r1, r1, #2
 800929c:	f840 1b48 	str.w	r1, [r0], #72
 80092a0:	f000 f826 	bl	80092f0 <__gnu_Unwind_Save_VFP_D>
 80092a4:	9b01      	ldr	r3, [sp, #4]
 80092a6:	e79c      	b.n	80091e2 <_Unwind_VRS_Pop+0x16e>
 80092a8:	2b01      	cmp	r3, #1
 80092aa:	d003      	beq.n	80092b4 <_Unwind_VRS_Pop+0x240>
 80092ac:	2e0f      	cmp	r6, #15
 80092ae:	f63f af5f 	bhi.w	8009170 <_Unwind_VRS_Pop+0xfc>
 80092b2:	e79f      	b.n	80091f4 <_Unwind_VRS_Pop+0x180>
 80092b4:	a822      	add	r0, sp, #136	; 0x88
 80092b6:	9301      	str	r3, [sp, #4]
 80092b8:	f000 f812 	bl	80092e0 <__gnu_Unwind_Save_VFP>
 80092bc:	9b01      	ldr	r3, [sp, #4]
 80092be:	e757      	b.n	8009170 <_Unwind_VRS_Pop+0xfc>

080092c0 <__restore_core_regs>:
 80092c0:	f100 0134 	add.w	r1, r0, #52	; 0x34
 80092c4:	e891 0038 	ldmia.w	r1, {r3, r4, r5}
 80092c8:	469c      	mov	ip, r3
 80092ca:	46a6      	mov	lr, r4
 80092cc:	f84c 5d04 	str.w	r5, [ip, #-4]!
 80092d0:	e890 0fff 	ldmia.w	r0, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 80092d4:	46e5      	mov	sp, ip
 80092d6:	bd00      	pop	{pc}

080092d8 <__gnu_Unwind_Restore_VFP>:
 80092d8:	ec90 0b21 	fldmiax	r0, {d0-d15}	;@ Deprecated
 80092dc:	4770      	bx	lr
 80092de:	bf00      	nop

080092e0 <__gnu_Unwind_Save_VFP>:
 80092e0:	ec80 0b21 	fstmiax	r0, {d0-d15}	;@ Deprecated
 80092e4:	4770      	bx	lr
 80092e6:	bf00      	nop

080092e8 <__gnu_Unwind_Restore_VFP_D>:
 80092e8:	ec90 0b20 	vldmia	r0, {d0-d15}
 80092ec:	4770      	bx	lr
 80092ee:	bf00      	nop

080092f0 <__gnu_Unwind_Save_VFP_D>:
 80092f0:	ec80 0b20 	vstmia	r0, {d0-d15}
 80092f4:	4770      	bx	lr
 80092f6:	bf00      	nop

080092f8 <__gnu_Unwind_Restore_VFP_D_16_to_31>:
 80092f8:	ecd0 0b20 	vldmia	r0, {d16-d31}
 80092fc:	4770      	bx	lr
 80092fe:	bf00      	nop

08009300 <__gnu_Unwind_Save_VFP_D_16_to_31>:
 8009300:	ecc0 0b20 	vstmia	r0, {d16-d31}
 8009304:	4770      	bx	lr
 8009306:	bf00      	nop

08009308 <__gnu_Unwind_Restore_WMMXD>:
 8009308:	ecf0 0102 	ldfe	f0, [r0], #8
 800930c:	ecf0 1102 	ldfe	f1, [r0], #8
 8009310:	ecf0 2102 	ldfe	f2, [r0], #8
 8009314:	ecf0 3102 	ldfe	f3, [r0], #8
 8009318:	ecf0 4102 	ldfe	f4, [r0], #8
 800931c:	ecf0 5102 	ldfe	f5, [r0], #8
 8009320:	ecf0 6102 	ldfe	f6, [r0], #8
 8009324:	ecf0 7102 	ldfe	f7, [r0], #8
 8009328:	ecf0 8102 	ldfp	f0, [r0], #8
 800932c:	ecf0 9102 	ldfp	f1, [r0], #8
 8009330:	ecf0 a102 	ldfp	f2, [r0], #8
 8009334:	ecf0 b102 	ldfp	f3, [r0], #8
 8009338:	ecf0 c102 	ldfp	f4, [r0], #8
 800933c:	ecf0 d102 	ldfp	f5, [r0], #8
 8009340:	ecf0 e102 	ldfp	f6, [r0], #8
 8009344:	ecf0 f102 	ldfp	f7, [r0], #8
 8009348:	4770      	bx	lr
 800934a:	bf00      	nop

0800934c <__gnu_Unwind_Save_WMMXD>:
 800934c:	ece0 0102 	stfe	f0, [r0], #8
 8009350:	ece0 1102 	stfe	f1, [r0], #8
 8009354:	ece0 2102 	stfe	f2, [r0], #8
 8009358:	ece0 3102 	stfe	f3, [r0], #8
 800935c:	ece0 4102 	stfe	f4, [r0], #8
 8009360:	ece0 5102 	stfe	f5, [r0], #8
 8009364:	ece0 6102 	stfe	f6, [r0], #8
 8009368:	ece0 7102 	stfe	f7, [r0], #8
 800936c:	ece0 8102 	stfp	f0, [r0], #8
 8009370:	ece0 9102 	stfp	f1, [r0], #8
 8009374:	ece0 a102 	stfp	f2, [r0], #8
 8009378:	ece0 b102 	stfp	f3, [r0], #8
 800937c:	ece0 c102 	stfp	f4, [r0], #8
 8009380:	ece0 d102 	stfp	f5, [r0], #8
 8009384:	ece0 e102 	stfp	f6, [r0], #8
 8009388:	ece0 f102 	stfp	f7, [r0], #8
 800938c:	4770      	bx	lr
 800938e:	bf00      	nop

08009390 <__gnu_Unwind_Restore_WMMXC>:
 8009390:	fcb0 8101 	ldc2	1, cr8, [r0], #4
 8009394:	fcb0 9101 	ldc2	1, cr9, [r0], #4
 8009398:	fcb0 a101 	ldc2	1, cr10, [r0], #4
 800939c:	fcb0 b101 	ldc2	1, cr11, [r0], #4
 80093a0:	4770      	bx	lr
 80093a2:	bf00      	nop

080093a4 <__gnu_Unwind_Save_WMMXC>:
 80093a4:	fca0 8101 	stc2	1, cr8, [r0], #4
 80093a8:	fca0 9101 	stc2	1, cr9, [r0], #4
 80093ac:	fca0 a101 	stc2	1, cr10, [r0], #4
 80093b0:	fca0 b101 	stc2	1, cr11, [r0], #4
 80093b4:	4770      	bx	lr
 80093b6:	bf00      	nop

080093b8 <_Unwind_RaiseException>:
 80093b8:	46ec      	mov	ip, sp
 80093ba:	b500      	push	{lr}
 80093bc:	e92d 5000 	stmdb	sp!, {ip, lr}
 80093c0:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 80093c4:	f04f 0300 	mov.w	r3, #0
 80093c8:	e92d 000c 	stmdb	sp!, {r2, r3}
 80093cc:	a901      	add	r1, sp, #4
 80093ce:	f7ff fbed 	bl	8008bac <__gnu_Unwind_RaiseException>
 80093d2:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 80093d6:	b012      	add	sp, #72	; 0x48
 80093d8:	4770      	bx	lr
 80093da:	bf00      	nop

080093dc <_Unwind_Resume>:
 80093dc:	46ec      	mov	ip, sp
 80093de:	b500      	push	{lr}
 80093e0:	e92d 5000 	stmdb	sp!, {ip, lr}
 80093e4:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 80093e8:	f04f 0300 	mov.w	r3, #0
 80093ec:	e92d 000c 	stmdb	sp!, {r2, r3}
 80093f0:	a901      	add	r1, sp, #4
 80093f2:	f7ff fc15 	bl	8008c20 <__gnu_Unwind_Resume>
 80093f6:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 80093fa:	b012      	add	sp, #72	; 0x48
 80093fc:	4770      	bx	lr
 80093fe:	bf00      	nop

08009400 <_Unwind_Resume_or_Rethrow>:
 8009400:	46ec      	mov	ip, sp
 8009402:	b500      	push	{lr}
 8009404:	e92d 5000 	stmdb	sp!, {ip, lr}
 8009408:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 800940c:	f04f 0300 	mov.w	r3, #0
 8009410:	e92d 000c 	stmdb	sp!, {r2, r3}
 8009414:	a901      	add	r1, sp, #4
 8009416:	f7ff fc25 	bl	8008c64 <__gnu_Unwind_Resume_or_Rethrow>
 800941a:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 800941e:	b012      	add	sp, #72	; 0x48
 8009420:	4770      	bx	lr
 8009422:	bf00      	nop

08009424 <_Unwind_ForcedUnwind>:
 8009424:	46ec      	mov	ip, sp
 8009426:	b500      	push	{lr}
 8009428:	e92d 5000 	stmdb	sp!, {ip, lr}
 800942c:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8009430:	f04f 0300 	mov.w	r3, #0
 8009434:	e92d 000c 	stmdb	sp!, {r2, r3}
 8009438:	ab01      	add	r3, sp, #4
 800943a:	f7ff fbe7 	bl	8008c0c <__gnu_Unwind_ForcedUnwind>
 800943e:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8009442:	b012      	add	sp, #72	; 0x48
 8009444:	4770      	bx	lr
 8009446:	bf00      	nop

08009448 <_Unwind_Backtrace>:
 8009448:	46ec      	mov	ip, sp
 800944a:	b500      	push	{lr}
 800944c:	e92d 5000 	stmdb	sp!, {ip, lr}
 8009450:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8009454:	f04f 0300 	mov.w	r3, #0
 8009458:	e92d 000c 	stmdb	sp!, {r2, r3}
 800945c:	aa01      	add	r2, sp, #4
 800945e:	f7ff fc61 	bl	8008d24 <__gnu_Unwind_Backtrace>
 8009462:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8009466:	b012      	add	sp, #72	; 0x48
 8009468:	4770      	bx	lr
 800946a:	bf00      	nop

0800946c <next_unwind_byte>:
 800946c:	7a02      	ldrb	r2, [r0, #8]
 800946e:	b91a      	cbnz	r2, 8009478 <next_unwind_byte+0xc>
 8009470:	7a43      	ldrb	r3, [r0, #9]
 8009472:	b943      	cbnz	r3, 8009486 <next_unwind_byte+0x1a>
 8009474:	20b0      	movs	r0, #176	; 0xb0
 8009476:	4770      	bx	lr
 8009478:	6803      	ldr	r3, [r0, #0]
 800947a:	3a01      	subs	r2, #1
 800947c:	7202      	strb	r2, [r0, #8]
 800947e:	021a      	lsls	r2, r3, #8
 8009480:	6002      	str	r2, [r0, #0]
 8009482:	0e18      	lsrs	r0, r3, #24
 8009484:	4770      	bx	lr
 8009486:	2103      	movs	r1, #3
 8009488:	6842      	ldr	r2, [r0, #4]
 800948a:	3b01      	subs	r3, #1
 800948c:	b410      	push	{r4}
 800948e:	7243      	strb	r3, [r0, #9]
 8009490:	6813      	ldr	r3, [r2, #0]
 8009492:	1d14      	adds	r4, r2, #4
 8009494:	7201      	strb	r1, [r0, #8]
 8009496:	021a      	lsls	r2, r3, #8
 8009498:	6044      	str	r4, [r0, #4]
 800949a:	6002      	str	r2, [r0, #0]
 800949c:	bc10      	pop	{r4}
 800949e:	0e18      	lsrs	r0, r3, #24
 80094a0:	4770      	bx	lr
 80094a2:	bf00      	nop

080094a4 <_Unwind_GetGR.constprop.0>:
 80094a4:	2300      	movs	r3, #0
 80094a6:	b500      	push	{lr}
 80094a8:	b085      	sub	sp, #20
 80094aa:	aa03      	add	r2, sp, #12
 80094ac:	9200      	str	r2, [sp, #0]
 80094ae:	4619      	mov	r1, r3
 80094b0:	220c      	movs	r2, #12
 80094b2:	f7ff fbe9 	bl	8008c88 <_Unwind_VRS_Get>
 80094b6:	9803      	ldr	r0, [sp, #12]
 80094b8:	b005      	add	sp, #20
 80094ba:	f85d fb04 	ldr.w	pc, [sp], #4
 80094be:	bf00      	nop

080094c0 <unwind_UCB_from_context>:
 80094c0:	e7f0      	b.n	80094a4 <_Unwind_GetGR.constprop.0>
 80094c2:	bf00      	nop

080094c4 <__gnu_unwind_execute>:
 80094c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80094c8:	4606      	mov	r6, r0
 80094ca:	460f      	mov	r7, r1
 80094cc:	f04f 0800 	mov.w	r8, #0
 80094d0:	b085      	sub	sp, #20
 80094d2:	4638      	mov	r0, r7
 80094d4:	f7ff ffca 	bl	800946c <next_unwind_byte>
 80094d8:	28b0      	cmp	r0, #176	; 0xb0
 80094da:	4604      	mov	r4, r0
 80094dc:	d023      	beq.n	8009526 <__gnu_unwind_execute+0x62>
 80094de:	0605      	lsls	r5, r0, #24
 80094e0:	d427      	bmi.n	8009532 <__gnu_unwind_execute+0x6e>
 80094e2:	2300      	movs	r3, #0
 80094e4:	f10d 090c 	add.w	r9, sp, #12
 80094e8:	4619      	mov	r1, r3
 80094ea:	0085      	lsls	r5, r0, #2
 80094ec:	220d      	movs	r2, #13
 80094ee:	f8cd 9000 	str.w	r9, [sp]
 80094f2:	4630      	mov	r0, r6
 80094f4:	f7ff fbc8 	bl	8008c88 <_Unwind_VRS_Get>
 80094f8:	b2ed      	uxtb	r5, r5
 80094fa:	9b03      	ldr	r3, [sp, #12]
 80094fc:	0660      	lsls	r0, r4, #25
 80094fe:	f105 0504 	add.w	r5, r5, #4
 8009502:	bf4c      	ite	mi
 8009504:	1b5d      	submi	r5, r3, r5
 8009506:	18ed      	addpl	r5, r5, r3
 8009508:	2300      	movs	r3, #0
 800950a:	220d      	movs	r2, #13
 800950c:	4619      	mov	r1, r3
 800950e:	f8cd 9000 	str.w	r9, [sp]
 8009512:	4630      	mov	r0, r6
 8009514:	9503      	str	r5, [sp, #12]
 8009516:	f7ff fbdd 	bl	8008cd4 <_Unwind_VRS_Set>
 800951a:	4638      	mov	r0, r7
 800951c:	f7ff ffa6 	bl	800946c <next_unwind_byte>
 8009520:	28b0      	cmp	r0, #176	; 0xb0
 8009522:	4604      	mov	r4, r0
 8009524:	d1db      	bne.n	80094de <__gnu_unwind_execute+0x1a>
 8009526:	f1b8 0f00 	cmp.w	r8, #0
 800952a:	f000 8094 	beq.w	8009656 <__gnu_unwind_execute+0x192>
 800952e:	2000      	movs	r0, #0
 8009530:	e01c      	b.n	800956c <__gnu_unwind_execute+0xa8>
 8009532:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
 8009536:	2b80      	cmp	r3, #128	; 0x80
 8009538:	d05c      	beq.n	80095f4 <__gnu_unwind_execute+0x130>
 800953a:	2b90      	cmp	r3, #144	; 0x90
 800953c:	d019      	beq.n	8009572 <__gnu_unwind_execute+0xae>
 800953e:	2ba0      	cmp	r3, #160	; 0xa0
 8009540:	d02c      	beq.n	800959c <__gnu_unwind_execute+0xd8>
 8009542:	2bb0      	cmp	r3, #176	; 0xb0
 8009544:	d03e      	beq.n	80095c4 <__gnu_unwind_execute+0x100>
 8009546:	2bc0      	cmp	r3, #192	; 0xc0
 8009548:	d06b      	beq.n	8009622 <__gnu_unwind_execute+0x15e>
 800954a:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
 800954e:	2bd0      	cmp	r3, #208	; 0xd0
 8009550:	d10b      	bne.n	800956a <__gnu_unwind_execute+0xa6>
 8009552:	f000 0207 	and.w	r2, r0, #7
 8009556:	3201      	adds	r2, #1
 8009558:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 800955c:	2305      	movs	r3, #5
 800955e:	2101      	movs	r1, #1
 8009560:	4630      	mov	r0, r6
 8009562:	f7ff fd87 	bl	8009074 <_Unwind_VRS_Pop>
 8009566:	2800      	cmp	r0, #0
 8009568:	d0b3      	beq.n	80094d2 <__gnu_unwind_execute+0xe>
 800956a:	2009      	movs	r0, #9
 800956c:	b005      	add	sp, #20
 800956e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009572:	f000 030d 	and.w	r3, r0, #13
 8009576:	2b0d      	cmp	r3, #13
 8009578:	d0f7      	beq.n	800956a <__gnu_unwind_execute+0xa6>
 800957a:	2300      	movs	r3, #0
 800957c:	ad03      	add	r5, sp, #12
 800957e:	f000 020f 	and.w	r2, r0, #15
 8009582:	4619      	mov	r1, r3
 8009584:	9500      	str	r5, [sp, #0]
 8009586:	4630      	mov	r0, r6
 8009588:	f7ff fb7e 	bl	8008c88 <_Unwind_VRS_Get>
 800958c:	2300      	movs	r3, #0
 800958e:	9500      	str	r5, [sp, #0]
 8009590:	4619      	mov	r1, r3
 8009592:	220d      	movs	r2, #13
 8009594:	4630      	mov	r0, r6
 8009596:	f7ff fb9d 	bl	8008cd4 <_Unwind_VRS_Set>
 800959a:	e79a      	b.n	80094d2 <__gnu_unwind_execute+0xe>
 800959c:	43c3      	mvns	r3, r0
 800959e:	f44f 627f 	mov.w	r2, #4080	; 0xff0
 80095a2:	f003 0307 	and.w	r3, r3, #7
 80095a6:	411a      	asrs	r2, r3
 80095a8:	2300      	movs	r3, #0
 80095aa:	0701      	lsls	r1, r0, #28
 80095ac:	f402 627f 	and.w	r2, r2, #4080	; 0xff0
 80095b0:	bf48      	it	mi
 80095b2:	f442 4280 	orrmi.w	r2, r2, #16384	; 0x4000
 80095b6:	4619      	mov	r1, r3
 80095b8:	4630      	mov	r0, r6
 80095ba:	f7ff fd5b 	bl	8009074 <_Unwind_VRS_Pop>
 80095be:	2800      	cmp	r0, #0
 80095c0:	d1d3      	bne.n	800956a <__gnu_unwind_execute+0xa6>
 80095c2:	e786      	b.n	80094d2 <__gnu_unwind_execute+0xe>
 80095c4:	28b1      	cmp	r0, #177	; 0xb1
 80095c6:	d057      	beq.n	8009678 <__gnu_unwind_execute+0x1b4>
 80095c8:	28b2      	cmp	r0, #178	; 0xb2
 80095ca:	d068      	beq.n	800969e <__gnu_unwind_execute+0x1da>
 80095cc:	28b3      	cmp	r0, #179	; 0xb3
 80095ce:	f000 8095 	beq.w	80096fc <__gnu_unwind_execute+0x238>
 80095d2:	f000 03fc 	and.w	r3, r0, #252	; 0xfc
 80095d6:	2bb4      	cmp	r3, #180	; 0xb4
 80095d8:	d0c7      	beq.n	800956a <__gnu_unwind_execute+0xa6>
 80095da:	2301      	movs	r3, #1
 80095dc:	f000 0207 	and.w	r2, r0, #7
 80095e0:	441a      	add	r2, r3
 80095e2:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 80095e6:	4619      	mov	r1, r3
 80095e8:	4630      	mov	r0, r6
 80095ea:	f7ff fd43 	bl	8009074 <_Unwind_VRS_Pop>
 80095ee:	2800      	cmp	r0, #0
 80095f0:	d1bb      	bne.n	800956a <__gnu_unwind_execute+0xa6>
 80095f2:	e76e      	b.n	80094d2 <__gnu_unwind_execute+0xe>
 80095f4:	4638      	mov	r0, r7
 80095f6:	f7ff ff39 	bl	800946c <next_unwind_byte>
 80095fa:	0224      	lsls	r4, r4, #8
 80095fc:	4304      	orrs	r4, r0
 80095fe:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
 8009602:	d0b2      	beq.n	800956a <__gnu_unwind_execute+0xa6>
 8009604:	2300      	movs	r3, #0
 8009606:	0124      	lsls	r4, r4, #4
 8009608:	b2a2      	uxth	r2, r4
 800960a:	4619      	mov	r1, r3
 800960c:	4630      	mov	r0, r6
 800960e:	f7ff fd31 	bl	8009074 <_Unwind_VRS_Pop>
 8009612:	2800      	cmp	r0, #0
 8009614:	d1a9      	bne.n	800956a <__gnu_unwind_execute+0xa6>
 8009616:	f414 4f00 	tst.w	r4, #32768	; 0x8000
 800961a:	bf18      	it	ne
 800961c:	f04f 0801 	movne.w	r8, #1
 8009620:	e757      	b.n	80094d2 <__gnu_unwind_execute+0xe>
 8009622:	28c6      	cmp	r0, #198	; 0xc6
 8009624:	d07d      	beq.n	8009722 <__gnu_unwind_execute+0x25e>
 8009626:	28c7      	cmp	r0, #199	; 0xc7
 8009628:	f000 8086 	beq.w	8009738 <__gnu_unwind_execute+0x274>
 800962c:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
 8009630:	2bc0      	cmp	r3, #192	; 0xc0
 8009632:	f000 8094 	beq.w	800975e <__gnu_unwind_execute+0x29a>
 8009636:	28c8      	cmp	r0, #200	; 0xc8
 8009638:	f000 809f 	beq.w	800977a <__gnu_unwind_execute+0x2b6>
 800963c:	28c9      	cmp	r0, #201	; 0xc9
 800963e:	d194      	bne.n	800956a <__gnu_unwind_execute+0xa6>
 8009640:	4638      	mov	r0, r7
 8009642:	f7ff ff13 	bl	800946c <next_unwind_byte>
 8009646:	0302      	lsls	r2, r0, #12
 8009648:	f000 000f 	and.w	r0, r0, #15
 800964c:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
 8009650:	3001      	adds	r0, #1
 8009652:	4302      	orrs	r2, r0
 8009654:	e782      	b.n	800955c <__gnu_unwind_execute+0x98>
 8009656:	ac03      	add	r4, sp, #12
 8009658:	4643      	mov	r3, r8
 800965a:	220e      	movs	r2, #14
 800965c:	4641      	mov	r1, r8
 800965e:	9400      	str	r4, [sp, #0]
 8009660:	4630      	mov	r0, r6
 8009662:	f7ff fb11 	bl	8008c88 <_Unwind_VRS_Get>
 8009666:	9400      	str	r4, [sp, #0]
 8009668:	4630      	mov	r0, r6
 800966a:	4643      	mov	r3, r8
 800966c:	220f      	movs	r2, #15
 800966e:	4641      	mov	r1, r8
 8009670:	f7ff fb30 	bl	8008cd4 <_Unwind_VRS_Set>
 8009674:	4640      	mov	r0, r8
 8009676:	e779      	b.n	800956c <__gnu_unwind_execute+0xa8>
 8009678:	4638      	mov	r0, r7
 800967a:	f7ff fef7 	bl	800946c <next_unwind_byte>
 800967e:	2800      	cmp	r0, #0
 8009680:	f43f af73 	beq.w	800956a <__gnu_unwind_execute+0xa6>
 8009684:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
 8009688:	f47f af6f 	bne.w	800956a <__gnu_unwind_execute+0xa6>
 800968c:	4602      	mov	r2, r0
 800968e:	4619      	mov	r1, r3
 8009690:	4630      	mov	r0, r6
 8009692:	f7ff fcef 	bl	8009074 <_Unwind_VRS_Pop>
 8009696:	2800      	cmp	r0, #0
 8009698:	f47f af67 	bne.w	800956a <__gnu_unwind_execute+0xa6>
 800969c:	e719      	b.n	80094d2 <__gnu_unwind_execute+0xe>
 800969e:	2300      	movs	r3, #0
 80096a0:	f10d 090c 	add.w	r9, sp, #12
 80096a4:	220d      	movs	r2, #13
 80096a6:	4619      	mov	r1, r3
 80096a8:	f8cd 9000 	str.w	r9, [sp]
 80096ac:	4630      	mov	r0, r6
 80096ae:	f7ff faeb 	bl	8008c88 <_Unwind_VRS_Get>
 80096b2:	4638      	mov	r0, r7
 80096b4:	f7ff feda 	bl	800946c <next_unwind_byte>
 80096b8:	0602      	lsls	r2, r0, #24
 80096ba:	f04f 0402 	mov.w	r4, #2
 80096be:	d50c      	bpl.n	80096da <__gnu_unwind_execute+0x216>
 80096c0:	9b03      	ldr	r3, [sp, #12]
 80096c2:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 80096c6:	40a0      	lsls	r0, r4
 80096c8:	4403      	add	r3, r0
 80096ca:	4638      	mov	r0, r7
 80096cc:	9303      	str	r3, [sp, #12]
 80096ce:	f7ff fecd 	bl	800946c <next_unwind_byte>
 80096d2:	0603      	lsls	r3, r0, #24
 80096d4:	f104 0407 	add.w	r4, r4, #7
 80096d8:	d4f2      	bmi.n	80096c0 <__gnu_unwind_execute+0x1fc>
 80096da:	2300      	movs	r3, #0
 80096dc:	9903      	ldr	r1, [sp, #12]
 80096de:	f000 027f 	and.w	r2, r0, #127	; 0x7f
 80096e2:	40a2      	lsls	r2, r4
 80096e4:	f501 7101 	add.w	r1, r1, #516	; 0x204
 80096e8:	188c      	adds	r4, r1, r2
 80096ea:	f8cd 9000 	str.w	r9, [sp]
 80096ee:	4619      	mov	r1, r3
 80096f0:	220d      	movs	r2, #13
 80096f2:	4630      	mov	r0, r6
 80096f4:	9403      	str	r4, [sp, #12]
 80096f6:	f7ff faed 	bl	8008cd4 <_Unwind_VRS_Set>
 80096fa:	e6ea      	b.n	80094d2 <__gnu_unwind_execute+0xe>
 80096fc:	4638      	mov	r0, r7
 80096fe:	f7ff feb5 	bl	800946c <next_unwind_byte>
 8009702:	2301      	movs	r3, #1
 8009704:	0301      	lsls	r1, r0, #12
 8009706:	f000 000f 	and.w	r0, r0, #15
 800970a:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
 800970e:	18c2      	adds	r2, r0, r3
 8009710:	430a      	orrs	r2, r1
 8009712:	4630      	mov	r0, r6
 8009714:	4619      	mov	r1, r3
 8009716:	f7ff fcad 	bl	8009074 <_Unwind_VRS_Pop>
 800971a:	2800      	cmp	r0, #0
 800971c:	f47f af25 	bne.w	800956a <__gnu_unwind_execute+0xa6>
 8009720:	e6d7      	b.n	80094d2 <__gnu_unwind_execute+0xe>
 8009722:	4638      	mov	r0, r7
 8009724:	f7ff fea2 	bl	800946c <next_unwind_byte>
 8009728:	0301      	lsls	r1, r0, #12
 800972a:	f000 000f 	and.w	r0, r0, #15
 800972e:	2303      	movs	r3, #3
 8009730:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
 8009734:	1c42      	adds	r2, r0, #1
 8009736:	e7eb      	b.n	8009710 <__gnu_unwind_execute+0x24c>
 8009738:	4638      	mov	r0, r7
 800973a:	f7ff fe97 	bl	800946c <next_unwind_byte>
 800973e:	2800      	cmp	r0, #0
 8009740:	f43f af13 	beq.w	800956a <__gnu_unwind_execute+0xa6>
 8009744:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
 8009748:	f47f af0f 	bne.w	800956a <__gnu_unwind_execute+0xa6>
 800974c:	4602      	mov	r2, r0
 800974e:	2104      	movs	r1, #4
 8009750:	4630      	mov	r0, r6
 8009752:	f7ff fc8f 	bl	8009074 <_Unwind_VRS_Pop>
 8009756:	2800      	cmp	r0, #0
 8009758:	f47f af07 	bne.w	800956a <__gnu_unwind_execute+0xa6>
 800975c:	e6b9      	b.n	80094d2 <__gnu_unwind_execute+0xe>
 800975e:	2303      	movs	r3, #3
 8009760:	f000 020f 	and.w	r2, r0, #15
 8009764:	3201      	adds	r2, #1
 8009766:	f442 2220 	orr.w	r2, r2, #655360	; 0xa0000
 800976a:	4619      	mov	r1, r3
 800976c:	4630      	mov	r0, r6
 800976e:	f7ff fc81 	bl	8009074 <_Unwind_VRS_Pop>
 8009772:	2800      	cmp	r0, #0
 8009774:	f47f aef9 	bne.w	800956a <__gnu_unwind_execute+0xa6>
 8009778:	e6ab      	b.n	80094d2 <__gnu_unwind_execute+0xe>
 800977a:	4638      	mov	r0, r7
 800977c:	f7ff fe76 	bl	800946c <next_unwind_byte>
 8009780:	f000 02f0 	and.w	r2, r0, #240	; 0xf0
 8009784:	f000 030f 	and.w	r3, r0, #15
 8009788:	3210      	adds	r2, #16
 800978a:	3301      	adds	r3, #1
 800978c:	ea43 3202 	orr.w	r2, r3, r2, lsl #12
 8009790:	e6e4      	b.n	800955c <__gnu_unwind_execute+0x98>
 8009792:	bf00      	nop

08009794 <__gnu_unwind_frame>:
 8009794:	b530      	push	{r4, r5, lr}
 8009796:	2403      	movs	r4, #3
 8009798:	460d      	mov	r5, r1
 800979a:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800979c:	b085      	sub	sp, #20
 800979e:	685a      	ldr	r2, [r3, #4]
 80097a0:	f88d 400c 	strb.w	r4, [sp, #12]
 80097a4:	79dc      	ldrb	r4, [r3, #7]
 80097a6:	0212      	lsls	r2, r2, #8
 80097a8:	3308      	adds	r3, #8
 80097aa:	a901      	add	r1, sp, #4
 80097ac:	4628      	mov	r0, r5
 80097ae:	9201      	str	r2, [sp, #4]
 80097b0:	f88d 400d 	strb.w	r4, [sp, #13]
 80097b4:	9302      	str	r3, [sp, #8]
 80097b6:	f7ff fe85 	bl	80094c4 <__gnu_unwind_execute>
 80097ba:	b005      	add	sp, #20
 80097bc:	bd30      	pop	{r4, r5, pc}
 80097be:	bf00      	nop

080097c0 <_Unwind_GetRegionStart>:
 80097c0:	b508      	push	{r3, lr}
 80097c2:	f7ff fe7d 	bl	80094c0 <unwind_UCB_from_context>
 80097c6:	6c80      	ldr	r0, [r0, #72]	; 0x48
 80097c8:	bd08      	pop	{r3, pc}
 80097ca:	bf00      	nop

080097cc <_Unwind_GetLanguageSpecificData>:
 80097cc:	b508      	push	{r3, lr}
 80097ce:	f7ff fe77 	bl	80094c0 <unwind_UCB_from_context>
 80097d2:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 80097d4:	79c3      	ldrb	r3, [r0, #7]
 80097d6:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 80097da:	3008      	adds	r0, #8
 80097dc:	bd08      	pop	{r3, pc}
 80097de:	bf00      	nop

080097e0 <_Unwind_GetTextRelBase>:
 80097e0:	b508      	push	{r3, lr}
 80097e2:	f002 f981 	bl	800bae8 <abort>
 80097e6:	bf00      	nop

080097e8 <_Unwind_GetDataRelBase>:
 80097e8:	b508      	push	{r3, lr}
 80097ea:	f7ff fff9 	bl	80097e0 <_Unwind_GetTextRelBase>
 80097ee:	bf00      	nop

080097f0 <_ZNK8std_msgs4Time9serializeEPh>:
      *(outbuffer + offset + 0) = (this->data.sec >> (8 * 0)) & 0xFF;
 80097f0:	7903      	ldrb	r3, [r0, #4]
 80097f2:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (this->data.sec >> (8 * 1)) & 0xFF;
 80097f4:	7943      	ldrb	r3, [r0, #5]
 80097f6:	704b      	strb	r3, [r1, #1]
      *(outbuffer + offset + 2) = (this->data.sec >> (8 * 2)) & 0xFF;
 80097f8:	7983      	ldrb	r3, [r0, #6]
 80097fa:	708b      	strb	r3, [r1, #2]
      *(outbuffer + offset + 3) = (this->data.sec >> (8 * 3)) & 0xFF;
 80097fc:	79c3      	ldrb	r3, [r0, #7]
 80097fe:	70cb      	strb	r3, [r1, #3]
      *(outbuffer + offset + 0) = (this->data.nsec >> (8 * 0)) & 0xFF;
 8009800:	7a03      	ldrb	r3, [r0, #8]
 8009802:	710b      	strb	r3, [r1, #4]
      *(outbuffer + offset + 1) = (this->data.nsec >> (8 * 1)) & 0xFF;
 8009804:	7a43      	ldrb	r3, [r0, #9]
 8009806:	714b      	strb	r3, [r1, #5]
      *(outbuffer + offset + 2) = (this->data.nsec >> (8 * 2)) & 0xFF;
 8009808:	7a83      	ldrb	r3, [r0, #10]
 800980a:	718b      	strb	r3, [r1, #6]
      *(outbuffer + offset + 3) = (this->data.nsec >> (8 * 3)) & 0xFF;
 800980c:	7ac3      	ldrb	r3, [r0, #11]
 800980e:	71cb      	strb	r3, [r1, #7]
    }
 8009810:	2008      	movs	r0, #8
 8009812:	4770      	bx	lr

08009814 <_ZN8std_msgs4Time11deserializeEPh>:
      this->data.sec =  ((uint32_t) (*(inbuffer + offset)));
 8009814:	780b      	ldrb	r3, [r1, #0]
 8009816:	6043      	str	r3, [r0, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8009818:	784a      	ldrb	r2, [r1, #1]
 800981a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800981e:	6043      	str	r3, [r0, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8009820:	788a      	ldrb	r2, [r1, #2]
 8009822:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009826:	6043      	str	r3, [r0, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8009828:	78ca      	ldrb	r2, [r1, #3]
 800982a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800982e:	6043      	str	r3, [r0, #4]
      this->data.nsec =  ((uint32_t) (*(inbuffer + offset)));
 8009830:	790b      	ldrb	r3, [r1, #4]
 8009832:	6083      	str	r3, [r0, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8009834:	794a      	ldrb	r2, [r1, #5]
 8009836:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800983a:	6083      	str	r3, [r0, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800983c:	798a      	ldrb	r2, [r1, #6]
 800983e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009842:	6083      	str	r3, [r0, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8009844:	79ca      	ldrb	r2, [r1, #7]
 8009846:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800984a:	6083      	str	r3, [r0, #8]
      offset += sizeof(this->data.nsec);
     return offset;
    }
 800984c:	2008      	movs	r0, #8
 800984e:	4770      	bx	lr

08009850 <_ZN8std_msgs4Time7getTypeEv>:

    const char * getType(){ return "std_msgs/Time"; };
 8009850:	4800      	ldr	r0, [pc, #0]	; (8009854 <_ZN8std_msgs4Time7getTypeEv+0x4>)
 8009852:	4770      	bx	lr
 8009854:	0800c318 	.word	0x0800c318

08009858 <_ZN8std_msgs4Time6getMD5Ev>:
    const char * getMD5(){ return "cd7166c74c552c311fbcc2fe5a7bc289"; };
 8009858:	4800      	ldr	r0, [pc, #0]	; (800985c <_ZN8std_msgs4Time6getMD5Ev+0x4>)
 800985a:	4770      	bx	lr
 800985c:	0800c2f4 	.word	0x0800c2f4

08009860 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh>:
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
      offset += sizeof(this->buffer_size);
      return offset;
    }

    virtual int deserialize(unsigned char *inbuffer)
 8009860:	b470      	push	{r4, r5, r6}
    {
      int offset = 0;
      this->topic_id =  ((uint16_t) (*(inbuffer + offset)));
 8009862:	780b      	ldrb	r3, [r1, #0]
 8009864:	8083      	strh	r3, [r0, #4]
      this->topic_id |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8009866:	784a      	ldrb	r2, [r1, #1]
 8009868:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800986c:	8083      	strh	r3, [r0, #4]
    var = 0;
 800986e:	2400      	movs	r4, #0
    for (size_t i = 0; i < sizeof(V); i++)
 8009870:	4623      	mov	r3, r4
 8009872:	2b03      	cmp	r3, #3
 8009874:	d806      	bhi.n	8009884 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x24>
      var |= (arr[i] << (8 * i));
 8009876:	18ca      	adds	r2, r1, r3
 8009878:	7892      	ldrb	r2, [r2, #2]
 800987a:	00dd      	lsls	r5, r3, #3
 800987c:	40aa      	lsls	r2, r5
 800987e:	4314      	orrs	r4, r2
    for (size_t i = 0; i < sizeof(V); i++)
 8009880:	3301      	adds	r3, #1
 8009882:	e7f6      	b.n	8009872 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x12>
 8009884:	2306      	movs	r3, #6
      offset += sizeof(this->topic_id);
      uint32_t length_topic_name;
      arrToVar(length_topic_name, (inbuffer + offset));
      offset += 4;
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8009886:	1da2      	adds	r2, r4, #6
 8009888:	4293      	cmp	r3, r2
 800988a:	d204      	bcs.n	8009896 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x36>
          inbuffer[k-1]=inbuffer[k];
 800988c:	1e5a      	subs	r2, r3, #1
 800988e:	5ccd      	ldrb	r5, [r1, r3]
 8009890:	548d      	strb	r5, [r1, r2]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8009892:	3301      	adds	r3, #1
 8009894:	e7f7      	b.n	8009886 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x26>
      }
      inbuffer[offset+length_topic_name-1]=0;
 8009896:	3405      	adds	r4, #5
 8009898:	2300      	movs	r3, #0
 800989a:	550b      	strb	r3, [r1, r4]
      this->topic_name = (char *)(inbuffer + offset-1);
 800989c:	1d4c      	adds	r4, r1, #5
 800989e:	6084      	str	r4, [r0, #8]
    var = 0;
 80098a0:	461e      	mov	r6, r3
    for (size_t i = 0; i < sizeof(V); i++)
 80098a2:	2b03      	cmp	r3, #3
 80098a4:	d806      	bhi.n	80098b4 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x54>
      var |= (arr[i] << (8 * i));
 80098a6:	188c      	adds	r4, r1, r2
 80098a8:	5ce4      	ldrb	r4, [r4, r3]
 80098aa:	00dd      	lsls	r5, r3, #3
 80098ac:	40ac      	lsls	r4, r5
 80098ae:	4326      	orrs	r6, r4
    for (size_t i = 0; i < sizeof(V); i++)
 80098b0:	3301      	adds	r3, #1
 80098b2:	e7f6      	b.n	80098a2 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x42>
      offset += length_topic_name;
      uint32_t length_message_type;
      arrToVar(length_message_type, (inbuffer + offset));
      offset += 4;
 80098b4:	1d14      	adds	r4, r2, #4
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 80098b6:	4623      	mov	r3, r4
 80098b8:	19a2      	adds	r2, r4, r6
 80098ba:	4293      	cmp	r3, r2
 80098bc:	d204      	bcs.n	80098c8 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x68>
          inbuffer[k-1]=inbuffer[k];
 80098be:	1e5a      	subs	r2, r3, #1
 80098c0:	5ccd      	ldrb	r5, [r1, r3]
 80098c2:	548d      	strb	r5, [r1, r2]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 80098c4:	3301      	adds	r3, #1
 80098c6:	e7f7      	b.n	80098b8 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x58>
      }
      inbuffer[offset+length_message_type-1]=0;
 80098c8:	1e55      	subs	r5, r2, #1
 80098ca:	2300      	movs	r3, #0
 80098cc:	554b      	strb	r3, [r1, r5]
      this->message_type = (char *)(inbuffer + offset-1);
 80098ce:	3c01      	subs	r4, #1
 80098d0:	440c      	add	r4, r1
 80098d2:	60c4      	str	r4, [r0, #12]
    var = 0;
 80098d4:	461e      	mov	r6, r3
    for (size_t i = 0; i < sizeof(V); i++)
 80098d6:	2b03      	cmp	r3, #3
 80098d8:	d806      	bhi.n	80098e8 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x88>
      var |= (arr[i] << (8 * i));
 80098da:	188c      	adds	r4, r1, r2
 80098dc:	5ce4      	ldrb	r4, [r4, r3]
 80098de:	00dd      	lsls	r5, r3, #3
 80098e0:	40ac      	lsls	r4, r5
 80098e2:	4326      	orrs	r6, r4
    for (size_t i = 0; i < sizeof(V); i++)
 80098e4:	3301      	adds	r3, #1
 80098e6:	e7f6      	b.n	80098d6 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x76>
      offset += length_message_type;
      uint32_t length_md5sum;
      arrToVar(length_md5sum, (inbuffer + offset));
      offset += 4;
 80098e8:	3204      	adds	r2, #4
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 80098ea:	4613      	mov	r3, r2
 80098ec:	1994      	adds	r4, r2, r6
 80098ee:	42a3      	cmp	r3, r4
 80098f0:	d204      	bcs.n	80098fc <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x9c>
          inbuffer[k-1]=inbuffer[k];
 80098f2:	1e5c      	subs	r4, r3, #1
 80098f4:	5ccd      	ldrb	r5, [r1, r3]
 80098f6:	550d      	strb	r5, [r1, r4]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 80098f8:	3301      	adds	r3, #1
 80098fa:	e7f7      	b.n	80098ec <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x8c>
      }
      inbuffer[offset+length_md5sum-1]=0;
 80098fc:	1e63      	subs	r3, r4, #1
 80098fe:	2500      	movs	r5, #0
 8009900:	54cd      	strb	r5, [r1, r3]
      this->md5sum = (char *)(inbuffer + offset-1);
 8009902:	3a01      	subs	r2, #1
 8009904:	440a      	add	r2, r1
 8009906:	6102      	str	r2, [r0, #16]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.base = 0;
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8009908:	5d0b      	ldrb	r3, [r1, r4]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800990a:	1c62      	adds	r2, r4, #1
 800990c:	5c8a      	ldrb	r2, [r1, r2]
 800990e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8009912:	1ca2      	adds	r2, r4, #2
 8009914:	5c8a      	ldrb	r2, [r1, r2]
 8009916:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800991a:	1ce2      	adds	r2, r4, #3
 800991c:	5c8a      	ldrb	r2, [r1, r2]
 800991e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
      this->buffer_size = u_buffer_size.real;
 8009922:	6143      	str	r3, [r0, #20]
      offset += sizeof(this->buffer_size);
     return offset;
    }
 8009924:	1d20      	adds	r0, r4, #4
 8009926:	bc70      	pop	{r4, r5, r6}
 8009928:	4770      	bx	lr
	...

0800992c <_ZN14rosserial_msgs9TopicInfo7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/TopicInfo"; };
 800992c:	4800      	ldr	r0, [pc, #0]	; (8009930 <_ZN14rosserial_msgs9TopicInfo7getTypeEv+0x4>)
 800992e:	4770      	bx	lr
 8009930:	0800c1a4 	.word	0x0800c1a4

08009934 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev>:
    const char * getMD5(){ return "0ad51f88fc44892f8c10684077646005"; };
 8009934:	4800      	ldr	r0, [pc, #0]	; (8009938 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev+0x4>)
 8009936:	4770      	bx	lr
 8009938:	0800c180 	.word	0x0800c180

0800993c <_ZN14rosserial_msgs3Log11deserializeEPh>:
      memcpy(outbuffer + offset, this->msg, length_msg);
      offset += length_msg;
      return offset;
    }

    virtual int deserialize(unsigned char *inbuffer)
 800993c:	b470      	push	{r4, r5, r6}
 800993e:	4606      	mov	r6, r0
    {
      int offset = 0;
      this->level =  ((uint8_t) (*(inbuffer + offset)));
 8009940:	780b      	ldrb	r3, [r1, #0]
 8009942:	7103      	strb	r3, [r0, #4]
    var = 0;
 8009944:	2200      	movs	r2, #0
    for (size_t i = 0; i < sizeof(V); i++)
 8009946:	4613      	mov	r3, r2
 8009948:	2b03      	cmp	r3, #3
 800994a:	d807      	bhi.n	800995c <_ZN14rosserial_msgs3Log11deserializeEPh+0x20>
 800994c:	1c58      	adds	r0, r3, #1
      var |= (arr[i] << (8 * i));
 800994e:	5c0c      	ldrb	r4, [r1, r0]
 8009950:	00db      	lsls	r3, r3, #3
 8009952:	fa04 f303 	lsl.w	r3, r4, r3
 8009956:	431a      	orrs	r2, r3
    for (size_t i = 0; i < sizeof(V); i++)
 8009958:	4603      	mov	r3, r0
 800995a:	e7f5      	b.n	8009948 <_ZN14rosserial_msgs3Log11deserializeEPh+0xc>
 800995c:	2305      	movs	r3, #5
      offset += sizeof(this->level);
      uint32_t length_msg;
      arrToVar(length_msg, (inbuffer + offset));
      offset += 4;
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 800995e:	1d50      	adds	r0, r2, #5
 8009960:	4283      	cmp	r3, r0
 8009962:	d204      	bcs.n	800996e <_ZN14rosserial_msgs3Log11deserializeEPh+0x32>
          inbuffer[k-1]=inbuffer[k];
 8009964:	1e5c      	subs	r4, r3, #1
 8009966:	5ccd      	ldrb	r5, [r1, r3]
 8009968:	550d      	strb	r5, [r1, r4]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 800996a:	3301      	adds	r3, #1
 800996c:	e7f7      	b.n	800995e <_ZN14rosserial_msgs3Log11deserializeEPh+0x22>
      }
      inbuffer[offset+length_msg-1]=0;
 800996e:	3204      	adds	r2, #4
 8009970:	2300      	movs	r3, #0
 8009972:	548b      	strb	r3, [r1, r2]
      this->msg = (char *)(inbuffer + offset-1);
 8009974:	3104      	adds	r1, #4
 8009976:	60b1      	str	r1, [r6, #8]
      offset += length_msg;
     return offset;
    }
 8009978:	bc70      	pop	{r4, r5, r6}
 800997a:	4770      	bx	lr

0800997c <_ZN14rosserial_msgs3Log7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/Log"; };
 800997c:	4800      	ldr	r0, [pc, #0]	; (8009980 <_ZN14rosserial_msgs3Log7getTypeEv+0x4>)
 800997e:	4770      	bx	lr
 8009980:	0800c16c 	.word	0x0800c16c

08009984 <_ZN14rosserial_msgs3Log6getMD5Ev>:
    const char * getMD5(){ return "11abd731c25933261cd6183bd12d6295"; };
 8009984:	4800      	ldr	r0, [pc, #0]	; (8009988 <_ZN14rosserial_msgs3Log6getMD5Ev+0x4>)
 8009986:	4770      	bx	lr
 8009988:	0800c148 	.word	0x0800c148

0800998c <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv>:
      }
     return offset;
    }

    const char * getType(){ return REQUESTPARAM; };
 800998c:	4800      	ldr	r0, [pc, #0]	; (8009990 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv+0x4>)
 800998e:	4770      	bx	lr
 8009990:	0800bca8 	.word	0x0800bca8

08009994 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev>:
    const char * getMD5(){ return "9f0e98bda65981986ddf53afa7a40e49"; };
 8009994:	4800      	ldr	r0, [pc, #0]	; (8009998 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev+0x4>)
 8009996:	4770      	bx	lr
 8009998:	0800c124 	.word	0x0800c124

0800999c <_ZNK8std_msgs5Int329serializeEPh>:
      int offset = 0;
      union {
        int32_t real;
        uint32_t base;
      } u_data;
      u_data.real = this->data;
 800999c:	6843      	ldr	r3, [r0, #4]
      *(outbuffer + offset + 0) = (u_data.base >> (8 * 0)) & 0xFF;
 800999e:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_data.base >> (8 * 1)) & 0xFF;
 80099a0:	f3c3 2207 	ubfx	r2, r3, #8, #8
 80099a4:	704a      	strb	r2, [r1, #1]
      *(outbuffer + offset + 2) = (u_data.base >> (8 * 2)) & 0xFF;
 80099a6:	f3c3 4207 	ubfx	r2, r3, #16, #8
 80099aa:	708a      	strb	r2, [r1, #2]
      *(outbuffer + offset + 3) = (u_data.base >> (8 * 3)) & 0xFF;
 80099ac:	0e1b      	lsrs	r3, r3, #24
 80099ae:	70cb      	strb	r3, [r1, #3]
      offset += sizeof(this->data);
      return offset;
    }
 80099b0:	2004      	movs	r0, #4
 80099b2:	4770      	bx	lr

080099b4 <_ZN8std_msgs5Int3211deserializeEPh>:
      union {
        int32_t real;
        uint32_t base;
      } u_data;
      u_data.base = 0;
      u_data.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80099b4:	780b      	ldrb	r3, [r1, #0]
      u_data.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80099b6:	784a      	ldrb	r2, [r1, #1]
 80099b8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
      u_data.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80099bc:	788a      	ldrb	r2, [r1, #2]
 80099be:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
      u_data.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80099c2:	78ca      	ldrb	r2, [r1, #3]
 80099c4:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
      this->data = u_data.real;
 80099c8:	6043      	str	r3, [r0, #4]
      offset += sizeof(this->data);
     return offset;
    }
 80099ca:	2004      	movs	r0, #4
 80099cc:	4770      	bx	lr
	...

080099d0 <_ZN8std_msgs5Int327getTypeEv>:

    const char * getType(){ return "std_msgs/Int32"; };
 80099d0:	4800      	ldr	r0, [pc, #0]	; (80099d4 <_ZN8std_msgs5Int327getTypeEv+0x4>)
 80099d2:	4770      	bx	lr
 80099d4:	0800c34c 	.word	0x0800c34c

080099d8 <_ZN8std_msgs5Int326getMD5Ev>:
    const char * getMD5(){ return "da5909fbe378aeaf85e547e830cc1bb7"; };
 80099d8:	4800      	ldr	r0, [pc, #0]	; (80099dc <_ZN8std_msgs5Int326getMD5Ev+0x4>)
 80099da:	4770      	bx	lr
 80099dc:	0800c328 	.word	0x0800c328

080099e0 <_ZN8std_msgs19MultiArrayDimension11deserializeEPh>:
      *(outbuffer + offset + 3) = (this->stride >> (8 * 3)) & 0xFF;
      offset += sizeof(this->stride);
      return offset;
    }

    virtual int deserialize(unsigned char *inbuffer)
 80099e0:	b430      	push	{r4, r5}
    var = 0;
 80099e2:	2200      	movs	r2, #0
    for (size_t i = 0; i < sizeof(V); i++)
 80099e4:	4613      	mov	r3, r2
 80099e6:	2b03      	cmp	r3, #3
 80099e8:	d805      	bhi.n	80099f6 <_ZN8std_msgs19MultiArrayDimension11deserializeEPh+0x16>
      var |= (arr[i] << (8 * i));
 80099ea:	5ccc      	ldrb	r4, [r1, r3]
 80099ec:	00dd      	lsls	r5, r3, #3
 80099ee:	40ac      	lsls	r4, r5
 80099f0:	4322      	orrs	r2, r4
    for (size_t i = 0; i < sizeof(V); i++)
 80099f2:	3301      	adds	r3, #1
 80099f4:	e7f7      	b.n	80099e6 <_ZN8std_msgs19MultiArrayDimension11deserializeEPh+0x6>
 80099f6:	2304      	movs	r3, #4
    {
      int offset = 0;
      uint32_t length_label;
      arrToVar(length_label, (inbuffer + offset));
      offset += 4;
      for(unsigned int k= offset; k< offset+length_label; ++k){
 80099f8:	1d14      	adds	r4, r2, #4
 80099fa:	42a3      	cmp	r3, r4
 80099fc:	d204      	bcs.n	8009a08 <_ZN8std_msgs19MultiArrayDimension11deserializeEPh+0x28>
          inbuffer[k-1]=inbuffer[k];
 80099fe:	1e5c      	subs	r4, r3, #1
 8009a00:	5ccd      	ldrb	r5, [r1, r3]
 8009a02:	550d      	strb	r5, [r1, r4]
      for(unsigned int k= offset; k< offset+length_label; ++k){
 8009a04:	3301      	adds	r3, #1
 8009a06:	e7f7      	b.n	80099f8 <_ZN8std_msgs19MultiArrayDimension11deserializeEPh+0x18>
      }
      inbuffer[offset+length_label-1]=0;
 8009a08:	1cd3      	adds	r3, r2, #3
 8009a0a:	2500      	movs	r5, #0
 8009a0c:	54cd      	strb	r5, [r1, r3]
      this->label = (char *)(inbuffer + offset-1);
 8009a0e:	1ccb      	adds	r3, r1, #3
 8009a10:	6043      	str	r3, [r0, #4]
      offset += length_label;
      this->size =  ((uint32_t) (*(inbuffer + offset)));
 8009a12:	5d0b      	ldrb	r3, [r1, r4]
 8009a14:	6083      	str	r3, [r0, #8]
      this->size |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8009a16:	1d54      	adds	r4, r2, #5
 8009a18:	5d0c      	ldrb	r4, [r1, r4]
 8009a1a:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
 8009a1e:	6083      	str	r3, [r0, #8]
      this->size |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8009a20:	1d94      	adds	r4, r2, #6
 8009a22:	5d0c      	ldrb	r4, [r1, r4]
 8009a24:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8009a28:	6083      	str	r3, [r0, #8]
      this->size |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8009a2a:	1dd4      	adds	r4, r2, #7
 8009a2c:	5d0c      	ldrb	r4, [r1, r4]
 8009a2e:	ea43 6304 	orr.w	r3, r3, r4, lsl #24
 8009a32:	6083      	str	r3, [r0, #8]
      offset += sizeof(this->size);
 8009a34:	f102 0308 	add.w	r3, r2, #8
      this->stride =  ((uint32_t) (*(inbuffer + offset)));
 8009a38:	5ccb      	ldrb	r3, [r1, r3]
 8009a3a:	60c3      	str	r3, [r0, #12]
      this->stride |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8009a3c:	f102 0409 	add.w	r4, r2, #9
 8009a40:	5d0c      	ldrb	r4, [r1, r4]
 8009a42:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
 8009a46:	60c3      	str	r3, [r0, #12]
      this->stride |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8009a48:	f102 040a 	add.w	r4, r2, #10
 8009a4c:	5d0c      	ldrb	r4, [r1, r4]
 8009a4e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8009a52:	60c3      	str	r3, [r0, #12]
      this->stride |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8009a54:	f102 040b 	add.w	r4, r2, #11
 8009a58:	5d09      	ldrb	r1, [r1, r4]
 8009a5a:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8009a5e:	60c3      	str	r3, [r0, #12]
      offset += sizeof(this->stride);
     return offset;
    }
 8009a60:	f102 000c 	add.w	r0, r2, #12
 8009a64:	bc30      	pop	{r4, r5}
 8009a66:	4770      	bx	lr

08009a68 <_ZN8std_msgs19MultiArrayDimension7getTypeEv>:

    const char * getType(){ return "std_msgs/MultiArrayDimension"; };
 8009a68:	4800      	ldr	r0, [pc, #0]	; (8009a6c <_ZN8std_msgs19MultiArrayDimension7getTypeEv+0x4>)
 8009a6a:	4770      	bx	lr
 8009a6c:	0800c2a0 	.word	0x0800c2a0

08009a70 <_ZN8std_msgs19MultiArrayDimension6getMD5Ev>:
    const char * getMD5(){ return "4cd0c83a8683deae40ecdac60e53bfa8"; };
 8009a70:	4800      	ldr	r0, [pc, #0]	; (8009a74 <_ZN8std_msgs19MultiArrayDimension6getMD5Ev+0x4>)
 8009a72:	4770      	bx	lr
 8009a74:	0800c27c 	.word	0x0800c27c

08009a78 <_ZNK8std_msgs16MultiArrayLayout9serializeEPh>:
    {
    }

    virtual int serialize(unsigned char *outbuffer) const
 8009a78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a7a:	4606      	mov	r6, r0
 8009a7c:	460f      	mov	r7, r1
    {
      int offset = 0;
      *(outbuffer + offset + 0) = (this->dim_length >> (8 * 0)) & 0xFF;
 8009a7e:	7903      	ldrb	r3, [r0, #4]
 8009a80:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (this->dim_length >> (8 * 1)) & 0xFF;
 8009a82:	7943      	ldrb	r3, [r0, #5]
 8009a84:	704b      	strb	r3, [r1, #1]
      *(outbuffer + offset + 2) = (this->dim_length >> (8 * 2)) & 0xFF;
 8009a86:	7983      	ldrb	r3, [r0, #6]
 8009a88:	708b      	strb	r3, [r1, #2]
      *(outbuffer + offset + 3) = (this->dim_length >> (8 * 3)) & 0xFF;
 8009a8a:	79c3      	ldrb	r3, [r0, #7]
 8009a8c:	70cb      	strb	r3, [r1, #3]
      offset += sizeof(this->dim_length);
      for( uint32_t i = 0; i < dim_length; i++){
 8009a8e:	2400      	movs	r4, #0
      offset += sizeof(this->dim_length);
 8009a90:	2504      	movs	r5, #4
      for( uint32_t i = 0; i < dim_length; i++){
 8009a92:	6873      	ldr	r3, [r6, #4]
 8009a94:	429c      	cmp	r4, r3
 8009a96:	d209      	bcs.n	8009aac <_ZNK8std_msgs16MultiArrayLayout9serializeEPh+0x34>
      offset += this->dim[i].serialize(outbuffer + offset);
 8009a98:	69b0      	ldr	r0, [r6, #24]
 8009a9a:	0123      	lsls	r3, r4, #4
 8009a9c:	58c2      	ldr	r2, [r0, r3]
 8009a9e:	6812      	ldr	r2, [r2, #0]
 8009aa0:	1979      	adds	r1, r7, r5
 8009aa2:	4418      	add	r0, r3
 8009aa4:	4790      	blx	r2
 8009aa6:	4405      	add	r5, r0
      for( uint32_t i = 0; i < dim_length; i++){
 8009aa8:	3401      	adds	r4, #1
 8009aaa:	e7f2      	b.n	8009a92 <_ZNK8std_msgs16MultiArrayLayout9serializeEPh+0x1a>
      }
      *(outbuffer + offset + 0) = (this->data_offset >> (8 * 0)) & 0xFF;
 8009aac:	7f33      	ldrb	r3, [r6, #28]
 8009aae:	557b      	strb	r3, [r7, r5]
      *(outbuffer + offset + 1) = (this->data_offset >> (8 * 1)) & 0xFF;
 8009ab0:	1c6b      	adds	r3, r5, #1
 8009ab2:	7f72      	ldrb	r2, [r6, #29]
 8009ab4:	54fa      	strb	r2, [r7, r3]
      *(outbuffer + offset + 2) = (this->data_offset >> (8 * 2)) & 0xFF;
 8009ab6:	1cab      	adds	r3, r5, #2
 8009ab8:	7fb2      	ldrb	r2, [r6, #30]
 8009aba:	54fa      	strb	r2, [r7, r3]
      *(outbuffer + offset + 3) = (this->data_offset >> (8 * 3)) & 0xFF;
 8009abc:	1ceb      	adds	r3, r5, #3
 8009abe:	7ff2      	ldrb	r2, [r6, #31]
 8009ac0:	54fa      	strb	r2, [r7, r3]
      offset += sizeof(this->data_offset);
      return offset;
    }
 8009ac2:	1d28      	adds	r0, r5, #4
 8009ac4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009ac8 <_ZN8std_msgs16MultiArrayLayout7getTypeEv>:
      this->data_offset |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
      offset += sizeof(this->data_offset);
     return offset;
    }

    const char * getType(){ return "std_msgs/MultiArrayLayout"; };
 8009ac8:	4800      	ldr	r0, [pc, #0]	; (8009acc <_ZN8std_msgs16MultiArrayLayout7getTypeEv+0x4>)
 8009aca:	4770      	bx	lr
 8009acc:	0800c220 	.word	0x0800c220

08009ad0 <_ZN8std_msgs16MultiArrayLayout6getMD5Ev>:
    const char * getMD5(){ return "0fed2a11c13e11c5571b4e2a995a91a3"; };
 8009ad0:	4800      	ldr	r0, [pc, #0]	; (8009ad4 <_ZN8std_msgs16MultiArrayLayout6getMD5Ev+0x4>)
 8009ad2:	4770      	bx	lr
 8009ad4:	0800c1fc 	.word	0x0800c1fc

08009ad8 <_ZN8std_msgs17Float32MultiArray7getTypeEv>:
        memcpy( &(this->data[i]), &(this->st_data), sizeof(float));
      }
     return offset;
    }

    const char * getType(){ return "std_msgs/Float32MultiArray"; };
 8009ad8:	4800      	ldr	r0, [pc, #0]	; (8009adc <_ZN8std_msgs17Float32MultiArray7getTypeEv+0x4>)
 8009ada:	4770      	bx	lr
 8009adc:	0800c260 	.word	0x0800c260

08009ae0 <_ZN8std_msgs17Float32MultiArray6getMD5Ev>:
    const char * getMD5(){ return "6a40e0ffa6a17a503ac3f8616991b1f6"; };
 8009ae0:	4800      	ldr	r0, [pc, #0]	; (8009ae4 <_ZN8std_msgs17Float32MultiArray6getMD5Ev+0x4>)
 8009ae2:	4770      	bx	lr
 8009ae4:	0800c23c 	.word	0x0800c23c

08009ae8 <_ZNK8std_msgs4Bool9serializeEPh>:
      int offset = 0;
      union {
        bool real;
        uint8_t base;
      } u_data;
      u_data.real = this->data;
 8009ae8:	7903      	ldrb	r3, [r0, #4]
      *(outbuffer + offset + 0) = (u_data.base >> (8 * 0)) & 0xFF;
 8009aea:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->data);
      return offset;
    }
 8009aec:	2001      	movs	r0, #1
 8009aee:	4770      	bx	lr

08009af0 <_ZN8std_msgs4Bool11deserializeEPh>:
      union {
        bool real;
        uint8_t base;
      } u_data;
      u_data.base = 0;
      u_data.base |= ((uint8_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8009af0:	780b      	ldrb	r3, [r1, #0]
      this->data = u_data.real;
 8009af2:	7103      	strb	r3, [r0, #4]
      offset += sizeof(this->data);
     return offset;
    }
 8009af4:	2001      	movs	r0, #1
 8009af6:	4770      	bx	lr

08009af8 <_ZN8std_msgs4Bool7getTypeEv>:

    const char * getType(){ return "std_msgs/Bool"; };
 8009af8:	4800      	ldr	r0, [pc, #0]	; (8009afc <_ZN8std_msgs4Bool7getTypeEv+0x4>)
 8009afa:	4770      	bx	lr
 8009afc:	0800c2e4 	.word	0x0800c2e4

08009b00 <_ZN8std_msgs4Bool6getMD5Ev>:
    const char * getMD5(){ return "8b94c1b53db61fb6aed406028ad6332a"; };
 8009b00:	4800      	ldr	r0, [pc, #0]	; (8009b04 <_ZN8std_msgs4Bool6getMD5Ev+0x4>)
 8009b02:	4770      	bx	lr
 8009b04:	0800c2c0 	.word	0x0800c2c0

08009b08 <_ZNK8std_msgs6UInt169serializeEPh>:
    }

    virtual int serialize(unsigned char *outbuffer) const
    {
      int offset = 0;
      *(outbuffer + offset + 0) = (this->data >> (8 * 0)) & 0xFF;
 8009b08:	7903      	ldrb	r3, [r0, #4]
 8009b0a:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (this->data >> (8 * 1)) & 0xFF;
 8009b0c:	8883      	ldrh	r3, [r0, #4]
 8009b0e:	0a1b      	lsrs	r3, r3, #8
 8009b10:	704b      	strb	r3, [r1, #1]
      offset += sizeof(this->data);
      return offset;
    }
 8009b12:	2002      	movs	r0, #2
 8009b14:	4770      	bx	lr

08009b16 <_ZN8std_msgs6UInt1611deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
    {
      int offset = 0;
      this->data =  ((uint16_t) (*(inbuffer + offset)));
 8009b16:	780b      	ldrb	r3, [r1, #0]
 8009b18:	8083      	strh	r3, [r0, #4]
      this->data |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8009b1a:	784a      	ldrb	r2, [r1, #1]
 8009b1c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8009b20:	8083      	strh	r3, [r0, #4]
      offset += sizeof(this->data);
     return offset;
    }
 8009b22:	2002      	movs	r0, #2
 8009b24:	4770      	bx	lr
	...

08009b28 <_ZN8std_msgs6UInt167getTypeEv>:

    const char * getType(){ return "std_msgs/UInt16"; };
 8009b28:	4800      	ldr	r0, [pc, #0]	; (8009b2c <_ZN8std_msgs6UInt167getTypeEv+0x4>)
 8009b2a:	4770      	bx	lr
 8009b2c:	0800c380 	.word	0x0800c380

08009b30 <_ZN8std_msgs6UInt166getMD5Ev>:
    const char * getMD5(){ return "1df79edf208b629fe6b81923a544552d"; };
 8009b30:	4800      	ldr	r0, [pc, #0]	; (8009b34 <_ZN8std_msgs6UInt166getMD5Ev+0x4>)
 8009b32:	4770      	bx	lr
 8009b34:	0800c35c 	.word	0x0800c35c

08009b38 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9connectedEv>:
  };
 8009b38:	f890 08f4 	ldrb.w	r0, [r0, #2292]	; 0x8f4
 8009b3c:	4770      	bx	lr

08009b3e <_ZN3ros10SubscriberIN8std_msgs17Float32MultiArrayEvE15getEndpointTypeEv>:
    return this->msg.getMD5();
  }
  virtual int getEndpointType()
  {
    return endpoint_;
  }
 8009b3e:	6c00      	ldr	r0, [r0, #64]	; 0x40
 8009b40:	4770      	bx	lr
	...

08009b44 <_ZN3ros10SubscriberIN8std_msgs17Float32MultiArrayEvE10getMsgTypeEv>:
  }
 8009b44:	4800      	ldr	r0, [pc, #0]	; (8009b48 <_ZN3ros10SubscriberIN8std_msgs17Float32MultiArrayEvE10getMsgTypeEv+0x4>)
 8009b46:	4770      	bx	lr
 8009b48:	0800c260 	.word	0x0800c260

08009b4c <_ZN3ros10SubscriberIN8std_msgs17Float32MultiArrayEvE9getMsgMD5Ev>:
  }
 8009b4c:	4800      	ldr	r0, [pc, #0]	; (8009b50 <_ZN3ros10SubscriberIN8std_msgs17Float32MultiArrayEvE9getMsgMD5Ev+0x4>)
 8009b4e:	4770      	bx	lr
 8009b50:	0800c23c 	.word	0x0800c23c

08009b54 <_ZN3ros10SubscriberIN8std_msgs5Int32EvE8callbackEPh>:
  virtual void callback(unsigned char* data)
 8009b54:	b508      	push	{r3, lr}
      u_data.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8009b56:	780b      	ldrb	r3, [r1, #0]
      u_data.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8009b58:	784a      	ldrb	r2, [r1, #1]
 8009b5a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
      u_data.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8009b5e:	788a      	ldrb	r2, [r1, #2]
 8009b60:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
      u_data.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8009b64:	78ca      	ldrb	r2, [r1, #3]
 8009b66:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
      this->data = u_data.real;
 8009b6a:	6103      	str	r3, [r0, #16]
    this->cb_(msg);
 8009b6c:	6943      	ldr	r3, [r0, #20]
 8009b6e:	300c      	adds	r0, #12
 8009b70:	4798      	blx	r3
 8009b72:	bd08      	pop	{r3, pc}

08009b74 <_ZN3ros10SubscriberIN8std_msgs5Int32EvE15getEndpointTypeEv>:
  }
 8009b74:	6980      	ldr	r0, [r0, #24]
 8009b76:	4770      	bx	lr

08009b78 <_ZN3ros10SubscriberIN8std_msgs5Int32EvE10getMsgTypeEv>:
  }
 8009b78:	4800      	ldr	r0, [pc, #0]	; (8009b7c <_ZN3ros10SubscriberIN8std_msgs5Int32EvE10getMsgTypeEv+0x4>)
 8009b7a:	4770      	bx	lr
 8009b7c:	0800c34c 	.word	0x0800c34c

08009b80 <_ZN3ros10SubscriberIN8std_msgs5Int32EvE9getMsgMD5Ev>:
  }
 8009b80:	4800      	ldr	r0, [pc, #0]	; (8009b84 <_ZN3ros10SubscriberIN8std_msgs5Int32EvE9getMsgMD5Ev+0x4>)
 8009b82:	4770      	bx	lr
 8009b84:	0800c328 	.word	0x0800c328

08009b88 <_ZN3ros10SubscriberIN8std_msgs4BoolEvE8callbackEPh>:
  virtual void callback(unsigned char* data)
 8009b88:	b508      	push	{r3, lr}
      u_data.base |= ((uint8_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8009b8a:	780b      	ldrb	r3, [r1, #0]
      this->data = u_data.real;
 8009b8c:	7403      	strb	r3, [r0, #16]
    this->cb_(msg);
 8009b8e:	6943      	ldr	r3, [r0, #20]
 8009b90:	300c      	adds	r0, #12
 8009b92:	4798      	blx	r3
 8009b94:	bd08      	pop	{r3, pc}

08009b96 <_ZN3ros10SubscriberIN8std_msgs4BoolEvE15getEndpointTypeEv>:
  }
 8009b96:	6980      	ldr	r0, [r0, #24]
 8009b98:	4770      	bx	lr
	...

08009b9c <_ZN3ros10SubscriberIN8std_msgs4BoolEvE10getMsgTypeEv>:
  }
 8009b9c:	4800      	ldr	r0, [pc, #0]	; (8009ba0 <_ZN3ros10SubscriberIN8std_msgs4BoolEvE10getMsgTypeEv+0x4>)
 8009b9e:	4770      	bx	lr
 8009ba0:	0800c2e4 	.word	0x0800c2e4

08009ba4 <_ZN3ros10SubscriberIN8std_msgs4BoolEvE9getMsgMD5Ev>:
  }
 8009ba4:	4800      	ldr	r0, [pc, #0]	; (8009ba8 <_ZN3ros10SubscriberIN8std_msgs4BoolEvE9getMsgMD5Ev+0x4>)
 8009ba6:	4770      	bx	lr
 8009ba8:	0800c2c0 	.word	0x0800c2c0

08009bac <_ZNK14rosserial_msgs9TopicInfo9serializeEPh>:
    virtual int serialize(unsigned char *outbuffer) const
 8009bac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009bae:	4606      	mov	r6, r0
 8009bb0:	460c      	mov	r4, r1
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
 8009bb2:	7903      	ldrb	r3, [r0, #4]
 8009bb4:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (this->topic_id >> (8 * 1)) & 0xFF;
 8009bb6:	8883      	ldrh	r3, [r0, #4]
 8009bb8:	0a1b      	lsrs	r3, r3, #8
 8009bba:	704b      	strb	r3, [r1, #1]
      uint32_t length_topic_name = strlen(this->topic_name);
 8009bbc:	6880      	ldr	r0, [r0, #8]
 8009bbe:	f7fe f9f9 	bl	8007fb4 <strlen>
 8009bc2:	4607      	mov	r7, r0
    for (size_t i = 0; i < sizeof(V); i++)
 8009bc4:	2300      	movs	r3, #0
 8009bc6:	2b03      	cmp	r3, #3
 8009bc8:	d806      	bhi.n	8009bd8 <_ZNK14rosserial_msgs9TopicInfo9serializeEPh+0x2c>
      arr[i] = (var >> (8 * i));
 8009bca:	1c99      	adds	r1, r3, #2
 8009bcc:	00da      	lsls	r2, r3, #3
 8009bce:	fa27 f202 	lsr.w	r2, r7, r2
 8009bd2:	5462      	strb	r2, [r4, r1]
    for (size_t i = 0; i < sizeof(V); i++)
 8009bd4:	3301      	adds	r3, #1
 8009bd6:	e7f6      	b.n	8009bc6 <_ZNK14rosserial_msgs9TopicInfo9serializeEPh+0x1a>
      memcpy(outbuffer + offset, this->topic_name, length_topic_name);
 8009bd8:	463a      	mov	r2, r7
 8009bda:	68b1      	ldr	r1, [r6, #8]
 8009bdc:	1da0      	adds	r0, r4, #6
 8009bde:	f001 fc1d 	bl	800b41c <memcpy>
      offset += length_topic_name;
 8009be2:	3706      	adds	r7, #6
      uint32_t length_message_type = strlen(this->message_type);
 8009be4:	68f0      	ldr	r0, [r6, #12]
 8009be6:	f7fe f9e5 	bl	8007fb4 <strlen>
 8009bea:	4605      	mov	r5, r0
 8009bec:	2300      	movs	r3, #0
 8009bee:	2b03      	cmp	r3, #3
 8009bf0:	d806      	bhi.n	8009c00 <_ZNK14rosserial_msgs9TopicInfo9serializeEPh+0x54>
      arr[i] = (var >> (8 * i));
 8009bf2:	18f9      	adds	r1, r7, r3
 8009bf4:	00da      	lsls	r2, r3, #3
 8009bf6:	fa25 f202 	lsr.w	r2, r5, r2
 8009bfa:	5462      	strb	r2, [r4, r1]
    for (size_t i = 0; i < sizeof(V); i++)
 8009bfc:	3301      	adds	r3, #1
 8009bfe:	e7f6      	b.n	8009bee <_ZNK14rosserial_msgs9TopicInfo9serializeEPh+0x42>
      offset += 4;
 8009c00:	3704      	adds	r7, #4
      memcpy(outbuffer + offset, this->message_type, length_message_type);
 8009c02:	462a      	mov	r2, r5
 8009c04:	68f1      	ldr	r1, [r6, #12]
 8009c06:	19e0      	adds	r0, r4, r7
 8009c08:	f001 fc08 	bl	800b41c <memcpy>
      offset += length_message_type;
 8009c0c:	443d      	add	r5, r7
      uint32_t length_md5sum = strlen(this->md5sum);
 8009c0e:	6930      	ldr	r0, [r6, #16]
 8009c10:	f7fe f9d0 	bl	8007fb4 <strlen>
 8009c14:	4607      	mov	r7, r0
 8009c16:	2300      	movs	r3, #0
 8009c18:	2b03      	cmp	r3, #3
 8009c1a:	d806      	bhi.n	8009c2a <_ZNK14rosserial_msgs9TopicInfo9serializeEPh+0x7e>
      arr[i] = (var >> (8 * i));
 8009c1c:	18e9      	adds	r1, r5, r3
 8009c1e:	00da      	lsls	r2, r3, #3
 8009c20:	fa27 f202 	lsr.w	r2, r7, r2
 8009c24:	5462      	strb	r2, [r4, r1]
    for (size_t i = 0; i < sizeof(V); i++)
 8009c26:	3301      	adds	r3, #1
 8009c28:	e7f6      	b.n	8009c18 <_ZNK14rosserial_msgs9TopicInfo9serializeEPh+0x6c>
      offset += 4;
 8009c2a:	3504      	adds	r5, #4
      memcpy(outbuffer + offset, this->md5sum, length_md5sum);
 8009c2c:	463a      	mov	r2, r7
 8009c2e:	6931      	ldr	r1, [r6, #16]
 8009c30:	1960      	adds	r0, r4, r5
 8009c32:	f001 fbf3 	bl	800b41c <memcpy>
      offset += length_md5sum;
 8009c36:	443d      	add	r5, r7
      u_buffer_size.real = this->buffer_size;
 8009c38:	6973      	ldr	r3, [r6, #20]
      *(outbuffer + offset + 0) = (u_buffer_size.base >> (8 * 0)) & 0xFF;
 8009c3a:	5563      	strb	r3, [r4, r5]
      *(outbuffer + offset + 1) = (u_buffer_size.base >> (8 * 1)) & 0xFF;
 8009c3c:	1c6a      	adds	r2, r5, #1
 8009c3e:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8009c42:	54a1      	strb	r1, [r4, r2]
      *(outbuffer + offset + 2) = (u_buffer_size.base >> (8 * 2)) & 0xFF;
 8009c44:	1caa      	adds	r2, r5, #2
 8009c46:	f3c3 4107 	ubfx	r1, r3, #16, #8
 8009c4a:	54a1      	strb	r1, [r4, r2]
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
 8009c4c:	1cea      	adds	r2, r5, #3
 8009c4e:	0e1b      	lsrs	r3, r3, #24
 8009c50:	54a3      	strb	r3, [r4, r2]
    }
 8009c52:	1d28      	adds	r0, r5, #4
 8009c54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009c56 <_ZNK14rosserial_msgs3Log9serializeEPh>:
    virtual int serialize(unsigned char *outbuffer) const
 8009c56:	b570      	push	{r4, r5, r6, lr}
 8009c58:	4606      	mov	r6, r0
 8009c5a:	460d      	mov	r5, r1
      *(outbuffer + offset + 0) = (this->level >> (8 * 0)) & 0xFF;
 8009c5c:	7903      	ldrb	r3, [r0, #4]
 8009c5e:	700b      	strb	r3, [r1, #0]
      uint32_t length_msg = strlen(this->msg);
 8009c60:	6880      	ldr	r0, [r0, #8]
 8009c62:	f7fe f9a7 	bl	8007fb4 <strlen>
 8009c66:	4604      	mov	r4, r0
 8009c68:	2300      	movs	r3, #0
 8009c6a:	2b03      	cmp	r3, #3
 8009c6c:	d806      	bhi.n	8009c7c <_ZNK14rosserial_msgs3Log9serializeEPh+0x26>
 8009c6e:	1c5a      	adds	r2, r3, #1
      arr[i] = (var >> (8 * i));
 8009c70:	00db      	lsls	r3, r3, #3
 8009c72:	fa24 f303 	lsr.w	r3, r4, r3
 8009c76:	54ab      	strb	r3, [r5, r2]
    for (size_t i = 0; i < sizeof(V); i++)
 8009c78:	4613      	mov	r3, r2
 8009c7a:	e7f6      	b.n	8009c6a <_ZNK14rosserial_msgs3Log9serializeEPh+0x14>
      memcpy(outbuffer + offset, this->msg, length_msg);
 8009c7c:	4622      	mov	r2, r4
 8009c7e:	68b1      	ldr	r1, [r6, #8]
 8009c80:	1d68      	adds	r0, r5, #5
 8009c82:	f001 fbcb 	bl	800b41c <memcpy>
    }
 8009c86:	1d60      	adds	r0, r4, #5
 8009c88:	bd70      	pop	{r4, r5, r6, pc}

08009c8a <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh>:
    virtual int serialize(unsigned char *outbuffer) const
 8009c8a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009c8e:	4606      	mov	r6, r0
 8009c90:	460d      	mov	r5, r1
      *(outbuffer + offset + 0) = (this->ints_length >> (8 * 0)) & 0xFF;
 8009c92:	7903      	ldrb	r3, [r0, #4]
 8009c94:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (this->ints_length >> (8 * 1)) & 0xFF;
 8009c96:	7943      	ldrb	r3, [r0, #5]
 8009c98:	704b      	strb	r3, [r1, #1]
      *(outbuffer + offset + 2) = (this->ints_length >> (8 * 2)) & 0xFF;
 8009c9a:	7983      	ldrb	r3, [r0, #6]
 8009c9c:	708b      	strb	r3, [r1, #2]
      *(outbuffer + offset + 3) = (this->ints_length >> (8 * 3)) & 0xFF;
 8009c9e:	79c3      	ldrb	r3, [r0, #7]
 8009ca0:	70cb      	strb	r3, [r1, #3]
      for( uint32_t i = 0; i < ints_length; i++){
 8009ca2:	2200      	movs	r2, #0
      offset += sizeof(this->ints_length);
 8009ca4:	2404      	movs	r4, #4
      for( uint32_t i = 0; i < ints_length; i++){
 8009ca6:	6873      	ldr	r3, [r6, #4]
 8009ca8:	429a      	cmp	r2, r3
 8009caa:	d211      	bcs.n	8009cd0 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x46>
      u_intsi.real = this->ints[i];
 8009cac:	68f3      	ldr	r3, [r6, #12]
 8009cae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
      *(outbuffer + offset + 0) = (u_intsi.base >> (8 * 0)) & 0xFF;
 8009cb2:	552b      	strb	r3, [r5, r4]
      *(outbuffer + offset + 1) = (u_intsi.base >> (8 * 1)) & 0xFF;
 8009cb4:	1c61      	adds	r1, r4, #1
 8009cb6:	f3c3 2007 	ubfx	r0, r3, #8, #8
 8009cba:	5468      	strb	r0, [r5, r1]
      *(outbuffer + offset + 2) = (u_intsi.base >> (8 * 2)) & 0xFF;
 8009cbc:	1ca1      	adds	r1, r4, #2
 8009cbe:	f3c3 4007 	ubfx	r0, r3, #16, #8
 8009cc2:	5468      	strb	r0, [r5, r1]
      *(outbuffer + offset + 3) = (u_intsi.base >> (8 * 3)) & 0xFF;
 8009cc4:	1ce1      	adds	r1, r4, #3
 8009cc6:	0e1b      	lsrs	r3, r3, #24
 8009cc8:	546b      	strb	r3, [r5, r1]
      offset += sizeof(this->ints[i]);
 8009cca:	3404      	adds	r4, #4
      for( uint32_t i = 0; i < ints_length; i++){
 8009ccc:	3201      	adds	r2, #1
 8009cce:	e7ea      	b.n	8009ca6 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x1c>
      *(outbuffer + offset + 0) = (this->floats_length >> (8 * 0)) & 0xFF;
 8009cd0:	7c33      	ldrb	r3, [r6, #16]
 8009cd2:	552b      	strb	r3, [r5, r4]
      *(outbuffer + offset + 1) = (this->floats_length >> (8 * 1)) & 0xFF;
 8009cd4:	1c63      	adds	r3, r4, #1
 8009cd6:	7c72      	ldrb	r2, [r6, #17]
 8009cd8:	54ea      	strb	r2, [r5, r3]
      *(outbuffer + offset + 2) = (this->floats_length >> (8 * 2)) & 0xFF;
 8009cda:	1ca3      	adds	r3, r4, #2
 8009cdc:	7cb2      	ldrb	r2, [r6, #18]
 8009cde:	54ea      	strb	r2, [r5, r3]
      *(outbuffer + offset + 3) = (this->floats_length >> (8 * 3)) & 0xFF;
 8009ce0:	1ce3      	adds	r3, r4, #3
 8009ce2:	7cf2      	ldrb	r2, [r6, #19]
 8009ce4:	54ea      	strb	r2, [r5, r3]
      offset += sizeof(this->floats_length);
 8009ce6:	3404      	adds	r4, #4
      for( uint32_t i = 0; i < floats_length; i++){
 8009ce8:	2200      	movs	r2, #0
 8009cea:	6933      	ldr	r3, [r6, #16]
 8009cec:	429a      	cmp	r2, r3
 8009cee:	d211      	bcs.n	8009d14 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x8a>
      u_floatsi.real = this->floats[i];
 8009cf0:	69b3      	ldr	r3, [r6, #24]
 8009cf2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
      *(outbuffer + offset + 0) = (u_floatsi.base >> (8 * 0)) & 0xFF;
 8009cf6:	552b      	strb	r3, [r5, r4]
      *(outbuffer + offset + 1) = (u_floatsi.base >> (8 * 1)) & 0xFF;
 8009cf8:	1c61      	adds	r1, r4, #1
 8009cfa:	f3c3 2007 	ubfx	r0, r3, #8, #8
 8009cfe:	5468      	strb	r0, [r5, r1]
      *(outbuffer + offset + 2) = (u_floatsi.base >> (8 * 2)) & 0xFF;
 8009d00:	1ca1      	adds	r1, r4, #2
 8009d02:	f3c3 4007 	ubfx	r0, r3, #16, #8
 8009d06:	5468      	strb	r0, [r5, r1]
      *(outbuffer + offset + 3) = (u_floatsi.base >> (8 * 3)) & 0xFF;
 8009d08:	1ce1      	adds	r1, r4, #3
 8009d0a:	0e1b      	lsrs	r3, r3, #24
 8009d0c:	546b      	strb	r3, [r5, r1]
      offset += sizeof(this->floats[i]);
 8009d0e:	3404      	adds	r4, #4
      for( uint32_t i = 0; i < floats_length; i++){
 8009d10:	3201      	adds	r2, #1
 8009d12:	e7ea      	b.n	8009cea <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x60>
      *(outbuffer + offset + 0) = (this->strings_length >> (8 * 0)) & 0xFF;
 8009d14:	7f33      	ldrb	r3, [r6, #28]
 8009d16:	552b      	strb	r3, [r5, r4]
      *(outbuffer + offset + 1) = (this->strings_length >> (8 * 1)) & 0xFF;
 8009d18:	1c63      	adds	r3, r4, #1
 8009d1a:	7f72      	ldrb	r2, [r6, #29]
 8009d1c:	54ea      	strb	r2, [r5, r3]
      *(outbuffer + offset + 2) = (this->strings_length >> (8 * 2)) & 0xFF;
 8009d1e:	1ca3      	adds	r3, r4, #2
 8009d20:	7fb2      	ldrb	r2, [r6, #30]
 8009d22:	54ea      	strb	r2, [r5, r3]
      *(outbuffer + offset + 3) = (this->strings_length >> (8 * 3)) & 0xFF;
 8009d24:	1ce3      	adds	r3, r4, #3
 8009d26:	7ff2      	ldrb	r2, [r6, #31]
 8009d28:	54ea      	strb	r2, [r5, r3]
      offset += sizeof(this->strings_length);
 8009d2a:	3404      	adds	r4, #4
      for( uint32_t i = 0; i < strings_length; i++){
 8009d2c:	f04f 0800 	mov.w	r8, #0
 8009d30:	e00a      	b.n	8009d48 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0xbe>
      offset += 4;
 8009d32:	3404      	adds	r4, #4
      memcpy(outbuffer + offset, this->strings[i], length_stringsi);
 8009d34:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8009d36:	463a      	mov	r2, r7
 8009d38:	f853 1009 	ldr.w	r1, [r3, r9]
 8009d3c:	1928      	adds	r0, r5, r4
 8009d3e:	f001 fb6d 	bl	800b41c <memcpy>
      offset += length_stringsi;
 8009d42:	443c      	add	r4, r7
      for( uint32_t i = 0; i < strings_length; i++){
 8009d44:	f108 0801 	add.w	r8, r8, #1
 8009d48:	69f3      	ldr	r3, [r6, #28]
 8009d4a:	4598      	cmp	r8, r3
 8009d4c:	d212      	bcs.n	8009d74 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0xea>
      uint32_t length_stringsi = strlen(this->strings[i]);
 8009d4e:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8009d50:	ea4f 0988 	mov.w	r9, r8, lsl #2
 8009d54:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8009d58:	f7fe f92c 	bl	8007fb4 <strlen>
 8009d5c:	4607      	mov	r7, r0
      varToArr(outbuffer + offset, length_stringsi);
 8009d5e:	4620      	mov	r0, r4
 8009d60:	2300      	movs	r3, #0
 8009d62:	2b03      	cmp	r3, #3
 8009d64:	d8e5      	bhi.n	8009d32 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0xa8>
      arr[i] = (var >> (8 * i));
 8009d66:	18c1      	adds	r1, r0, r3
 8009d68:	00da      	lsls	r2, r3, #3
 8009d6a:	fa27 f202 	lsr.w	r2, r7, r2
 8009d6e:	546a      	strb	r2, [r5, r1]
    for (size_t i = 0; i < sizeof(V); i++)
 8009d70:	3301      	adds	r3, #1
 8009d72:	e7f6      	b.n	8009d62 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0xd8>
    }
 8009d74:	4620      	mov	r0, r4
 8009d76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08009d7a <_ZNK8std_msgs19MultiArrayDimension9serializeEPh>:
    virtual int serialize(unsigned char *outbuffer) const
 8009d7a:	b570      	push	{r4, r5, r6, lr}
 8009d7c:	4606      	mov	r6, r0
 8009d7e:	460d      	mov	r5, r1
      uint32_t length_label = strlen(this->label);
 8009d80:	6840      	ldr	r0, [r0, #4]
 8009d82:	f7fe f917 	bl	8007fb4 <strlen>
 8009d86:	4604      	mov	r4, r0
 8009d88:	2300      	movs	r3, #0
 8009d8a:	2b03      	cmp	r3, #3
 8009d8c:	d805      	bhi.n	8009d9a <_ZNK8std_msgs19MultiArrayDimension9serializeEPh+0x20>
      arr[i] = (var >> (8 * i));
 8009d8e:	00da      	lsls	r2, r3, #3
 8009d90:	fa24 f202 	lsr.w	r2, r4, r2
 8009d94:	54ea      	strb	r2, [r5, r3]
    for (size_t i = 0; i < sizeof(V); i++)
 8009d96:	3301      	adds	r3, #1
 8009d98:	e7f7      	b.n	8009d8a <_ZNK8std_msgs19MultiArrayDimension9serializeEPh+0x10>
      memcpy(outbuffer + offset, this->label, length_label);
 8009d9a:	4622      	mov	r2, r4
 8009d9c:	6871      	ldr	r1, [r6, #4]
 8009d9e:	1d28      	adds	r0, r5, #4
 8009da0:	f001 fb3c 	bl	800b41c <memcpy>
      offset += length_label;
 8009da4:	1d23      	adds	r3, r4, #4
      *(outbuffer + offset + 0) = (this->size >> (8 * 0)) & 0xFF;
 8009da6:	7a32      	ldrb	r2, [r6, #8]
 8009da8:	54ea      	strb	r2, [r5, r3]
      *(outbuffer + offset + 1) = (this->size >> (8 * 1)) & 0xFF;
 8009daa:	1d63      	adds	r3, r4, #5
 8009dac:	7a72      	ldrb	r2, [r6, #9]
 8009dae:	54ea      	strb	r2, [r5, r3]
      *(outbuffer + offset + 2) = (this->size >> (8 * 2)) & 0xFF;
 8009db0:	1da3      	adds	r3, r4, #6
 8009db2:	7ab2      	ldrb	r2, [r6, #10]
 8009db4:	54ea      	strb	r2, [r5, r3]
      *(outbuffer + offset + 3) = (this->size >> (8 * 3)) & 0xFF;
 8009db6:	1de3      	adds	r3, r4, #7
 8009db8:	7af2      	ldrb	r2, [r6, #11]
 8009dba:	54ea      	strb	r2, [r5, r3]
      offset += sizeof(this->size);
 8009dbc:	f104 0308 	add.w	r3, r4, #8
      *(outbuffer + offset + 0) = (this->stride >> (8 * 0)) & 0xFF;
 8009dc0:	7b32      	ldrb	r2, [r6, #12]
 8009dc2:	54ea      	strb	r2, [r5, r3]
      *(outbuffer + offset + 1) = (this->stride >> (8 * 1)) & 0xFF;
 8009dc4:	f104 0309 	add.w	r3, r4, #9
 8009dc8:	7b72      	ldrb	r2, [r6, #13]
 8009dca:	54ea      	strb	r2, [r5, r3]
      *(outbuffer + offset + 2) = (this->stride >> (8 * 2)) & 0xFF;
 8009dcc:	f104 030a 	add.w	r3, r4, #10
 8009dd0:	7bb2      	ldrb	r2, [r6, #14]
 8009dd2:	54ea      	strb	r2, [r5, r3]
      *(outbuffer + offset + 3) = (this->stride >> (8 * 3)) & 0xFF;
 8009dd4:	f104 030b 	add.w	r3, r4, #11
 8009dd8:	7bf2      	ldrb	r2, [r6, #15]
 8009dda:	54ea      	strb	r2, [r5, r3]
    }
 8009ddc:	f104 000c 	add.w	r0, r4, #12
 8009de0:	bd70      	pop	{r4, r5, r6, pc}

08009de2 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>:
    virtual int deserialize(unsigned char *inbuffer)
 8009de2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009de4:	4606      	mov	r6, r0
 8009de6:	460d      	mov	r5, r1
      uint32_t ints_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8009de8:	780c      	ldrb	r4, [r1, #0]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8009dea:	784b      	ldrb	r3, [r1, #1]
 8009dec:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8009df0:	788b      	ldrb	r3, [r1, #2]
 8009df2:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8009df6:	78cb      	ldrb	r3, [r1, #3]
 8009df8:	ea44 6403 	orr.w	r4, r4, r3, lsl #24
      if(ints_lengthT > ints_length)
 8009dfc:	6843      	ldr	r3, [r0, #4]
 8009dfe:	429c      	cmp	r4, r3
 8009e00:	d819      	bhi.n	8009e36 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x54>
      ints_length = ints_lengthT;
 8009e02:	6074      	str	r4, [r6, #4]
      for( uint32_t i = 0; i < ints_length; i++){
 8009e04:	2200      	movs	r2, #0
      offset += sizeof(this->ints_length);
 8009e06:	2404      	movs	r4, #4
      for( uint32_t i = 0; i < ints_length; i++){
 8009e08:	6873      	ldr	r3, [r6, #4]
 8009e0a:	429a      	cmp	r2, r3
 8009e0c:	d219      	bcs.n	8009e42 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x60>
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8009e0e:	5d2b      	ldrb	r3, [r5, r4]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8009e10:	1c61      	adds	r1, r4, #1
 8009e12:	5c69      	ldrb	r1, [r5, r1]
 8009e14:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8009e18:	1ca1      	adds	r1, r4, #2
 8009e1a:	5c69      	ldrb	r1, [r5, r1]
 8009e1c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8009e20:	1ce1      	adds	r1, r4, #3
 8009e22:	5c69      	ldrb	r1, [r5, r1]
 8009e24:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
      this->st_ints = u_st_ints.real;
 8009e28:	60b3      	str	r3, [r6, #8]
      offset += sizeof(this->st_ints);
 8009e2a:	3404      	adds	r4, #4
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
 8009e2c:	68f1      	ldr	r1, [r6, #12]
 8009e2e:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
      for( uint32_t i = 0; i < ints_length; i++){
 8009e32:	3201      	adds	r2, #1
 8009e34:	e7e8      	b.n	8009e08 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x26>
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
 8009e36:	00a1      	lsls	r1, r4, #2
 8009e38:	68c0      	ldr	r0, [r0, #12]
 8009e3a:	f001 fb0f 	bl	800b45c <realloc>
 8009e3e:	60f0      	str	r0, [r6, #12]
 8009e40:	e7df      	b.n	8009e02 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x20>
      uint32_t floats_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8009e42:	5d2f      	ldrb	r7, [r5, r4]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8009e44:	1c63      	adds	r3, r4, #1
 8009e46:	5ceb      	ldrb	r3, [r5, r3]
 8009e48:	ea47 2703 	orr.w	r7, r7, r3, lsl #8
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8009e4c:	1ca3      	adds	r3, r4, #2
 8009e4e:	5ceb      	ldrb	r3, [r5, r3]
 8009e50:	ea47 4703 	orr.w	r7, r7, r3, lsl #16
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8009e54:	1ce3      	adds	r3, r4, #3
 8009e56:	5ceb      	ldrb	r3, [r5, r3]
 8009e58:	ea47 6703 	orr.w	r7, r7, r3, lsl #24
      offset += sizeof(this->floats_length);
 8009e5c:	3404      	adds	r4, #4
      if(floats_lengthT > floats_length)
 8009e5e:	6933      	ldr	r3, [r6, #16]
 8009e60:	429f      	cmp	r7, r3
 8009e62:	d818      	bhi.n	8009e96 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xb4>
      floats_length = floats_lengthT;
 8009e64:	6137      	str	r7, [r6, #16]
      for( uint32_t i = 0; i < floats_length; i++){
 8009e66:	2200      	movs	r2, #0
 8009e68:	6933      	ldr	r3, [r6, #16]
 8009e6a:	429a      	cmp	r2, r3
 8009e6c:	d219      	bcs.n	8009ea2 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xc0>
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8009e6e:	5d2b      	ldrb	r3, [r5, r4]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8009e70:	1c61      	adds	r1, r4, #1
 8009e72:	5c69      	ldrb	r1, [r5, r1]
 8009e74:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8009e78:	1ca1      	adds	r1, r4, #2
 8009e7a:	5c69      	ldrb	r1, [r5, r1]
 8009e7c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8009e80:	1ce1      	adds	r1, r4, #3
 8009e82:	5c69      	ldrb	r1, [r5, r1]
 8009e84:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
      this->st_floats = u_st_floats.real;
 8009e88:	6173      	str	r3, [r6, #20]
      offset += sizeof(this->st_floats);
 8009e8a:	3404      	adds	r4, #4
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
 8009e8c:	69b1      	ldr	r1, [r6, #24]
 8009e8e:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
      for( uint32_t i = 0; i < floats_length; i++){
 8009e92:	3201      	adds	r2, #1
 8009e94:	e7e8      	b.n	8009e68 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x86>
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
 8009e96:	00b9      	lsls	r1, r7, #2
 8009e98:	69b0      	ldr	r0, [r6, #24]
 8009e9a:	f001 fadf 	bl	800b45c <realloc>
 8009e9e:	61b0      	str	r0, [r6, #24]
 8009ea0:	e7e0      	b.n	8009e64 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x82>
      uint32_t strings_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8009ea2:	5d2f      	ldrb	r7, [r5, r4]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8009ea4:	1c63      	adds	r3, r4, #1
 8009ea6:	5ceb      	ldrb	r3, [r5, r3]
 8009ea8:	ea47 2703 	orr.w	r7, r7, r3, lsl #8
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8009eac:	1ca3      	adds	r3, r4, #2
 8009eae:	5ceb      	ldrb	r3, [r5, r3]
 8009eb0:	ea47 4703 	orr.w	r7, r7, r3, lsl #16
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8009eb4:	1ce3      	adds	r3, r4, #3
 8009eb6:	5ceb      	ldrb	r3, [r5, r3]
 8009eb8:	ea47 6703 	orr.w	r7, r7, r3, lsl #24
      offset += sizeof(this->strings_length);
 8009ebc:	3404      	adds	r4, #4
      if(strings_lengthT > strings_length)
 8009ebe:	69f3      	ldr	r3, [r6, #28]
 8009ec0:	429f      	cmp	r7, r3
 8009ec2:	d803      	bhi.n	8009ecc <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xea>
      strings_length = strings_lengthT;
 8009ec4:	61f7      	str	r7, [r6, #28]
      for( uint32_t i = 0; i < strings_length; i++){
 8009ec6:	f04f 0e00 	mov.w	lr, #0
 8009eca:	e01b      	b.n	8009f04 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x122>
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
 8009ecc:	00b9      	lsls	r1, r7, #2
 8009ece:	6a70      	ldr	r0, [r6, #36]	; 0x24
 8009ed0:	f001 fac4 	bl	800b45c <realloc>
 8009ed4:	6270      	str	r0, [r6, #36]	; 0x24
 8009ed6:	e7f5      	b.n	8009ec4 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xe2>
      offset += 4;
 8009ed8:	3404      	adds	r4, #4
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8009eda:	4623      	mov	r3, r4
 8009edc:	18a0      	adds	r0, r4, r2
 8009ede:	4283      	cmp	r3, r0
 8009ee0:	d204      	bcs.n	8009eec <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x10a>
          inbuffer[k-1]=inbuffer[k];
 8009ee2:	1e59      	subs	r1, r3, #1
 8009ee4:	5cef      	ldrb	r7, [r5, r3]
 8009ee6:	546f      	strb	r7, [r5, r1]
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8009ee8:	3301      	adds	r3, #1
 8009eea:	e7f7      	b.n	8009edc <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xfa>
      inbuffer[offset+length_st_strings-1]=0;
 8009eec:	1e43      	subs	r3, r0, #1
 8009eee:	2200      	movs	r2, #0
 8009ef0:	54ea      	strb	r2, [r5, r3]
      this->st_strings = (char *)(inbuffer + offset-1);
 8009ef2:	3c01      	subs	r4, #1
 8009ef4:	192b      	adds	r3, r5, r4
 8009ef6:	6233      	str	r3, [r6, #32]
      offset += length_st_strings;
 8009ef8:	4604      	mov	r4, r0
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
 8009efa:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8009efc:	f842 302e 	str.w	r3, [r2, lr, lsl #2]
      for( uint32_t i = 0; i < strings_length; i++){
 8009f00:	f10e 0e01 	add.w	lr, lr, #1
 8009f04:	69f3      	ldr	r3, [r6, #28]
 8009f06:	459e      	cmp	lr, r3
 8009f08:	d20b      	bcs.n	8009f22 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x140>
      arrToVar(length_st_strings, (inbuffer + offset));
 8009f0a:	4627      	mov	r7, r4
    var = 0;
 8009f0c:	2200      	movs	r2, #0
    for (size_t i = 0; i < sizeof(V); i++)
 8009f0e:	4613      	mov	r3, r2
 8009f10:	2b03      	cmp	r3, #3
 8009f12:	d8e1      	bhi.n	8009ed8 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xf6>
      var |= (arr[i] << (8 * i));
 8009f14:	19e9      	adds	r1, r5, r7
 8009f16:	5cc9      	ldrb	r1, [r1, r3]
 8009f18:	00d8      	lsls	r0, r3, #3
 8009f1a:	4081      	lsls	r1, r0
 8009f1c:	430a      	orrs	r2, r1
    for (size_t i = 0; i < sizeof(V); i++)
 8009f1e:	3301      	adds	r3, #1
 8009f20:	e7f6      	b.n	8009f10 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x12e>
    }
 8009f22:	4620      	mov	r0, r4
 8009f24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009f28 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE7publishEiPKNS_3MsgE>:
  }

  virtual int publish(int id, const Msg * msg)
 8009f28:	b530      	push	{r4, r5, lr}
 8009f2a:	b085      	sub	sp, #20
  {
    if (id >= 100 && !configured_)
 8009f2c:	2963      	cmp	r1, #99	; 0x63
 8009f2e:	dd03      	ble.n	8009f38 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE7publishEiPKNS_3MsgE+0x10>
 8009f30:	f890 38f4 	ldrb.w	r3, [r0, #2292]	; 0x8f4
 8009f34:	2b00      	cmp	r3, #0
 8009f36:	d067      	beq.n	800a008 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE7publishEiPKNS_3MsgE+0xe0>
 8009f38:	460d      	mov	r5, r1
 8009f3a:	4604      	mov	r4, r0
      return 0;

    /* serialize message */
    int l = msg->serialize(message_out + 7);
 8009f3c:	6813      	ldr	r3, [r2, #0]
 8009f3e:	681b      	ldr	r3, [r3, #0]
 8009f40:	f200 411f 	addw	r1, r0, #1055	; 0x41f
 8009f44:	4610      	mov	r0, r2
 8009f46:	4798      	blx	r3

    /* setup the header */
    message_out[0] = 0xff;
 8009f48:	23ff      	movs	r3, #255	; 0xff
 8009f4a:	f884 3418 	strb.w	r3, [r4, #1048]	; 0x418
    message_out[1] = PROTOCOL_VER;
 8009f4e:	23fe      	movs	r3, #254	; 0xfe
 8009f50:	f884 3419 	strb.w	r3, [r4, #1049]	; 0x419
    message_out[2] = (uint8_t)((uint16_t)l & 255);
 8009f54:	b2c3      	uxtb	r3, r0
 8009f56:	f884 341a 	strb.w	r3, [r4, #1050]	; 0x41a
    message_out[3] = (uint8_t)((uint16_t)l >> 8);
 8009f5a:	f3c0 2207 	ubfx	r2, r0, #8, #8
 8009f5e:	f884 241b 	strb.w	r2, [r4, #1051]	; 0x41b
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 8009f62:	4413      	add	r3, r2
 8009f64:	b2db      	uxtb	r3, r3
 8009f66:	43db      	mvns	r3, r3
 8009f68:	f884 341c 	strb.w	r3, [r4, #1052]	; 0x41c
    message_out[5] = (uint8_t)((int16_t)id & 255);
 8009f6c:	f884 541d 	strb.w	r5, [r4, #1053]	; 0x41d
    message_out[6] = (uint8_t)((int16_t)id >> 8);
 8009f70:	f345 2307 	sbfx	r3, r5, #8, #8
 8009f74:	f884 341e 	strb.w	r3, [r4, #1054]	; 0x41e

    /* calculate checksum */
    int chk = 0;
    for (int i = 5; i < l + 7; i++)
 8009f78:	2305      	movs	r3, #5
    int chk = 0;
 8009f7a:	2200      	movs	r2, #0
    for (int i = 5; i < l + 7; i++)
 8009f7c:	1dc1      	adds	r1, r0, #7
 8009f7e:	428b      	cmp	r3, r1
 8009f80:	da05      	bge.n	8009f8e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE7publishEiPKNS_3MsgE+0x66>
      chk += message_out[i];
 8009f82:	18e1      	adds	r1, r4, r3
 8009f84:	f891 1418 	ldrb.w	r1, [r1, #1048]	; 0x418
 8009f88:	440a      	add	r2, r1
    for (int i = 5; i < l + 7; i++)
 8009f8a:	3301      	adds	r3, #1
 8009f8c:	e7f6      	b.n	8009f7c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE7publishEiPKNS_3MsgE+0x54>
    l += 7;
    message_out[l++] = 255 - (chk % 256);
 8009f8e:	f100 0508 	add.w	r5, r0, #8
 8009f92:	4253      	negs	r3, r2
 8009f94:	b2d2      	uxtb	r2, r2
 8009f96:	b2db      	uxtb	r3, r3
 8009f98:	bf58      	it	pl
 8009f9a:	425a      	negpl	r2, r3
 8009f9c:	43d2      	mvns	r2, r2
 8009f9e:	4421      	add	r1, r4
 8009fa0:	f881 2418 	strb.w	r2, [r1, #1048]	; 0x418

    if (l <= OUTPUT_SIZE)
 8009fa4:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 8009fa8:	dc1e      	bgt.n	8009fe8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE7publishEiPKNS_3MsgE+0xc0>
    {
      hardware_.write(message_out, l);
 8009faa:	f504 6183 	add.w	r1, r4, #1048	; 0x418
		com->write(data, length);
 8009fae:	6860      	ldr	r0, [r4, #4]
		if (length > BUF_SIZE || length < 1)
 8009fb0:	1e6b      	subs	r3, r5, #1
 8009fb2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009fb6:	d228      	bcs.n	800a00a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE7publishEiPKNS_3MsgE+0xe2>
		while(!tx_cplt)
 8009fb8:	f890 3800 	ldrb.w	r3, [r0, #2048]	; 0x800
 8009fbc:	2b00      	cmp	r3, #0
 8009fbe:	d0fb      	beq.n	8009fb8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE7publishEiPKNS_3MsgE+0x90>
 8009fc0:	2300      	movs	r3, #0
		for (int i = 0; i < length; i++)
 8009fc2:	429d      	cmp	r5, r3
 8009fc4:	dd03      	ble.n	8009fce <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE7publishEiPKNS_3MsgE+0xa6>
			tx_buf[i] = c[i];
 8009fc6:	5cca      	ldrb	r2, [r1, r3]
 8009fc8:	54c2      	strb	r2, [r0, r3]
		for (int i = 0; i < length; i++)
 8009fca:	3301      	adds	r3, #1
 8009fcc:	e7f9      	b.n	8009fc2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE7publishEiPKNS_3MsgE+0x9a>
		if(tx_cplt)
 8009fce:	f890 3800 	ldrb.w	r3, [r0, #2048]	; 0x800
 8009fd2:	b1d3      	cbz	r3, 800a00a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE7publishEiPKNS_3MsgE+0xe2>
			tx_cplt = false;
 8009fd4:	2300      	movs	r3, #0
 8009fd6:	f880 3800 	strb.w	r3, [r0, #2048]	; 0x800
			HAL_UART_Transmit_DMA(&huart, tx_buf, length);
 8009fda:	b2aa      	uxth	r2, r5
 8009fdc:	4601      	mov	r1, r0
 8009fde:	f8d0 0808 	ldr.w	r0, [r0, #2056]	; 0x808
 8009fe2:	f7fd fa74 	bl	80074ce <HAL_UART_Transmit_DMA>
 8009fe6:	e010      	b.n	800a00a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE7publishEiPKNS_3MsgE+0xe2>
      msg("")
 8009fe8:	4b09      	ldr	r3, [pc, #36]	; (800a010 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE7publishEiPKNS_3MsgE+0xe8>)
 8009fea:	9301      	str	r3, [sp, #4]

private:
  void log(char byte, const char * msg)
  {
    rosserial_msgs::Log l;
    l.level = byte;
 8009fec:	2303      	movs	r3, #3
 8009fee:	f88d 3008 	strb.w	r3, [sp, #8]
    l.msg = (char*)msg;
 8009ff2:	4b08      	ldr	r3, [pc, #32]	; (800a014 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE7publishEiPKNS_3MsgE+0xec>)
 8009ff4:	9303      	str	r3, [sp, #12]
    publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
 8009ff6:	6823      	ldr	r3, [r4, #0]
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	aa01      	add	r2, sp, #4
 8009ffc:	2107      	movs	r1, #7
 8009ffe:	4620      	mov	r0, r4
 800a000:	4798      	blx	r3
      return -1;
 800a002:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800a006:	e000      	b.n	800a00a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE7publishEiPKNS_3MsgE+0xe2>
      return 0;
 800a008:	2500      	movs	r5, #0
  }
 800a00a:	4628      	mov	r0, r5
 800a00c:	b005      	add	sp, #20
 800a00e:	bd30      	pop	{r4, r5, pc}
 800a010:	0800c010 	.word	0x0800c010
 800a014:	0800c1c0 	.word	0x0800c1c0

0800a018 <_ZN8std_msgs16MultiArrayLayout11deserializeEPh>:
    virtual int deserialize(unsigned char *inbuffer)
 800a018:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a01c:	4605      	mov	r5, r0
 800a01e:	460e      	mov	r6, r1
      uint32_t dim_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 800a020:	780c      	ldrb	r4, [r1, #0]
      dim_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 800a022:	784b      	ldrb	r3, [r1, #1]
 800a024:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
      dim_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 800a028:	788b      	ldrb	r3, [r1, #2]
 800a02a:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
      dim_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 800a02e:	78cb      	ldrb	r3, [r1, #3]
 800a030:	ea44 6403 	orr.w	r4, r4, r3, lsl #24
      if(dim_lengthT > dim_length)
 800a034:	6843      	ldr	r3, [r0, #4]
 800a036:	429c      	cmp	r4, r3
 800a038:	d804      	bhi.n	800a044 <_ZN8std_msgs16MultiArrayLayout11deserializeEPh+0x2c>
      dim_length = dim_lengthT;
 800a03a:	606c      	str	r4, [r5, #4]
      for( uint32_t i = 0; i < dim_length; i++){
 800a03c:	f04f 0c00 	mov.w	ip, #0
      offset += sizeof(this->dim_length);
 800a040:	2004      	movs	r0, #4
 800a042:	e059      	b.n	800a0f8 <_ZN8std_msgs16MultiArrayLayout11deserializeEPh+0xe0>
        this->dim = (std_msgs::MultiArrayDimension*)realloc(this->dim, dim_lengthT * sizeof(std_msgs::MultiArrayDimension));
 800a044:	0121      	lsls	r1, r4, #4
 800a046:	6980      	ldr	r0, [r0, #24]
 800a048:	f001 fa08 	bl	800b45c <realloc>
 800a04c:	61a8      	str	r0, [r5, #24]
 800a04e:	e7f4      	b.n	800a03a <_ZN8std_msgs16MultiArrayLayout11deserializeEPh+0x22>
 800a050:	2304      	movs	r3, #4
      for(unsigned int k= offset; k< offset+length_label; ++k){
 800a052:	1d0c      	adds	r4, r1, #4
 800a054:	429c      	cmp	r4, r3
 800a056:	d904      	bls.n	800a062 <_ZN8std_msgs16MultiArrayLayout11deserializeEPh+0x4a>
          inbuffer[k-1]=inbuffer[k];
 800a058:	1e5c      	subs	r4, r3, #1
 800a05a:	5cd7      	ldrb	r7, [r2, r3]
 800a05c:	5517      	strb	r7, [r2, r4]
      for(unsigned int k= offset; k< offset+length_label; ++k){
 800a05e:	3301      	adds	r3, #1
 800a060:	e7f7      	b.n	800a052 <_ZN8std_msgs16MultiArrayLayout11deserializeEPh+0x3a>
      inbuffer[offset+length_label-1]=0;
 800a062:	1ccb      	adds	r3, r1, #3
 800a064:	2700      	movs	r7, #0
 800a066:	54d7      	strb	r7, [r2, r3]
      this->label = (char *)(inbuffer + offset-1);
 800a068:	1cd3      	adds	r3, r2, #3
 800a06a:	f8ce 3004 	str.w	r3, [lr, #4]
      this->size =  ((uint32_t) (*(inbuffer + offset)));
 800a06e:	5d13      	ldrb	r3, [r2, r4]
 800a070:	f8ce 3008 	str.w	r3, [lr, #8]
      this->size |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800a074:	1d4c      	adds	r4, r1, #5
 800a076:	5d14      	ldrb	r4, [r2, r4]
 800a078:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
 800a07c:	f8ce 3008 	str.w	r3, [lr, #8]
      this->size |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800a080:	1d8c      	adds	r4, r1, #6
 800a082:	5d14      	ldrb	r4, [r2, r4]
 800a084:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800a088:	f8ce 3008 	str.w	r3, [lr, #8]
      this->size |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800a08c:	1dcc      	adds	r4, r1, #7
 800a08e:	5d14      	ldrb	r4, [r2, r4]
 800a090:	ea43 6304 	orr.w	r3, r3, r4, lsl #24
 800a094:	f8ce 3008 	str.w	r3, [lr, #8]
      offset += sizeof(this->size);
 800a098:	f101 0308 	add.w	r3, r1, #8
      this->stride =  ((uint32_t) (*(inbuffer + offset)));
 800a09c:	5cd3      	ldrb	r3, [r2, r3]
 800a09e:	f8ce 300c 	str.w	r3, [lr, #12]
      this->stride |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800a0a2:	f101 0409 	add.w	r4, r1, #9
 800a0a6:	5d14      	ldrb	r4, [r2, r4]
 800a0a8:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
 800a0ac:	f8ce 300c 	str.w	r3, [lr, #12]
      this->stride |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800a0b0:	f101 040a 	add.w	r4, r1, #10
 800a0b4:	5d14      	ldrb	r4, [r2, r4]
 800a0b6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800a0ba:	f8ce 300c 	str.w	r3, [lr, #12]
      this->stride |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800a0be:	f101 040b 	add.w	r4, r1, #11
 800a0c2:	5d12      	ldrb	r2, [r2, r4]
 800a0c4:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800a0c8:	f8ce 300c 	str.w	r3, [lr, #12]
      offset += sizeof(this->stride);
 800a0cc:	310c      	adds	r1, #12
      offset += this->st_dim.deserialize(inbuffer + offset);
 800a0ce:	4408      	add	r0, r1
        memcpy( &(this->dim[i]), &(this->st_dim), sizeof(std_msgs::MultiArrayDimension));
 800a0d0:	69a9      	ldr	r1, [r5, #24]
 800a0d2:	ea4f 120c 	mov.w	r2, ip, lsl #4
 800a0d6:	188b      	adds	r3, r1, r2
 800a0d8:	f8de 9000 	ldr.w	r9, [lr]
 800a0dc:	f8de 8004 	ldr.w	r8, [lr, #4]
 800a0e0:	f8de 7008 	ldr.w	r7, [lr, #8]
 800a0e4:	f8de 400c 	ldr.w	r4, [lr, #12]
 800a0e8:	f841 9002 	str.w	r9, [r1, r2]
 800a0ec:	f8c3 8004 	str.w	r8, [r3, #4]
 800a0f0:	609f      	str	r7, [r3, #8]
 800a0f2:	60dc      	str	r4, [r3, #12]
      for( uint32_t i = 0; i < dim_length; i++){
 800a0f4:	f10c 0c01 	add.w	ip, ip, #1
 800a0f8:	686b      	ldr	r3, [r5, #4]
 800a0fa:	459c      	cmp	ip, r3
 800a0fc:	d20c      	bcs.n	800a118 <_ZN8std_msgs16MultiArrayLayout11deserializeEPh+0x100>
      offset += this->st_dim.deserialize(inbuffer + offset);
 800a0fe:	f105 0e08 	add.w	lr, r5, #8
 800a102:	1832      	adds	r2, r6, r0
    var = 0;
 800a104:	2100      	movs	r1, #0
    for (size_t i = 0; i < sizeof(V); i++)
 800a106:	460b      	mov	r3, r1
 800a108:	2b03      	cmp	r3, #3
 800a10a:	d8a1      	bhi.n	800a050 <_ZN8std_msgs16MultiArrayLayout11deserializeEPh+0x38>
      var |= (arr[i] << (8 * i));
 800a10c:	5cd4      	ldrb	r4, [r2, r3]
 800a10e:	00df      	lsls	r7, r3, #3
 800a110:	40bc      	lsls	r4, r7
 800a112:	4321      	orrs	r1, r4
    for (size_t i = 0; i < sizeof(V); i++)
 800a114:	3301      	adds	r3, #1
 800a116:	e7f7      	b.n	800a108 <_ZN8std_msgs16MultiArrayLayout11deserializeEPh+0xf0>
      this->data_offset =  ((uint32_t) (*(inbuffer + offset)));
 800a118:	5c33      	ldrb	r3, [r6, r0]
 800a11a:	61eb      	str	r3, [r5, #28]
      this->data_offset |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800a11c:	1c42      	adds	r2, r0, #1
 800a11e:	5cb2      	ldrb	r2, [r6, r2]
 800a120:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800a124:	61eb      	str	r3, [r5, #28]
      this->data_offset |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800a126:	1c82      	adds	r2, r0, #2
 800a128:	5cb2      	ldrb	r2, [r6, r2]
 800a12a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a12e:	61eb      	str	r3, [r5, #28]
      this->data_offset |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800a130:	1cc2      	adds	r2, r0, #3
 800a132:	5cb2      	ldrb	r2, [r6, r2]
 800a134:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800a138:	61eb      	str	r3, [r5, #28]
    }
 800a13a:	3004      	adds	r0, #4
 800a13c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800a140 <_ZNK8std_msgs17Float32MultiArray9serializeEPh>:
    virtual int serialize(unsigned char *outbuffer) const
 800a140:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a144:	4606      	mov	r6, r0
 800a146:	460c      	mov	r4, r1
      offset += this->layout.serialize(outbuffer + offset);
 800a148:	f100 0804 	add.w	r8, r0, #4
      *(outbuffer + offset + 0) = (this->dim_length >> (8 * 0)) & 0xFF;
 800a14c:	f898 3004 	ldrb.w	r3, [r8, #4]
 800a150:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (this->dim_length >> (8 * 1)) & 0xFF;
 800a152:	f898 3005 	ldrb.w	r3, [r8, #5]
 800a156:	704b      	strb	r3, [r1, #1]
      *(outbuffer + offset + 2) = (this->dim_length >> (8 * 2)) & 0xFF;
 800a158:	f898 3006 	ldrb.w	r3, [r8, #6]
 800a15c:	708b      	strb	r3, [r1, #2]
      *(outbuffer + offset + 3) = (this->dim_length >> (8 * 3)) & 0xFF;
 800a15e:	f898 3007 	ldrb.w	r3, [r8, #7]
 800a162:	70cb      	strb	r3, [r1, #3]
      for( uint32_t i = 0; i < dim_length; i++){
 800a164:	2500      	movs	r5, #0
      offset += sizeof(this->dim_length);
 800a166:	2704      	movs	r7, #4
      for( uint32_t i = 0; i < dim_length; i++){
 800a168:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800a16c:	42ab      	cmp	r3, r5
 800a16e:	d90a      	bls.n	800a186 <_ZNK8std_msgs17Float32MultiArray9serializeEPh+0x46>
      offset += this->dim[i].serialize(outbuffer + offset);
 800a170:	f8d8 0018 	ldr.w	r0, [r8, #24]
 800a174:	012b      	lsls	r3, r5, #4
 800a176:	58c2      	ldr	r2, [r0, r3]
 800a178:	6812      	ldr	r2, [r2, #0]
 800a17a:	19e1      	adds	r1, r4, r7
 800a17c:	4418      	add	r0, r3
 800a17e:	4790      	blx	r2
 800a180:	4407      	add	r7, r0
      for( uint32_t i = 0; i < dim_length; i++){
 800a182:	3501      	adds	r5, #1
 800a184:	e7f0      	b.n	800a168 <_ZNK8std_msgs17Float32MultiArray9serializeEPh+0x28>
      *(outbuffer + offset + 0) = (this->data_offset >> (8 * 0)) & 0xFF;
 800a186:	f898 301c 	ldrb.w	r3, [r8, #28]
 800a18a:	55e3      	strb	r3, [r4, r7]
      *(outbuffer + offset + 1) = (this->data_offset >> (8 * 1)) & 0xFF;
 800a18c:	1c7b      	adds	r3, r7, #1
 800a18e:	f898 201d 	ldrb.w	r2, [r8, #29]
 800a192:	54e2      	strb	r2, [r4, r3]
      *(outbuffer + offset + 2) = (this->data_offset >> (8 * 2)) & 0xFF;
 800a194:	1cbb      	adds	r3, r7, #2
 800a196:	f898 201e 	ldrb.w	r2, [r8, #30]
 800a19a:	54e2      	strb	r2, [r4, r3]
      *(outbuffer + offset + 3) = (this->data_offset >> (8 * 3)) & 0xFF;
 800a19c:	1cfb      	adds	r3, r7, #3
 800a19e:	f898 201f 	ldrb.w	r2, [r8, #31]
 800a1a2:	54e2      	strb	r2, [r4, r3]
      offset += sizeof(this->data_offset);
 800a1a4:	1d38      	adds	r0, r7, #4
      *(outbuffer + offset + 0) = (this->data_length >> (8 * 0)) & 0xFF;
 800a1a6:	f896 3024 	ldrb.w	r3, [r6, #36]	; 0x24
 800a1aa:	5423      	strb	r3, [r4, r0]
      *(outbuffer + offset + 1) = (this->data_length >> (8 * 1)) & 0xFF;
 800a1ac:	1d7b      	adds	r3, r7, #5
 800a1ae:	f896 2025 	ldrb.w	r2, [r6, #37]	; 0x25
 800a1b2:	54e2      	strb	r2, [r4, r3]
      *(outbuffer + offset + 2) = (this->data_length >> (8 * 2)) & 0xFF;
 800a1b4:	1dbb      	adds	r3, r7, #6
 800a1b6:	f896 2026 	ldrb.w	r2, [r6, #38]	; 0x26
 800a1ba:	54e2      	strb	r2, [r4, r3]
      *(outbuffer + offset + 3) = (this->data_length >> (8 * 3)) & 0xFF;
 800a1bc:	3707      	adds	r7, #7
 800a1be:	f896 3027 	ldrb.w	r3, [r6, #39]	; 0x27
 800a1c2:	55e3      	strb	r3, [r4, r7]
      offset += sizeof(this->data_length);
 800a1c4:	3004      	adds	r0, #4
      for( uint32_t i = 0; i < data_length; i++){
 800a1c6:	2200      	movs	r2, #0
 800a1c8:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800a1ca:	429a      	cmp	r2, r3
 800a1cc:	d211      	bcs.n	800a1f2 <_ZNK8std_msgs17Float32MultiArray9serializeEPh+0xb2>
      u_datai.real = this->data[i];
 800a1ce:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 800a1d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
      *(outbuffer + offset + 0) = (u_datai.base >> (8 * 0)) & 0xFF;
 800a1d4:	5423      	strb	r3, [r4, r0]
      *(outbuffer + offset + 1) = (u_datai.base >> (8 * 1)) & 0xFF;
 800a1d6:	1c41      	adds	r1, r0, #1
 800a1d8:	f3c3 2507 	ubfx	r5, r3, #8, #8
 800a1dc:	5465      	strb	r5, [r4, r1]
      *(outbuffer + offset + 2) = (u_datai.base >> (8 * 2)) & 0xFF;
 800a1de:	1c81      	adds	r1, r0, #2
 800a1e0:	f3c3 4507 	ubfx	r5, r3, #16, #8
 800a1e4:	5465      	strb	r5, [r4, r1]
      *(outbuffer + offset + 3) = (u_datai.base >> (8 * 3)) & 0xFF;
 800a1e6:	1cc1      	adds	r1, r0, #3
 800a1e8:	0e1b      	lsrs	r3, r3, #24
 800a1ea:	5463      	strb	r3, [r4, r1]
      offset += sizeof(this->data[i]);
 800a1ec:	3004      	adds	r0, #4
      for( uint32_t i = 0; i < data_length; i++){
 800a1ee:	3201      	adds	r2, #1
 800a1f0:	e7ea      	b.n	800a1c8 <_ZNK8std_msgs17Float32MultiArray9serializeEPh+0x88>
    }
 800a1f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800a1f6 <_ZN3ros10SubscriberIN8std_msgs17Float32MultiArrayEvE8callbackEPh>:
  virtual void callback(unsigned char* data)
 800a1f6:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a1fa:	4607      	mov	r7, r0
 800a1fc:	460c      	mov	r4, r1
    msg.deserialize(data);
 800a1fe:	f100 060c 	add.w	r6, r0, #12
      offset += this->layout.deserialize(inbuffer + offset);
 800a202:	f100 0510 	add.w	r5, r0, #16
      uint32_t dim_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 800a206:	f891 8000 	ldrb.w	r8, [r1]
      dim_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 800a20a:	784b      	ldrb	r3, [r1, #1]
 800a20c:	ea48 2803 	orr.w	r8, r8, r3, lsl #8
      dim_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 800a210:	788b      	ldrb	r3, [r1, #2]
 800a212:	ea48 4803 	orr.w	r8, r8, r3, lsl #16
      dim_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 800a216:	78cb      	ldrb	r3, [r1, #3]
 800a218:	ea48 6803 	orr.w	r8, r8, r3, lsl #24
      if(dim_lengthT > dim_length)
 800a21c:	686b      	ldr	r3, [r5, #4]
 800a21e:	4598      	cmp	r8, r3
 800a220:	d806      	bhi.n	800a230 <_ZN3ros10SubscriberIN8std_msgs17Float32MultiArrayEvE8callbackEPh+0x3a>
      dim_length = dim_lengthT;
 800a222:	f8c5 8004 	str.w	r8, [r5, #4]
      for( uint32_t i = 0; i < dim_length; i++){
 800a226:	f04f 0c00 	mov.w	ip, #0
      offset += sizeof(this->dim_length);
 800a22a:	f04f 0804 	mov.w	r8, #4
 800a22e:	e05f      	b.n	800a2f0 <_ZN3ros10SubscriberIN8std_msgs17Float32MultiArrayEvE8callbackEPh+0xfa>
        this->dim = (std_msgs::MultiArrayDimension*)realloc(this->dim, dim_lengthT * sizeof(std_msgs::MultiArrayDimension));
 800a230:	ea4f 1108 	mov.w	r1, r8, lsl #4
 800a234:	69a8      	ldr	r0, [r5, #24]
 800a236:	f001 f911 	bl	800b45c <realloc>
 800a23a:	61a8      	str	r0, [r5, #24]
 800a23c:	e7f1      	b.n	800a222 <_ZN3ros10SubscriberIN8std_msgs17Float32MultiArrayEvE8callbackEPh+0x2c>
 800a23e:	2304      	movs	r3, #4
      for(unsigned int k= offset; k< offset+length_label; ++k){
 800a240:	1d08      	adds	r0, r1, #4
 800a242:	4298      	cmp	r0, r3
 800a244:	d906      	bls.n	800a254 <_ZN3ros10SubscriberIN8std_msgs17Float32MultiArrayEvE8callbackEPh+0x5e>
          inbuffer[k-1]=inbuffer[k];
 800a246:	1e58      	subs	r0, r3, #1
 800a248:	f812 9003 	ldrb.w	r9, [r2, r3]
 800a24c:	f802 9000 	strb.w	r9, [r2, r0]
      for(unsigned int k= offset; k< offset+length_label; ++k){
 800a250:	3301      	adds	r3, #1
 800a252:	e7f5      	b.n	800a240 <_ZN3ros10SubscriberIN8std_msgs17Float32MultiArrayEvE8callbackEPh+0x4a>
      inbuffer[offset+length_label-1]=0;
 800a254:	1ccb      	adds	r3, r1, #3
 800a256:	f04f 0900 	mov.w	r9, #0
 800a25a:	f802 9003 	strb.w	r9, [r2, r3]
      this->label = (char *)(inbuffer + offset-1);
 800a25e:	1cd3      	adds	r3, r2, #3
 800a260:	f8ce 3004 	str.w	r3, [lr, #4]
      this->size =  ((uint32_t) (*(inbuffer + offset)));
 800a264:	5c13      	ldrb	r3, [r2, r0]
 800a266:	f8ce 3008 	str.w	r3, [lr, #8]
      this->size |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800a26a:	1d48      	adds	r0, r1, #5
 800a26c:	5c10      	ldrb	r0, [r2, r0]
 800a26e:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 800a272:	f8ce 3008 	str.w	r3, [lr, #8]
      this->size |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800a276:	1d88      	adds	r0, r1, #6
 800a278:	5c10      	ldrb	r0, [r2, r0]
 800a27a:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800a27e:	f8ce 3008 	str.w	r3, [lr, #8]
      this->size |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800a282:	1dc8      	adds	r0, r1, #7
 800a284:	5c10      	ldrb	r0, [r2, r0]
 800a286:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 800a28a:	f8ce 3008 	str.w	r3, [lr, #8]
      offset += sizeof(this->size);
 800a28e:	f101 0308 	add.w	r3, r1, #8
      this->stride =  ((uint32_t) (*(inbuffer + offset)));
 800a292:	5cd3      	ldrb	r3, [r2, r3]
 800a294:	f8ce 300c 	str.w	r3, [lr, #12]
      this->stride |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800a298:	f101 0009 	add.w	r0, r1, #9
 800a29c:	5c10      	ldrb	r0, [r2, r0]
 800a29e:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 800a2a2:	f8ce 300c 	str.w	r3, [lr, #12]
      this->stride |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800a2a6:	f101 000a 	add.w	r0, r1, #10
 800a2aa:	5c10      	ldrb	r0, [r2, r0]
 800a2ac:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800a2b0:	f8ce 300c 	str.w	r3, [lr, #12]
      this->stride |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800a2b4:	f101 000b 	add.w	r0, r1, #11
 800a2b8:	5c12      	ldrb	r2, [r2, r0]
 800a2ba:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800a2be:	f8ce 300c 	str.w	r3, [lr, #12]
      offset += sizeof(this->stride);
 800a2c2:	310c      	adds	r1, #12
      offset += this->st_dim.deserialize(inbuffer + offset);
 800a2c4:	4488      	add	r8, r1
        memcpy( &(this->dim[i]), &(this->st_dim), sizeof(std_msgs::MultiArrayDimension));
 800a2c6:	69a9      	ldr	r1, [r5, #24]
 800a2c8:	ea4f 120c 	mov.w	r2, ip, lsl #4
 800a2cc:	188b      	adds	r3, r1, r2
 800a2ce:	f8de b000 	ldr.w	fp, [lr]
 800a2d2:	f8de a004 	ldr.w	sl, [lr, #4]
 800a2d6:	f8de 9008 	ldr.w	r9, [lr, #8]
 800a2da:	f8de 000c 	ldr.w	r0, [lr, #12]
 800a2de:	f841 b002 	str.w	fp, [r1, r2]
 800a2e2:	f8c3 a004 	str.w	sl, [r3, #4]
 800a2e6:	f8c3 9008 	str.w	r9, [r3, #8]
 800a2ea:	60d8      	str	r0, [r3, #12]
      for( uint32_t i = 0; i < dim_length; i++){
 800a2ec:	f10c 0c01 	add.w	ip, ip, #1
 800a2f0:	686b      	ldr	r3, [r5, #4]
 800a2f2:	4563      	cmp	r3, ip
 800a2f4:	d90f      	bls.n	800a316 <_ZN3ros10SubscriberIN8std_msgs17Float32MultiArrayEvE8callbackEPh+0x120>
      offset += this->st_dim.deserialize(inbuffer + offset);
 800a2f6:	f105 0e08 	add.w	lr, r5, #8
 800a2fa:	eb04 0208 	add.w	r2, r4, r8
    var = 0;
 800a2fe:	2100      	movs	r1, #0
    for (size_t i = 0; i < sizeof(V); i++)
 800a300:	460b      	mov	r3, r1
 800a302:	2b03      	cmp	r3, #3
 800a304:	d89b      	bhi.n	800a23e <_ZN3ros10SubscriberIN8std_msgs17Float32MultiArrayEvE8callbackEPh+0x48>
      var |= (arr[i] << (8 * i));
 800a306:	5cd0      	ldrb	r0, [r2, r3]
 800a308:	ea4f 09c3 	mov.w	r9, r3, lsl #3
 800a30c:	fa00 f009 	lsl.w	r0, r0, r9
 800a310:	4301      	orrs	r1, r0
    for (size_t i = 0; i < sizeof(V); i++)
 800a312:	3301      	adds	r3, #1
 800a314:	e7f5      	b.n	800a302 <_ZN3ros10SubscriberIN8std_msgs17Float32MultiArrayEvE8callbackEPh+0x10c>
      this->data_offset =  ((uint32_t) (*(inbuffer + offset)));
 800a316:	f814 3008 	ldrb.w	r3, [r4, r8]
 800a31a:	61eb      	str	r3, [r5, #28]
      this->data_offset |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800a31c:	f108 0201 	add.w	r2, r8, #1
 800a320:	5ca2      	ldrb	r2, [r4, r2]
 800a322:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800a326:	61eb      	str	r3, [r5, #28]
      this->data_offset |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800a328:	f108 0202 	add.w	r2, r8, #2
 800a32c:	5ca2      	ldrb	r2, [r4, r2]
 800a32e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a332:	61eb      	str	r3, [r5, #28]
      this->data_offset |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800a334:	f108 0203 	add.w	r2, r8, #3
 800a338:	5ca2      	ldrb	r2, [r4, r2]
 800a33a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800a33e:	61eb      	str	r3, [r5, #28]
      offset += sizeof(this->data_offset);
 800a340:	f108 0504 	add.w	r5, r8, #4
      uint32_t data_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 800a344:	5d63      	ldrb	r3, [r4, r5]
      data_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 800a346:	f108 0205 	add.w	r2, r8, #5
 800a34a:	5ca2      	ldrb	r2, [r4, r2]
 800a34c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
      data_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 800a350:	f108 0206 	add.w	r2, r8, #6
 800a354:	5ca2      	ldrb	r2, [r4, r2]
 800a356:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
      data_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 800a35a:	f108 0807 	add.w	r8, r8, #7
 800a35e:	f814 8008 	ldrb.w	r8, [r4, r8]
 800a362:	ea43 6808 	orr.w	r8, r3, r8, lsl #24
      offset += sizeof(this->data_length);
 800a366:	3504      	adds	r5, #4
      if(data_lengthT > data_length)
 800a368:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800a36a:	4598      	cmp	r8, r3
 800a36c:	d819      	bhi.n	800a3a2 <_ZN3ros10SubscriberIN8std_msgs17Float32MultiArrayEvE8callbackEPh+0x1ac>
      data_length = data_lengthT;
 800a36e:	f8c6 8024 	str.w	r8, [r6, #36]	; 0x24
      for( uint32_t i = 0; i < data_length; i++){
 800a372:	2200      	movs	r2, #0
 800a374:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800a376:	4293      	cmp	r3, r2
 800a378:	d91a      	bls.n	800a3b0 <_ZN3ros10SubscriberIN8std_msgs17Float32MultiArrayEvE8callbackEPh+0x1ba>
      u_st_data.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800a37a:	5d63      	ldrb	r3, [r4, r5]
      u_st_data.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800a37c:	1c69      	adds	r1, r5, #1
 800a37e:	5c61      	ldrb	r1, [r4, r1]
 800a380:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
      u_st_data.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800a384:	1ca9      	adds	r1, r5, #2
 800a386:	5c61      	ldrb	r1, [r4, r1]
 800a388:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
      u_st_data.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800a38c:	1ce9      	adds	r1, r5, #3
 800a38e:	5c61      	ldrb	r1, [r4, r1]
 800a390:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
      this->st_data = u_st_data.real;
 800a394:	62b3      	str	r3, [r6, #40]	; 0x28
      offset += sizeof(this->st_data);
 800a396:	3504      	adds	r5, #4
        memcpy( &(this->data[i]), &(this->st_data), sizeof(float));
 800a398:	6af1      	ldr	r1, [r6, #44]	; 0x2c
 800a39a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
      for( uint32_t i = 0; i < data_length; i++){
 800a39e:	3201      	adds	r2, #1
 800a3a0:	e7e8      	b.n	800a374 <_ZN3ros10SubscriberIN8std_msgs17Float32MultiArrayEvE8callbackEPh+0x17e>
        this->data = (float*)realloc(this->data, data_lengthT * sizeof(float));
 800a3a2:	ea4f 0188 	mov.w	r1, r8, lsl #2
 800a3a6:	6af0      	ldr	r0, [r6, #44]	; 0x2c
 800a3a8:	f001 f858 	bl	800b45c <realloc>
 800a3ac:	62f0      	str	r0, [r6, #44]	; 0x2c
 800a3ae:	e7de      	b.n	800a36e <_ZN3ros10SubscriberIN8std_msgs17Float32MultiArrayEvE8callbackEPh+0x178>
    this->cb_(msg);
 800a3b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a3b2:	4630      	mov	r0, r6
 800a3b4:	4798      	blx	r3
 800a3b6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a3ba <_ZN8std_msgs17Float32MultiArray11deserializeEPh>:
    virtual int deserialize(unsigned char *inbuffer)
 800a3ba:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a3be:	4606      	mov	r6, r0
 800a3c0:	460c      	mov	r4, r1
      offset += this->layout.deserialize(inbuffer + offset);
 800a3c2:	1d05      	adds	r5, r0, #4
      uint32_t dim_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 800a3c4:	780f      	ldrb	r7, [r1, #0]
      dim_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 800a3c6:	784b      	ldrb	r3, [r1, #1]
 800a3c8:	ea47 2703 	orr.w	r7, r7, r3, lsl #8
      dim_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 800a3cc:	788b      	ldrb	r3, [r1, #2]
 800a3ce:	ea47 4703 	orr.w	r7, r7, r3, lsl #16
      dim_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 800a3d2:	78cb      	ldrb	r3, [r1, #3]
 800a3d4:	ea47 6703 	orr.w	r7, r7, r3, lsl #24
      if(dim_lengthT > dim_length)
 800a3d8:	686b      	ldr	r3, [r5, #4]
 800a3da:	429f      	cmp	r7, r3
 800a3dc:	d805      	bhi.n	800a3ea <_ZN8std_msgs17Float32MultiArray11deserializeEPh+0x30>
      dim_length = dim_lengthT;
 800a3de:	606f      	str	r7, [r5, #4]
      for( uint32_t i = 0; i < dim_length; i++){
 800a3e0:	f04f 0c00 	mov.w	ip, #0
      offset += sizeof(this->dim_length);
 800a3e4:	f04f 0804 	mov.w	r8, #4
 800a3e8:	e059      	b.n	800a49e <_ZN8std_msgs17Float32MultiArray11deserializeEPh+0xe4>
        this->dim = (std_msgs::MultiArrayDimension*)realloc(this->dim, dim_lengthT * sizeof(std_msgs::MultiArrayDimension));
 800a3ea:	0139      	lsls	r1, r7, #4
 800a3ec:	69a8      	ldr	r0, [r5, #24]
 800a3ee:	f001 f835 	bl	800b45c <realloc>
 800a3f2:	61a8      	str	r0, [r5, #24]
 800a3f4:	e7f3      	b.n	800a3de <_ZN8std_msgs17Float32MultiArray11deserializeEPh+0x24>
 800a3f6:	2304      	movs	r3, #4
      for(unsigned int k= offset; k< offset+length_label; ++k){
 800a3f8:	1d08      	adds	r0, r1, #4
 800a3fa:	4298      	cmp	r0, r3
 800a3fc:	d904      	bls.n	800a408 <_ZN8std_msgs17Float32MultiArray11deserializeEPh+0x4e>
          inbuffer[k-1]=inbuffer[k];
 800a3fe:	1e58      	subs	r0, r3, #1
 800a400:	5cd7      	ldrb	r7, [r2, r3]
 800a402:	5417      	strb	r7, [r2, r0]
      for(unsigned int k= offset; k< offset+length_label; ++k){
 800a404:	3301      	adds	r3, #1
 800a406:	e7f7      	b.n	800a3f8 <_ZN8std_msgs17Float32MultiArray11deserializeEPh+0x3e>
      inbuffer[offset+length_label-1]=0;
 800a408:	1ccb      	adds	r3, r1, #3
 800a40a:	2700      	movs	r7, #0
 800a40c:	54d7      	strb	r7, [r2, r3]
      this->label = (char *)(inbuffer + offset-1);
 800a40e:	1cd3      	adds	r3, r2, #3
 800a410:	f8ce 3004 	str.w	r3, [lr, #4]
      this->size =  ((uint32_t) (*(inbuffer + offset)));
 800a414:	5c13      	ldrb	r3, [r2, r0]
 800a416:	f8ce 3008 	str.w	r3, [lr, #8]
      this->size |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800a41a:	1d48      	adds	r0, r1, #5
 800a41c:	5c10      	ldrb	r0, [r2, r0]
 800a41e:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 800a422:	f8ce 3008 	str.w	r3, [lr, #8]
      this->size |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800a426:	1d88      	adds	r0, r1, #6
 800a428:	5c10      	ldrb	r0, [r2, r0]
 800a42a:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800a42e:	f8ce 3008 	str.w	r3, [lr, #8]
      this->size |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800a432:	1dc8      	adds	r0, r1, #7
 800a434:	5c10      	ldrb	r0, [r2, r0]
 800a436:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 800a43a:	f8ce 3008 	str.w	r3, [lr, #8]
      offset += sizeof(this->size);
 800a43e:	f101 0308 	add.w	r3, r1, #8
      this->stride =  ((uint32_t) (*(inbuffer + offset)));
 800a442:	5cd3      	ldrb	r3, [r2, r3]
 800a444:	f8ce 300c 	str.w	r3, [lr, #12]
      this->stride |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800a448:	f101 0009 	add.w	r0, r1, #9
 800a44c:	5c10      	ldrb	r0, [r2, r0]
 800a44e:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 800a452:	f8ce 300c 	str.w	r3, [lr, #12]
      this->stride |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800a456:	f101 000a 	add.w	r0, r1, #10
 800a45a:	5c10      	ldrb	r0, [r2, r0]
 800a45c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800a460:	f8ce 300c 	str.w	r3, [lr, #12]
      this->stride |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800a464:	f101 000b 	add.w	r0, r1, #11
 800a468:	5c12      	ldrb	r2, [r2, r0]
 800a46a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800a46e:	f8ce 300c 	str.w	r3, [lr, #12]
      offset += sizeof(this->stride);
 800a472:	310c      	adds	r1, #12
      offset += this->st_dim.deserialize(inbuffer + offset);
 800a474:	4488      	add	r8, r1
        memcpy( &(this->dim[i]), &(this->st_dim), sizeof(std_msgs::MultiArrayDimension));
 800a476:	69a9      	ldr	r1, [r5, #24]
 800a478:	ea4f 120c 	mov.w	r2, ip, lsl #4
 800a47c:	188b      	adds	r3, r1, r2
 800a47e:	f8de a000 	ldr.w	sl, [lr]
 800a482:	f8de 9004 	ldr.w	r9, [lr, #4]
 800a486:	f8de 7008 	ldr.w	r7, [lr, #8]
 800a48a:	f8de 000c 	ldr.w	r0, [lr, #12]
 800a48e:	f841 a002 	str.w	sl, [r1, r2]
 800a492:	f8c3 9004 	str.w	r9, [r3, #4]
 800a496:	609f      	str	r7, [r3, #8]
 800a498:	60d8      	str	r0, [r3, #12]
      for( uint32_t i = 0; i < dim_length; i++){
 800a49a:	f10c 0c01 	add.w	ip, ip, #1
 800a49e:	686b      	ldr	r3, [r5, #4]
 800a4a0:	4563      	cmp	r3, ip
 800a4a2:	d90d      	bls.n	800a4c0 <_ZN8std_msgs17Float32MultiArray11deserializeEPh+0x106>
      offset += this->st_dim.deserialize(inbuffer + offset);
 800a4a4:	f105 0e08 	add.w	lr, r5, #8
 800a4a8:	eb04 0208 	add.w	r2, r4, r8
    var = 0;
 800a4ac:	2100      	movs	r1, #0
    for (size_t i = 0; i < sizeof(V); i++)
 800a4ae:	460b      	mov	r3, r1
 800a4b0:	2b03      	cmp	r3, #3
 800a4b2:	d8a0      	bhi.n	800a3f6 <_ZN8std_msgs17Float32MultiArray11deserializeEPh+0x3c>
      var |= (arr[i] << (8 * i));
 800a4b4:	5cd0      	ldrb	r0, [r2, r3]
 800a4b6:	00df      	lsls	r7, r3, #3
 800a4b8:	40b8      	lsls	r0, r7
 800a4ba:	4301      	orrs	r1, r0
    for (size_t i = 0; i < sizeof(V); i++)
 800a4bc:	3301      	adds	r3, #1
 800a4be:	e7f7      	b.n	800a4b0 <_ZN8std_msgs17Float32MultiArray11deserializeEPh+0xf6>
      this->data_offset =  ((uint32_t) (*(inbuffer + offset)));
 800a4c0:	f814 3008 	ldrb.w	r3, [r4, r8]
 800a4c4:	61eb      	str	r3, [r5, #28]
      this->data_offset |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800a4c6:	f108 0201 	add.w	r2, r8, #1
 800a4ca:	5ca2      	ldrb	r2, [r4, r2]
 800a4cc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800a4d0:	61eb      	str	r3, [r5, #28]
      this->data_offset |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800a4d2:	f108 0202 	add.w	r2, r8, #2
 800a4d6:	5ca2      	ldrb	r2, [r4, r2]
 800a4d8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a4dc:	61eb      	str	r3, [r5, #28]
      this->data_offset |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800a4de:	f108 0203 	add.w	r2, r8, #3
 800a4e2:	5ca2      	ldrb	r2, [r4, r2]
 800a4e4:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800a4e8:	61eb      	str	r3, [r5, #28]
      offset += sizeof(this->data_offset);
 800a4ea:	f108 0504 	add.w	r5, r8, #4
      uint32_t data_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 800a4ee:	5d67      	ldrb	r7, [r4, r5]
      data_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 800a4f0:	f108 0305 	add.w	r3, r8, #5
 800a4f4:	5ce3      	ldrb	r3, [r4, r3]
 800a4f6:	ea47 2703 	orr.w	r7, r7, r3, lsl #8
      data_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 800a4fa:	f108 0306 	add.w	r3, r8, #6
 800a4fe:	5ce3      	ldrb	r3, [r4, r3]
 800a500:	ea47 4703 	orr.w	r7, r7, r3, lsl #16
      data_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 800a504:	f108 0807 	add.w	r8, r8, #7
 800a508:	f814 3008 	ldrb.w	r3, [r4, r8]
 800a50c:	ea47 6703 	orr.w	r7, r7, r3, lsl #24
      offset += sizeof(this->data_length);
 800a510:	3504      	adds	r5, #4
      if(data_lengthT > data_length)
 800a512:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800a514:	429f      	cmp	r7, r3
 800a516:	d818      	bhi.n	800a54a <_ZN8std_msgs17Float32MultiArray11deserializeEPh+0x190>
      data_length = data_lengthT;
 800a518:	6277      	str	r7, [r6, #36]	; 0x24
      for( uint32_t i = 0; i < data_length; i++){
 800a51a:	2200      	movs	r2, #0
 800a51c:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800a51e:	429a      	cmp	r2, r3
 800a520:	d219      	bcs.n	800a556 <_ZN8std_msgs17Float32MultiArray11deserializeEPh+0x19c>
      u_st_data.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800a522:	5d63      	ldrb	r3, [r4, r5]
      u_st_data.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800a524:	1c69      	adds	r1, r5, #1
 800a526:	5c61      	ldrb	r1, [r4, r1]
 800a528:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
      u_st_data.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800a52c:	1ca9      	adds	r1, r5, #2
 800a52e:	5c61      	ldrb	r1, [r4, r1]
 800a530:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
      u_st_data.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800a534:	1ce9      	adds	r1, r5, #3
 800a536:	5c61      	ldrb	r1, [r4, r1]
 800a538:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
      this->st_data = u_st_data.real;
 800a53c:	62b3      	str	r3, [r6, #40]	; 0x28
      offset += sizeof(this->st_data);
 800a53e:	3504      	adds	r5, #4
        memcpy( &(this->data[i]), &(this->st_data), sizeof(float));
 800a540:	6af1      	ldr	r1, [r6, #44]	; 0x2c
 800a542:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
      for( uint32_t i = 0; i < data_length; i++){
 800a546:	3201      	adds	r2, #1
 800a548:	e7e8      	b.n	800a51c <_ZN8std_msgs17Float32MultiArray11deserializeEPh+0x162>
        this->data = (float*)realloc(this->data, data_lengthT * sizeof(float));
 800a54a:	00b9      	lsls	r1, r7, #2
 800a54c:	6af0      	ldr	r0, [r6, #44]	; 0x2c
 800a54e:	f000 ff85 	bl	800b45c <realloc>
 800a552:	62f0      	str	r0, [r6, #44]	; 0x2c
 800a554:	e7e0      	b.n	800a518 <_ZN8std_msgs17Float32MultiArray11deserializeEPh+0x15e>
    }
 800a556:	4628      	mov	r0, r5
 800a558:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800a55c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv>:
  virtual int spinOnce()
 800a55c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a560:	b087      	sub	sp, #28
 800a562:	4604      	mov	r4, r0
		return HAL_GetTick();
 800a564:	f7f7 fc32 	bl	8001dcc <HAL_GetTick>
 800a568:	4605      	mov	r5, r0
    if ((c_time - last_sync_receive_time) > (SYNC_SECONDS * 2200))
 800a56a:	f8d4 38fc 	ldr.w	r3, [r4, #2300]	; 0x8fc
 800a56e:	1ac3      	subs	r3, r0, r3
 800a570:	f642 22f8 	movw	r2, #11000	; 0x2af8
 800a574:	4293      	cmp	r3, r2
 800a576:	d902      	bls.n	800a57e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x22>
      configured_ = false;
 800a578:	2300      	movs	r3, #0
 800a57a:	f884 38f4 	strb.w	r3, [r4, #2292]	; 0x8f4
    if (mode_ != MODE_FIRST_FF)
 800a57e:	f8d4 38e0 	ldr.w	r3, [r4, #2272]	; 0x8e0
 800a582:	b35b      	cbz	r3, 800a5dc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x80>
      if (c_time > last_msg_timeout_time)
 800a584:	f8d4 3900 	ldr.w	r3, [r4, #2304]	; 0x900
 800a588:	42ab      	cmp	r3, r5
 800a58a:	d227      	bcs.n	800a5dc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x80>
        mode_ = MODE_FIRST_FF;
 800a58c:	2300      	movs	r3, #0
 800a58e:	f8c4 38e0 	str.w	r3, [r4, #2272]	; 0x8e0
 800a592:	e023      	b.n	800a5dc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x80>
 800a594:	f7f7 fc1a 	bl	8001dcc <HAL_GetTick>
        if ((hardware_.time() - c_time) > spin_timeout_)
 800a598:	1b40      	subs	r0, r0, r5
 800a59a:	6963      	ldr	r3, [r4, #20]
 800a59c:	4298      	cmp	r0, r3
 800a59e:	d920      	bls.n	800a5e2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x86>
          return SPIN_TIMEOUT;
 800a5a0:	f06f 0001 	mvn.w	r0, #1
 800a5a4:	e289      	b.n	800aaba <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x55e>
			return -1;
 800a5a6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a5aa:	e02f      	b.n	800a60c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0xb0>
        message_in[index_++] = data;
 800a5ac:	f8d4 38ec 	ldr.w	r3, [r4, #2284]	; 0x8ec
 800a5b0:	1c5a      	adds	r2, r3, #1
 800a5b2:	f8c4 28ec 	str.w	r2, [r4, #2284]	; 0x8ec
 800a5b6:	4423      	add	r3, r4
 800a5b8:	7618      	strb	r0, [r3, #24]
        bytes_--;
 800a5ba:	f8d4 38e4 	ldr.w	r3, [r4, #2276]	; 0x8e4
 800a5be:	3b01      	subs	r3, #1
 800a5c0:	f8c4 38e4 	str.w	r3, [r4, #2276]	; 0x8e4
        if (bytes_ == 0)                 /* is message complete? if so, checksum */
 800a5c4:	b953      	cbnz	r3, 800a5dc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x80>
          mode_ = MODE_MSG_CHECKSUM;
 800a5c6:	2308      	movs	r3, #8
 800a5c8:	f8c4 38e0 	str.w	r3, [r4, #2272]	; 0x8e0
 800a5cc:	e006      	b.n	800a5dc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x80>
          mode_++;
 800a5ce:	3301      	adds	r3, #1
 800a5d0:	f8c4 38e0 	str.w	r3, [r4, #2272]	; 0x8e0
          last_msg_timeout_time = c_time + SERIAL_MSG_TIMEOUT;
 800a5d4:	f105 0314 	add.w	r3, r5, #20
 800a5d8:	f8c4 3900 	str.w	r3, [r4, #2304]	; 0x900
      if (spin_timeout_ > 0)
 800a5dc:	6963      	ldr	r3, [r4, #20]
 800a5de:	2b00      	cmp	r3, #0
 800a5e0:	d1d8      	bne.n	800a594 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x38>
		return com->read();
 800a5e2:	6861      	ldr	r1, [r4, #4]
		uint16_t rx_head = (BUF_SIZE - huart.hdmarx->Instance->CNDTR)
 800a5e4:	f8d1 3808 	ldr.w	r3, [r1, #2056]	; 0x808
 800a5e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a5ea:	681b      	ldr	r3, [r3, #0]
 800a5ec:	685b      	ldr	r3, [r3, #4]
				& buf_mask;
 800a5ee:	425b      	negs	r3, r3
 800a5f0:	f3c3 0309 	ubfx	r3, r3, #0, #10
		if (rx_tail == rx_head)
 800a5f4:	f8b1 2802 	ldrh.w	r2, [r1, #2050]	; 0x802
 800a5f8:	4293      	cmp	r3, r2
 800a5fa:	d0d4      	beq.n	800a5a6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x4a>
		int c = (int) rx_buf[rx_tail++];
 800a5fc:	1c53      	adds	r3, r2, #1
 800a5fe:	440a      	add	r2, r1
 800a600:	f892 0400 	ldrb.w	r0, [r2, #1024]	; 0x400
		rx_tail &= buf_mask;
 800a604:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a608:	f8a1 3802 	strh.w	r3, [r1, #2050]	; 0x802
      if (data < 0)
 800a60c:	2800      	cmp	r0, #0
 800a60e:	f2c0 8235 	blt.w	800aa7c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x520>
      checksum_ += data;
 800a612:	f8d4 28f0 	ldr.w	r2, [r4, #2288]	; 0x8f0
 800a616:	4402      	add	r2, r0
 800a618:	f8c4 28f0 	str.w	r2, [r4, #2288]	; 0x8f0
      if (mode_ == MODE_MESSAGE)          /* message data being recieved */
 800a61c:	f8d4 38e0 	ldr.w	r3, [r4, #2272]	; 0x8e0
 800a620:	2b07      	cmp	r3, #7
 800a622:	d0c3      	beq.n	800a5ac <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x50>
      else if (mode_ == MODE_FIRST_FF)
 800a624:	b973      	cbnz	r3, 800a644 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0xe8>
        if (data == 0xff)
 800a626:	28ff      	cmp	r0, #255	; 0xff
 800a628:	d0d1      	beq.n	800a5ce <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x72>
		return HAL_GetTick();
 800a62a:	f7f7 fbcf 	bl	8001dcc <HAL_GetTick>
        else if (hardware_.time() - c_time > (SYNC_SECONDS * 1000))
 800a62e:	1b40      	subs	r0, r0, r5
 800a630:	f241 3388 	movw	r3, #5000	; 0x1388
 800a634:	4298      	cmp	r0, r3
 800a636:	d9d1      	bls.n	800a5dc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x80>
          configured_ = false;
 800a638:	2300      	movs	r3, #0
 800a63a:	f884 38f4 	strb.w	r3, [r4, #2292]	; 0x8f4
          return SPIN_TIMEOUT;
 800a63e:	f06f 0001 	mvn.w	r0, #1
 800a642:	e23a      	b.n	800aaba <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x55e>
      else if (mode_ == MODE_PROTOCOL_VER)
 800a644:	2b01      	cmp	r3, #1
 800a646:	d034      	beq.n	800a6b2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x156>
      else if (mode_ == MODE_SIZE_L)      /* bottom half of message size */
 800a648:	2b02      	cmp	r3, #2
 800a64a:	d04e      	beq.n	800a6ea <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x18e>
      else if (mode_ == MODE_SIZE_H)      /* top half of message size */
 800a64c:	2b03      	cmp	r3, #3
 800a64e:	d057      	beq.n	800a700 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x1a4>
      else if (mode_ == MODE_SIZE_CHECKSUM)
 800a650:	2b04      	cmp	r3, #4
 800a652:	d05f      	beq.n	800a714 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x1b8>
      else if (mode_ == MODE_TOPIC_L)     /* bottom half of topic id */
 800a654:	2b05      	cmp	r3, #5
 800a656:	d06c      	beq.n	800a732 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x1d6>
      else if (mode_ == MODE_TOPIC_H)     /* top half of topic id */
 800a658:	2b06      	cmp	r3, #6
 800a65a:	d072      	beq.n	800a742 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x1e6>
      else if (mode_ == MODE_MSG_CHECKSUM)    /* do checksum */
 800a65c:	2b08      	cmp	r3, #8
 800a65e:	d1bd      	bne.n	800a5dc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x80>
        mode_ = MODE_FIRST_FF;
 800a660:	2300      	movs	r3, #0
 800a662:	f8c4 38e0 	str.w	r3, [r4, #2272]	; 0x8e0
        if ((checksum_ % 256) == 255)
 800a666:	1a9b      	subs	r3, r3, r2
 800a668:	b2d2      	uxtb	r2, r2
 800a66a:	b2db      	uxtb	r3, r3
 800a66c:	bf58      	it	pl
 800a66e:	425a      	negpl	r2, r3
 800a670:	2aff      	cmp	r2, #255	; 0xff
 800a672:	d1b3      	bne.n	800a5dc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x80>
          if (topic_ == TopicInfo::ID_PUBLISHER)
 800a674:	f8d4 68e8 	ldr.w	r6, [r4, #2280]	; 0x8e8
 800a678:	2e00      	cmp	r6, #0
 800a67a:	d074      	beq.n	800a766 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x20a>
          else if (topic_ == TopicInfo::ID_TIME)
 800a67c:	2e0a      	cmp	r6, #10
 800a67e:	f000 80e8 	beq.w	800a852 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x2f6>
          else if (topic_ == TopicInfo::ID_PARAMETER_REQUEST)
 800a682:	2e06      	cmp	r6, #6
 800a684:	f000 812a 	beq.w	800a8dc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x380>
          else if (topic_ == TopicInfo::ID_TX_STOP)
 800a688:	2e0b      	cmp	r6, #11
 800a68a:	f000 81f3 	beq.w	800aa74 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x518>
            if (subscribers[topic_ - 100])
 800a68e:	f506 73dd 	add.w	r3, r6, #442	; 0x1ba
 800a692:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a696:	6858      	ldr	r0, [r3, #4]
 800a698:	2800      	cmp	r0, #0
 800a69a:	d09f      	beq.n	800a5dc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x80>
              subscribers[topic_ - 100]->callback(message_in);
 800a69c:	f506 73dd 	add.w	r3, r6, #442	; 0x1ba
 800a6a0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a6a4:	685b      	ldr	r3, [r3, #4]
 800a6a6:	681b      	ldr	r3, [r3, #0]
 800a6a8:	681b      	ldr	r3, [r3, #0]
 800a6aa:	f104 0118 	add.w	r1, r4, #24
 800a6ae:	4798      	blx	r3
 800a6b0:	e794      	b.n	800a5dc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x80>
        if (data == PROTOCOL_VER)
 800a6b2:	28fe      	cmp	r0, #254	; 0xfe
 800a6b4:	d015      	beq.n	800a6e2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x186>
          mode_ = MODE_FIRST_FF;
 800a6b6:	2300      	movs	r3, #0
 800a6b8:	f8c4 38e0 	str.w	r3, [r4, #2272]	; 0x8e0
          if (configured_ == false)
 800a6bc:	f894 38f4 	ldrb.w	r3, [r4, #2292]	; 0x8f4
 800a6c0:	2b00      	cmp	r3, #0
 800a6c2:	d18b      	bne.n	800a5dc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x80>
      data()
 800a6c4:	4bbe      	ldr	r3, [pc, #760]	; (800a9c0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x464>)
 800a6c6:	9300      	str	r3, [sp, #0]
 800a6c8:	2300      	movs	r3, #0
 800a6ca:	9301      	str	r3, [sp, #4]
 800a6cc:	9302      	str	r3, [sp, #8]
    publish(TopicInfo::ID_TIME, &t);
 800a6ce:	6823      	ldr	r3, [r4, #0]
 800a6d0:	681b      	ldr	r3, [r3, #0]
 800a6d2:	466a      	mov	r2, sp
 800a6d4:	210a      	movs	r1, #10
 800a6d6:	4620      	mov	r0, r4
 800a6d8:	4798      	blx	r3
 800a6da:	f7f7 fb77 	bl	8001dcc <HAL_GetTick>
    rt_time = hardware_.time();
 800a6de:	60a0      	str	r0, [r4, #8]
 800a6e0:	e77c      	b.n	800a5dc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x80>
          mode_++;
 800a6e2:	3301      	adds	r3, #1
 800a6e4:	f8c4 38e0 	str.w	r3, [r4, #2272]	; 0x8e0
 800a6e8:	e778      	b.n	800a5dc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x80>
        bytes_ = data;
 800a6ea:	f8c4 08e4 	str.w	r0, [r4, #2276]	; 0x8e4
        index_ = 0;
 800a6ee:	2200      	movs	r2, #0
 800a6f0:	f8c4 28ec 	str.w	r2, [r4, #2284]	; 0x8ec
        mode_++;
 800a6f4:	3301      	adds	r3, #1
 800a6f6:	f8c4 38e0 	str.w	r3, [r4, #2272]	; 0x8e0
        checksum_ = data;               /* first byte for calculating size checksum */
 800a6fa:	f8c4 08f0 	str.w	r0, [r4, #2288]	; 0x8f0
 800a6fe:	e76d      	b.n	800a5dc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x80>
        bytes_ += data << 8;
 800a700:	f8d4 28e4 	ldr.w	r2, [r4, #2276]	; 0x8e4
 800a704:	eb02 2000 	add.w	r0, r2, r0, lsl #8
 800a708:	f8c4 08e4 	str.w	r0, [r4, #2276]	; 0x8e4
        mode_++;
 800a70c:	3301      	adds	r3, #1
 800a70e:	f8c4 38e0 	str.w	r3, [r4, #2272]	; 0x8e0
 800a712:	e763      	b.n	800a5dc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x80>
        if ((checksum_ % 256) == 255)
 800a714:	4251      	negs	r1, r2
 800a716:	b2d2      	uxtb	r2, r2
 800a718:	b2c9      	uxtb	r1, r1
 800a71a:	bf58      	it	pl
 800a71c:	424a      	negpl	r2, r1
 800a71e:	2aff      	cmp	r2, #255	; 0xff
 800a720:	d003      	beq.n	800a72a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x1ce>
          mode_ = MODE_FIRST_FF;          /* Abandon the frame if the msg len is wrong */
 800a722:	2300      	movs	r3, #0
 800a724:	f8c4 38e0 	str.w	r3, [r4, #2272]	; 0x8e0
 800a728:	e758      	b.n	800a5dc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x80>
          mode_++;
 800a72a:	3301      	adds	r3, #1
 800a72c:	f8c4 38e0 	str.w	r3, [r4, #2272]	; 0x8e0
 800a730:	e754      	b.n	800a5dc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x80>
        topic_ = data;
 800a732:	f8c4 08e8 	str.w	r0, [r4, #2280]	; 0x8e8
        mode_++;
 800a736:	3301      	adds	r3, #1
 800a738:	f8c4 38e0 	str.w	r3, [r4, #2272]	; 0x8e0
        checksum_ = data;               /* first byte included in checksum */
 800a73c:	f8c4 08f0 	str.w	r0, [r4, #2288]	; 0x8f0
 800a740:	e74c      	b.n	800a5dc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x80>
        topic_ += data << 8;
 800a742:	f8d4 38e8 	ldr.w	r3, [r4, #2280]	; 0x8e8
 800a746:	eb03 2000 	add.w	r0, r3, r0, lsl #8
 800a74a:	f8c4 08e8 	str.w	r0, [r4, #2280]	; 0x8e8
        mode_ = MODE_MESSAGE;
 800a74e:	2307      	movs	r3, #7
 800a750:	f8c4 38e0 	str.w	r3, [r4, #2272]	; 0x8e0
        if (bytes_ == 0)
 800a754:	f8d4 38e4 	ldr.w	r3, [r4, #2276]	; 0x8e4
 800a758:	2b00      	cmp	r3, #0
 800a75a:	f47f af3f 	bne.w	800a5dc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x80>
          mode_ = MODE_MSG_CHECKSUM;
 800a75e:	2308      	movs	r3, #8
 800a760:	f8c4 38e0 	str.w	r3, [r4, #2272]	; 0x8e0
 800a764:	e73a      	b.n	800a5dc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x80>
 800a766:	4b96      	ldr	r3, [pc, #600]	; (800a9c0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x464>)
 800a768:	9300      	str	r3, [sp, #0]
 800a76a:	2700      	movs	r7, #0
 800a76c:	9701      	str	r7, [sp, #4]
 800a76e:	9702      	str	r7, [sp, #8]
    publish(TopicInfo::ID_TIME, &t);
 800a770:	6823      	ldr	r3, [r4, #0]
 800a772:	681b      	ldr	r3, [r3, #0]
 800a774:	466a      	mov	r2, sp
 800a776:	210a      	movs	r1, #10
 800a778:	4620      	mov	r0, r4
 800a77a:	4798      	blx	r3
 800a77c:	f7f7 fb26 	bl	8001dcc <HAL_GetTick>
    rt_time = hardware_.time();
 800a780:	60a0      	str	r0, [r4, #8]
      buffer_size(0)
 800a782:	4b90      	ldr	r3, [pc, #576]	; (800a9c4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x468>)
 800a784:	9300      	str	r3, [sp, #0]
 800a786:	f8ad 7004 	strh.w	r7, [sp, #4]
 800a78a:	4b8f      	ldr	r3, [pc, #572]	; (800a9c8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x46c>)
 800a78c:	9302      	str	r3, [sp, #8]
 800a78e:	9303      	str	r3, [sp, #12]
 800a790:	9304      	str	r3, [sp, #16]
 800a792:	9705      	str	r7, [sp, #20]
    for (i = 0; i < MAX_PUBLISHERS; i++)
 800a794:	4637      	mov	r7, r6
 800a796:	e000      	b.n	800a79a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x23e>
 800a798:	3701      	adds	r7, #1
 800a79a:	2f18      	cmp	r7, #24
 800a79c:	dc25      	bgt.n	800a7ea <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x28e>
      if (publishers[i] != 0) // non-empty slot
 800a79e:	f207 2306 	addw	r3, r7, #518	; 0x206
 800a7a2:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 800a7a6:	2b00      	cmp	r3, #0
 800a7a8:	d0f6      	beq.n	800a798 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x23c>
        ti.topic_id = publishers[i]->id_;
 800a7aa:	689a      	ldr	r2, [r3, #8]
 800a7ac:	f8ad 2004 	strh.w	r2, [sp, #4]
        ti.topic_name = (char *) publishers[i]->topic_;
 800a7b0:	681a      	ldr	r2, [r3, #0]
 800a7b2:	9202      	str	r2, [sp, #8]
        ti.message_type = (char *) publishers[i]->msg_->getType();
 800a7b4:	6858      	ldr	r0, [r3, #4]
 800a7b6:	6803      	ldr	r3, [r0, #0]
 800a7b8:	689b      	ldr	r3, [r3, #8]
 800a7ba:	4798      	blx	r3
 800a7bc:	9003      	str	r0, [sp, #12]
        ti.md5sum = (char *) publishers[i]->msg_->getMD5();
 800a7be:	f207 2806 	addw	r8, r7, #518	; 0x206
 800a7c2:	f854 3028 	ldr.w	r3, [r4, r8, lsl #2]
 800a7c6:	6858      	ldr	r0, [r3, #4]
 800a7c8:	6803      	ldr	r3, [r0, #0]
 800a7ca:	68db      	ldr	r3, [r3, #12]
 800a7cc:	4798      	blx	r3
 800a7ce:	9004      	str	r0, [sp, #16]
        ti.buffer_size = OUTPUT_SIZE;
 800a7d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a7d4:	9305      	str	r3, [sp, #20]
        publish(publishers[i]->getEndpointType(), &ti);
 800a7d6:	6823      	ldr	r3, [r4, #0]
 800a7d8:	681b      	ldr	r3, [r3, #0]
 800a7da:	f854 1028 	ldr.w	r1, [r4, r8, lsl #2]
 800a7de:	466a      	mov	r2, sp
 800a7e0:	6909      	ldr	r1, [r1, #16]
 800a7e2:	4620      	mov	r0, r4
 800a7e4:	4798      	blx	r3
 800a7e6:	e7d7      	b.n	800a798 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x23c>
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 800a7e8:	3601      	adds	r6, #1
 800a7ea:	2e18      	cmp	r6, #24
 800a7ec:	dc27      	bgt.n	800a83e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x2e2>
      if (subscribers[i] != 0) // non-empty slot
 800a7ee:	f206 231e 	addw	r3, r6, #542	; 0x21e
 800a7f2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a7f6:	6858      	ldr	r0, [r3, #4]
 800a7f8:	2800      	cmp	r0, #0
 800a7fa:	d0f5      	beq.n	800a7e8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x28c>
        ti.topic_id = subscribers[i]->id_;
 800a7fc:	6843      	ldr	r3, [r0, #4]
 800a7fe:	f8ad 3004 	strh.w	r3, [sp, #4]
        ti.topic_name = (char *) subscribers[i]->topic_;
 800a802:	6883      	ldr	r3, [r0, #8]
 800a804:	9302      	str	r3, [sp, #8]
        ti.message_type = (char *) subscribers[i]->getMsgType();
 800a806:	6803      	ldr	r3, [r0, #0]
 800a808:	689b      	ldr	r3, [r3, #8]
 800a80a:	4798      	blx	r3
 800a80c:	9003      	str	r0, [sp, #12]
        ti.md5sum = (char *) subscribers[i]->getMsgMD5();
 800a80e:	f206 271e 	addw	r7, r6, #542	; 0x21e
 800a812:	eb04 0787 	add.w	r7, r4, r7, lsl #2
 800a816:	6878      	ldr	r0, [r7, #4]
 800a818:	6803      	ldr	r3, [r0, #0]
 800a81a:	68db      	ldr	r3, [r3, #12]
 800a81c:	4798      	blx	r3
 800a81e:	9004      	str	r0, [sp, #16]
        ti.buffer_size = INPUT_SIZE;
 800a820:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a824:	9305      	str	r3, [sp, #20]
        publish(subscribers[i]->getEndpointType(), &ti);
 800a826:	6823      	ldr	r3, [r4, #0]
 800a828:	f8d3 8000 	ldr.w	r8, [r3]
 800a82c:	6878      	ldr	r0, [r7, #4]
 800a82e:	6803      	ldr	r3, [r0, #0]
 800a830:	685b      	ldr	r3, [r3, #4]
 800a832:	4798      	blx	r3
 800a834:	466a      	mov	r2, sp
 800a836:	4601      	mov	r1, r0
 800a838:	4620      	mov	r0, r4
 800a83a:	47c0      	blx	r8
 800a83c:	e7d4      	b.n	800a7e8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x28c>
    configured_ = true;
 800a83e:	2301      	movs	r3, #1
 800a840:	f884 38f4 	strb.w	r3, [r4, #2292]	; 0x8f4
            last_sync_time = c_time;
 800a844:	f8c4 58f8 	str.w	r5, [r4, #2296]	; 0x8f8
            last_sync_receive_time = c_time;
 800a848:	f8c4 58fc 	str.w	r5, [r4, #2300]	; 0x8fc
            return SPIN_ERR;
 800a84c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a850:	e133      	b.n	800aaba <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x55e>
            syncTime(message_in);
 800a852:	f104 0618 	add.w	r6, r4, #24
 800a856:	f7f7 fab9 	bl	8001dcc <HAL_GetTick>
    uint32_t offset = hardware_.time() - rt_time;
 800a85a:	68a3      	ldr	r3, [r4, #8]
 800a85c:	1ac0      	subs	r0, r0, r3
      this->data.sec =  ((uint32_t) (*(inbuffer + offset)));
 800a85e:	7e22      	ldrb	r2, [r4, #24]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800a860:	4633      	mov	r3, r6
 800a862:	7871      	ldrb	r1, [r6, #1]
 800a864:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800a868:	78b1      	ldrb	r1, [r6, #2]
 800a86a:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800a86e:	78f1      	ldrb	r1, [r6, #3]
 800a870:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
      this->data.nsec =  ((uint32_t) (*(inbuffer + offset)));
 800a874:	7932      	ldrb	r2, [r6, #4]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800a876:	7976      	ldrb	r6, [r6, #5]
 800a878:	ea42 2206 	orr.w	r2, r2, r6, lsl #8
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800a87c:	799e      	ldrb	r6, [r3, #6]
 800a87e:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800a882:	79db      	ldrb	r3, [r3, #7]
 800a884:	ea42 6203 	orr.w	r2, r2, r3, lsl #24
    t.data.sec += offset / 1000;
 800a888:	4e50      	ldr	r6, [pc, #320]	; (800a9cc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x470>)
 800a88a:	fba6 7300 	umull	r7, r3, r6, r0
 800a88e:	099b      	lsrs	r3, r3, #6
 800a890:	4419      	add	r1, r3
 800a892:	9101      	str	r1, [sp, #4]
    t.data.nsec += (offset % 1000) * 1000000UL;
 800a894:	f44f 787a 	mov.w	r8, #1000	; 0x3e8
 800a898:	fb08 0313 	mls	r3, r8, r3, r0
 800a89c:	4f4c      	ldr	r7, [pc, #304]	; (800a9d0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x474>)
 800a89e:	fb07 2303 	mla	r3, r7, r3, r2
 800a8a2:	9302      	str	r3, [sp, #8]
 800a8a4:	f7f7 fa92 	bl	8001dcc <HAL_GetTick>
    sec_offset = new_now.sec - ms / 1000 - 1;
 800a8a8:	fba6 2300 	umull	r2, r3, r6, r0
 800a8ac:	099b      	lsrs	r3, r3, #6
 800a8ae:	9a01      	ldr	r2, [sp, #4]
 800a8b0:	1ad2      	subs	r2, r2, r3
 800a8b2:	3a01      	subs	r2, #1
 800a8b4:	60e2      	str	r2, [r4, #12]
    nsec_offset = new_now.nsec - (ms % 1000) * 1000000UL + 1000000000UL;
 800a8b6:	fb08 0313 	mls	r3, r8, r3, r0
 800a8ba:	9a02      	ldr	r2, [sp, #8]
 800a8bc:	fb07 2313 	mls	r3, r7, r3, r2
 800a8c0:	4a44      	ldr	r2, [pc, #272]	; (800a9d4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x478>)
 800a8c2:	441a      	add	r2, r3
 800a8c4:	6122      	str	r2, [r4, #16]
    normalizeSecNSec(sec_offset, nsec_offset);
 800a8c6:	f104 0110 	add.w	r1, r4, #16
 800a8ca:	f104 000c 	add.w	r0, r4, #12
 800a8ce:	f7fd fb0f 	bl	8007ef0 <_ZN3ros16normalizeSecNSecERmS0_>
 800a8d2:	f7f7 fa7b 	bl	8001dcc <HAL_GetTick>
    last_sync_receive_time = hardware_.time();
 800a8d6:	f8c4 08fc 	str.w	r0, [r4, #2300]	; 0x8fc
 800a8da:	e67f      	b.n	800a5dc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x80>
            req_param_resp.deserialize(message_in);
 800a8dc:	f604 1808 	addw	r8, r4, #2312	; 0x908
 800a8e0:	f104 0718 	add.w	r7, r4, #24
      uint32_t ints_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 800a8e4:	7e26      	ldrb	r6, [r4, #24]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 800a8e6:	787b      	ldrb	r3, [r7, #1]
 800a8e8:	ea46 2603 	orr.w	r6, r6, r3, lsl #8
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 800a8ec:	78bb      	ldrb	r3, [r7, #2]
 800a8ee:	ea46 4603 	orr.w	r6, r6, r3, lsl #16
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 800a8f2:	78fb      	ldrb	r3, [r7, #3]
 800a8f4:	ea46 6603 	orr.w	r6, r6, r3, lsl #24
      if(ints_lengthT > ints_length)
 800a8f8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800a8fc:	429e      	cmp	r6, r3
 800a8fe:	d81d      	bhi.n	800a93c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x3e0>
      ints_length = ints_lengthT;
 800a900:	f8c8 6004 	str.w	r6, [r8, #4]
      for( uint32_t i = 0; i < ints_length; i++){
 800a904:	2200      	movs	r2, #0
      offset += sizeof(this->ints_length);
 800a906:	2604      	movs	r6, #4
      for( uint32_t i = 0; i < ints_length; i++){
 800a908:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800a90c:	4293      	cmp	r3, r2
 800a90e:	d91d      	bls.n	800a94c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x3f0>
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800a910:	5dbb      	ldrb	r3, [r7, r6]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800a912:	1c71      	adds	r1, r6, #1
 800a914:	5c79      	ldrb	r1, [r7, r1]
 800a916:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800a91a:	1cb1      	adds	r1, r6, #2
 800a91c:	5c79      	ldrb	r1, [r7, r1]
 800a91e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800a922:	1cf1      	adds	r1, r6, #3
 800a924:	5c79      	ldrb	r1, [r7, r1]
 800a926:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
      this->st_ints = u_st_ints.real;
 800a92a:	f8c8 3008 	str.w	r3, [r8, #8]
      offset += sizeof(this->st_ints);
 800a92e:	3604      	adds	r6, #4
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
 800a930:	f8d8 100c 	ldr.w	r1, [r8, #12]
 800a934:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
      for( uint32_t i = 0; i < ints_length; i++){
 800a938:	3201      	adds	r2, #1
 800a93a:	e7e5      	b.n	800a908 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x3ac>
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
 800a93c:	00b1      	lsls	r1, r6, #2
 800a93e:	f8d8 000c 	ldr.w	r0, [r8, #12]
 800a942:	f000 fd8b 	bl	800b45c <realloc>
 800a946:	f8c8 000c 	str.w	r0, [r8, #12]
 800a94a:	e7d9      	b.n	800a900 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x3a4>
      uint32_t floats_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 800a94c:	f817 9006 	ldrb.w	r9, [r7, r6]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 800a950:	1c73      	adds	r3, r6, #1
 800a952:	5cfb      	ldrb	r3, [r7, r3]
 800a954:	ea49 2903 	orr.w	r9, r9, r3, lsl #8
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 800a958:	1cb3      	adds	r3, r6, #2
 800a95a:	5cfb      	ldrb	r3, [r7, r3]
 800a95c:	ea49 4903 	orr.w	r9, r9, r3, lsl #16
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 800a960:	1cf3      	adds	r3, r6, #3
 800a962:	5cfb      	ldrb	r3, [r7, r3]
 800a964:	ea49 6903 	orr.w	r9, r9, r3, lsl #24
      offset += sizeof(this->floats_length);
 800a968:	3604      	adds	r6, #4
      if(floats_lengthT > floats_length)
 800a96a:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800a96e:	4599      	cmp	r9, r3
 800a970:	d81c      	bhi.n	800a9ac <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x450>
      floats_length = floats_lengthT;
 800a972:	f8c8 9010 	str.w	r9, [r8, #16]
      for( uint32_t i = 0; i < floats_length; i++){
 800a976:	2200      	movs	r2, #0
 800a978:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800a97c:	4293      	cmp	r3, r2
 800a97e:	d92b      	bls.n	800a9d8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x47c>
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800a980:	5dbb      	ldrb	r3, [r7, r6]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800a982:	1c71      	adds	r1, r6, #1
 800a984:	5c79      	ldrb	r1, [r7, r1]
 800a986:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800a98a:	1cb1      	adds	r1, r6, #2
 800a98c:	5c79      	ldrb	r1, [r7, r1]
 800a98e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800a992:	1cf1      	adds	r1, r6, #3
 800a994:	5c79      	ldrb	r1, [r7, r1]
 800a996:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
      this->st_floats = u_st_floats.real;
 800a99a:	f8c8 3014 	str.w	r3, [r8, #20]
      offset += sizeof(this->st_floats);
 800a99e:	3604      	adds	r6, #4
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
 800a9a0:	f8d8 1018 	ldr.w	r1, [r8, #24]
 800a9a4:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
      for( uint32_t i = 0; i < floats_length; i++){
 800a9a8:	3201      	adds	r2, #1
 800a9aa:	e7e5      	b.n	800a978 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x41c>
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
 800a9ac:	ea4f 0189 	mov.w	r1, r9, lsl #2
 800a9b0:	f8d8 0018 	ldr.w	r0, [r8, #24]
 800a9b4:	f000 fd52 	bl	800b45c <realloc>
 800a9b8:	f8c8 0018 	str.w	r0, [r8, #24]
 800a9bc:	e7d9      	b.n	800a972 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x416>
 800a9be:	bf00      	nop
 800a9c0:	0800bfe0 	.word	0x0800bfe0
 800a9c4:	0800bff8 	.word	0x0800bff8
 800a9c8:	0800c1f8 	.word	0x0800c1f8
 800a9cc:	10624dd3 	.word	0x10624dd3
 800a9d0:	000f4240 	.word	0x000f4240
 800a9d4:	3b9aca00 	.word	0x3b9aca00
      uint32_t strings_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 800a9d8:	f817 9006 	ldrb.w	r9, [r7, r6]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 800a9dc:	1c73      	adds	r3, r6, #1
 800a9de:	5cfb      	ldrb	r3, [r7, r3]
 800a9e0:	ea49 2903 	orr.w	r9, r9, r3, lsl #8
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 800a9e4:	1cb3      	adds	r3, r6, #2
 800a9e6:	5cfb      	ldrb	r3, [r7, r3]
 800a9e8:	ea49 4903 	orr.w	r9, r9, r3, lsl #16
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 800a9ec:	1cf3      	adds	r3, r6, #3
 800a9ee:	5cfb      	ldrb	r3, [r7, r3]
 800a9f0:	ea49 6903 	orr.w	r9, r9, r3, lsl #24
      offset += sizeof(this->strings_length);
 800a9f4:	3604      	adds	r6, #4
      if(strings_lengthT > strings_length)
 800a9f6:	f8d8 301c 	ldr.w	r3, [r8, #28]
 800a9fa:	4599      	cmp	r9, r3
 800a9fc:	d804      	bhi.n	800aa08 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x4ac>
      strings_length = strings_lengthT;
 800a9fe:	f8c8 901c 	str.w	r9, [r8, #28]
      for( uint32_t i = 0; i < strings_length; i++){
 800aa02:	f04f 0e00 	mov.w	lr, #0
 800aa06:	e029      	b.n	800aa5c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x500>
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
 800aa08:	ea4f 0189 	mov.w	r1, r9, lsl #2
 800aa0c:	f8d8 0024 	ldr.w	r0, [r8, #36]	; 0x24
 800aa10:	f000 fd24 	bl	800b45c <realloc>
 800aa14:	f8c8 0024 	str.w	r0, [r8, #36]	; 0x24
 800aa18:	e7f1      	b.n	800a9fe <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x4a2>
      var |= (arr[i] << (8 * i));
 800aa1a:	eb07 020c 	add.w	r2, r7, ip
 800aa1e:	5cd2      	ldrb	r2, [r2, r3]
 800aa20:	00d8      	lsls	r0, r3, #3
 800aa22:	4082      	lsls	r2, r0
 800aa24:	4311      	orrs	r1, r2
    for (size_t i = 0; i < sizeof(V); i++)
 800aa26:	3301      	adds	r3, #1
 800aa28:	2b03      	cmp	r3, #3
 800aa2a:	d9f6      	bls.n	800aa1a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x4be>
      offset += 4;
 800aa2c:	3604      	adds	r6, #4
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 800aa2e:	4633      	mov	r3, r6
 800aa30:	198a      	adds	r2, r1, r6
 800aa32:	429a      	cmp	r2, r3
 800aa34:	d904      	bls.n	800aa40 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x4e4>
          inbuffer[k-1]=inbuffer[k];
 800aa36:	1e5a      	subs	r2, r3, #1
 800aa38:	5cf8      	ldrb	r0, [r7, r3]
 800aa3a:	54b8      	strb	r0, [r7, r2]
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 800aa3c:	3301      	adds	r3, #1
 800aa3e:	e7f7      	b.n	800aa30 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x4d4>
      inbuffer[offset+length_st_strings-1]=0;
 800aa40:	1e53      	subs	r3, r2, #1
 800aa42:	2100      	movs	r1, #0
 800aa44:	54f9      	strb	r1, [r7, r3]
      this->st_strings = (char *)(inbuffer + offset-1);
 800aa46:	3e01      	subs	r6, #1
 800aa48:	19bb      	adds	r3, r7, r6
 800aa4a:	f8c8 3020 	str.w	r3, [r8, #32]
      offset += length_st_strings;
 800aa4e:	4616      	mov	r6, r2
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
 800aa50:	f8d8 2024 	ldr.w	r2, [r8, #36]	; 0x24
 800aa54:	f842 302e 	str.w	r3, [r2, lr, lsl #2]
      for( uint32_t i = 0; i < strings_length; i++){
 800aa58:	f10e 0e01 	add.w	lr, lr, #1
 800aa5c:	f8d8 301c 	ldr.w	r3, [r8, #28]
 800aa60:	4573      	cmp	r3, lr
 800aa62:	d903      	bls.n	800aa6c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x510>
      arrToVar(length_st_strings, (inbuffer + offset));
 800aa64:	46b4      	mov	ip, r6
    var = 0;
 800aa66:	2100      	movs	r1, #0
    for (size_t i = 0; i < sizeof(V); i++)
 800aa68:	460b      	mov	r3, r1
 800aa6a:	e7dd      	b.n	800aa28 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x4cc>
            param_recieved = true;
 800aa6c:	2301      	movs	r3, #1
 800aa6e:	f884 3904 	strb.w	r3, [r4, #2308]	; 0x904
 800aa72:	e5b3      	b.n	800a5dc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x80>
            configured_ = false;
 800aa74:	2300      	movs	r3, #0
 800aa76:	f884 38f4 	strb.w	r3, [r4, #2292]	; 0x8f4
 800aa7a:	e5af      	b.n	800a5dc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x80>
    if (configured_ && ((c_time - last_sync_time) > (SYNC_SECONDS * 500)))
 800aa7c:	f894 38f4 	ldrb.w	r3, [r4, #2292]	; 0x8f4
 800aa80:	b1d3      	cbz	r3, 800aab8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x55c>
 800aa82:	f8d4 38f8 	ldr.w	r3, [r4, #2296]	; 0x8f8
 800aa86:	1aeb      	subs	r3, r5, r3
 800aa88:	f640 12c4 	movw	r2, #2500	; 0x9c4
 800aa8c:	4293      	cmp	r3, r2
 800aa8e:	d801      	bhi.n	800aa94 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x538>
    return SPIN_OK;
 800aa90:	2000      	movs	r0, #0
 800aa92:	e012      	b.n	800aaba <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x55e>
      data()
 800aa94:	4b0a      	ldr	r3, [pc, #40]	; (800aac0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x564>)
 800aa96:	9300      	str	r3, [sp, #0]
 800aa98:	2600      	movs	r6, #0
 800aa9a:	9601      	str	r6, [sp, #4]
 800aa9c:	9602      	str	r6, [sp, #8]
    publish(TopicInfo::ID_TIME, &t);
 800aa9e:	6823      	ldr	r3, [r4, #0]
 800aaa0:	681b      	ldr	r3, [r3, #0]
 800aaa2:	466a      	mov	r2, sp
 800aaa4:	210a      	movs	r1, #10
 800aaa6:	4620      	mov	r0, r4
 800aaa8:	4798      	blx	r3
 800aaaa:	f7f7 f98f 	bl	8001dcc <HAL_GetTick>
    rt_time = hardware_.time();
 800aaae:	60a0      	str	r0, [r4, #8]
      last_sync_time = c_time;
 800aab0:	f8c4 58f8 	str.w	r5, [r4, #2296]	; 0x8f8
    return SPIN_OK;
 800aab4:	4630      	mov	r0, r6
 800aab6:	e000      	b.n	800aaba <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x55e>
 800aab8:	2000      	movs	r0, #0
  }
 800aaba:	b007      	add	sp, #28
 800aabc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800aac0:	0800bfe0 	.word	0x0800bfe0

0800aac4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800aac4:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800aac6:	e003      	b.n	800aad0 <LoopCopyDataInit>

0800aac8 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 800aac8:	4b0b      	ldr	r3, [pc, #44]	; (800aaf8 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800aaca:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800aacc:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800aace:	3104      	adds	r1, #4

0800aad0 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 800aad0:	480a      	ldr	r0, [pc, #40]	; (800aafc <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800aad2:	4b0b      	ldr	r3, [pc, #44]	; (800ab00 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 800aad4:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800aad6:	429a      	cmp	r2, r3
  bcc CopyDataInit
 800aad8:	d3f6      	bcc.n	800aac8 <CopyDataInit>
  ldr r2, =_sbss
 800aada:	4a0a      	ldr	r2, [pc, #40]	; (800ab04 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 800aadc:	e002      	b.n	800aae4 <LoopFillZerobss>

0800aade <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800aade:	2300      	movs	r3, #0
  str r3, [r2], #4
 800aae0:	f842 3b04 	str.w	r3, [r2], #4

0800aae4 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 800aae4:	4b08      	ldr	r3, [pc, #32]	; (800ab08 <LoopFillZerobss+0x24>)
  cmp r2, r3
 800aae6:	429a      	cmp	r2, r3
  bcc FillZerobss
 800aae8:	d3f9      	bcc.n	800aade <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800aaea:	f7f7 f8ab 	bl	8001c44 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800aaee:	f000 fa55 	bl	800af9c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800aaf2:	f7f5 febb 	bl	800086c <main>
  bx lr
 800aaf6:	4770      	bx	lr
  ldr r3, =_sidata
 800aaf8:	0800c7d0 	.word	0x0800c7d0
  ldr r0, =_sdata
 800aafc:	20000000 	.word	0x20000000
  ldr r3, =_edata
 800ab00:	2000051c 	.word	0x2000051c
  ldr r2, =_sbss
 800ab04:	20000520 	.word	0x20000520
  ldr r3, = _ebss
 800ab08:	20001c18 	.word	0x20001c18

0800ab0c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800ab0c:	e7fe      	b.n	800ab0c <ADC1_2_IRQHandler>
	...

0800ab10 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
 800ab10:	b510      	push	{r4, lr}
 800ab12:	4604      	mov	r4, r0
 800ab14:	4b02      	ldr	r3, [pc, #8]	; (800ab20 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
 800ab16:	6003      	str	r3, [r0, #0]
 800ab18:	f000 f8b6 	bl	800ac88 <_ZN10__cxxabiv117__class_type_infoD1Ev>
 800ab1c:	4620      	mov	r0, r4
 800ab1e:	bd10      	pop	{r4, pc}
 800ab20:	0800c450 	.word	0x0800c450

0800ab24 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
 800ab24:	b510      	push	{r4, lr}
 800ab26:	4604      	mov	r4, r0
 800ab28:	4b04      	ldr	r3, [pc, #16]	; (800ab3c <_ZN10__cxxabiv120__si_class_type_infoD0Ev+0x18>)
 800ab2a:	6003      	str	r3, [r0, #0]
 800ab2c:	f000 f8ac 	bl	800ac88 <_ZN10__cxxabiv117__class_type_infoD1Ev>
 800ab30:	4620      	mov	r0, r4
 800ab32:	210c      	movs	r1, #12
 800ab34:	f000 f884 	bl	800ac40 <_ZdlPvj>
 800ab38:	4620      	mov	r0, r4
 800ab3a:	bd10      	pop	{r4, pc}
 800ab3c:	0800c450 	.word	0x0800c450

0800ab40 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
 800ab40:	b570      	push	{r4, r5, r6, lr}
 800ab42:	b082      	sub	sp, #8
 800ab44:	9c06      	ldr	r4, [sp, #24]
 800ab46:	460d      	mov	r5, r1
 800ab48:	4294      	cmp	r4, r2
 800ab4a:	4606      	mov	r6, r0
 800ab4c:	d009      	beq.n	800ab62 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x22>
 800ab4e:	68b0      	ldr	r0, [r6, #8]
 800ab50:	4629      	mov	r1, r5
 800ab52:	6806      	ldr	r6, [r0, #0]
 800ab54:	9406      	str	r4, [sp, #24]
 800ab56:	6a34      	ldr	r4, [r6, #32]
 800ab58:	46a4      	mov	ip, r4
 800ab5a:	b002      	add	sp, #8
 800ab5c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ab60:	4760      	bx	ip
 800ab62:	4619      	mov	r1, r3
 800ab64:	9201      	str	r2, [sp, #4]
 800ab66:	9300      	str	r3, [sp, #0]
 800ab68:	f000 f8f6 	bl	800ad58 <_ZNKSt9type_infoeqERKS_>
 800ab6c:	9b00      	ldr	r3, [sp, #0]
 800ab6e:	9a01      	ldr	r2, [sp, #4]
 800ab70:	2800      	cmp	r0, #0
 800ab72:	d0ec      	beq.n	800ab4e <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
 800ab74:	2006      	movs	r0, #6
 800ab76:	b002      	add	sp, #8
 800ab78:	bd70      	pop	{r4, r5, r6, pc}
 800ab7a:	bf00      	nop

0800ab7c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
 800ab7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab80:	4689      	mov	r9, r1
 800ab82:	b081      	sub	sp, #4
 800ab84:	4619      	mov	r1, r3
 800ab86:	461d      	mov	r5, r3
 800ab88:	4616      	mov	r6, r2
 800ab8a:	4607      	mov	r7, r0
 800ab8c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800ab8e:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
 800ab92:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800ab96:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
 800ab9a:	f000 f8dd 	bl	800ad58 <_ZNKSt9type_infoeqERKS_>
 800ab9e:	b188      	cbz	r0, 800abc4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x48>
 800aba0:	f1b9 0f00 	cmp.w	r9, #0
 800aba4:	f8c8 4000 	str.w	r4, [r8]
 800aba8:	f888 6004 	strb.w	r6, [r8, #4]
 800abac:	db1e      	blt.n	800abec <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x70>
 800abae:	444c      	add	r4, r9
 800abb0:	45a2      	cmp	sl, r4
 800abb2:	bf0c      	ite	eq
 800abb4:	2406      	moveq	r4, #6
 800abb6:	2401      	movne	r4, #1
 800abb8:	f888 4006 	strb.w	r4, [r8, #6]
 800abbc:	2000      	movs	r0, #0
 800abbe:	b001      	add	sp, #4
 800abc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800abc4:	4554      	cmp	r4, sl
 800abc6:	d018      	beq.n	800abfa <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x7e>
 800abc8:	68b8      	ldr	r0, [r7, #8]
 800abca:	462b      	mov	r3, r5
 800abcc:	6805      	ldr	r5, [r0, #0]
 800abce:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
 800abd2:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 800abd6:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800abda:	940a      	str	r4, [sp, #40]	; 0x28
 800abdc:	69ec      	ldr	r4, [r5, #28]
 800abde:	4632      	mov	r2, r6
 800abe0:	4649      	mov	r1, r9
 800abe2:	46a4      	mov	ip, r4
 800abe4:	b001      	add	sp, #4
 800abe6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800abea:	4760      	bx	ip
 800abec:	f119 0f02 	cmn.w	r9, #2
 800abf0:	d1e4      	bne.n	800abbc <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x40>
 800abf2:	2301      	movs	r3, #1
 800abf4:	f888 3006 	strb.w	r3, [r8, #6]
 800abf8:	e7e0      	b.n	800abbc <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x40>
 800abfa:	4659      	mov	r1, fp
 800abfc:	4638      	mov	r0, r7
 800abfe:	f000 f8ab 	bl	800ad58 <_ZNKSt9type_infoeqERKS_>
 800ac02:	2800      	cmp	r0, #0
 800ac04:	d0e0      	beq.n	800abc8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x4c>
 800ac06:	2000      	movs	r0, #0
 800ac08:	f888 6005 	strb.w	r6, [r8, #5]
 800ac0c:	b001      	add	sp, #4
 800ac0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac12:	bf00      	nop

0800ac14 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
 800ac14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ac18:	4607      	mov	r7, r0
 800ac1a:	460c      	mov	r4, r1
 800ac1c:	4615      	mov	r5, r2
 800ac1e:	461e      	mov	r6, r3
 800ac20:	f000 f84a 	bl	800acb8 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
 800ac24:	b108      	cbz	r0, 800ac2a <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x16>
 800ac26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ac2a:	68b8      	ldr	r0, [r7, #8]
 800ac2c:	4633      	mov	r3, r6
 800ac2e:	6806      	ldr	r6, [r0, #0]
 800ac30:	4621      	mov	r1, r4
 800ac32:	69b4      	ldr	r4, [r6, #24]
 800ac34:	462a      	mov	r2, r5
 800ac36:	46a4      	mov	ip, r4
 800ac38:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ac3c:	4760      	bx	ip
 800ac3e:	bf00      	nop

0800ac40 <_ZdlPvj>:
 800ac40:	f000 b8a2 	b.w	800ad88 <_ZdlPv>

0800ac44 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
 800ac44:	b570      	push	{r4, r5, r6, lr}
 800ac46:	2400      	movs	r4, #0
 800ac48:	2610      	movs	r6, #16
 800ac4a:	6803      	ldr	r3, [r0, #0]
 800ac4c:	b084      	sub	sp, #16
 800ac4e:	4615      	mov	r5, r2
 800ac50:	9602      	str	r6, [sp, #8]
 800ac52:	6812      	ldr	r2, [r2, #0]
 800ac54:	699e      	ldr	r6, [r3, #24]
 800ac56:	9400      	str	r4, [sp, #0]
 800ac58:	466b      	mov	r3, sp
 800ac5a:	f88d 4004 	strb.w	r4, [sp, #4]
 800ac5e:	9403      	str	r4, [sp, #12]
 800ac60:	47b0      	blx	r6
 800ac62:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800ac66:	f003 0306 	and.w	r3, r3, #6
 800ac6a:	2b06      	cmp	r3, #6
 800ac6c:	bf09      	itett	eq
 800ac6e:	2001      	moveq	r0, #1
 800ac70:	4620      	movne	r0, r4
 800ac72:	9b00      	ldreq	r3, [sp, #0]
 800ac74:	602b      	streq	r3, [r5, #0]
 800ac76:	b004      	add	sp, #16
 800ac78:	bd70      	pop	{r4, r5, r6, pc}
 800ac7a:	bf00      	nop

0800ac7c <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
 800ac7c:	9800      	ldr	r0, [sp, #0]
 800ac7e:	4290      	cmp	r0, r2
 800ac80:	bf0c      	ite	eq
 800ac82:	2006      	moveq	r0, #6
 800ac84:	2001      	movne	r0, #1
 800ac86:	4770      	bx	lr

0800ac88 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
 800ac88:	b510      	push	{r4, lr}
 800ac8a:	4604      	mov	r4, r0
 800ac8c:	4b02      	ldr	r3, [pc, #8]	; (800ac98 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
 800ac8e:	6003      	str	r3, [r0, #0]
 800ac90:	f000 f854 	bl	800ad3c <_ZNSt9type_infoD1Ev>
 800ac94:	4620      	mov	r0, r4
 800ac96:	bd10      	pop	{r4, pc}
 800ac98:	0800c4ac 	.word	0x0800c4ac

0800ac9c <_ZN10__cxxabiv117__class_type_infoD0Ev>:
 800ac9c:	b510      	push	{r4, lr}
 800ac9e:	4604      	mov	r4, r0
 800aca0:	4b04      	ldr	r3, [pc, #16]	; (800acb4 <_ZN10__cxxabiv117__class_type_infoD0Ev+0x18>)
 800aca2:	6003      	str	r3, [r0, #0]
 800aca4:	f000 f84a 	bl	800ad3c <_ZNSt9type_infoD1Ev>
 800aca8:	4620      	mov	r0, r4
 800acaa:	2108      	movs	r1, #8
 800acac:	f7ff ffc8 	bl	800ac40 <_ZdlPvj>
 800acb0:	4620      	mov	r0, r4
 800acb2:	bd10      	pop	{r4, pc}
 800acb4:	0800c4ac 	.word	0x0800c4ac

0800acb8 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
 800acb8:	b538      	push	{r3, r4, r5, lr}
 800acba:	4615      	mov	r5, r2
 800acbc:	461c      	mov	r4, r3
 800acbe:	f000 f84b 	bl	800ad58 <_ZNKSt9type_infoeqERKS_>
 800acc2:	b120      	cbz	r0, 800acce <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
 800acc4:	2208      	movs	r2, #8
 800acc6:	2306      	movs	r3, #6
 800acc8:	6025      	str	r5, [r4, #0]
 800acca:	60e2      	str	r2, [r4, #12]
 800accc:	7123      	strb	r3, [r4, #4]
 800acce:	bd38      	pop	{r3, r4, r5, pc}

0800acd0 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
 800acd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800acd4:	4617      	mov	r7, r2
 800acd6:	461c      	mov	r4, r3
 800acd8:	4606      	mov	r6, r0
 800acda:	460d      	mov	r5, r1
 800acdc:	f000 f83c 	bl	800ad58 <_ZNKSt9type_infoeqERKS_>
 800ace0:	b908      	cbnz	r0, 800ace6 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x16>
 800ace2:	2c03      	cmp	r4, #3
 800ace4:	d901      	bls.n	800acea <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x1a>
 800ace6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800acea:	682b      	ldr	r3, [r5, #0]
 800acec:	463a      	mov	r2, r7
 800acee:	4631      	mov	r1, r6
 800acf0:	4628      	mov	r0, r5
 800acf2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800acf6:	695b      	ldr	r3, [r3, #20]
 800acf8:	4718      	bx	r3
 800acfa:	bf00      	nop

0800acfc <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
 800acfc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800acfe:	b083      	sub	sp, #12
 800ad00:	9d08      	ldr	r5, [sp, #32]
 800ad02:	990a      	ldr	r1, [sp, #40]	; 0x28
 800ad04:	4617      	mov	r7, r2
 800ad06:	428d      	cmp	r5, r1
 800ad08:	4606      	mov	r6, r0
 800ad0a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800ad0c:	d00b      	beq.n	800ad26 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x2a>
 800ad0e:	4619      	mov	r1, r3
 800ad10:	4630      	mov	r0, r6
 800ad12:	f000 f821 	bl	800ad58 <_ZNKSt9type_infoeqERKS_>
 800ad16:	b118      	cbz	r0, 800ad20 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x24>
 800ad18:	2301      	movs	r3, #1
 800ad1a:	6025      	str	r5, [r4, #0]
 800ad1c:	7127      	strb	r7, [r4, #4]
 800ad1e:	71a3      	strb	r3, [r4, #6]
 800ad20:	2000      	movs	r0, #0
 800ad22:	b003      	add	sp, #12
 800ad24:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ad26:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ad28:	9301      	str	r3, [sp, #4]
 800ad2a:	f000 f815 	bl	800ad58 <_ZNKSt9type_infoeqERKS_>
 800ad2e:	b118      	cbz	r0, 800ad38 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x3c>
 800ad30:	2000      	movs	r0, #0
 800ad32:	7167      	strb	r7, [r4, #5]
 800ad34:	b003      	add	sp, #12
 800ad36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ad38:	9b01      	ldr	r3, [sp, #4]
 800ad3a:	e7e8      	b.n	800ad0e <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x12>

0800ad3c <_ZNSt9type_infoD1Ev>:
 800ad3c:	4770      	bx	lr
 800ad3e:	bf00      	nop

0800ad40 <_ZNKSt9type_info14__is_pointer_pEv>:
 800ad40:	2000      	movs	r0, #0
 800ad42:	4770      	bx	lr

0800ad44 <_ZNKSt9type_info11__do_upcastEPKN10__cxxabiv117__class_type_infoEPPv>:
 800ad44:	2000      	movs	r0, #0
 800ad46:	4770      	bx	lr

0800ad48 <_ZNSt9type_infoD0Ev>:
 800ad48:	b510      	push	{r4, lr}
 800ad4a:	4604      	mov	r4, r0
 800ad4c:	2108      	movs	r1, #8
 800ad4e:	f7ff ff77 	bl	800ac40 <_ZdlPvj>
 800ad52:	4620      	mov	r0, r4
 800ad54:	bd10      	pop	{r4, pc}
 800ad56:	bf00      	nop

0800ad58 <_ZNKSt9type_infoeqERKS_>:
 800ad58:	4281      	cmp	r1, r0
 800ad5a:	d011      	beq.n	800ad80 <_ZNKSt9type_infoeqERKS_+0x28>
 800ad5c:	b508      	push	{r3, lr}
 800ad5e:	6840      	ldr	r0, [r0, #4]
 800ad60:	7803      	ldrb	r3, [r0, #0]
 800ad62:	2b2a      	cmp	r3, #42	; 0x2a
 800ad64:	d00a      	beq.n	800ad7c <_ZNKSt9type_infoeqERKS_+0x24>
 800ad66:	6849      	ldr	r1, [r1, #4]
 800ad68:	780b      	ldrb	r3, [r1, #0]
 800ad6a:	2b2a      	cmp	r3, #42	; 0x2a
 800ad6c:	bf08      	it	eq
 800ad6e:	3101      	addeq	r1, #1
 800ad70:	f7fd f916 	bl	8007fa0 <strcmp>
 800ad74:	fab0 f080 	clz	r0, r0
 800ad78:	0940      	lsrs	r0, r0, #5
 800ad7a:	bd08      	pop	{r3, pc}
 800ad7c:	2000      	movs	r0, #0
 800ad7e:	bd08      	pop	{r3, pc}
 800ad80:	2001      	movs	r0, #1
 800ad82:	4770      	bx	lr

0800ad84 <_ZNKSt9type_info10__do_catchEPKS_PPvj>:
 800ad84:	f7ff bfe8 	b.w	800ad58 <_ZNKSt9type_infoeqERKS_>

0800ad88 <_ZdlPv>:
 800ad88:	f000 b934 	b.w	800aff4 <free>

0800ad8c <sqrt>:
 800ad8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad90:	b08b      	sub	sp, #44	; 0x2c
 800ad92:	4604      	mov	r4, r0
 800ad94:	460d      	mov	r5, r1
 800ad96:	f000 f84d 	bl	800ae34 <__ieee754_sqrt>
 800ad9a:	4b24      	ldr	r3, [pc, #144]	; (800ae2c <sqrt+0xa0>)
 800ad9c:	4680      	mov	r8, r0
 800ad9e:	f993 a000 	ldrsb.w	sl, [r3]
 800ada2:	4689      	mov	r9, r1
 800ada4:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
 800ada8:	d02b      	beq.n	800ae02 <sqrt+0x76>
 800adaa:	4622      	mov	r2, r4
 800adac:	462b      	mov	r3, r5
 800adae:	4620      	mov	r0, r4
 800adb0:	4629      	mov	r1, r5
 800adb2:	f7fd fd59 	bl	8008868 <__aeabi_dcmpun>
 800adb6:	4683      	mov	fp, r0
 800adb8:	bb18      	cbnz	r0, 800ae02 <sqrt+0x76>
 800adba:	2600      	movs	r6, #0
 800adbc:	2700      	movs	r7, #0
 800adbe:	4632      	mov	r2, r6
 800adc0:	463b      	mov	r3, r7
 800adc2:	4620      	mov	r0, r4
 800adc4:	4629      	mov	r1, r5
 800adc6:	f7fd fd27 	bl	8008818 <__aeabi_dcmplt>
 800adca:	b1d0      	cbz	r0, 800ae02 <sqrt+0x76>
 800adcc:	2301      	movs	r3, #1
 800adce:	9300      	str	r3, [sp, #0]
 800add0:	4b17      	ldr	r3, [pc, #92]	; (800ae30 <sqrt+0xa4>)
 800add2:	f8cd b020 	str.w	fp, [sp, #32]
 800add6:	9301      	str	r3, [sp, #4]
 800add8:	e9cd 4504 	strd	r4, r5, [sp, #16]
 800addc:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800ade0:	f1ba 0f00 	cmp.w	sl, #0
 800ade4:	d112      	bne.n	800ae0c <sqrt+0x80>
 800ade6:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800adea:	4668      	mov	r0, sp
 800adec:	f000 f8ce 	bl	800af8c <matherr>
 800adf0:	b1b8      	cbz	r0, 800ae22 <sqrt+0x96>
 800adf2:	9b08      	ldr	r3, [sp, #32]
 800adf4:	b11b      	cbz	r3, 800adfe <sqrt+0x72>
 800adf6:	f000 f8cb 	bl	800af90 <__errno>
 800adfa:	9b08      	ldr	r3, [sp, #32]
 800adfc:	6003      	str	r3, [r0, #0]
 800adfe:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
 800ae02:	4640      	mov	r0, r8
 800ae04:	4649      	mov	r1, r9
 800ae06:	b00b      	add	sp, #44	; 0x2c
 800ae08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae0c:	4632      	mov	r2, r6
 800ae0e:	463b      	mov	r3, r7
 800ae10:	4630      	mov	r0, r6
 800ae12:	4639      	mov	r1, r7
 800ae14:	f7fd fbb8 	bl	8008588 <__aeabi_ddiv>
 800ae18:	f1ba 0f02 	cmp.w	sl, #2
 800ae1c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800ae20:	d1e3      	bne.n	800adea <sqrt+0x5e>
 800ae22:	f000 f8b5 	bl	800af90 <__errno>
 800ae26:	2321      	movs	r3, #33	; 0x21
 800ae28:	6003      	str	r3, [r0, #0]
 800ae2a:	e7e2      	b.n	800adf2 <sqrt+0x66>
 800ae2c:	20000014 	.word	0x20000014
 800ae30:	0800c508 	.word	0x0800c508

0800ae34 <__ieee754_sqrt>:
 800ae34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ae38:	f8df e14c 	ldr.w	lr, [pc, #332]	; 800af88 <__ieee754_sqrt+0x154>
 800ae3c:	4606      	mov	r6, r0
 800ae3e:	ea3e 0e01 	bics.w	lr, lr, r1
 800ae42:	460d      	mov	r5, r1
 800ae44:	4607      	mov	r7, r0
 800ae46:	460a      	mov	r2, r1
 800ae48:	460c      	mov	r4, r1
 800ae4a:	4603      	mov	r3, r0
 800ae4c:	d10f      	bne.n	800ae6e <__ieee754_sqrt+0x3a>
 800ae4e:	4602      	mov	r2, r0
 800ae50:	460b      	mov	r3, r1
 800ae52:	f7fd fa6f 	bl	8008334 <__aeabi_dmul>
 800ae56:	4602      	mov	r2, r0
 800ae58:	460b      	mov	r3, r1
 800ae5a:	4630      	mov	r0, r6
 800ae5c:	4629      	mov	r1, r5
 800ae5e:	f7fd f8b7 	bl	8007fd0 <__adddf3>
 800ae62:	4606      	mov	r6, r0
 800ae64:	460d      	mov	r5, r1
 800ae66:	4630      	mov	r0, r6
 800ae68:	4629      	mov	r1, r5
 800ae6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ae6e:	2900      	cmp	r1, #0
 800ae70:	dc0e      	bgt.n	800ae90 <__ieee754_sqrt+0x5c>
 800ae72:	f021 4e00 	bic.w	lr, r1, #2147483648	; 0x80000000
 800ae76:	ea5e 0707 	orrs.w	r7, lr, r7
 800ae7a:	d0f4      	beq.n	800ae66 <__ieee754_sqrt+0x32>
 800ae7c:	b141      	cbz	r1, 800ae90 <__ieee754_sqrt+0x5c>
 800ae7e:	4602      	mov	r2, r0
 800ae80:	460b      	mov	r3, r1
 800ae82:	f7fd f8a3 	bl	8007fcc <__aeabi_dsub>
 800ae86:	4602      	mov	r2, r0
 800ae88:	460b      	mov	r3, r1
 800ae8a:	f7fd fb7d 	bl	8008588 <__aeabi_ddiv>
 800ae8e:	e7e8      	b.n	800ae62 <__ieee754_sqrt+0x2e>
 800ae90:	1512      	asrs	r2, r2, #20
 800ae92:	d10c      	bne.n	800aeae <__ieee754_sqrt+0x7a>
 800ae94:	2c00      	cmp	r4, #0
 800ae96:	d06e      	beq.n	800af76 <__ieee754_sqrt+0x142>
 800ae98:	2100      	movs	r1, #0
 800ae9a:	02e6      	lsls	r6, r4, #11
 800ae9c:	d56f      	bpl.n	800af7e <__ieee754_sqrt+0x14a>
 800ae9e:	1e48      	subs	r0, r1, #1
 800aea0:	1a12      	subs	r2, r2, r0
 800aea2:	f1c1 0020 	rsb	r0, r1, #32
 800aea6:	fa23 f000 	lsr.w	r0, r3, r0
 800aeaa:	4304      	orrs	r4, r0
 800aeac:	408b      	lsls	r3, r1
 800aeae:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800aeb2:	07d5      	lsls	r5, r2, #31
 800aeb4:	f04f 0500 	mov.w	r5, #0
 800aeb8:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800aebc:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
 800aec0:	bf42      	ittt	mi
 800aec2:	0064      	lslmi	r4, r4, #1
 800aec4:	eb04 74d3 	addmi.w	r4, r4, r3, lsr #31
 800aec8:	005b      	lslmi	r3, r3, #1
 800aeca:	eb04 71d3 	add.w	r1, r4, r3, lsr #31
 800aece:	1050      	asrs	r0, r2, #1
 800aed0:	4421      	add	r1, r4
 800aed2:	2216      	movs	r2, #22
 800aed4:	462c      	mov	r4, r5
 800aed6:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 800aeda:	005b      	lsls	r3, r3, #1
 800aedc:	19a7      	adds	r7, r4, r6
 800aede:	428f      	cmp	r7, r1
 800aee0:	bfde      	ittt	le
 800aee2:	1bc9      	suble	r1, r1, r7
 800aee4:	19bc      	addle	r4, r7, r6
 800aee6:	19ad      	addle	r5, r5, r6
 800aee8:	0049      	lsls	r1, r1, #1
 800aeea:	3a01      	subs	r2, #1
 800aeec:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800aef0:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800aef4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800aef8:	d1f0      	bne.n	800aedc <__ieee754_sqrt+0xa8>
 800aefa:	f04f 0e20 	mov.w	lr, #32
 800aefe:	4694      	mov	ip, r2
 800af00:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800af04:	42a1      	cmp	r1, r4
 800af06:	eb06 070c 	add.w	r7, r6, ip
 800af0a:	dc02      	bgt.n	800af12 <__ieee754_sqrt+0xde>
 800af0c:	d112      	bne.n	800af34 <__ieee754_sqrt+0x100>
 800af0e:	429f      	cmp	r7, r3
 800af10:	d810      	bhi.n	800af34 <__ieee754_sqrt+0x100>
 800af12:	2f00      	cmp	r7, #0
 800af14:	eb07 0c06 	add.w	ip, r7, r6
 800af18:	da34      	bge.n	800af84 <__ieee754_sqrt+0x150>
 800af1a:	f1bc 0f00 	cmp.w	ip, #0
 800af1e:	db31      	blt.n	800af84 <__ieee754_sqrt+0x150>
 800af20:	f104 0801 	add.w	r8, r4, #1
 800af24:	1b09      	subs	r1, r1, r4
 800af26:	4644      	mov	r4, r8
 800af28:	429f      	cmp	r7, r3
 800af2a:	bf88      	it	hi
 800af2c:	f101 31ff 	addhi.w	r1, r1, #4294967295	; 0xffffffff
 800af30:	1bdb      	subs	r3, r3, r7
 800af32:	4432      	add	r2, r6
 800af34:	eb01 77d3 	add.w	r7, r1, r3, lsr #31
 800af38:	f1be 0e01 	subs.w	lr, lr, #1
 800af3c:	4439      	add	r1, r7
 800af3e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800af42:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800af46:	d1dd      	bne.n	800af04 <__ieee754_sqrt+0xd0>
 800af48:	430b      	orrs	r3, r1
 800af4a:	d006      	beq.n	800af5a <__ieee754_sqrt+0x126>
 800af4c:	1c54      	adds	r4, r2, #1
 800af4e:	bf0b      	itete	eq
 800af50:	4672      	moveq	r2, lr
 800af52:	3201      	addne	r2, #1
 800af54:	3501      	addeq	r5, #1
 800af56:	f022 0201 	bicne.w	r2, r2, #1
 800af5a:	106b      	asrs	r3, r5, #1
 800af5c:	0852      	lsrs	r2, r2, #1
 800af5e:	07e9      	lsls	r1, r5, #31
 800af60:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800af64:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800af68:	bf48      	it	mi
 800af6a:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800af6e:	eb03 5500 	add.w	r5, r3, r0, lsl #20
 800af72:	4616      	mov	r6, r2
 800af74:	e777      	b.n	800ae66 <__ieee754_sqrt+0x32>
 800af76:	0adc      	lsrs	r4, r3, #11
 800af78:	3a15      	subs	r2, #21
 800af7a:	055b      	lsls	r3, r3, #21
 800af7c:	e78a      	b.n	800ae94 <__ieee754_sqrt+0x60>
 800af7e:	0064      	lsls	r4, r4, #1
 800af80:	3101      	adds	r1, #1
 800af82:	e78a      	b.n	800ae9a <__ieee754_sqrt+0x66>
 800af84:	46a0      	mov	r8, r4
 800af86:	e7cd      	b.n	800af24 <__ieee754_sqrt+0xf0>
 800af88:	7ff00000 	.word	0x7ff00000

0800af8c <matherr>:
 800af8c:	2000      	movs	r0, #0
 800af8e:	4770      	bx	lr

0800af90 <__errno>:
 800af90:	4b01      	ldr	r3, [pc, #4]	; (800af98 <__errno+0x8>)
 800af92:	6818      	ldr	r0, [r3, #0]
 800af94:	4770      	bx	lr
 800af96:	bf00      	nop
 800af98:	20000018 	.word	0x20000018

0800af9c <__libc_init_array>:
 800af9c:	b570      	push	{r4, r5, r6, lr}
 800af9e:	2500      	movs	r5, #0
 800afa0:	4e0c      	ldr	r6, [pc, #48]	; (800afd4 <__libc_init_array+0x38>)
 800afa2:	4c0d      	ldr	r4, [pc, #52]	; (800afd8 <__libc_init_array+0x3c>)
 800afa4:	1ba4      	subs	r4, r4, r6
 800afa6:	10a4      	asrs	r4, r4, #2
 800afa8:	42a5      	cmp	r5, r4
 800afaa:	d109      	bne.n	800afc0 <__libc_init_array+0x24>
 800afac:	f000 fe70 	bl	800bc90 <_init>
 800afb0:	2500      	movs	r5, #0
 800afb2:	4e0a      	ldr	r6, [pc, #40]	; (800afdc <__libc_init_array+0x40>)
 800afb4:	4c0a      	ldr	r4, [pc, #40]	; (800afe0 <__libc_init_array+0x44>)
 800afb6:	1ba4      	subs	r4, r4, r6
 800afb8:	10a4      	asrs	r4, r4, #2
 800afba:	42a5      	cmp	r5, r4
 800afbc:	d105      	bne.n	800afca <__libc_init_array+0x2e>
 800afbe:	bd70      	pop	{r4, r5, r6, pc}
 800afc0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800afc4:	4798      	blx	r3
 800afc6:	3501      	adds	r5, #1
 800afc8:	e7ee      	b.n	800afa8 <__libc_init_array+0xc>
 800afca:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800afce:	4798      	blx	r3
 800afd0:	3501      	adds	r5, #1
 800afd2:	e7f2      	b.n	800afba <__libc_init_array+0x1e>
 800afd4:	0800c7c4 	.word	0x0800c7c4
 800afd8:	0800c7c4 	.word	0x0800c7c4
 800afdc:	0800c7c4 	.word	0x0800c7c4
 800afe0:	0800c7cc 	.word	0x0800c7cc

0800afe4 <malloc>:
 800afe4:	4b02      	ldr	r3, [pc, #8]	; (800aff0 <malloc+0xc>)
 800afe6:	4601      	mov	r1, r0
 800afe8:	6818      	ldr	r0, [r3, #0]
 800afea:	f000 b80b 	b.w	800b004 <_malloc_r>
 800afee:	bf00      	nop
 800aff0:	20000018 	.word	0x20000018

0800aff4 <free>:
 800aff4:	4b02      	ldr	r3, [pc, #8]	; (800b000 <free+0xc>)
 800aff6:	4601      	mov	r1, r0
 800aff8:	6818      	ldr	r0, [r3, #0]
 800affa:	f000 bc1f 	b.w	800b83c <_free_r>
 800affe:	bf00      	nop
 800b000:	20000018 	.word	0x20000018

0800b004 <_malloc_r>:
 800b004:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b008:	f101 040b 	add.w	r4, r1, #11
 800b00c:	2c16      	cmp	r4, #22
 800b00e:	4681      	mov	r9, r0
 800b010:	d907      	bls.n	800b022 <_malloc_r+0x1e>
 800b012:	f034 0407 	bics.w	r4, r4, #7
 800b016:	d505      	bpl.n	800b024 <_malloc_r+0x20>
 800b018:	230c      	movs	r3, #12
 800b01a:	f8c9 3000 	str.w	r3, [r9]
 800b01e:	2600      	movs	r6, #0
 800b020:	e131      	b.n	800b286 <_malloc_r+0x282>
 800b022:	2410      	movs	r4, #16
 800b024:	428c      	cmp	r4, r1
 800b026:	d3f7      	bcc.n	800b018 <_malloc_r+0x14>
 800b028:	4648      	mov	r0, r9
 800b02a:	f000 fa0b 	bl	800b444 <__malloc_lock>
 800b02e:	f5b4 7ffc 	cmp.w	r4, #504	; 0x1f8
 800b032:	4d9b      	ldr	r5, [pc, #620]	; (800b2a0 <_malloc_r+0x29c>)
 800b034:	d236      	bcs.n	800b0a4 <_malloc_r+0xa0>
 800b036:	f104 0208 	add.w	r2, r4, #8
 800b03a:	442a      	add	r2, r5
 800b03c:	6856      	ldr	r6, [r2, #4]
 800b03e:	f1a2 0108 	sub.w	r1, r2, #8
 800b042:	428e      	cmp	r6, r1
 800b044:	ea4f 03d4 	mov.w	r3, r4, lsr #3
 800b048:	d102      	bne.n	800b050 <_malloc_r+0x4c>
 800b04a:	68d6      	ldr	r6, [r2, #12]
 800b04c:	42b2      	cmp	r2, r6
 800b04e:	d010      	beq.n	800b072 <_malloc_r+0x6e>
 800b050:	6873      	ldr	r3, [r6, #4]
 800b052:	68f2      	ldr	r2, [r6, #12]
 800b054:	68b1      	ldr	r1, [r6, #8]
 800b056:	f023 0303 	bic.w	r3, r3, #3
 800b05a:	60ca      	str	r2, [r1, #12]
 800b05c:	4433      	add	r3, r6
 800b05e:	6091      	str	r1, [r2, #8]
 800b060:	685a      	ldr	r2, [r3, #4]
 800b062:	f042 0201 	orr.w	r2, r2, #1
 800b066:	605a      	str	r2, [r3, #4]
 800b068:	4648      	mov	r0, r9
 800b06a:	f000 f9f1 	bl	800b450 <__malloc_unlock>
 800b06e:	3608      	adds	r6, #8
 800b070:	e109      	b.n	800b286 <_malloc_r+0x282>
 800b072:	3302      	adds	r3, #2
 800b074:	4a8b      	ldr	r2, [pc, #556]	; (800b2a4 <_malloc_r+0x2a0>)
 800b076:	692e      	ldr	r6, [r5, #16]
 800b078:	4611      	mov	r1, r2
 800b07a:	4296      	cmp	r6, r2
 800b07c:	d06d      	beq.n	800b15a <_malloc_r+0x156>
 800b07e:	6870      	ldr	r0, [r6, #4]
 800b080:	f020 0003 	bic.w	r0, r0, #3
 800b084:	1b07      	subs	r7, r0, r4
 800b086:	2f0f      	cmp	r7, #15
 800b088:	dd47      	ble.n	800b11a <_malloc_r+0x116>
 800b08a:	1933      	adds	r3, r6, r4
 800b08c:	f044 0401 	orr.w	r4, r4, #1
 800b090:	6074      	str	r4, [r6, #4]
 800b092:	616b      	str	r3, [r5, #20]
 800b094:	612b      	str	r3, [r5, #16]
 800b096:	60da      	str	r2, [r3, #12]
 800b098:	609a      	str	r2, [r3, #8]
 800b09a:	f047 0201 	orr.w	r2, r7, #1
 800b09e:	605a      	str	r2, [r3, #4]
 800b0a0:	5037      	str	r7, [r6, r0]
 800b0a2:	e7e1      	b.n	800b068 <_malloc_r+0x64>
 800b0a4:	0a63      	lsrs	r3, r4, #9
 800b0a6:	d02a      	beq.n	800b0fe <_malloc_r+0xfa>
 800b0a8:	2b04      	cmp	r3, #4
 800b0aa:	d812      	bhi.n	800b0d2 <_malloc_r+0xce>
 800b0ac:	09a3      	lsrs	r3, r4, #6
 800b0ae:	3338      	adds	r3, #56	; 0x38
 800b0b0:	1c5a      	adds	r2, r3, #1
 800b0b2:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 800b0b6:	6856      	ldr	r6, [r2, #4]
 800b0b8:	f1a2 0008 	sub.w	r0, r2, #8
 800b0bc:	4286      	cmp	r6, r0
 800b0be:	d006      	beq.n	800b0ce <_malloc_r+0xca>
 800b0c0:	6872      	ldr	r2, [r6, #4]
 800b0c2:	f022 0203 	bic.w	r2, r2, #3
 800b0c6:	1b11      	subs	r1, r2, r4
 800b0c8:	290f      	cmp	r1, #15
 800b0ca:	dd1c      	ble.n	800b106 <_malloc_r+0x102>
 800b0cc:	3b01      	subs	r3, #1
 800b0ce:	3301      	adds	r3, #1
 800b0d0:	e7d0      	b.n	800b074 <_malloc_r+0x70>
 800b0d2:	2b14      	cmp	r3, #20
 800b0d4:	d801      	bhi.n	800b0da <_malloc_r+0xd6>
 800b0d6:	335b      	adds	r3, #91	; 0x5b
 800b0d8:	e7ea      	b.n	800b0b0 <_malloc_r+0xac>
 800b0da:	2b54      	cmp	r3, #84	; 0x54
 800b0dc:	d802      	bhi.n	800b0e4 <_malloc_r+0xe0>
 800b0de:	0b23      	lsrs	r3, r4, #12
 800b0e0:	336e      	adds	r3, #110	; 0x6e
 800b0e2:	e7e5      	b.n	800b0b0 <_malloc_r+0xac>
 800b0e4:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 800b0e8:	d802      	bhi.n	800b0f0 <_malloc_r+0xec>
 800b0ea:	0be3      	lsrs	r3, r4, #15
 800b0ec:	3377      	adds	r3, #119	; 0x77
 800b0ee:	e7df      	b.n	800b0b0 <_malloc_r+0xac>
 800b0f0:	f240 5254 	movw	r2, #1364	; 0x554
 800b0f4:	4293      	cmp	r3, r2
 800b0f6:	d804      	bhi.n	800b102 <_malloc_r+0xfe>
 800b0f8:	0ca3      	lsrs	r3, r4, #18
 800b0fa:	337c      	adds	r3, #124	; 0x7c
 800b0fc:	e7d8      	b.n	800b0b0 <_malloc_r+0xac>
 800b0fe:	233f      	movs	r3, #63	; 0x3f
 800b100:	e7d6      	b.n	800b0b0 <_malloc_r+0xac>
 800b102:	237e      	movs	r3, #126	; 0x7e
 800b104:	e7d4      	b.n	800b0b0 <_malloc_r+0xac>
 800b106:	2900      	cmp	r1, #0
 800b108:	68f1      	ldr	r1, [r6, #12]
 800b10a:	db04      	blt.n	800b116 <_malloc_r+0x112>
 800b10c:	68b3      	ldr	r3, [r6, #8]
 800b10e:	60d9      	str	r1, [r3, #12]
 800b110:	608b      	str	r3, [r1, #8]
 800b112:	18b3      	adds	r3, r6, r2
 800b114:	e7a4      	b.n	800b060 <_malloc_r+0x5c>
 800b116:	460e      	mov	r6, r1
 800b118:	e7d0      	b.n	800b0bc <_malloc_r+0xb8>
 800b11a:	2f00      	cmp	r7, #0
 800b11c:	616a      	str	r2, [r5, #20]
 800b11e:	612a      	str	r2, [r5, #16]
 800b120:	db05      	blt.n	800b12e <_malloc_r+0x12a>
 800b122:	4430      	add	r0, r6
 800b124:	6843      	ldr	r3, [r0, #4]
 800b126:	f043 0301 	orr.w	r3, r3, #1
 800b12a:	6043      	str	r3, [r0, #4]
 800b12c:	e79c      	b.n	800b068 <_malloc_r+0x64>
 800b12e:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 800b132:	d244      	bcs.n	800b1be <_malloc_r+0x1ba>
 800b134:	2201      	movs	r2, #1
 800b136:	08c0      	lsrs	r0, r0, #3
 800b138:	1087      	asrs	r7, r0, #2
 800b13a:	fa02 f707 	lsl.w	r7, r2, r7
 800b13e:	686a      	ldr	r2, [r5, #4]
 800b140:	3001      	adds	r0, #1
 800b142:	433a      	orrs	r2, r7
 800b144:	606a      	str	r2, [r5, #4]
 800b146:	f855 7030 	ldr.w	r7, [r5, r0, lsl #3]
 800b14a:	eb05 02c0 	add.w	r2, r5, r0, lsl #3
 800b14e:	3a08      	subs	r2, #8
 800b150:	60f2      	str	r2, [r6, #12]
 800b152:	60b7      	str	r7, [r6, #8]
 800b154:	f845 6030 	str.w	r6, [r5, r0, lsl #3]
 800b158:	60fe      	str	r6, [r7, #12]
 800b15a:	2001      	movs	r0, #1
 800b15c:	109a      	asrs	r2, r3, #2
 800b15e:	fa00 f202 	lsl.w	r2, r0, r2
 800b162:	6868      	ldr	r0, [r5, #4]
 800b164:	4282      	cmp	r2, r0
 800b166:	f200 809f 	bhi.w	800b2a8 <_malloc_r+0x2a4>
 800b16a:	4202      	tst	r2, r0
 800b16c:	d106      	bne.n	800b17c <_malloc_r+0x178>
 800b16e:	f023 0303 	bic.w	r3, r3, #3
 800b172:	0052      	lsls	r2, r2, #1
 800b174:	4202      	tst	r2, r0
 800b176:	f103 0304 	add.w	r3, r3, #4
 800b17a:	d0fa      	beq.n	800b172 <_malloc_r+0x16e>
 800b17c:	eb05 0cc3 	add.w	ip, r5, r3, lsl #3
 800b180:	46e0      	mov	r8, ip
 800b182:	469e      	mov	lr, r3
 800b184:	f8d8 600c 	ldr.w	r6, [r8, #12]
 800b188:	4546      	cmp	r6, r8
 800b18a:	d153      	bne.n	800b234 <_malloc_r+0x230>
 800b18c:	f10e 0e01 	add.w	lr, lr, #1
 800b190:	f01e 0f03 	tst.w	lr, #3
 800b194:	f108 0808 	add.w	r8, r8, #8
 800b198:	d1f4      	bne.n	800b184 <_malloc_r+0x180>
 800b19a:	0798      	lsls	r0, r3, #30
 800b19c:	d179      	bne.n	800b292 <_malloc_r+0x28e>
 800b19e:	686b      	ldr	r3, [r5, #4]
 800b1a0:	ea23 0302 	bic.w	r3, r3, r2
 800b1a4:	606b      	str	r3, [r5, #4]
 800b1a6:	6868      	ldr	r0, [r5, #4]
 800b1a8:	0052      	lsls	r2, r2, #1
 800b1aa:	4282      	cmp	r2, r0
 800b1ac:	d87c      	bhi.n	800b2a8 <_malloc_r+0x2a4>
 800b1ae:	2a00      	cmp	r2, #0
 800b1b0:	d07a      	beq.n	800b2a8 <_malloc_r+0x2a4>
 800b1b2:	4673      	mov	r3, lr
 800b1b4:	4202      	tst	r2, r0
 800b1b6:	d1e1      	bne.n	800b17c <_malloc_r+0x178>
 800b1b8:	3304      	adds	r3, #4
 800b1ba:	0052      	lsls	r2, r2, #1
 800b1bc:	e7fa      	b.n	800b1b4 <_malloc_r+0x1b0>
 800b1be:	0a42      	lsrs	r2, r0, #9
 800b1c0:	2a04      	cmp	r2, #4
 800b1c2:	d815      	bhi.n	800b1f0 <_malloc_r+0x1ec>
 800b1c4:	0982      	lsrs	r2, r0, #6
 800b1c6:	3238      	adds	r2, #56	; 0x38
 800b1c8:	1c57      	adds	r7, r2, #1
 800b1ca:	f855 7037 	ldr.w	r7, [r5, r7, lsl #3]
 800b1ce:	eb05 0ec2 	add.w	lr, r5, r2, lsl #3
 800b1d2:	45be      	cmp	lr, r7
 800b1d4:	d126      	bne.n	800b224 <_malloc_r+0x220>
 800b1d6:	2001      	movs	r0, #1
 800b1d8:	1092      	asrs	r2, r2, #2
 800b1da:	fa00 f202 	lsl.w	r2, r0, r2
 800b1de:	6868      	ldr	r0, [r5, #4]
 800b1e0:	4310      	orrs	r0, r2
 800b1e2:	6068      	str	r0, [r5, #4]
 800b1e4:	f8c6 e00c 	str.w	lr, [r6, #12]
 800b1e8:	60b7      	str	r7, [r6, #8]
 800b1ea:	f8ce 6008 	str.w	r6, [lr, #8]
 800b1ee:	e7b3      	b.n	800b158 <_malloc_r+0x154>
 800b1f0:	2a14      	cmp	r2, #20
 800b1f2:	d801      	bhi.n	800b1f8 <_malloc_r+0x1f4>
 800b1f4:	325b      	adds	r2, #91	; 0x5b
 800b1f6:	e7e7      	b.n	800b1c8 <_malloc_r+0x1c4>
 800b1f8:	2a54      	cmp	r2, #84	; 0x54
 800b1fa:	d802      	bhi.n	800b202 <_malloc_r+0x1fe>
 800b1fc:	0b02      	lsrs	r2, r0, #12
 800b1fe:	326e      	adds	r2, #110	; 0x6e
 800b200:	e7e2      	b.n	800b1c8 <_malloc_r+0x1c4>
 800b202:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 800b206:	d802      	bhi.n	800b20e <_malloc_r+0x20a>
 800b208:	0bc2      	lsrs	r2, r0, #15
 800b20a:	3277      	adds	r2, #119	; 0x77
 800b20c:	e7dc      	b.n	800b1c8 <_malloc_r+0x1c4>
 800b20e:	f240 5754 	movw	r7, #1364	; 0x554
 800b212:	42ba      	cmp	r2, r7
 800b214:	bf9a      	itte	ls
 800b216:	0c82      	lsrls	r2, r0, #18
 800b218:	327c      	addls	r2, #124	; 0x7c
 800b21a:	227e      	movhi	r2, #126	; 0x7e
 800b21c:	e7d4      	b.n	800b1c8 <_malloc_r+0x1c4>
 800b21e:	68bf      	ldr	r7, [r7, #8]
 800b220:	45be      	cmp	lr, r7
 800b222:	d004      	beq.n	800b22e <_malloc_r+0x22a>
 800b224:	687a      	ldr	r2, [r7, #4]
 800b226:	f022 0203 	bic.w	r2, r2, #3
 800b22a:	4290      	cmp	r0, r2
 800b22c:	d3f7      	bcc.n	800b21e <_malloc_r+0x21a>
 800b22e:	f8d7 e00c 	ldr.w	lr, [r7, #12]
 800b232:	e7d7      	b.n	800b1e4 <_malloc_r+0x1e0>
 800b234:	6870      	ldr	r0, [r6, #4]
 800b236:	68f7      	ldr	r7, [r6, #12]
 800b238:	f020 0003 	bic.w	r0, r0, #3
 800b23c:	eba0 0a04 	sub.w	sl, r0, r4
 800b240:	f1ba 0f0f 	cmp.w	sl, #15
 800b244:	dd10      	ble.n	800b268 <_malloc_r+0x264>
 800b246:	68b2      	ldr	r2, [r6, #8]
 800b248:	1933      	adds	r3, r6, r4
 800b24a:	f044 0401 	orr.w	r4, r4, #1
 800b24e:	6074      	str	r4, [r6, #4]
 800b250:	60d7      	str	r7, [r2, #12]
 800b252:	60ba      	str	r2, [r7, #8]
 800b254:	f04a 0201 	orr.w	r2, sl, #1
 800b258:	616b      	str	r3, [r5, #20]
 800b25a:	612b      	str	r3, [r5, #16]
 800b25c:	60d9      	str	r1, [r3, #12]
 800b25e:	6099      	str	r1, [r3, #8]
 800b260:	605a      	str	r2, [r3, #4]
 800b262:	f846 a000 	str.w	sl, [r6, r0]
 800b266:	e6ff      	b.n	800b068 <_malloc_r+0x64>
 800b268:	f1ba 0f00 	cmp.w	sl, #0
 800b26c:	db0f      	blt.n	800b28e <_malloc_r+0x28a>
 800b26e:	4430      	add	r0, r6
 800b270:	6843      	ldr	r3, [r0, #4]
 800b272:	f043 0301 	orr.w	r3, r3, #1
 800b276:	6043      	str	r3, [r0, #4]
 800b278:	f856 3f08 	ldr.w	r3, [r6, #8]!
 800b27c:	4648      	mov	r0, r9
 800b27e:	60df      	str	r7, [r3, #12]
 800b280:	60bb      	str	r3, [r7, #8]
 800b282:	f000 f8e5 	bl	800b450 <__malloc_unlock>
 800b286:	4630      	mov	r0, r6
 800b288:	b003      	add	sp, #12
 800b28a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b28e:	463e      	mov	r6, r7
 800b290:	e77a      	b.n	800b188 <_malloc_r+0x184>
 800b292:	f85c 0908 	ldr.w	r0, [ip], #-8
 800b296:	3b01      	subs	r3, #1
 800b298:	4584      	cmp	ip, r0
 800b29a:	f43f af7e 	beq.w	800b19a <_malloc_r+0x196>
 800b29e:	e782      	b.n	800b1a6 <_malloc_r+0x1a2>
 800b2a0:	2000010c 	.word	0x2000010c
 800b2a4:	20000114 	.word	0x20000114
 800b2a8:	f8d5 b008 	ldr.w	fp, [r5, #8]
 800b2ac:	f8db 6004 	ldr.w	r6, [fp, #4]
 800b2b0:	f026 0603 	bic.w	r6, r6, #3
 800b2b4:	42b4      	cmp	r4, r6
 800b2b6:	d803      	bhi.n	800b2c0 <_malloc_r+0x2bc>
 800b2b8:	1b33      	subs	r3, r6, r4
 800b2ba:	2b0f      	cmp	r3, #15
 800b2bc:	f300 8095 	bgt.w	800b3ea <_malloc_r+0x3e6>
 800b2c0:	4a4f      	ldr	r2, [pc, #316]	; (800b400 <_malloc_r+0x3fc>)
 800b2c2:	eb0b 0306 	add.w	r3, fp, r6
 800b2c6:	6817      	ldr	r7, [r2, #0]
 800b2c8:	4a4e      	ldr	r2, [pc, #312]	; (800b404 <_malloc_r+0x400>)
 800b2ca:	3710      	adds	r7, #16
 800b2cc:	6811      	ldr	r1, [r2, #0]
 800b2ce:	4427      	add	r7, r4
 800b2d0:	3101      	adds	r1, #1
 800b2d2:	d005      	beq.n	800b2e0 <_malloc_r+0x2dc>
 800b2d4:	494c      	ldr	r1, [pc, #304]	; (800b408 <_malloc_r+0x404>)
 800b2d6:	3901      	subs	r1, #1
 800b2d8:	440f      	add	r7, r1
 800b2da:	3101      	adds	r1, #1
 800b2dc:	4249      	negs	r1, r1
 800b2de:	400f      	ands	r7, r1
 800b2e0:	4639      	mov	r1, r7
 800b2e2:	4648      	mov	r0, r9
 800b2e4:	9201      	str	r2, [sp, #4]
 800b2e6:	9300      	str	r3, [sp, #0]
 800b2e8:	f000 fa42 	bl	800b770 <_sbrk_r>
 800b2ec:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800b2f0:	4680      	mov	r8, r0
 800b2f2:	d055      	beq.n	800b3a0 <_malloc_r+0x39c>
 800b2f4:	9b00      	ldr	r3, [sp, #0]
 800b2f6:	9a01      	ldr	r2, [sp, #4]
 800b2f8:	4283      	cmp	r3, r0
 800b2fa:	d901      	bls.n	800b300 <_malloc_r+0x2fc>
 800b2fc:	45ab      	cmp	fp, r5
 800b2fe:	d14f      	bne.n	800b3a0 <_malloc_r+0x39c>
 800b300:	4842      	ldr	r0, [pc, #264]	; (800b40c <_malloc_r+0x408>)
 800b302:	4543      	cmp	r3, r8
 800b304:	6801      	ldr	r1, [r0, #0]
 800b306:	4682      	mov	sl, r0
 800b308:	eb07 0e01 	add.w	lr, r7, r1
 800b30c:	f8c0 e000 	str.w	lr, [r0]
 800b310:	493f      	ldr	r1, [pc, #252]	; (800b410 <_malloc_r+0x40c>)
 800b312:	d113      	bne.n	800b33c <_malloc_r+0x338>
 800b314:	420b      	tst	r3, r1
 800b316:	d111      	bne.n	800b33c <_malloc_r+0x338>
 800b318:	68ab      	ldr	r3, [r5, #8]
 800b31a:	443e      	add	r6, r7
 800b31c:	f046 0601 	orr.w	r6, r6, #1
 800b320:	605e      	str	r6, [r3, #4]
 800b322:	4a3c      	ldr	r2, [pc, #240]	; (800b414 <_malloc_r+0x410>)
 800b324:	f8da 3000 	ldr.w	r3, [sl]
 800b328:	6811      	ldr	r1, [r2, #0]
 800b32a:	428b      	cmp	r3, r1
 800b32c:	bf88      	it	hi
 800b32e:	6013      	strhi	r3, [r2, #0]
 800b330:	4a39      	ldr	r2, [pc, #228]	; (800b418 <_malloc_r+0x414>)
 800b332:	6811      	ldr	r1, [r2, #0]
 800b334:	428b      	cmp	r3, r1
 800b336:	bf88      	it	hi
 800b338:	6013      	strhi	r3, [r2, #0]
 800b33a:	e031      	b.n	800b3a0 <_malloc_r+0x39c>
 800b33c:	6810      	ldr	r0, [r2, #0]
 800b33e:	3001      	adds	r0, #1
 800b340:	bf1b      	ittet	ne
 800b342:	eba8 0303 	subne.w	r3, r8, r3
 800b346:	4473      	addne	r3, lr
 800b348:	f8c2 8000 	streq.w	r8, [r2]
 800b34c:	f8ca 3000 	strne.w	r3, [sl]
 800b350:	f018 0007 	ands.w	r0, r8, #7
 800b354:	bf1c      	itt	ne
 800b356:	f1c0 0008 	rsbne	r0, r0, #8
 800b35a:	4480      	addne	r8, r0
 800b35c:	4b2a      	ldr	r3, [pc, #168]	; (800b408 <_malloc_r+0x404>)
 800b35e:	4447      	add	r7, r8
 800b360:	4418      	add	r0, r3
 800b362:	400f      	ands	r7, r1
 800b364:	1bc7      	subs	r7, r0, r7
 800b366:	4639      	mov	r1, r7
 800b368:	4648      	mov	r0, r9
 800b36a:	f000 fa01 	bl	800b770 <_sbrk_r>
 800b36e:	1c43      	adds	r3, r0, #1
 800b370:	bf04      	itt	eq
 800b372:	4640      	moveq	r0, r8
 800b374:	2700      	moveq	r7, #0
 800b376:	f8da 3000 	ldr.w	r3, [sl]
 800b37a:	eba0 0008 	sub.w	r0, r0, r8
 800b37e:	443b      	add	r3, r7
 800b380:	4407      	add	r7, r0
 800b382:	f047 0701 	orr.w	r7, r7, #1
 800b386:	45ab      	cmp	fp, r5
 800b388:	f8c5 8008 	str.w	r8, [r5, #8]
 800b38c:	f8ca 3000 	str.w	r3, [sl]
 800b390:	f8c8 7004 	str.w	r7, [r8, #4]
 800b394:	d0c5      	beq.n	800b322 <_malloc_r+0x31e>
 800b396:	2e0f      	cmp	r6, #15
 800b398:	d810      	bhi.n	800b3bc <_malloc_r+0x3b8>
 800b39a:	2301      	movs	r3, #1
 800b39c:	f8c8 3004 	str.w	r3, [r8, #4]
 800b3a0:	68ab      	ldr	r3, [r5, #8]
 800b3a2:	685a      	ldr	r2, [r3, #4]
 800b3a4:	f022 0203 	bic.w	r2, r2, #3
 800b3a8:	4294      	cmp	r4, r2
 800b3aa:	eba2 0304 	sub.w	r3, r2, r4
 800b3ae:	d801      	bhi.n	800b3b4 <_malloc_r+0x3b0>
 800b3b0:	2b0f      	cmp	r3, #15
 800b3b2:	dc1a      	bgt.n	800b3ea <_malloc_r+0x3e6>
 800b3b4:	4648      	mov	r0, r9
 800b3b6:	f000 f84b 	bl	800b450 <__malloc_unlock>
 800b3ba:	e630      	b.n	800b01e <_malloc_r+0x1a>
 800b3bc:	2205      	movs	r2, #5
 800b3be:	f8db 3004 	ldr.w	r3, [fp, #4]
 800b3c2:	3e0c      	subs	r6, #12
 800b3c4:	f026 0607 	bic.w	r6, r6, #7
 800b3c8:	f003 0301 	and.w	r3, r3, #1
 800b3cc:	4333      	orrs	r3, r6
 800b3ce:	f8cb 3004 	str.w	r3, [fp, #4]
 800b3d2:	2e0f      	cmp	r6, #15
 800b3d4:	eb0b 0306 	add.w	r3, fp, r6
 800b3d8:	605a      	str	r2, [r3, #4]
 800b3da:	609a      	str	r2, [r3, #8]
 800b3dc:	d9a1      	bls.n	800b322 <_malloc_r+0x31e>
 800b3de:	f10b 0108 	add.w	r1, fp, #8
 800b3e2:	4648      	mov	r0, r9
 800b3e4:	f000 fa2a 	bl	800b83c <_free_r>
 800b3e8:	e79b      	b.n	800b322 <_malloc_r+0x31e>
 800b3ea:	68ae      	ldr	r6, [r5, #8]
 800b3ec:	f044 0201 	orr.w	r2, r4, #1
 800b3f0:	f043 0301 	orr.w	r3, r3, #1
 800b3f4:	4434      	add	r4, r6
 800b3f6:	6072      	str	r2, [r6, #4]
 800b3f8:	60ac      	str	r4, [r5, #8]
 800b3fa:	6063      	str	r3, [r4, #4]
 800b3fc:	e634      	b.n	800b068 <_malloc_r+0x64>
 800b3fe:	bf00      	nop
 800b400:	20001bdc 	.word	0x20001bdc
 800b404:	20000514 	.word	0x20000514
 800b408:	00001000 	.word	0x00001000
 800b40c:	20001bac 	.word	0x20001bac
 800b410:	00000fff 	.word	0x00000fff
 800b414:	20001bd4 	.word	0x20001bd4
 800b418:	20001bd8 	.word	0x20001bd8

0800b41c <memcpy>:
 800b41c:	b510      	push	{r4, lr}
 800b41e:	1e43      	subs	r3, r0, #1
 800b420:	440a      	add	r2, r1
 800b422:	4291      	cmp	r1, r2
 800b424:	d100      	bne.n	800b428 <memcpy+0xc>
 800b426:	bd10      	pop	{r4, pc}
 800b428:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b42c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b430:	e7f7      	b.n	800b422 <memcpy+0x6>

0800b432 <memset>:
 800b432:	4603      	mov	r3, r0
 800b434:	4402      	add	r2, r0
 800b436:	4293      	cmp	r3, r2
 800b438:	d100      	bne.n	800b43c <memset+0xa>
 800b43a:	4770      	bx	lr
 800b43c:	f803 1b01 	strb.w	r1, [r3], #1
 800b440:	e7f9      	b.n	800b436 <memset+0x4>
	...

0800b444 <__malloc_lock>:
 800b444:	4801      	ldr	r0, [pc, #4]	; (800b44c <__malloc_lock+0x8>)
 800b446:	f000 baba 	b.w	800b9be <__retarget_lock_acquire_recursive>
 800b44a:	bf00      	nop
 800b44c:	20001c0c 	.word	0x20001c0c

0800b450 <__malloc_unlock>:
 800b450:	4801      	ldr	r0, [pc, #4]	; (800b458 <__malloc_unlock+0x8>)
 800b452:	f000 baba 	b.w	800b9ca <__retarget_lock_release_recursive>
 800b456:	bf00      	nop
 800b458:	20001c0c 	.word	0x20001c0c

0800b45c <realloc>:
 800b45c:	4b02      	ldr	r3, [pc, #8]	; (800b468 <realloc+0xc>)
 800b45e:	460a      	mov	r2, r1
 800b460:	4601      	mov	r1, r0
 800b462:	6818      	ldr	r0, [r3, #0]
 800b464:	f000 b802 	b.w	800b46c <_realloc_r>
 800b468:	20000018 	.word	0x20000018

0800b46c <_realloc_r>:
 800b46c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b470:	4682      	mov	sl, r0
 800b472:	460c      	mov	r4, r1
 800b474:	b929      	cbnz	r1, 800b482 <_realloc_r+0x16>
 800b476:	4611      	mov	r1, r2
 800b478:	b003      	add	sp, #12
 800b47a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b47e:	f7ff bdc1 	b.w	800b004 <_malloc_r>
 800b482:	9201      	str	r2, [sp, #4]
 800b484:	f7ff ffde 	bl	800b444 <__malloc_lock>
 800b488:	9a01      	ldr	r2, [sp, #4]
 800b48a:	f854 5c04 	ldr.w	r5, [r4, #-4]
 800b48e:	f102 080b 	add.w	r8, r2, #11
 800b492:	f1b8 0f16 	cmp.w	r8, #22
 800b496:	f1a4 0908 	sub.w	r9, r4, #8
 800b49a:	f025 0603 	bic.w	r6, r5, #3
 800b49e:	d90a      	bls.n	800b4b6 <_realloc_r+0x4a>
 800b4a0:	f038 0807 	bics.w	r8, r8, #7
 800b4a4:	d509      	bpl.n	800b4ba <_realloc_r+0x4e>
 800b4a6:	230c      	movs	r3, #12
 800b4a8:	2700      	movs	r7, #0
 800b4aa:	f8ca 3000 	str.w	r3, [sl]
 800b4ae:	4638      	mov	r0, r7
 800b4b0:	b003      	add	sp, #12
 800b4b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b4b6:	f04f 0810 	mov.w	r8, #16
 800b4ba:	4590      	cmp	r8, r2
 800b4bc:	d3f3      	bcc.n	800b4a6 <_realloc_r+0x3a>
 800b4be:	45b0      	cmp	r8, r6
 800b4c0:	f340 8148 	ble.w	800b754 <_realloc_r+0x2e8>
 800b4c4:	4ba9      	ldr	r3, [pc, #676]	; (800b76c <_realloc_r+0x300>)
 800b4c6:	eb09 0106 	add.w	r1, r9, r6
 800b4ca:	f8d3 e008 	ldr.w	lr, [r3, #8]
 800b4ce:	469b      	mov	fp, r3
 800b4d0:	4571      	cmp	r1, lr
 800b4d2:	684b      	ldr	r3, [r1, #4]
 800b4d4:	d005      	beq.n	800b4e2 <_realloc_r+0x76>
 800b4d6:	f023 0001 	bic.w	r0, r3, #1
 800b4da:	4408      	add	r0, r1
 800b4dc:	6840      	ldr	r0, [r0, #4]
 800b4de:	07c7      	lsls	r7, r0, #31
 800b4e0:	d447      	bmi.n	800b572 <_realloc_r+0x106>
 800b4e2:	f023 0303 	bic.w	r3, r3, #3
 800b4e6:	4571      	cmp	r1, lr
 800b4e8:	eb06 0703 	add.w	r7, r6, r3
 800b4ec:	d119      	bne.n	800b522 <_realloc_r+0xb6>
 800b4ee:	f108 0010 	add.w	r0, r8, #16
 800b4f2:	4287      	cmp	r7, r0
 800b4f4:	db3f      	blt.n	800b576 <_realloc_r+0x10a>
 800b4f6:	eba7 0708 	sub.w	r7, r7, r8
 800b4fa:	eb09 0308 	add.w	r3, r9, r8
 800b4fe:	f047 0701 	orr.w	r7, r7, #1
 800b502:	f8cb 3008 	str.w	r3, [fp, #8]
 800b506:	605f      	str	r7, [r3, #4]
 800b508:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800b50c:	4650      	mov	r0, sl
 800b50e:	f003 0301 	and.w	r3, r3, #1
 800b512:	ea43 0308 	orr.w	r3, r3, r8
 800b516:	f844 3c04 	str.w	r3, [r4, #-4]
 800b51a:	f7ff ff99 	bl	800b450 <__malloc_unlock>
 800b51e:	4627      	mov	r7, r4
 800b520:	e7c5      	b.n	800b4ae <_realloc_r+0x42>
 800b522:	45b8      	cmp	r8, r7
 800b524:	dc27      	bgt.n	800b576 <_realloc_r+0x10a>
 800b526:	68cb      	ldr	r3, [r1, #12]
 800b528:	688a      	ldr	r2, [r1, #8]
 800b52a:	60d3      	str	r3, [r2, #12]
 800b52c:	609a      	str	r2, [r3, #8]
 800b52e:	eba7 0008 	sub.w	r0, r7, r8
 800b532:	280f      	cmp	r0, #15
 800b534:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800b538:	eb09 0207 	add.w	r2, r9, r7
 800b53c:	f240 810c 	bls.w	800b758 <_realloc_r+0x2ec>
 800b540:	f003 0301 	and.w	r3, r3, #1
 800b544:	eb09 0108 	add.w	r1, r9, r8
 800b548:	ea43 0308 	orr.w	r3, r3, r8
 800b54c:	f040 0001 	orr.w	r0, r0, #1
 800b550:	f8c9 3004 	str.w	r3, [r9, #4]
 800b554:	6048      	str	r0, [r1, #4]
 800b556:	6853      	ldr	r3, [r2, #4]
 800b558:	3108      	adds	r1, #8
 800b55a:	f043 0301 	orr.w	r3, r3, #1
 800b55e:	6053      	str	r3, [r2, #4]
 800b560:	4650      	mov	r0, sl
 800b562:	f000 f96b 	bl	800b83c <_free_r>
 800b566:	4650      	mov	r0, sl
 800b568:	f7ff ff72 	bl	800b450 <__malloc_unlock>
 800b56c:	f109 0708 	add.w	r7, r9, #8
 800b570:	e79d      	b.n	800b4ae <_realloc_r+0x42>
 800b572:	2300      	movs	r3, #0
 800b574:	4619      	mov	r1, r3
 800b576:	07e8      	lsls	r0, r5, #31
 800b578:	f100 8085 	bmi.w	800b686 <_realloc_r+0x21a>
 800b57c:	f854 5c08 	ldr.w	r5, [r4, #-8]
 800b580:	eba9 0505 	sub.w	r5, r9, r5
 800b584:	6868      	ldr	r0, [r5, #4]
 800b586:	f020 0003 	bic.w	r0, r0, #3
 800b58a:	4430      	add	r0, r6
 800b58c:	2900      	cmp	r1, #0
 800b58e:	d077      	beq.n	800b680 <_realloc_r+0x214>
 800b590:	4571      	cmp	r1, lr
 800b592:	d151      	bne.n	800b638 <_realloc_r+0x1cc>
 800b594:	4403      	add	r3, r0
 800b596:	f108 0110 	add.w	r1, r8, #16
 800b59a:	428b      	cmp	r3, r1
 800b59c:	db70      	blt.n	800b680 <_realloc_r+0x214>
 800b59e:	462f      	mov	r7, r5
 800b5a0:	68ea      	ldr	r2, [r5, #12]
 800b5a2:	f857 1f08 	ldr.w	r1, [r7, #8]!
 800b5a6:	60ca      	str	r2, [r1, #12]
 800b5a8:	6091      	str	r1, [r2, #8]
 800b5aa:	1f32      	subs	r2, r6, #4
 800b5ac:	2a24      	cmp	r2, #36	; 0x24
 800b5ae:	d83c      	bhi.n	800b62a <_realloc_r+0x1be>
 800b5b0:	2a13      	cmp	r2, #19
 800b5b2:	d937      	bls.n	800b624 <_realloc_r+0x1b8>
 800b5b4:	6821      	ldr	r1, [r4, #0]
 800b5b6:	2a1b      	cmp	r2, #27
 800b5b8:	60a9      	str	r1, [r5, #8]
 800b5ba:	6861      	ldr	r1, [r4, #4]
 800b5bc:	60e9      	str	r1, [r5, #12]
 800b5be:	d81c      	bhi.n	800b5fa <_realloc_r+0x18e>
 800b5c0:	f105 0210 	add.w	r2, r5, #16
 800b5c4:	f104 0108 	add.w	r1, r4, #8
 800b5c8:	6808      	ldr	r0, [r1, #0]
 800b5ca:	6010      	str	r0, [r2, #0]
 800b5cc:	6848      	ldr	r0, [r1, #4]
 800b5ce:	6050      	str	r0, [r2, #4]
 800b5d0:	6889      	ldr	r1, [r1, #8]
 800b5d2:	6091      	str	r1, [r2, #8]
 800b5d4:	eba3 0308 	sub.w	r3, r3, r8
 800b5d8:	eb05 0208 	add.w	r2, r5, r8
 800b5dc:	f043 0301 	orr.w	r3, r3, #1
 800b5e0:	f8cb 2008 	str.w	r2, [fp, #8]
 800b5e4:	6053      	str	r3, [r2, #4]
 800b5e6:	686b      	ldr	r3, [r5, #4]
 800b5e8:	f003 0301 	and.w	r3, r3, #1
 800b5ec:	ea43 0308 	orr.w	r3, r3, r8
 800b5f0:	606b      	str	r3, [r5, #4]
 800b5f2:	4650      	mov	r0, sl
 800b5f4:	f7ff ff2c 	bl	800b450 <__malloc_unlock>
 800b5f8:	e759      	b.n	800b4ae <_realloc_r+0x42>
 800b5fa:	68a1      	ldr	r1, [r4, #8]
 800b5fc:	2a24      	cmp	r2, #36	; 0x24
 800b5fe:	6129      	str	r1, [r5, #16]
 800b600:	68e1      	ldr	r1, [r4, #12]
 800b602:	bf18      	it	ne
 800b604:	f105 0218 	addne.w	r2, r5, #24
 800b608:	6169      	str	r1, [r5, #20]
 800b60a:	bf09      	itett	eq
 800b60c:	6922      	ldreq	r2, [r4, #16]
 800b60e:	f104 0110 	addne.w	r1, r4, #16
 800b612:	61aa      	streq	r2, [r5, #24]
 800b614:	6960      	ldreq	r0, [r4, #20]
 800b616:	bf02      	ittt	eq
 800b618:	f105 0220 	addeq.w	r2, r5, #32
 800b61c:	f104 0118 	addeq.w	r1, r4, #24
 800b620:	61e8      	streq	r0, [r5, #28]
 800b622:	e7d1      	b.n	800b5c8 <_realloc_r+0x15c>
 800b624:	463a      	mov	r2, r7
 800b626:	4621      	mov	r1, r4
 800b628:	e7ce      	b.n	800b5c8 <_realloc_r+0x15c>
 800b62a:	4621      	mov	r1, r4
 800b62c:	4638      	mov	r0, r7
 800b62e:	9301      	str	r3, [sp, #4]
 800b630:	f000 f9cc 	bl	800b9cc <memmove>
 800b634:	9b01      	ldr	r3, [sp, #4]
 800b636:	e7cd      	b.n	800b5d4 <_realloc_r+0x168>
 800b638:	18c7      	adds	r7, r0, r3
 800b63a:	45b8      	cmp	r8, r7
 800b63c:	dc20      	bgt.n	800b680 <_realloc_r+0x214>
 800b63e:	68cb      	ldr	r3, [r1, #12]
 800b640:	688a      	ldr	r2, [r1, #8]
 800b642:	60d3      	str	r3, [r2, #12]
 800b644:	609a      	str	r2, [r3, #8]
 800b646:	4628      	mov	r0, r5
 800b648:	68eb      	ldr	r3, [r5, #12]
 800b64a:	f850 2f08 	ldr.w	r2, [r0, #8]!
 800b64e:	60d3      	str	r3, [r2, #12]
 800b650:	609a      	str	r2, [r3, #8]
 800b652:	1f32      	subs	r2, r6, #4
 800b654:	2a24      	cmp	r2, #36	; 0x24
 800b656:	d843      	bhi.n	800b6e0 <_realloc_r+0x274>
 800b658:	2a13      	cmp	r2, #19
 800b65a:	d93f      	bls.n	800b6dc <_realloc_r+0x270>
 800b65c:	6823      	ldr	r3, [r4, #0]
 800b65e:	2a1b      	cmp	r2, #27
 800b660:	60ab      	str	r3, [r5, #8]
 800b662:	6863      	ldr	r3, [r4, #4]
 800b664:	60eb      	str	r3, [r5, #12]
 800b666:	d824      	bhi.n	800b6b2 <_realloc_r+0x246>
 800b668:	f105 0010 	add.w	r0, r5, #16
 800b66c:	f104 0308 	add.w	r3, r4, #8
 800b670:	681a      	ldr	r2, [r3, #0]
 800b672:	6002      	str	r2, [r0, #0]
 800b674:	685a      	ldr	r2, [r3, #4]
 800b676:	6042      	str	r2, [r0, #4]
 800b678:	689b      	ldr	r3, [r3, #8]
 800b67a:	6083      	str	r3, [r0, #8]
 800b67c:	46a9      	mov	r9, r5
 800b67e:	e756      	b.n	800b52e <_realloc_r+0xc2>
 800b680:	4580      	cmp	r8, r0
 800b682:	4607      	mov	r7, r0
 800b684:	dddf      	ble.n	800b646 <_realloc_r+0x1da>
 800b686:	4611      	mov	r1, r2
 800b688:	4650      	mov	r0, sl
 800b68a:	f7ff fcbb 	bl	800b004 <_malloc_r>
 800b68e:	4607      	mov	r7, r0
 800b690:	2800      	cmp	r0, #0
 800b692:	d0ae      	beq.n	800b5f2 <_realloc_r+0x186>
 800b694:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800b698:	f1a0 0208 	sub.w	r2, r0, #8
 800b69c:	f023 0301 	bic.w	r3, r3, #1
 800b6a0:	444b      	add	r3, r9
 800b6a2:	429a      	cmp	r2, r3
 800b6a4:	d120      	bne.n	800b6e8 <_realloc_r+0x27c>
 800b6a6:	f850 7c04 	ldr.w	r7, [r0, #-4]
 800b6aa:	f027 0703 	bic.w	r7, r7, #3
 800b6ae:	4437      	add	r7, r6
 800b6b0:	e73d      	b.n	800b52e <_realloc_r+0xc2>
 800b6b2:	68a3      	ldr	r3, [r4, #8]
 800b6b4:	2a24      	cmp	r2, #36	; 0x24
 800b6b6:	612b      	str	r3, [r5, #16]
 800b6b8:	68e3      	ldr	r3, [r4, #12]
 800b6ba:	bf18      	it	ne
 800b6bc:	f105 0018 	addne.w	r0, r5, #24
 800b6c0:	616b      	str	r3, [r5, #20]
 800b6c2:	bf09      	itett	eq
 800b6c4:	6923      	ldreq	r3, [r4, #16]
 800b6c6:	f104 0310 	addne.w	r3, r4, #16
 800b6ca:	61ab      	streq	r3, [r5, #24]
 800b6cc:	6962      	ldreq	r2, [r4, #20]
 800b6ce:	bf02      	ittt	eq
 800b6d0:	f105 0020 	addeq.w	r0, r5, #32
 800b6d4:	f104 0318 	addeq.w	r3, r4, #24
 800b6d8:	61ea      	streq	r2, [r5, #28]
 800b6da:	e7c9      	b.n	800b670 <_realloc_r+0x204>
 800b6dc:	4623      	mov	r3, r4
 800b6de:	e7c7      	b.n	800b670 <_realloc_r+0x204>
 800b6e0:	4621      	mov	r1, r4
 800b6e2:	f000 f973 	bl	800b9cc <memmove>
 800b6e6:	e7c9      	b.n	800b67c <_realloc_r+0x210>
 800b6e8:	1f32      	subs	r2, r6, #4
 800b6ea:	2a24      	cmp	r2, #36	; 0x24
 800b6ec:	d82e      	bhi.n	800b74c <_realloc_r+0x2e0>
 800b6ee:	2a13      	cmp	r2, #19
 800b6f0:	d929      	bls.n	800b746 <_realloc_r+0x2da>
 800b6f2:	6823      	ldr	r3, [r4, #0]
 800b6f4:	2a1b      	cmp	r2, #27
 800b6f6:	6003      	str	r3, [r0, #0]
 800b6f8:	6863      	ldr	r3, [r4, #4]
 800b6fa:	6043      	str	r3, [r0, #4]
 800b6fc:	d80e      	bhi.n	800b71c <_realloc_r+0x2b0>
 800b6fe:	f100 0308 	add.w	r3, r0, #8
 800b702:	f104 0208 	add.w	r2, r4, #8
 800b706:	6811      	ldr	r1, [r2, #0]
 800b708:	6019      	str	r1, [r3, #0]
 800b70a:	6851      	ldr	r1, [r2, #4]
 800b70c:	6059      	str	r1, [r3, #4]
 800b70e:	6892      	ldr	r2, [r2, #8]
 800b710:	609a      	str	r2, [r3, #8]
 800b712:	4621      	mov	r1, r4
 800b714:	4650      	mov	r0, sl
 800b716:	f000 f891 	bl	800b83c <_free_r>
 800b71a:	e76a      	b.n	800b5f2 <_realloc_r+0x186>
 800b71c:	68a3      	ldr	r3, [r4, #8]
 800b71e:	2a24      	cmp	r2, #36	; 0x24
 800b720:	6083      	str	r3, [r0, #8]
 800b722:	68e3      	ldr	r3, [r4, #12]
 800b724:	bf18      	it	ne
 800b726:	f104 0210 	addne.w	r2, r4, #16
 800b72a:	60c3      	str	r3, [r0, #12]
 800b72c:	bf09      	itett	eq
 800b72e:	6923      	ldreq	r3, [r4, #16]
 800b730:	f100 0310 	addne.w	r3, r0, #16
 800b734:	6103      	streq	r3, [r0, #16]
 800b736:	6961      	ldreq	r1, [r4, #20]
 800b738:	bf02      	ittt	eq
 800b73a:	f100 0318 	addeq.w	r3, r0, #24
 800b73e:	f104 0218 	addeq.w	r2, r4, #24
 800b742:	6141      	streq	r1, [r0, #20]
 800b744:	e7df      	b.n	800b706 <_realloc_r+0x29a>
 800b746:	4603      	mov	r3, r0
 800b748:	4622      	mov	r2, r4
 800b74a:	e7dc      	b.n	800b706 <_realloc_r+0x29a>
 800b74c:	4621      	mov	r1, r4
 800b74e:	f000 f93d 	bl	800b9cc <memmove>
 800b752:	e7de      	b.n	800b712 <_realloc_r+0x2a6>
 800b754:	4637      	mov	r7, r6
 800b756:	e6ea      	b.n	800b52e <_realloc_r+0xc2>
 800b758:	f003 0301 	and.w	r3, r3, #1
 800b75c:	431f      	orrs	r7, r3
 800b75e:	f8c9 7004 	str.w	r7, [r9, #4]
 800b762:	6853      	ldr	r3, [r2, #4]
 800b764:	f043 0301 	orr.w	r3, r3, #1
 800b768:	6053      	str	r3, [r2, #4]
 800b76a:	e6fc      	b.n	800b566 <_realloc_r+0xfa>
 800b76c:	2000010c 	.word	0x2000010c

0800b770 <_sbrk_r>:
 800b770:	b538      	push	{r3, r4, r5, lr}
 800b772:	2300      	movs	r3, #0
 800b774:	4c05      	ldr	r4, [pc, #20]	; (800b78c <_sbrk_r+0x1c>)
 800b776:	4605      	mov	r5, r0
 800b778:	4608      	mov	r0, r1
 800b77a:	6023      	str	r3, [r4, #0]
 800b77c:	f000 fa76 	bl	800bc6c <_sbrk>
 800b780:	1c43      	adds	r3, r0, #1
 800b782:	d102      	bne.n	800b78a <_sbrk_r+0x1a>
 800b784:	6823      	ldr	r3, [r4, #0]
 800b786:	b103      	cbz	r3, 800b78a <_sbrk_r+0x1a>
 800b788:	602b      	str	r3, [r5, #0]
 800b78a:	bd38      	pop	{r3, r4, r5, pc}
 800b78c:	20001c14 	.word	0x20001c14

0800b790 <_malloc_trim_r>:
 800b790:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b794:	4689      	mov	r9, r1
 800b796:	4f25      	ldr	r7, [pc, #148]	; (800b82c <_malloc_trim_r+0x9c>)
 800b798:	4606      	mov	r6, r0
 800b79a:	f7ff fe53 	bl	800b444 <__malloc_lock>
 800b79e:	68bb      	ldr	r3, [r7, #8]
 800b7a0:	f8df 8094 	ldr.w	r8, [pc, #148]	; 800b838 <_malloc_trim_r+0xa8>
 800b7a4:	685d      	ldr	r5, [r3, #4]
 800b7a6:	f1a8 0411 	sub.w	r4, r8, #17
 800b7aa:	f025 0503 	bic.w	r5, r5, #3
 800b7ae:	eba4 0409 	sub.w	r4, r4, r9
 800b7b2:	442c      	add	r4, r5
 800b7b4:	fbb4 f4f8 	udiv	r4, r4, r8
 800b7b8:	3c01      	subs	r4, #1
 800b7ba:	fb08 f404 	mul.w	r4, r8, r4
 800b7be:	4544      	cmp	r4, r8
 800b7c0:	da05      	bge.n	800b7ce <_malloc_trim_r+0x3e>
 800b7c2:	4630      	mov	r0, r6
 800b7c4:	f7ff fe44 	bl	800b450 <__malloc_unlock>
 800b7c8:	2000      	movs	r0, #0
 800b7ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b7ce:	2100      	movs	r1, #0
 800b7d0:	4630      	mov	r0, r6
 800b7d2:	f7ff ffcd 	bl	800b770 <_sbrk_r>
 800b7d6:	68bb      	ldr	r3, [r7, #8]
 800b7d8:	442b      	add	r3, r5
 800b7da:	4298      	cmp	r0, r3
 800b7dc:	d1f1      	bne.n	800b7c2 <_malloc_trim_r+0x32>
 800b7de:	4261      	negs	r1, r4
 800b7e0:	4630      	mov	r0, r6
 800b7e2:	f7ff ffc5 	bl	800b770 <_sbrk_r>
 800b7e6:	3001      	adds	r0, #1
 800b7e8:	d110      	bne.n	800b80c <_malloc_trim_r+0x7c>
 800b7ea:	2100      	movs	r1, #0
 800b7ec:	4630      	mov	r0, r6
 800b7ee:	f7ff ffbf 	bl	800b770 <_sbrk_r>
 800b7f2:	68ba      	ldr	r2, [r7, #8]
 800b7f4:	1a83      	subs	r3, r0, r2
 800b7f6:	2b0f      	cmp	r3, #15
 800b7f8:	dde3      	ble.n	800b7c2 <_malloc_trim_r+0x32>
 800b7fa:	490d      	ldr	r1, [pc, #52]	; (800b830 <_malloc_trim_r+0xa0>)
 800b7fc:	f043 0301 	orr.w	r3, r3, #1
 800b800:	6809      	ldr	r1, [r1, #0]
 800b802:	6053      	str	r3, [r2, #4]
 800b804:	1a40      	subs	r0, r0, r1
 800b806:	490b      	ldr	r1, [pc, #44]	; (800b834 <_malloc_trim_r+0xa4>)
 800b808:	6008      	str	r0, [r1, #0]
 800b80a:	e7da      	b.n	800b7c2 <_malloc_trim_r+0x32>
 800b80c:	68bb      	ldr	r3, [r7, #8]
 800b80e:	4a09      	ldr	r2, [pc, #36]	; (800b834 <_malloc_trim_r+0xa4>)
 800b810:	1b2d      	subs	r5, r5, r4
 800b812:	f045 0501 	orr.w	r5, r5, #1
 800b816:	605d      	str	r5, [r3, #4]
 800b818:	6813      	ldr	r3, [r2, #0]
 800b81a:	4630      	mov	r0, r6
 800b81c:	1b1c      	subs	r4, r3, r4
 800b81e:	6014      	str	r4, [r2, #0]
 800b820:	f7ff fe16 	bl	800b450 <__malloc_unlock>
 800b824:	2001      	movs	r0, #1
 800b826:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b82a:	bf00      	nop
 800b82c:	2000010c 	.word	0x2000010c
 800b830:	20000514 	.word	0x20000514
 800b834:	20001bac 	.word	0x20001bac
 800b838:	00001000 	.word	0x00001000

0800b83c <_free_r>:
 800b83c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b840:	4604      	mov	r4, r0
 800b842:	4688      	mov	r8, r1
 800b844:	2900      	cmp	r1, #0
 800b846:	f000 80ab 	beq.w	800b9a0 <_free_r+0x164>
 800b84a:	f7ff fdfb 	bl	800b444 <__malloc_lock>
 800b84e:	f858 2c04 	ldr.w	r2, [r8, #-4]
 800b852:	4d54      	ldr	r5, [pc, #336]	; (800b9a4 <_free_r+0x168>)
 800b854:	f022 0001 	bic.w	r0, r2, #1
 800b858:	f1a8 0308 	sub.w	r3, r8, #8
 800b85c:	181f      	adds	r7, r3, r0
 800b85e:	68a9      	ldr	r1, [r5, #8]
 800b860:	687e      	ldr	r6, [r7, #4]
 800b862:	428f      	cmp	r7, r1
 800b864:	f026 0603 	bic.w	r6, r6, #3
 800b868:	f002 0201 	and.w	r2, r2, #1
 800b86c:	d11b      	bne.n	800b8a6 <_free_r+0x6a>
 800b86e:	4430      	add	r0, r6
 800b870:	b93a      	cbnz	r2, 800b882 <_free_r+0x46>
 800b872:	f858 2c08 	ldr.w	r2, [r8, #-8]
 800b876:	1a9b      	subs	r3, r3, r2
 800b878:	6899      	ldr	r1, [r3, #8]
 800b87a:	4410      	add	r0, r2
 800b87c:	68da      	ldr	r2, [r3, #12]
 800b87e:	60ca      	str	r2, [r1, #12]
 800b880:	6091      	str	r1, [r2, #8]
 800b882:	f040 0201 	orr.w	r2, r0, #1
 800b886:	605a      	str	r2, [r3, #4]
 800b888:	60ab      	str	r3, [r5, #8]
 800b88a:	4b47      	ldr	r3, [pc, #284]	; (800b9a8 <_free_r+0x16c>)
 800b88c:	681b      	ldr	r3, [r3, #0]
 800b88e:	4298      	cmp	r0, r3
 800b890:	d304      	bcc.n	800b89c <_free_r+0x60>
 800b892:	4b46      	ldr	r3, [pc, #280]	; (800b9ac <_free_r+0x170>)
 800b894:	4620      	mov	r0, r4
 800b896:	6819      	ldr	r1, [r3, #0]
 800b898:	f7ff ff7a 	bl	800b790 <_malloc_trim_r>
 800b89c:	4620      	mov	r0, r4
 800b89e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b8a2:	f7ff bdd5 	b.w	800b450 <__malloc_unlock>
 800b8a6:	607e      	str	r6, [r7, #4]
 800b8a8:	2a00      	cmp	r2, #0
 800b8aa:	d139      	bne.n	800b920 <_free_r+0xe4>
 800b8ac:	f858 1c08 	ldr.w	r1, [r8, #-8]
 800b8b0:	f105 0e08 	add.w	lr, r5, #8
 800b8b4:	1a5b      	subs	r3, r3, r1
 800b8b6:	4408      	add	r0, r1
 800b8b8:	6899      	ldr	r1, [r3, #8]
 800b8ba:	4571      	cmp	r1, lr
 800b8bc:	d032      	beq.n	800b924 <_free_r+0xe8>
 800b8be:	f8d3 e00c 	ldr.w	lr, [r3, #12]
 800b8c2:	f8c1 e00c 	str.w	lr, [r1, #12]
 800b8c6:	f8ce 1008 	str.w	r1, [lr, #8]
 800b8ca:	19b9      	adds	r1, r7, r6
 800b8cc:	6849      	ldr	r1, [r1, #4]
 800b8ce:	07c9      	lsls	r1, r1, #31
 800b8d0:	d40a      	bmi.n	800b8e8 <_free_r+0xac>
 800b8d2:	4430      	add	r0, r6
 800b8d4:	68b9      	ldr	r1, [r7, #8]
 800b8d6:	bb3a      	cbnz	r2, 800b928 <_free_r+0xec>
 800b8d8:	4e35      	ldr	r6, [pc, #212]	; (800b9b0 <_free_r+0x174>)
 800b8da:	42b1      	cmp	r1, r6
 800b8dc:	d124      	bne.n	800b928 <_free_r+0xec>
 800b8de:	2201      	movs	r2, #1
 800b8e0:	616b      	str	r3, [r5, #20]
 800b8e2:	612b      	str	r3, [r5, #16]
 800b8e4:	60d9      	str	r1, [r3, #12]
 800b8e6:	6099      	str	r1, [r3, #8]
 800b8e8:	f040 0101 	orr.w	r1, r0, #1
 800b8ec:	6059      	str	r1, [r3, #4]
 800b8ee:	5018      	str	r0, [r3, r0]
 800b8f0:	2a00      	cmp	r2, #0
 800b8f2:	d1d3      	bne.n	800b89c <_free_r+0x60>
 800b8f4:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 800b8f8:	d21a      	bcs.n	800b930 <_free_r+0xf4>
 800b8fa:	2201      	movs	r2, #1
 800b8fc:	08c0      	lsrs	r0, r0, #3
 800b8fe:	1081      	asrs	r1, r0, #2
 800b900:	408a      	lsls	r2, r1
 800b902:	6869      	ldr	r1, [r5, #4]
 800b904:	3001      	adds	r0, #1
 800b906:	430a      	orrs	r2, r1
 800b908:	606a      	str	r2, [r5, #4]
 800b90a:	f855 1030 	ldr.w	r1, [r5, r0, lsl #3]
 800b90e:	eb05 02c0 	add.w	r2, r5, r0, lsl #3
 800b912:	3a08      	subs	r2, #8
 800b914:	60da      	str	r2, [r3, #12]
 800b916:	6099      	str	r1, [r3, #8]
 800b918:	f845 3030 	str.w	r3, [r5, r0, lsl #3]
 800b91c:	60cb      	str	r3, [r1, #12]
 800b91e:	e7bd      	b.n	800b89c <_free_r+0x60>
 800b920:	2200      	movs	r2, #0
 800b922:	e7d2      	b.n	800b8ca <_free_r+0x8e>
 800b924:	2201      	movs	r2, #1
 800b926:	e7d0      	b.n	800b8ca <_free_r+0x8e>
 800b928:	68fe      	ldr	r6, [r7, #12]
 800b92a:	60ce      	str	r6, [r1, #12]
 800b92c:	60b1      	str	r1, [r6, #8]
 800b92e:	e7db      	b.n	800b8e8 <_free_r+0xac>
 800b930:	0a42      	lsrs	r2, r0, #9
 800b932:	2a04      	cmp	r2, #4
 800b934:	d813      	bhi.n	800b95e <_free_r+0x122>
 800b936:	0982      	lsrs	r2, r0, #6
 800b938:	3238      	adds	r2, #56	; 0x38
 800b93a:	1c51      	adds	r1, r2, #1
 800b93c:	f855 1031 	ldr.w	r1, [r5, r1, lsl #3]
 800b940:	eb05 06c2 	add.w	r6, r5, r2, lsl #3
 800b944:	428e      	cmp	r6, r1
 800b946:	d124      	bne.n	800b992 <_free_r+0x156>
 800b948:	2001      	movs	r0, #1
 800b94a:	1092      	asrs	r2, r2, #2
 800b94c:	fa00 f202 	lsl.w	r2, r0, r2
 800b950:	6868      	ldr	r0, [r5, #4]
 800b952:	4302      	orrs	r2, r0
 800b954:	606a      	str	r2, [r5, #4]
 800b956:	60de      	str	r6, [r3, #12]
 800b958:	6099      	str	r1, [r3, #8]
 800b95a:	60b3      	str	r3, [r6, #8]
 800b95c:	e7de      	b.n	800b91c <_free_r+0xe0>
 800b95e:	2a14      	cmp	r2, #20
 800b960:	d801      	bhi.n	800b966 <_free_r+0x12a>
 800b962:	325b      	adds	r2, #91	; 0x5b
 800b964:	e7e9      	b.n	800b93a <_free_r+0xfe>
 800b966:	2a54      	cmp	r2, #84	; 0x54
 800b968:	d802      	bhi.n	800b970 <_free_r+0x134>
 800b96a:	0b02      	lsrs	r2, r0, #12
 800b96c:	326e      	adds	r2, #110	; 0x6e
 800b96e:	e7e4      	b.n	800b93a <_free_r+0xfe>
 800b970:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 800b974:	d802      	bhi.n	800b97c <_free_r+0x140>
 800b976:	0bc2      	lsrs	r2, r0, #15
 800b978:	3277      	adds	r2, #119	; 0x77
 800b97a:	e7de      	b.n	800b93a <_free_r+0xfe>
 800b97c:	f240 5154 	movw	r1, #1364	; 0x554
 800b980:	428a      	cmp	r2, r1
 800b982:	bf9a      	itte	ls
 800b984:	0c82      	lsrls	r2, r0, #18
 800b986:	327c      	addls	r2, #124	; 0x7c
 800b988:	227e      	movhi	r2, #126	; 0x7e
 800b98a:	e7d6      	b.n	800b93a <_free_r+0xfe>
 800b98c:	6889      	ldr	r1, [r1, #8]
 800b98e:	428e      	cmp	r6, r1
 800b990:	d004      	beq.n	800b99c <_free_r+0x160>
 800b992:	684a      	ldr	r2, [r1, #4]
 800b994:	f022 0203 	bic.w	r2, r2, #3
 800b998:	4290      	cmp	r0, r2
 800b99a:	d3f7      	bcc.n	800b98c <_free_r+0x150>
 800b99c:	68ce      	ldr	r6, [r1, #12]
 800b99e:	e7da      	b.n	800b956 <_free_r+0x11a>
 800b9a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b9a4:	2000010c 	.word	0x2000010c
 800b9a8:	20000518 	.word	0x20000518
 800b9ac:	20001bdc 	.word	0x20001bdc
 800b9b0:	20000114 	.word	0x20000114

0800b9b4 <__retarget_lock_init>:
 800b9b4:	4770      	bx	lr

0800b9b6 <__retarget_lock_init_recursive>:
 800b9b6:	4770      	bx	lr

0800b9b8 <__retarget_lock_close>:
 800b9b8:	4770      	bx	lr

0800b9ba <__retarget_lock_close_recursive>:
 800b9ba:	4770      	bx	lr

0800b9bc <__retarget_lock_acquire>:
 800b9bc:	4770      	bx	lr

0800b9be <__retarget_lock_acquire_recursive>:
 800b9be:	4770      	bx	lr

0800b9c0 <__retarget_lock_try_acquire>:
 800b9c0:	2001      	movs	r0, #1
 800b9c2:	4770      	bx	lr

0800b9c4 <__retarget_lock_try_acquire_recursive>:
 800b9c4:	2001      	movs	r0, #1
 800b9c6:	4770      	bx	lr

0800b9c8 <__retarget_lock_release>:
 800b9c8:	4770      	bx	lr

0800b9ca <__retarget_lock_release_recursive>:
 800b9ca:	4770      	bx	lr

0800b9cc <memmove>:
 800b9cc:	4288      	cmp	r0, r1
 800b9ce:	b510      	push	{r4, lr}
 800b9d0:	eb01 0302 	add.w	r3, r1, r2
 800b9d4:	d803      	bhi.n	800b9de <memmove+0x12>
 800b9d6:	1e42      	subs	r2, r0, #1
 800b9d8:	4299      	cmp	r1, r3
 800b9da:	d10c      	bne.n	800b9f6 <memmove+0x2a>
 800b9dc:	bd10      	pop	{r4, pc}
 800b9de:	4298      	cmp	r0, r3
 800b9e0:	d2f9      	bcs.n	800b9d6 <memmove+0xa>
 800b9e2:	1881      	adds	r1, r0, r2
 800b9e4:	1ad2      	subs	r2, r2, r3
 800b9e6:	42d3      	cmn	r3, r2
 800b9e8:	d100      	bne.n	800b9ec <memmove+0x20>
 800b9ea:	bd10      	pop	{r4, pc}
 800b9ec:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b9f0:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800b9f4:	e7f7      	b.n	800b9e6 <memmove+0x1a>
 800b9f6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b9fa:	f802 4f01 	strb.w	r4, [r2, #1]!
 800b9fe:	e7eb      	b.n	800b9d8 <memmove+0xc>

0800ba00 <cleanup_glue>:
 800ba00:	b538      	push	{r3, r4, r5, lr}
 800ba02:	460c      	mov	r4, r1
 800ba04:	6809      	ldr	r1, [r1, #0]
 800ba06:	4605      	mov	r5, r0
 800ba08:	b109      	cbz	r1, 800ba0e <cleanup_glue+0xe>
 800ba0a:	f7ff fff9 	bl	800ba00 <cleanup_glue>
 800ba0e:	4621      	mov	r1, r4
 800ba10:	4628      	mov	r0, r5
 800ba12:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ba16:	f7ff bf11 	b.w	800b83c <_free_r>
	...

0800ba1c <_reclaim_reent>:
 800ba1c:	4b31      	ldr	r3, [pc, #196]	; (800bae4 <_reclaim_reent+0xc8>)
 800ba1e:	b570      	push	{r4, r5, r6, lr}
 800ba20:	681b      	ldr	r3, [r3, #0]
 800ba22:	4604      	mov	r4, r0
 800ba24:	4283      	cmp	r3, r0
 800ba26:	d05c      	beq.n	800bae2 <_reclaim_reent+0xc6>
 800ba28:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800ba2a:	b1ab      	cbz	r3, 800ba58 <_reclaim_reent+0x3c>
 800ba2c:	68db      	ldr	r3, [r3, #12]
 800ba2e:	b16b      	cbz	r3, 800ba4c <_reclaim_reent+0x30>
 800ba30:	2500      	movs	r5, #0
 800ba32:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ba34:	68db      	ldr	r3, [r3, #12]
 800ba36:	5959      	ldr	r1, [r3, r5]
 800ba38:	2900      	cmp	r1, #0
 800ba3a:	d14c      	bne.n	800bad6 <_reclaim_reent+0xba>
 800ba3c:	3504      	adds	r5, #4
 800ba3e:	2d80      	cmp	r5, #128	; 0x80
 800ba40:	d1f7      	bne.n	800ba32 <_reclaim_reent+0x16>
 800ba42:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ba44:	4620      	mov	r0, r4
 800ba46:	68d9      	ldr	r1, [r3, #12]
 800ba48:	f7ff fef8 	bl	800b83c <_free_r>
 800ba4c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ba4e:	6819      	ldr	r1, [r3, #0]
 800ba50:	b111      	cbz	r1, 800ba58 <_reclaim_reent+0x3c>
 800ba52:	4620      	mov	r0, r4
 800ba54:	f7ff fef2 	bl	800b83c <_free_r>
 800ba58:	6961      	ldr	r1, [r4, #20]
 800ba5a:	b111      	cbz	r1, 800ba62 <_reclaim_reent+0x46>
 800ba5c:	4620      	mov	r0, r4
 800ba5e:	f7ff feed 	bl	800b83c <_free_r>
 800ba62:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800ba64:	b111      	cbz	r1, 800ba6c <_reclaim_reent+0x50>
 800ba66:	4620      	mov	r0, r4
 800ba68:	f7ff fee8 	bl	800b83c <_free_r>
 800ba6c:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800ba6e:	b111      	cbz	r1, 800ba76 <_reclaim_reent+0x5a>
 800ba70:	4620      	mov	r0, r4
 800ba72:	f7ff fee3 	bl	800b83c <_free_r>
 800ba76:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800ba78:	b111      	cbz	r1, 800ba80 <_reclaim_reent+0x64>
 800ba7a:	4620      	mov	r0, r4
 800ba7c:	f7ff fede 	bl	800b83c <_free_r>
 800ba80:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800ba82:	b111      	cbz	r1, 800ba8a <_reclaim_reent+0x6e>
 800ba84:	4620      	mov	r0, r4
 800ba86:	f7ff fed9 	bl	800b83c <_free_r>
 800ba8a:	f8d4 10ec 	ldr.w	r1, [r4, #236]	; 0xec
 800ba8e:	b111      	cbz	r1, 800ba96 <_reclaim_reent+0x7a>
 800ba90:	4620      	mov	r0, r4
 800ba92:	f7ff fed3 	bl	800b83c <_free_r>
 800ba96:	f8d4 10e8 	ldr.w	r1, [r4, #232]	; 0xe8
 800ba9a:	b111      	cbz	r1, 800baa2 <_reclaim_reent+0x86>
 800ba9c:	4620      	mov	r0, r4
 800ba9e:	f7ff fecd 	bl	800b83c <_free_r>
 800baa2:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800baa4:	b12b      	cbz	r3, 800bab2 <_reclaim_reent+0x96>
 800baa6:	f8d3 1088 	ldr.w	r1, [r3, #136]	; 0x88
 800baaa:	b111      	cbz	r1, 800bab2 <_reclaim_reent+0x96>
 800baac:	4620      	mov	r0, r4
 800baae:	f7ff fec5 	bl	800b83c <_free_r>
 800bab2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bab4:	b111      	cbz	r1, 800babc <_reclaim_reent+0xa0>
 800bab6:	4620      	mov	r0, r4
 800bab8:	f7ff fec0 	bl	800b83c <_free_r>
 800babc:	69a3      	ldr	r3, [r4, #24]
 800babe:	b183      	cbz	r3, 800bae2 <_reclaim_reent+0xc6>
 800bac0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800bac2:	4620      	mov	r0, r4
 800bac4:	4798      	blx	r3
 800bac6:	f8d4 10d8 	ldr.w	r1, [r4, #216]	; 0xd8
 800baca:	b151      	cbz	r1, 800bae2 <_reclaim_reent+0xc6>
 800bacc:	4620      	mov	r0, r4
 800bace:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800bad2:	f7ff bf95 	b.w	800ba00 <cleanup_glue>
 800bad6:	680e      	ldr	r6, [r1, #0]
 800bad8:	4620      	mov	r0, r4
 800bada:	f7ff feaf 	bl	800b83c <_free_r>
 800bade:	4631      	mov	r1, r6
 800bae0:	e7aa      	b.n	800ba38 <_reclaim_reent+0x1c>
 800bae2:	bd70      	pop	{r4, r5, r6, pc}
 800bae4:	20000018 	.word	0x20000018

0800bae8 <abort>:
 800bae8:	b508      	push	{r3, lr}
 800baea:	2006      	movs	r0, #6
 800baec:	f000 f87c 	bl	800bbe8 <raise>
 800baf0:	2001      	movs	r0, #1
 800baf2:	f000 f8c9 	bl	800bc88 <_exit>

0800baf6 <_init_signal_r>:
 800baf6:	b538      	push	{r3, r4, r5, lr}
 800baf8:	6c44      	ldr	r4, [r0, #68]	; 0x44
 800bafa:	4605      	mov	r5, r0
 800bafc:	b10c      	cbz	r4, 800bb02 <_init_signal_r+0xc>
 800bafe:	2000      	movs	r0, #0
 800bb00:	bd38      	pop	{r3, r4, r5, pc}
 800bb02:	2180      	movs	r1, #128	; 0x80
 800bb04:	f7ff fa7e 	bl	800b004 <_malloc_r>
 800bb08:	6468      	str	r0, [r5, #68]	; 0x44
 800bb0a:	b130      	cbz	r0, 800bb1a <_init_signal_r+0x24>
 800bb0c:	1f03      	subs	r3, r0, #4
 800bb0e:	307c      	adds	r0, #124	; 0x7c
 800bb10:	f843 4f04 	str.w	r4, [r3, #4]!
 800bb14:	4283      	cmp	r3, r0
 800bb16:	d1fb      	bne.n	800bb10 <_init_signal_r+0x1a>
 800bb18:	e7f1      	b.n	800bafe <_init_signal_r+0x8>
 800bb1a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bb1e:	bd38      	pop	{r3, r4, r5, pc}

0800bb20 <_signal_r>:
 800bb20:	291f      	cmp	r1, #31
 800bb22:	b570      	push	{r4, r5, r6, lr}
 800bb24:	4604      	mov	r4, r0
 800bb26:	460d      	mov	r5, r1
 800bb28:	4616      	mov	r6, r2
 800bb2a:	d904      	bls.n	800bb36 <_signal_r+0x16>
 800bb2c:	2316      	movs	r3, #22
 800bb2e:	6003      	str	r3, [r0, #0]
 800bb30:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bb34:	bd70      	pop	{r4, r5, r6, pc}
 800bb36:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800bb38:	b12b      	cbz	r3, 800bb46 <_signal_r+0x26>
 800bb3a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800bb3c:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800bb40:	f843 6025 	str.w	r6, [r3, r5, lsl #2]
 800bb44:	bd70      	pop	{r4, r5, r6, pc}
 800bb46:	f7ff ffd6 	bl	800baf6 <_init_signal_r>
 800bb4a:	2800      	cmp	r0, #0
 800bb4c:	d0f5      	beq.n	800bb3a <_signal_r+0x1a>
 800bb4e:	e7ef      	b.n	800bb30 <_signal_r+0x10>

0800bb50 <_raise_r>:
 800bb50:	291f      	cmp	r1, #31
 800bb52:	b538      	push	{r3, r4, r5, lr}
 800bb54:	4604      	mov	r4, r0
 800bb56:	460d      	mov	r5, r1
 800bb58:	d904      	bls.n	800bb64 <_raise_r+0x14>
 800bb5a:	2316      	movs	r3, #22
 800bb5c:	6003      	str	r3, [r0, #0]
 800bb5e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bb62:	bd38      	pop	{r3, r4, r5, pc}
 800bb64:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800bb66:	b112      	cbz	r2, 800bb6e <_raise_r+0x1e>
 800bb68:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800bb6c:	b94b      	cbnz	r3, 800bb82 <_raise_r+0x32>
 800bb6e:	4620      	mov	r0, r4
 800bb70:	f000 f86a 	bl	800bc48 <_getpid_r>
 800bb74:	462a      	mov	r2, r5
 800bb76:	4601      	mov	r1, r0
 800bb78:	4620      	mov	r0, r4
 800bb7a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bb7e:	f000 b851 	b.w	800bc24 <_kill_r>
 800bb82:	2b01      	cmp	r3, #1
 800bb84:	d00a      	beq.n	800bb9c <_raise_r+0x4c>
 800bb86:	1c59      	adds	r1, r3, #1
 800bb88:	d103      	bne.n	800bb92 <_raise_r+0x42>
 800bb8a:	2316      	movs	r3, #22
 800bb8c:	6003      	str	r3, [r0, #0]
 800bb8e:	2001      	movs	r0, #1
 800bb90:	bd38      	pop	{r3, r4, r5, pc}
 800bb92:	2400      	movs	r4, #0
 800bb94:	4628      	mov	r0, r5
 800bb96:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800bb9a:	4798      	blx	r3
 800bb9c:	2000      	movs	r0, #0
 800bb9e:	bd38      	pop	{r3, r4, r5, pc}

0800bba0 <__sigtramp_r>:
 800bba0:	291f      	cmp	r1, #31
 800bba2:	b538      	push	{r3, r4, r5, lr}
 800bba4:	4604      	mov	r4, r0
 800bba6:	460d      	mov	r5, r1
 800bba8:	d902      	bls.n	800bbb0 <__sigtramp_r+0x10>
 800bbaa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bbae:	bd38      	pop	{r3, r4, r5, pc}
 800bbb0:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800bbb2:	b12b      	cbz	r3, 800bbc0 <__sigtramp_r+0x20>
 800bbb4:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800bbb6:	f852 3025 	ldr.w	r3, [r2, r5, lsl #2]
 800bbba:	b933      	cbnz	r3, 800bbca <__sigtramp_r+0x2a>
 800bbbc:	2001      	movs	r0, #1
 800bbbe:	bd38      	pop	{r3, r4, r5, pc}
 800bbc0:	f7ff ff99 	bl	800baf6 <_init_signal_r>
 800bbc4:	2800      	cmp	r0, #0
 800bbc6:	d0f5      	beq.n	800bbb4 <__sigtramp_r+0x14>
 800bbc8:	e7ef      	b.n	800bbaa <__sigtramp_r+0xa>
 800bbca:	1c59      	adds	r1, r3, #1
 800bbcc:	d008      	beq.n	800bbe0 <__sigtramp_r+0x40>
 800bbce:	2b01      	cmp	r3, #1
 800bbd0:	d008      	beq.n	800bbe4 <__sigtramp_r+0x44>
 800bbd2:	2400      	movs	r4, #0
 800bbd4:	4628      	mov	r0, r5
 800bbd6:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800bbda:	4798      	blx	r3
 800bbdc:	4620      	mov	r0, r4
 800bbde:	bd38      	pop	{r3, r4, r5, pc}
 800bbe0:	2002      	movs	r0, #2
 800bbe2:	bd38      	pop	{r3, r4, r5, pc}
 800bbe4:	2003      	movs	r0, #3
 800bbe6:	bd38      	pop	{r3, r4, r5, pc}

0800bbe8 <raise>:
 800bbe8:	4b02      	ldr	r3, [pc, #8]	; (800bbf4 <raise+0xc>)
 800bbea:	4601      	mov	r1, r0
 800bbec:	6818      	ldr	r0, [r3, #0]
 800bbee:	f7ff bfaf 	b.w	800bb50 <_raise_r>
 800bbf2:	bf00      	nop
 800bbf4:	20000018 	.word	0x20000018

0800bbf8 <signal>:
 800bbf8:	4b02      	ldr	r3, [pc, #8]	; (800bc04 <signal+0xc>)
 800bbfa:	460a      	mov	r2, r1
 800bbfc:	4601      	mov	r1, r0
 800bbfe:	6818      	ldr	r0, [r3, #0]
 800bc00:	f7ff bf8e 	b.w	800bb20 <_signal_r>
 800bc04:	20000018 	.word	0x20000018

0800bc08 <_init_signal>:
 800bc08:	4b01      	ldr	r3, [pc, #4]	; (800bc10 <_init_signal+0x8>)
 800bc0a:	6818      	ldr	r0, [r3, #0]
 800bc0c:	f7ff bf73 	b.w	800baf6 <_init_signal_r>
 800bc10:	20000018 	.word	0x20000018

0800bc14 <__sigtramp>:
 800bc14:	4b02      	ldr	r3, [pc, #8]	; (800bc20 <__sigtramp+0xc>)
 800bc16:	4601      	mov	r1, r0
 800bc18:	6818      	ldr	r0, [r3, #0]
 800bc1a:	f7ff bfc1 	b.w	800bba0 <__sigtramp_r>
 800bc1e:	bf00      	nop
 800bc20:	20000018 	.word	0x20000018

0800bc24 <_kill_r>:
 800bc24:	b538      	push	{r3, r4, r5, lr}
 800bc26:	2300      	movs	r3, #0
 800bc28:	4c06      	ldr	r4, [pc, #24]	; (800bc44 <_kill_r+0x20>)
 800bc2a:	4605      	mov	r5, r0
 800bc2c:	4608      	mov	r0, r1
 800bc2e:	4611      	mov	r1, r2
 800bc30:	6023      	str	r3, [r4, #0]
 800bc32:	f000 f813 	bl	800bc5c <_kill>
 800bc36:	1c43      	adds	r3, r0, #1
 800bc38:	d102      	bne.n	800bc40 <_kill_r+0x1c>
 800bc3a:	6823      	ldr	r3, [r4, #0]
 800bc3c:	b103      	cbz	r3, 800bc40 <_kill_r+0x1c>
 800bc3e:	602b      	str	r3, [r5, #0]
 800bc40:	bd38      	pop	{r3, r4, r5, pc}
 800bc42:	bf00      	nop
 800bc44:	20001c14 	.word	0x20001c14

0800bc48 <_getpid_r>:
 800bc48:	f000 b800 	b.w	800bc4c <_getpid>

0800bc4c <_getpid>:
 800bc4c:	2258      	movs	r2, #88	; 0x58
 800bc4e:	4b02      	ldr	r3, [pc, #8]	; (800bc58 <_getpid+0xc>)
 800bc50:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bc54:	601a      	str	r2, [r3, #0]
 800bc56:	4770      	bx	lr
 800bc58:	20001c14 	.word	0x20001c14

0800bc5c <_kill>:
 800bc5c:	2258      	movs	r2, #88	; 0x58
 800bc5e:	4b02      	ldr	r3, [pc, #8]	; (800bc68 <_kill+0xc>)
 800bc60:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bc64:	601a      	str	r2, [r3, #0]
 800bc66:	4770      	bx	lr
 800bc68:	20001c14 	.word	0x20001c14

0800bc6c <_sbrk>:
 800bc6c:	4b04      	ldr	r3, [pc, #16]	; (800bc80 <_sbrk+0x14>)
 800bc6e:	4602      	mov	r2, r0
 800bc70:	6819      	ldr	r1, [r3, #0]
 800bc72:	b909      	cbnz	r1, 800bc78 <_sbrk+0xc>
 800bc74:	4903      	ldr	r1, [pc, #12]	; (800bc84 <_sbrk+0x18>)
 800bc76:	6019      	str	r1, [r3, #0]
 800bc78:	6818      	ldr	r0, [r3, #0]
 800bc7a:	4402      	add	r2, r0
 800bc7c:	601a      	str	r2, [r3, #0]
 800bc7e:	4770      	bx	lr
 800bc80:	20001be0 	.word	0x20001be0
 800bc84:	20001c18 	.word	0x20001c18

0800bc88 <_exit>:
 800bc88:	e7fe      	b.n	800bc88 <_exit>
	...

0800bc8c <__EH_FRAME_BEGIN__>:
 800bc8c:	0000 0000                                   ....

0800bc90 <_init>:
 800bc90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc92:	bf00      	nop
 800bc94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bc96:	bc08      	pop	{r3}
 800bc98:	469e      	mov	lr, r3
 800bc9a:	4770      	bx	lr

0800bc9c <_fini>:
 800bc9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc9e:	bf00      	nop
 800bca0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bca2:	bc08      	pop	{r3}
 800bca4:	469e      	mov	lr, r3
 800bca6:	4770      	bx	lr
