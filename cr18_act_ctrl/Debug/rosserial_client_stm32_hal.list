
rosserial_client_stm32_hal.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003690  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000264  0800379c  0800379c  0001379c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000008  08003a00  08003a00  00013a00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08003a08  08003a08  00013a08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000510  20000000  08003a0c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000012c8  20000510  08003f1c  00020510  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  200017d8  08003f1c  000217d8  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00020510  2**0
                  CONTENTS, READONLY
  9 .debug_info   00016732  00000000  00000000  00020539  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00002c5c  00000000  00000000  00036c6b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00007a44  00000000  00000000  000398c7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000009c0  00000000  00000000  00041310  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000d50  00000000  00000000  00041cd0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0000543c  00000000  00000000  00042a20  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00005448  00000000  00000000  00047e5c  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0004d2a4  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00001ed0  00000000  00000000  0004d320  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000510 	.word	0x20000510
 8000128:	00000000 	.word	0x00000000
 800012c:	08003784 	.word	0x08003784

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000514 	.word	0x20000514
 8000148:	08003784 	.word	0x08003784

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <_ZNK8std_msgs4Time9serializeEPh>:
    }

    virtual int serialize(unsigned char *outbuffer) const
    {
      int offset = 0;
      *(outbuffer + offset + 0) = (this->data.sec >> (8 * 0)) & 0xFF;
 800015c:	7903      	ldrb	r3, [r0, #4]
 800015e:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (this->data.sec >> (8 * 1)) & 0xFF;
 8000160:	7943      	ldrb	r3, [r0, #5]
 8000162:	704b      	strb	r3, [r1, #1]
      *(outbuffer + offset + 2) = (this->data.sec >> (8 * 2)) & 0xFF;
 8000164:	7983      	ldrb	r3, [r0, #6]
 8000166:	708b      	strb	r3, [r1, #2]
      *(outbuffer + offset + 3) = (this->data.sec >> (8 * 3)) & 0xFF;
 8000168:	79c3      	ldrb	r3, [r0, #7]
 800016a:	70cb      	strb	r3, [r1, #3]
      offset += sizeof(this->data.sec);
      *(outbuffer + offset + 0) = (this->data.nsec >> (8 * 0)) & 0xFF;
 800016c:	7a03      	ldrb	r3, [r0, #8]
 800016e:	710b      	strb	r3, [r1, #4]
      *(outbuffer + offset + 1) = (this->data.nsec >> (8 * 1)) & 0xFF;
 8000170:	7a43      	ldrb	r3, [r0, #9]
 8000172:	714b      	strb	r3, [r1, #5]
      *(outbuffer + offset + 2) = (this->data.nsec >> (8 * 2)) & 0xFF;
 8000174:	7a83      	ldrb	r3, [r0, #10]
 8000176:	718b      	strb	r3, [r1, #6]
      *(outbuffer + offset + 3) = (this->data.nsec >> (8 * 3)) & 0xFF;
 8000178:	7ac3      	ldrb	r3, [r0, #11]
 800017a:	71cb      	strb	r3, [r1, #7]
      offset += sizeof(this->data.nsec);
      return offset;
    }
 800017c:	2008      	movs	r0, #8
 800017e:	4770      	bx	lr

08000180 <_ZN8std_msgs4Time11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
    {
      int offset = 0;
      this->data.sec =  ((uint32_t) (*(inbuffer + offset)));
 8000180:	780b      	ldrb	r3, [r1, #0]
 8000182:	6043      	str	r3, [r0, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8000184:	784a      	ldrb	r2, [r1, #1]
 8000186:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800018a:	6043      	str	r3, [r0, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800018c:	788a      	ldrb	r2, [r1, #2]
 800018e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000192:	6043      	str	r3, [r0, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8000194:	78ca      	ldrb	r2, [r1, #3]
 8000196:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800019a:	6043      	str	r3, [r0, #4]
      offset += sizeof(this->data.sec);
      this->data.nsec =  ((uint32_t) (*(inbuffer + offset)));
 800019c:	790b      	ldrb	r3, [r1, #4]
 800019e:	6083      	str	r3, [r0, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80001a0:	794a      	ldrb	r2, [r1, #5]
 80001a2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80001a6:	6083      	str	r3, [r0, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80001a8:	798a      	ldrb	r2, [r1, #6]
 80001aa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80001ae:	6083      	str	r3, [r0, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80001b0:	79ca      	ldrb	r2, [r1, #7]
 80001b2:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80001b6:	6083      	str	r3, [r0, #8]
      offset += sizeof(this->data.nsec);
     return offset;
    }
 80001b8:	2008      	movs	r0, #8
 80001ba:	4770      	bx	lr

080001bc <_ZN8std_msgs4Time7getTypeEv>:

    const char * getType(){ return "std_msgs/Time"; };
 80001bc:	4800      	ldr	r0, [pc, #0]	; (80001c0 <_ZN8std_msgs4Time7getTypeEv+0x4>)
 80001be:	4770      	bx	lr
 80001c0:	08003970 	.word	0x08003970

080001c4 <_ZN8std_msgs4Time6getMD5Ev>:
    const char * getMD5(){ return "cd7166c74c552c311fbcc2fe5a7bc289"; };
 80001c4:	4800      	ldr	r0, [pc, #0]	; (80001c8 <_ZN8std_msgs4Time6getMD5Ev+0x4>)
 80001c6:	4770      	bx	lr
 80001c8:	0800394c 	.word	0x0800394c

080001cc <_ZN14rosserial_msgs9TopicInfo11deserializeEPh>:
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
      offset += sizeof(this->buffer_size);
      return offset;
    }

    virtual int deserialize(unsigned char *inbuffer)
 80001cc:	b470      	push	{r4, r5, r6}
    {
      int offset = 0;
      this->topic_id =  ((uint16_t) (*(inbuffer + offset)));
 80001ce:	780b      	ldrb	r3, [r1, #0]
 80001d0:	8083      	strh	r3, [r0, #4]
      this->topic_id |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80001d2:	784a      	ldrb	r2, [r1, #1]
 80001d4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80001d8:	8083      	strh	r3, [r0, #4]

  // Copy data from a byte array into variable
  template<typename V, typename A>
  static void arrToVar(V& var, const A arr)
  {
    var = 0;
 80001da:	2400      	movs	r4, #0
    for (size_t i = 0; i < sizeof(V); i++)
 80001dc:	4623      	mov	r3, r4
 80001de:	2b03      	cmp	r3, #3
 80001e0:	d806      	bhi.n	80001f0 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x24>
      var |= (arr[i] << (8 * i));
 80001e2:	18ca      	adds	r2, r1, r3
 80001e4:	7892      	ldrb	r2, [r2, #2]
 80001e6:	00dd      	lsls	r5, r3, #3
 80001e8:	40aa      	lsls	r2, r5
 80001ea:	4314      	orrs	r4, r2
    for (size_t i = 0; i < sizeof(V); i++)
 80001ec:	3301      	adds	r3, #1
 80001ee:	e7f6      	b.n	80001de <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x12>
 80001f0:	2306      	movs	r3, #6
      offset += sizeof(this->topic_id);
      uint32_t length_topic_name;
      arrToVar(length_topic_name, (inbuffer + offset));
      offset += 4;
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 80001f2:	1da2      	adds	r2, r4, #6
 80001f4:	4293      	cmp	r3, r2
 80001f6:	d204      	bcs.n	8000202 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x36>
          inbuffer[k-1]=inbuffer[k];
 80001f8:	1e5a      	subs	r2, r3, #1
 80001fa:	5ccd      	ldrb	r5, [r1, r3]
 80001fc:	548d      	strb	r5, [r1, r2]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 80001fe:	3301      	adds	r3, #1
 8000200:	e7f7      	b.n	80001f2 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x26>
      }
      inbuffer[offset+length_topic_name-1]=0;
 8000202:	3405      	adds	r4, #5
 8000204:	2300      	movs	r3, #0
 8000206:	550b      	strb	r3, [r1, r4]
      this->topic_name = (char *)(inbuffer + offset-1);
 8000208:	1d4c      	adds	r4, r1, #5
 800020a:	6084      	str	r4, [r0, #8]
    var = 0;
 800020c:	461e      	mov	r6, r3
    for (size_t i = 0; i < sizeof(V); i++)
 800020e:	2b03      	cmp	r3, #3
 8000210:	d806      	bhi.n	8000220 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x54>
      var |= (arr[i] << (8 * i));
 8000212:	188c      	adds	r4, r1, r2
 8000214:	5ce4      	ldrb	r4, [r4, r3]
 8000216:	00dd      	lsls	r5, r3, #3
 8000218:	40ac      	lsls	r4, r5
 800021a:	4326      	orrs	r6, r4
    for (size_t i = 0; i < sizeof(V); i++)
 800021c:	3301      	adds	r3, #1
 800021e:	e7f6      	b.n	800020e <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x42>
      offset += length_topic_name;
      uint32_t length_message_type;
      arrToVar(length_message_type, (inbuffer + offset));
      offset += 4;
 8000220:	1d14      	adds	r4, r2, #4
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8000222:	4623      	mov	r3, r4
 8000224:	19a2      	adds	r2, r4, r6
 8000226:	4293      	cmp	r3, r2
 8000228:	d204      	bcs.n	8000234 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x68>
          inbuffer[k-1]=inbuffer[k];
 800022a:	1e5a      	subs	r2, r3, #1
 800022c:	5ccd      	ldrb	r5, [r1, r3]
 800022e:	548d      	strb	r5, [r1, r2]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8000230:	3301      	adds	r3, #1
 8000232:	e7f7      	b.n	8000224 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x58>
      }
      inbuffer[offset+length_message_type-1]=0;
 8000234:	1e55      	subs	r5, r2, #1
 8000236:	2300      	movs	r3, #0
 8000238:	554b      	strb	r3, [r1, r5]
      this->message_type = (char *)(inbuffer + offset-1);
 800023a:	3c01      	subs	r4, #1
 800023c:	440c      	add	r4, r1
 800023e:	60c4      	str	r4, [r0, #12]
    var = 0;
 8000240:	461e      	mov	r6, r3
    for (size_t i = 0; i < sizeof(V); i++)
 8000242:	2b03      	cmp	r3, #3
 8000244:	d806      	bhi.n	8000254 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x88>
      var |= (arr[i] << (8 * i));
 8000246:	188c      	adds	r4, r1, r2
 8000248:	5ce4      	ldrb	r4, [r4, r3]
 800024a:	00dd      	lsls	r5, r3, #3
 800024c:	40ac      	lsls	r4, r5
 800024e:	4326      	orrs	r6, r4
    for (size_t i = 0; i < sizeof(V); i++)
 8000250:	3301      	adds	r3, #1
 8000252:	e7f6      	b.n	8000242 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x76>
      offset += length_message_type;
      uint32_t length_md5sum;
      arrToVar(length_md5sum, (inbuffer + offset));
      offset += 4;
 8000254:	3204      	adds	r2, #4
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 8000256:	4613      	mov	r3, r2
 8000258:	1994      	adds	r4, r2, r6
 800025a:	42a3      	cmp	r3, r4
 800025c:	d204      	bcs.n	8000268 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x9c>
          inbuffer[k-1]=inbuffer[k];
 800025e:	1e5c      	subs	r4, r3, #1
 8000260:	5ccd      	ldrb	r5, [r1, r3]
 8000262:	550d      	strb	r5, [r1, r4]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 8000264:	3301      	adds	r3, #1
 8000266:	e7f7      	b.n	8000258 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x8c>
      }
      inbuffer[offset+length_md5sum-1]=0;
 8000268:	1e63      	subs	r3, r4, #1
 800026a:	2500      	movs	r5, #0
 800026c:	54cd      	strb	r5, [r1, r3]
      this->md5sum = (char *)(inbuffer + offset-1);
 800026e:	3a01      	subs	r2, #1
 8000270:	440a      	add	r2, r1
 8000272:	6102      	str	r2, [r0, #16]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.base = 0;
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8000274:	5d0b      	ldrb	r3, [r1, r4]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8000276:	1c62      	adds	r2, r4, #1
 8000278:	5c8a      	ldrb	r2, [r1, r2]
 800027a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800027e:	1ca2      	adds	r2, r4, #2
 8000280:	5c8a      	ldrb	r2, [r1, r2]
 8000282:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8000286:	1ce2      	adds	r2, r4, #3
 8000288:	5c8a      	ldrb	r2, [r1, r2]
 800028a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
      this->buffer_size = u_buffer_size.real;
 800028e:	6143      	str	r3, [r0, #20]
      offset += sizeof(this->buffer_size);
     return offset;
    }
 8000290:	1d20      	adds	r0, r4, #4
 8000292:	bc70      	pop	{r4, r5, r6}
 8000294:	4770      	bx	lr
	...

08000298 <_ZN14rosserial_msgs9TopicInfo7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/TopicInfo"; };
 8000298:	4800      	ldr	r0, [pc, #0]	; (800029c <_ZN14rosserial_msgs9TopicInfo7getTypeEv+0x4>)
 800029a:	4770      	bx	lr
 800029c:	080038d8 	.word	0x080038d8

080002a0 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev>:
    const char * getMD5(){ return "0ad51f88fc44892f8c10684077646005"; };
 80002a0:	4800      	ldr	r0, [pc, #0]	; (80002a4 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev+0x4>)
 80002a2:	4770      	bx	lr
 80002a4:	080038b4 	.word	0x080038b4

080002a8 <_ZN14rosserial_msgs3Log11deserializeEPh>:
      memcpy(outbuffer + offset, this->msg, length_msg);
      offset += length_msg;
      return offset;
    }

    virtual int deserialize(unsigned char *inbuffer)
 80002a8:	b470      	push	{r4, r5, r6}
 80002aa:	4606      	mov	r6, r0
    {
      int offset = 0;
      this->level =  ((uint8_t) (*(inbuffer + offset)));
 80002ac:	780b      	ldrb	r3, [r1, #0]
 80002ae:	7103      	strb	r3, [r0, #4]
    var = 0;
 80002b0:	2200      	movs	r2, #0
    for (size_t i = 0; i < sizeof(V); i++)
 80002b2:	4613      	mov	r3, r2
 80002b4:	2b03      	cmp	r3, #3
 80002b6:	d807      	bhi.n	80002c8 <_ZN14rosserial_msgs3Log11deserializeEPh+0x20>
 80002b8:	1c58      	adds	r0, r3, #1
      var |= (arr[i] << (8 * i));
 80002ba:	5c0c      	ldrb	r4, [r1, r0]
 80002bc:	00db      	lsls	r3, r3, #3
 80002be:	fa04 f303 	lsl.w	r3, r4, r3
 80002c2:	431a      	orrs	r2, r3
    for (size_t i = 0; i < sizeof(V); i++)
 80002c4:	4603      	mov	r3, r0
 80002c6:	e7f5      	b.n	80002b4 <_ZN14rosserial_msgs3Log11deserializeEPh+0xc>
 80002c8:	2305      	movs	r3, #5
      offset += sizeof(this->level);
      uint32_t length_msg;
      arrToVar(length_msg, (inbuffer + offset));
      offset += 4;
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 80002ca:	1d50      	adds	r0, r2, #5
 80002cc:	4283      	cmp	r3, r0
 80002ce:	d204      	bcs.n	80002da <_ZN14rosserial_msgs3Log11deserializeEPh+0x32>
          inbuffer[k-1]=inbuffer[k];
 80002d0:	1e5c      	subs	r4, r3, #1
 80002d2:	5ccd      	ldrb	r5, [r1, r3]
 80002d4:	550d      	strb	r5, [r1, r4]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 80002d6:	3301      	adds	r3, #1
 80002d8:	e7f7      	b.n	80002ca <_ZN14rosserial_msgs3Log11deserializeEPh+0x22>
      }
      inbuffer[offset+length_msg-1]=0;
 80002da:	3204      	adds	r2, #4
 80002dc:	2300      	movs	r3, #0
 80002de:	548b      	strb	r3, [r1, r2]
      this->msg = (char *)(inbuffer + offset-1);
 80002e0:	3104      	adds	r1, #4
 80002e2:	60b1      	str	r1, [r6, #8]
      offset += length_msg;
     return offset;
    }
 80002e4:	bc70      	pop	{r4, r5, r6}
 80002e6:	4770      	bx	lr

080002e8 <_ZN14rosserial_msgs3Log7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/Log"; };
 80002e8:	4800      	ldr	r0, [pc, #0]	; (80002ec <_ZN14rosserial_msgs3Log7getTypeEv+0x4>)
 80002ea:	4770      	bx	lr
 80002ec:	080038a0 	.word	0x080038a0

080002f0 <_ZN14rosserial_msgs3Log6getMD5Ev>:
    const char * getMD5(){ return "11abd731c25933261cd6183bd12d6295"; };
 80002f0:	4800      	ldr	r0, [pc, #0]	; (80002f4 <_ZN14rosserial_msgs3Log6getMD5Ev+0x4>)
 80002f2:	4770      	bx	lr
 80002f4:	0800387c 	.word	0x0800387c

080002f8 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv>:
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
      }
     return offset;
    }

    const char * getType(){ return REQUESTPARAM; };
 80002f8:	4800      	ldr	r0, [pc, #0]	; (80002fc <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv+0x4>)
 80002fa:	4770      	bx	lr
 80002fc:	080038f4 	.word	0x080038f4

08000300 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev>:
    const char * getMD5(){ return "9f0e98bda65981986ddf53afa7a40e49"; };
 8000300:	4800      	ldr	r0, [pc, #0]	; (8000304 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev+0x4>)
 8000302:	4770      	bx	lr
 8000304:	08003858 	.word	0x08003858

08000308 <_ZN8std_msgs6String11deserializeEPh>:
      memcpy(outbuffer + offset, this->data, length_data);
      offset += length_data;
      return offset;
    }

    virtual int deserialize(unsigned char *inbuffer)
 8000308:	b470      	push	{r4, r5, r6}
 800030a:	4606      	mov	r6, r0
    var = 0;
 800030c:	2200      	movs	r2, #0
    for (size_t i = 0; i < sizeof(V); i++)
 800030e:	4613      	mov	r3, r2
 8000310:	2b03      	cmp	r3, #3
 8000312:	d805      	bhi.n	8000320 <_ZN8std_msgs6String11deserializeEPh+0x18>
      var |= (arr[i] << (8 * i));
 8000314:	5ccc      	ldrb	r4, [r1, r3]
 8000316:	00dd      	lsls	r5, r3, #3
 8000318:	40ac      	lsls	r4, r5
 800031a:	4322      	orrs	r2, r4
    for (size_t i = 0; i < sizeof(V); i++)
 800031c:	3301      	adds	r3, #1
 800031e:	e7f7      	b.n	8000310 <_ZN8std_msgs6String11deserializeEPh+0x8>
 8000320:	2304      	movs	r3, #4
    {
      int offset = 0;
      uint32_t length_data;
      arrToVar(length_data, (inbuffer + offset));
      offset += 4;
      for(unsigned int k= offset; k< offset+length_data; ++k){
 8000322:	1d10      	adds	r0, r2, #4
 8000324:	4283      	cmp	r3, r0
 8000326:	d204      	bcs.n	8000332 <_ZN8std_msgs6String11deserializeEPh+0x2a>
          inbuffer[k-1]=inbuffer[k];
 8000328:	1e5c      	subs	r4, r3, #1
 800032a:	5ccd      	ldrb	r5, [r1, r3]
 800032c:	550d      	strb	r5, [r1, r4]
      for(unsigned int k= offset; k< offset+length_data; ++k){
 800032e:	3301      	adds	r3, #1
 8000330:	e7f7      	b.n	8000322 <_ZN8std_msgs6String11deserializeEPh+0x1a>
      }
      inbuffer[offset+length_data-1]=0;
 8000332:	3203      	adds	r2, #3
 8000334:	2300      	movs	r3, #0
 8000336:	548b      	strb	r3, [r1, r2]
      this->data = (char *)(inbuffer + offset-1);
 8000338:	3103      	adds	r1, #3
 800033a:	6071      	str	r1, [r6, #4]
      offset += length_data;
     return offset;
    }
 800033c:	bc70      	pop	{r4, r5, r6}
 800033e:	4770      	bx	lr

08000340 <_ZN8std_msgs6String7getTypeEv>:

    const char * getType(){ return "std_msgs/String"; };
 8000340:	4800      	ldr	r0, [pc, #0]	; (8000344 <_ZN8std_msgs6String7getTypeEv+0x4>)
 8000342:	4770      	bx	lr
 8000344:	080039a4 	.word	0x080039a4

08000348 <_ZN8std_msgs6String6getMD5Ev>:
    const char * getMD5(){ return "992ce8a1687cec8c8bd883ec73ca41d1"; };
 8000348:	4800      	ldr	r0, [pc, #0]	; (800034c <_ZN8std_msgs6String6getMD5Ev+0x4>)
 800034a:	4770      	bx	lr
 800034c:	08003980 	.word	0x08003980

08000350 <_ZL12MX_GPIO_Initv>:
 * Output
 * EVENT_OUT
 * EXTI
 */
static void MX_GPIO_Init(void)
{
 8000350:	b084      	sub	sp, #16

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE()
 8000352:	4b0f      	ldr	r3, [pc, #60]	; (8000390 <_ZL12MX_GPIO_Initv+0x40>)
 8000354:	699a      	ldr	r2, [r3, #24]
 8000356:	f042 0210 	orr.w	r2, r2, #16
 800035a:	619a      	str	r2, [r3, #24]
 800035c:	699a      	ldr	r2, [r3, #24]
 800035e:	f002 0210 	and.w	r2, r2, #16
 8000362:	9201      	str	r2, [sp, #4]
 8000364:	9a01      	ldr	r2, [sp, #4]
	;
	__HAL_RCC_GPIOD_CLK_ENABLE()
 8000366:	699a      	ldr	r2, [r3, #24]
 8000368:	f042 0220 	orr.w	r2, r2, #32
 800036c:	619a      	str	r2, [r3, #24]
 800036e:	699a      	ldr	r2, [r3, #24]
 8000370:	f002 0220 	and.w	r2, r2, #32
 8000374:	9202      	str	r2, [sp, #8]
 8000376:	9a02      	ldr	r2, [sp, #8]
	;
	__HAL_RCC_GPIOA_CLK_ENABLE()
 8000378:	699a      	ldr	r2, [r3, #24]
 800037a:	f042 0204 	orr.w	r2, r2, #4
 800037e:	619a      	str	r2, [r3, #24]
 8000380:	699b      	ldr	r3, [r3, #24]
 8000382:	f003 0304 	and.w	r3, r3, #4
 8000386:	9303      	str	r3, [sp, #12]
 8000388:	9b03      	ldr	r3, [sp, #12]
	;

}
 800038a:	b004      	add	sp, #16
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop
 8000390:	40021000 	.word	0x40021000

08000394 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9connectedEv>:

  /* Are we connected to the PC? */
  virtual bool connected()
  {
    return configured_;
  };
 8000394:	f890 08f4 	ldrb.w	r0, [r0, #2292]	; 0x8f4
 8000398:	4770      	bx	lr
	...

0800039c <_Z41__static_initialization_and_destruction_0ii>:
	/* User can add his own implementation to report the HAL error return state */
	while (1)
	{
	}
	/* USER CODE END Error_Handler_Debug */
}
 800039c:	2801      	cmp	r0, #1
 800039e:	d000      	beq.n	80003a2 <_Z41__static_initialization_and_destruction_0ii+0x6>
 80003a0:	4770      	bx	lr
 80003a2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80003a6:	4299      	cmp	r1, r3
 80003a8:	d1fa      	bne.n	80003a0 <_Z41__static_initialization_and_destruction_0ii+0x4>
	uint16_t tx_head = 0;
	uint16_t tx_tail = 0;
	UART_HandleTypeDef &huart;

public:
	SerialClass(UART_HandleTypeDef &huart) : huart(huart)
 80003aa:	492e      	ldr	r1, [pc, #184]	; (8000464 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
 80003ac:	2301      	movs	r3, #1
 80003ae:	f881 3800 	strb.w	r3, [r1, #2048]	; 0x800
 80003b2:	2300      	movs	r3, #0
 80003b4:	f8a1 3802 	strh.w	r3, [r1, #2050]	; 0x802
 80003b8:	f8a1 3804 	strh.w	r3, [r1, #2052]	; 0x804
 80003bc:	f8a1 3806 	strh.w	r3, [r1, #2054]	; 0x806
 80003c0:	4a29      	ldr	r2, [pc, #164]	; (8000468 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
 80003c2:	f8c1 2808 	str.w	r2, [r1, #2056]	; 0x808
  NodeHandle_() : configured_(false)
 80003c6:	4a29      	ldr	r2, [pc, #164]	; (800046c <_Z41__static_initialization_and_destruction_0ii+0xd0>)
 80003c8:	4829      	ldr	r0, [pc, #164]	; (8000470 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
 80003ca:	6010      	str	r0, [r2, #0]

class STM32Hardware
{
public:
	STM32Hardware() :
			com(&serial)
 80003cc:	6051      	str	r1, [r2, #4]
 80003ce:	f882 38f4 	strb.w	r3, [r2, #2292]	; 0x8f4
      strings_length(0), strings(NULL)
 80003d2:	4928      	ldr	r1, [pc, #160]	; (8000474 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
 80003d4:	f8c2 1908 	str.w	r1, [r2, #2312]	; 0x908
 80003d8:	f8c2 390c 	str.w	r3, [r2, #2316]	; 0x90c
 80003dc:	f8c2 3914 	str.w	r3, [r2, #2324]	; 0x914
 80003e0:	f8c2 3918 	str.w	r3, [r2, #2328]	; 0x918
 80003e4:	f8c2 3920 	str.w	r3, [r2, #2336]	; 0x920
 80003e8:	f8c2 3924 	str.w	r3, [r2, #2340]	; 0x924
 80003ec:	f8c2 392c 	str.w	r3, [r2, #2348]	; 0x92c
    for (unsigned int i = 0; i < MAX_PUBLISHERS; i++)
 80003f0:	2b18      	cmp	r3, #24
 80003f2:	d807      	bhi.n	8000404 <_Z41__static_initialization_and_destruction_0ii+0x68>
      publishers[i] = 0;
 80003f4:	f203 2106 	addw	r1, r3, #518	; 0x206
 80003f8:	2000      	movs	r0, #0
 80003fa:	4a1c      	ldr	r2, [pc, #112]	; (800046c <_Z41__static_initialization_and_destruction_0ii+0xd0>)
 80003fc:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
    for (unsigned int i = 0; i < MAX_PUBLISHERS; i++)
 8000400:	3301      	adds	r3, #1
 8000402:	e7f5      	b.n	80003f0 <_Z41__static_initialization_and_destruction_0ii+0x54>
 8000404:	2300      	movs	r3, #0
    for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++)
 8000406:	2b18      	cmp	r3, #24
 8000408:	d808      	bhi.n	800041c <_Z41__static_initialization_and_destruction_0ii+0x80>
      subscribers[i] = 0;
 800040a:	f203 211e 	addw	r1, r3, #542	; 0x21e
 800040e:	4a17      	ldr	r2, [pc, #92]	; (800046c <_Z41__static_initialization_and_destruction_0ii+0xd0>)
 8000410:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8000414:	2100      	movs	r1, #0
 8000416:	6051      	str	r1, [r2, #4]
    for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++)
 8000418:	3301      	adds	r3, #1
 800041a:	e7f4      	b.n	8000406 <_Z41__static_initialization_and_destruction_0ii+0x6a>
 800041c:	2300      	movs	r3, #0
    for (unsigned int i = 0; i < INPUT_SIZE; i++)
 800041e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000422:	d205      	bcs.n	8000430 <_Z41__static_initialization_and_destruction_0ii+0x94>
      message_in[i] = 0;
 8000424:	4a11      	ldr	r2, [pc, #68]	; (800046c <_Z41__static_initialization_and_destruction_0ii+0xd0>)
 8000426:	441a      	add	r2, r3
 8000428:	2100      	movs	r1, #0
 800042a:	7611      	strb	r1, [r2, #24]
    for (unsigned int i = 0; i < INPUT_SIZE; i++)
 800042c:	3301      	adds	r3, #1
 800042e:	e7f6      	b.n	800041e <_Z41__static_initialization_and_destruction_0ii+0x82>
 8000430:	2300      	movs	r3, #0
    for (unsigned int i = 0; i < OUTPUT_SIZE; i++)
 8000432:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000436:	d206      	bcs.n	8000446 <_Z41__static_initialization_and_destruction_0ii+0xaa>
      message_out[i] = 0;
 8000438:	4a0c      	ldr	r2, [pc, #48]	; (800046c <_Z41__static_initialization_and_destruction_0ii+0xd0>)
 800043a:	441a      	add	r2, r3
 800043c:	2100      	movs	r1, #0
 800043e:	f882 1418 	strb.w	r1, [r2, #1048]	; 0x418
    for (unsigned int i = 0; i < OUTPUT_SIZE; i++)
 8000442:	3301      	adds	r3, #1
 8000444:	e7f5      	b.n	8000432 <_Z41__static_initialization_and_destruction_0ii+0x96>
    spin_timeout_ = 0;
 8000446:	2100      	movs	r1, #0
 8000448:	4b08      	ldr	r3, [pc, #32]	; (800046c <_Z41__static_initialization_and_destruction_0ii+0xd0>)
 800044a:	6159      	str	r1, [r3, #20]
      data("")
 800044c:	4a0a      	ldr	r2, [pc, #40]	; (8000478 <_Z41__static_initialization_and_destruction_0ii+0xdc>)
 800044e:	4b0b      	ldr	r3, [pc, #44]	; (800047c <_Z41__static_initialization_and_destruction_0ii+0xe0>)
 8000450:	6013      	str	r3, [r2, #0]
 8000452:	4b0b      	ldr	r3, [pc, #44]	; (8000480 <_Z41__static_initialization_and_destruction_0ii+0xe4>)
 8000454:	6053      	str	r3, [r2, #4]
{
public:
  Publisher(const char * topic_name, Msg * msg, int endpoint = rosserial_msgs::TopicInfo::ID_PUBLISHER) :
    topic_(topic_name),
    msg_(msg),
    endpoint_(endpoint) {};
 8000456:	4b0b      	ldr	r3, [pc, #44]	; (8000484 <_Z41__static_initialization_and_destruction_0ii+0xe8>)
 8000458:	480b      	ldr	r0, [pc, #44]	; (8000488 <_Z41__static_initialization_and_destruction_0ii+0xec>)
 800045a:	6018      	str	r0, [r3, #0]
 800045c:	605a      	str	r2, [r3, #4]
 800045e:	6119      	str	r1, [r3, #16]
 8000460:	e79e      	b.n	80003a0 <_Z41__static_initialization_and_destruction_0ii+0x4>
 8000462:	bf00      	nop
 8000464:	20000f78 	.word	0x20000f78
 8000468:	20000608 	.word	0x20000608
 800046c:	20000648 	.word	0x20000648
 8000470:	0800382c 	.word	0x0800382c
 8000474:	080037fc 	.word	0x080037fc
 8000478:	20001784 	.word	0x20001784
 800047c:	08003814 	.word	0x08003814
 8000480:	08003948 	.word	0x08003948
 8000484:	2000052c 	.word	0x2000052c
 8000488:	08003838 	.word	0x08003838

0800048c <_ZL11MX_DMA_Initv>:
{
 800048c:	b500      	push	{lr}
 800048e:	b083      	sub	sp, #12
	__HAL_RCC_DMA1_CLK_ENABLE()
 8000490:	4b0e      	ldr	r3, [pc, #56]	; (80004cc <_ZL11MX_DMA_Initv+0x40>)
 8000492:	695a      	ldr	r2, [r3, #20]
 8000494:	f042 0201 	orr.w	r2, r2, #1
 8000498:	615a      	str	r2, [r3, #20]
 800049a:	695b      	ldr	r3, [r3, #20]
 800049c:	f003 0301 	and.w	r3, r3, #1
 80004a0:	9301      	str	r3, [sp, #4]
 80004a2:	9b01      	ldr	r3, [sp, #4]
	HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 80004a4:	2200      	movs	r2, #0
 80004a6:	4611      	mov	r1, r2
 80004a8:	200e      	movs	r0, #14
 80004aa:	f001 fa69 	bl	8001980 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 80004ae:	200e      	movs	r0, #14
 80004b0:	f001 fa9a 	bl	80019e8 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 80004b4:	2200      	movs	r2, #0
 80004b6:	4611      	mov	r1, r2
 80004b8:	200f      	movs	r0, #15
 80004ba:	f001 fa61 	bl	8001980 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80004be:	200f      	movs	r0, #15
 80004c0:	f001 fa92 	bl	80019e8 <HAL_NVIC_EnableIRQ>
}
 80004c4:	b003      	add	sp, #12
 80004c6:	f85d fb04 	ldr.w	pc, [sp], #4
 80004ca:	bf00      	nop
 80004cc:	40021000 	.word	0x40021000

080004d0 <_ZNK14rosserial_msgs9TopicInfo9serializeEPh>:
    virtual int serialize(unsigned char *outbuffer) const
 80004d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004d2:	4606      	mov	r6, r0
 80004d4:	460c      	mov	r4, r1
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
 80004d6:	7903      	ldrb	r3, [r0, #4]
 80004d8:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (this->topic_id >> (8 * 1)) & 0xFF;
 80004da:	8883      	ldrh	r3, [r0, #4]
 80004dc:	0a1b      	lsrs	r3, r3, #8
 80004de:	704b      	strb	r3, [r1, #1]
      uint32_t length_topic_name = strlen(this->topic_name);
 80004e0:	6880      	ldr	r0, [r0, #8]
 80004e2:	f7ff fe33 	bl	800014c <strlen>
 80004e6:	4607      	mov	r7, r0
    for (size_t i = 0; i < sizeof(V); i++)
 80004e8:	2300      	movs	r3, #0
 80004ea:	2b03      	cmp	r3, #3
 80004ec:	d806      	bhi.n	80004fc <_ZNK14rosserial_msgs9TopicInfo9serializeEPh+0x2c>
      arr[i] = (var >> (8 * i));
 80004ee:	1c99      	adds	r1, r3, #2
 80004f0:	00da      	lsls	r2, r3, #3
 80004f2:	fa27 f202 	lsr.w	r2, r7, r2
 80004f6:	5462      	strb	r2, [r4, r1]
    for (size_t i = 0; i < sizeof(V); i++)
 80004f8:	3301      	adds	r3, #1
 80004fa:	e7f6      	b.n	80004ea <_ZNK14rosserial_msgs9TopicInfo9serializeEPh+0x1a>
      memcpy(outbuffer + offset, this->topic_name, length_topic_name);
 80004fc:	463a      	mov	r2, r7
 80004fe:	68b1      	ldr	r1, [r6, #8]
 8000500:	1da0      	adds	r0, r4, #6
 8000502:	f002 fc45 	bl	8002d90 <memcpy>
      offset += length_topic_name;
 8000506:	3706      	adds	r7, #6
      uint32_t length_message_type = strlen(this->message_type);
 8000508:	68f0      	ldr	r0, [r6, #12]
 800050a:	f7ff fe1f 	bl	800014c <strlen>
 800050e:	4605      	mov	r5, r0
 8000510:	2300      	movs	r3, #0
 8000512:	2b03      	cmp	r3, #3
 8000514:	d806      	bhi.n	8000524 <_ZNK14rosserial_msgs9TopicInfo9serializeEPh+0x54>
      arr[i] = (var >> (8 * i));
 8000516:	18f9      	adds	r1, r7, r3
 8000518:	00da      	lsls	r2, r3, #3
 800051a:	fa25 f202 	lsr.w	r2, r5, r2
 800051e:	5462      	strb	r2, [r4, r1]
    for (size_t i = 0; i < sizeof(V); i++)
 8000520:	3301      	adds	r3, #1
 8000522:	e7f6      	b.n	8000512 <_ZNK14rosserial_msgs9TopicInfo9serializeEPh+0x42>
      offset += 4;
 8000524:	3704      	adds	r7, #4
      memcpy(outbuffer + offset, this->message_type, length_message_type);
 8000526:	462a      	mov	r2, r5
 8000528:	68f1      	ldr	r1, [r6, #12]
 800052a:	19e0      	adds	r0, r4, r7
 800052c:	f002 fc30 	bl	8002d90 <memcpy>
      offset += length_message_type;
 8000530:	443d      	add	r5, r7
      uint32_t length_md5sum = strlen(this->md5sum);
 8000532:	6930      	ldr	r0, [r6, #16]
 8000534:	f7ff fe0a 	bl	800014c <strlen>
 8000538:	4607      	mov	r7, r0
 800053a:	2300      	movs	r3, #0
 800053c:	2b03      	cmp	r3, #3
 800053e:	d806      	bhi.n	800054e <_ZNK14rosserial_msgs9TopicInfo9serializeEPh+0x7e>
      arr[i] = (var >> (8 * i));
 8000540:	18e9      	adds	r1, r5, r3
 8000542:	00da      	lsls	r2, r3, #3
 8000544:	fa27 f202 	lsr.w	r2, r7, r2
 8000548:	5462      	strb	r2, [r4, r1]
    for (size_t i = 0; i < sizeof(V); i++)
 800054a:	3301      	adds	r3, #1
 800054c:	e7f6      	b.n	800053c <_ZNK14rosserial_msgs9TopicInfo9serializeEPh+0x6c>
      offset += 4;
 800054e:	3504      	adds	r5, #4
      memcpy(outbuffer + offset, this->md5sum, length_md5sum);
 8000550:	463a      	mov	r2, r7
 8000552:	6931      	ldr	r1, [r6, #16]
 8000554:	1960      	adds	r0, r4, r5
 8000556:	f002 fc1b 	bl	8002d90 <memcpy>
      offset += length_md5sum;
 800055a:	443d      	add	r5, r7
      u_buffer_size.real = this->buffer_size;
 800055c:	6973      	ldr	r3, [r6, #20]
      *(outbuffer + offset + 0) = (u_buffer_size.base >> (8 * 0)) & 0xFF;
 800055e:	5563      	strb	r3, [r4, r5]
      *(outbuffer + offset + 1) = (u_buffer_size.base >> (8 * 1)) & 0xFF;
 8000560:	1c6a      	adds	r2, r5, #1
 8000562:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8000566:	54a1      	strb	r1, [r4, r2]
      *(outbuffer + offset + 2) = (u_buffer_size.base >> (8 * 2)) & 0xFF;
 8000568:	1caa      	adds	r2, r5, #2
 800056a:	f3c3 4107 	ubfx	r1, r3, #16, #8
 800056e:	54a1      	strb	r1, [r4, r2]
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
 8000570:	1cea      	adds	r2, r5, #3
 8000572:	0e1b      	lsrs	r3, r3, #24
 8000574:	54a3      	strb	r3, [r4, r2]
    }
 8000576:	1d28      	adds	r0, r5, #4
 8000578:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800057a <_ZNK14rosserial_msgs3Log9serializeEPh>:
    virtual int serialize(unsigned char *outbuffer) const
 800057a:	b570      	push	{r4, r5, r6, lr}
 800057c:	4606      	mov	r6, r0
 800057e:	460d      	mov	r5, r1
      *(outbuffer + offset + 0) = (this->level >> (8 * 0)) & 0xFF;
 8000580:	7903      	ldrb	r3, [r0, #4]
 8000582:	700b      	strb	r3, [r1, #0]
      uint32_t length_msg = strlen(this->msg);
 8000584:	6880      	ldr	r0, [r0, #8]
 8000586:	f7ff fde1 	bl	800014c <strlen>
 800058a:	4604      	mov	r4, r0
 800058c:	2300      	movs	r3, #0
 800058e:	2b03      	cmp	r3, #3
 8000590:	d806      	bhi.n	80005a0 <_ZNK14rosserial_msgs3Log9serializeEPh+0x26>
 8000592:	1c5a      	adds	r2, r3, #1
      arr[i] = (var >> (8 * i));
 8000594:	00db      	lsls	r3, r3, #3
 8000596:	fa24 f303 	lsr.w	r3, r4, r3
 800059a:	54ab      	strb	r3, [r5, r2]
    for (size_t i = 0; i < sizeof(V); i++)
 800059c:	4613      	mov	r3, r2
 800059e:	e7f6      	b.n	800058e <_ZNK14rosserial_msgs3Log9serializeEPh+0x14>
      memcpy(outbuffer + offset, this->msg, length_msg);
 80005a0:	4622      	mov	r2, r4
 80005a2:	68b1      	ldr	r1, [r6, #8]
 80005a4:	1d68      	adds	r0, r5, #5
 80005a6:	f002 fbf3 	bl	8002d90 <memcpy>
    }
 80005aa:	1d60      	adds	r0, r4, #5
 80005ac:	bd70      	pop	{r4, r5, r6, pc}

080005ae <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh>:
    virtual int serialize(unsigned char *outbuffer) const
 80005ae:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80005b2:	4606      	mov	r6, r0
 80005b4:	460d      	mov	r5, r1
      *(outbuffer + offset + 0) = (this->ints_length >> (8 * 0)) & 0xFF;
 80005b6:	7903      	ldrb	r3, [r0, #4]
 80005b8:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (this->ints_length >> (8 * 1)) & 0xFF;
 80005ba:	7943      	ldrb	r3, [r0, #5]
 80005bc:	704b      	strb	r3, [r1, #1]
      *(outbuffer + offset + 2) = (this->ints_length >> (8 * 2)) & 0xFF;
 80005be:	7983      	ldrb	r3, [r0, #6]
 80005c0:	708b      	strb	r3, [r1, #2]
      *(outbuffer + offset + 3) = (this->ints_length >> (8 * 3)) & 0xFF;
 80005c2:	79c3      	ldrb	r3, [r0, #7]
 80005c4:	70cb      	strb	r3, [r1, #3]
      for( uint32_t i = 0; i < ints_length; i++){
 80005c6:	2200      	movs	r2, #0
      offset += sizeof(this->ints_length);
 80005c8:	2404      	movs	r4, #4
      for( uint32_t i = 0; i < ints_length; i++){
 80005ca:	6873      	ldr	r3, [r6, #4]
 80005cc:	429a      	cmp	r2, r3
 80005ce:	d211      	bcs.n	80005f4 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x46>
      u_intsi.real = this->ints[i];
 80005d0:	68f3      	ldr	r3, [r6, #12]
 80005d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
      *(outbuffer + offset + 0) = (u_intsi.base >> (8 * 0)) & 0xFF;
 80005d6:	552b      	strb	r3, [r5, r4]
      *(outbuffer + offset + 1) = (u_intsi.base >> (8 * 1)) & 0xFF;
 80005d8:	1c61      	adds	r1, r4, #1
 80005da:	f3c3 2007 	ubfx	r0, r3, #8, #8
 80005de:	5468      	strb	r0, [r5, r1]
      *(outbuffer + offset + 2) = (u_intsi.base >> (8 * 2)) & 0xFF;
 80005e0:	1ca1      	adds	r1, r4, #2
 80005e2:	f3c3 4007 	ubfx	r0, r3, #16, #8
 80005e6:	5468      	strb	r0, [r5, r1]
      *(outbuffer + offset + 3) = (u_intsi.base >> (8 * 3)) & 0xFF;
 80005e8:	1ce1      	adds	r1, r4, #3
 80005ea:	0e1b      	lsrs	r3, r3, #24
 80005ec:	546b      	strb	r3, [r5, r1]
      offset += sizeof(this->ints[i]);
 80005ee:	3404      	adds	r4, #4
      for( uint32_t i = 0; i < ints_length; i++){
 80005f0:	3201      	adds	r2, #1
 80005f2:	e7ea      	b.n	80005ca <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x1c>
      *(outbuffer + offset + 0) = (this->floats_length >> (8 * 0)) & 0xFF;
 80005f4:	7c33      	ldrb	r3, [r6, #16]
 80005f6:	552b      	strb	r3, [r5, r4]
      *(outbuffer + offset + 1) = (this->floats_length >> (8 * 1)) & 0xFF;
 80005f8:	1c63      	adds	r3, r4, #1
 80005fa:	7c72      	ldrb	r2, [r6, #17]
 80005fc:	54ea      	strb	r2, [r5, r3]
      *(outbuffer + offset + 2) = (this->floats_length >> (8 * 2)) & 0xFF;
 80005fe:	1ca3      	adds	r3, r4, #2
 8000600:	7cb2      	ldrb	r2, [r6, #18]
 8000602:	54ea      	strb	r2, [r5, r3]
      *(outbuffer + offset + 3) = (this->floats_length >> (8 * 3)) & 0xFF;
 8000604:	1ce3      	adds	r3, r4, #3
 8000606:	7cf2      	ldrb	r2, [r6, #19]
 8000608:	54ea      	strb	r2, [r5, r3]
      offset += sizeof(this->floats_length);
 800060a:	3404      	adds	r4, #4
      for( uint32_t i = 0; i < floats_length; i++){
 800060c:	2200      	movs	r2, #0
 800060e:	6933      	ldr	r3, [r6, #16]
 8000610:	429a      	cmp	r2, r3
 8000612:	d211      	bcs.n	8000638 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x8a>
      u_floatsi.real = this->floats[i];
 8000614:	69b3      	ldr	r3, [r6, #24]
 8000616:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
      *(outbuffer + offset + 0) = (u_floatsi.base >> (8 * 0)) & 0xFF;
 800061a:	552b      	strb	r3, [r5, r4]
      *(outbuffer + offset + 1) = (u_floatsi.base >> (8 * 1)) & 0xFF;
 800061c:	1c61      	adds	r1, r4, #1
 800061e:	f3c3 2007 	ubfx	r0, r3, #8, #8
 8000622:	5468      	strb	r0, [r5, r1]
      *(outbuffer + offset + 2) = (u_floatsi.base >> (8 * 2)) & 0xFF;
 8000624:	1ca1      	adds	r1, r4, #2
 8000626:	f3c3 4007 	ubfx	r0, r3, #16, #8
 800062a:	5468      	strb	r0, [r5, r1]
      *(outbuffer + offset + 3) = (u_floatsi.base >> (8 * 3)) & 0xFF;
 800062c:	1ce1      	adds	r1, r4, #3
 800062e:	0e1b      	lsrs	r3, r3, #24
 8000630:	546b      	strb	r3, [r5, r1]
      offset += sizeof(this->floats[i]);
 8000632:	3404      	adds	r4, #4
      for( uint32_t i = 0; i < floats_length; i++){
 8000634:	3201      	adds	r2, #1
 8000636:	e7ea      	b.n	800060e <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x60>
      *(outbuffer + offset + 0) = (this->strings_length >> (8 * 0)) & 0xFF;
 8000638:	7f33      	ldrb	r3, [r6, #28]
 800063a:	552b      	strb	r3, [r5, r4]
      *(outbuffer + offset + 1) = (this->strings_length >> (8 * 1)) & 0xFF;
 800063c:	1c63      	adds	r3, r4, #1
 800063e:	7f72      	ldrb	r2, [r6, #29]
 8000640:	54ea      	strb	r2, [r5, r3]
      *(outbuffer + offset + 2) = (this->strings_length >> (8 * 2)) & 0xFF;
 8000642:	1ca3      	adds	r3, r4, #2
 8000644:	7fb2      	ldrb	r2, [r6, #30]
 8000646:	54ea      	strb	r2, [r5, r3]
      *(outbuffer + offset + 3) = (this->strings_length >> (8 * 3)) & 0xFF;
 8000648:	1ce3      	adds	r3, r4, #3
 800064a:	7ff2      	ldrb	r2, [r6, #31]
 800064c:	54ea      	strb	r2, [r5, r3]
      offset += sizeof(this->strings_length);
 800064e:	3404      	adds	r4, #4
      for( uint32_t i = 0; i < strings_length; i++){
 8000650:	f04f 0800 	mov.w	r8, #0
 8000654:	e00a      	b.n	800066c <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0xbe>
      offset += 4;
 8000656:	3404      	adds	r4, #4
      memcpy(outbuffer + offset, this->strings[i], length_stringsi);
 8000658:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800065a:	463a      	mov	r2, r7
 800065c:	f853 1009 	ldr.w	r1, [r3, r9]
 8000660:	1928      	adds	r0, r5, r4
 8000662:	f002 fb95 	bl	8002d90 <memcpy>
      offset += length_stringsi;
 8000666:	443c      	add	r4, r7
      for( uint32_t i = 0; i < strings_length; i++){
 8000668:	f108 0801 	add.w	r8, r8, #1
 800066c:	69f3      	ldr	r3, [r6, #28]
 800066e:	4598      	cmp	r8, r3
 8000670:	d212      	bcs.n	8000698 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0xea>
      uint32_t length_stringsi = strlen(this->strings[i]);
 8000672:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8000674:	ea4f 0988 	mov.w	r9, r8, lsl #2
 8000678:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800067c:	f7ff fd66 	bl	800014c <strlen>
 8000680:	4607      	mov	r7, r0
      varToArr(outbuffer + offset, length_stringsi);
 8000682:	4620      	mov	r0, r4
 8000684:	2300      	movs	r3, #0
 8000686:	2b03      	cmp	r3, #3
 8000688:	d8e5      	bhi.n	8000656 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0xa8>
      arr[i] = (var >> (8 * i));
 800068a:	18c1      	adds	r1, r0, r3
 800068c:	00da      	lsls	r2, r3, #3
 800068e:	fa27 f202 	lsr.w	r2, r7, r2
 8000692:	546a      	strb	r2, [r5, r1]
    for (size_t i = 0; i < sizeof(V); i++)
 8000694:	3301      	adds	r3, #1
 8000696:	e7f6      	b.n	8000686 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0xd8>
    }
 8000698:	4620      	mov	r0, r4
 800069a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800069e <_ZNK8std_msgs6String9serializeEPh>:
    virtual int serialize(unsigned char *outbuffer) const
 800069e:	b570      	push	{r4, r5, r6, lr}
 80006a0:	4606      	mov	r6, r0
 80006a2:	460d      	mov	r5, r1
      uint32_t length_data = strlen(this->data);
 80006a4:	6840      	ldr	r0, [r0, #4]
 80006a6:	f7ff fd51 	bl	800014c <strlen>
 80006aa:	4604      	mov	r4, r0
 80006ac:	2300      	movs	r3, #0
 80006ae:	2b03      	cmp	r3, #3
 80006b0:	d805      	bhi.n	80006be <_ZNK8std_msgs6String9serializeEPh+0x20>
      arr[i] = (var >> (8 * i));
 80006b2:	00da      	lsls	r2, r3, #3
 80006b4:	fa24 f202 	lsr.w	r2, r4, r2
 80006b8:	54ea      	strb	r2, [r5, r3]
    for (size_t i = 0; i < sizeof(V); i++)
 80006ba:	3301      	adds	r3, #1
 80006bc:	e7f7      	b.n	80006ae <_ZNK8std_msgs6String9serializeEPh+0x10>
      memcpy(outbuffer + offset, this->data, length_data);
 80006be:	4622      	mov	r2, r4
 80006c0:	6871      	ldr	r1, [r6, #4]
 80006c2:	1d28      	adds	r0, r5, #4
 80006c4:	f002 fb64 	bl	8002d90 <memcpy>
    }
 80006c8:	1d20      	adds	r0, r4, #4
 80006ca:	bd70      	pop	{r4, r5, r6, pc}

080006cc <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>:
    virtual int deserialize(unsigned char *inbuffer)
 80006cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80006ce:	4606      	mov	r6, r0
 80006d0:	460d      	mov	r5, r1
      uint32_t ints_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 80006d2:	780c      	ldrb	r4, [r1, #0]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 80006d4:	784b      	ldrb	r3, [r1, #1]
 80006d6:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 80006da:	788b      	ldrb	r3, [r1, #2]
 80006dc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 80006e0:	78cb      	ldrb	r3, [r1, #3]
 80006e2:	ea44 6403 	orr.w	r4, r4, r3, lsl #24
      if(ints_lengthT > ints_length)
 80006e6:	6843      	ldr	r3, [r0, #4]
 80006e8:	429c      	cmp	r4, r3
 80006ea:	d819      	bhi.n	8000720 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x54>
      ints_length = ints_lengthT;
 80006ec:	6074      	str	r4, [r6, #4]
      for( uint32_t i = 0; i < ints_length; i++){
 80006ee:	2200      	movs	r2, #0
      offset += sizeof(this->ints_length);
 80006f0:	2404      	movs	r4, #4
      for( uint32_t i = 0; i < ints_length; i++){
 80006f2:	6873      	ldr	r3, [r6, #4]
 80006f4:	429a      	cmp	r2, r3
 80006f6:	d219      	bcs.n	800072c <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x60>
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80006f8:	5d2b      	ldrb	r3, [r5, r4]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80006fa:	1c61      	adds	r1, r4, #1
 80006fc:	5c69      	ldrb	r1, [r5, r1]
 80006fe:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8000702:	1ca1      	adds	r1, r4, #2
 8000704:	5c69      	ldrb	r1, [r5, r1]
 8000706:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800070a:	1ce1      	adds	r1, r4, #3
 800070c:	5c69      	ldrb	r1, [r5, r1]
 800070e:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
      this->st_ints = u_st_ints.real;
 8000712:	60b3      	str	r3, [r6, #8]
      offset += sizeof(this->st_ints);
 8000714:	3404      	adds	r4, #4
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
 8000716:	68f1      	ldr	r1, [r6, #12]
 8000718:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
      for( uint32_t i = 0; i < ints_length; i++){
 800071c:	3201      	adds	r2, #1
 800071e:	e7e8      	b.n	80006f2 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x26>
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
 8000720:	00a1      	lsls	r1, r4, #2
 8000722:	68c0      	ldr	r0, [r0, #12]
 8000724:	f002 fb40 	bl	8002da8 <realloc>
 8000728:	60f0      	str	r0, [r6, #12]
 800072a:	e7df      	b.n	80006ec <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x20>
      uint32_t floats_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 800072c:	5d2f      	ldrb	r7, [r5, r4]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 800072e:	1c63      	adds	r3, r4, #1
 8000730:	5ceb      	ldrb	r3, [r5, r3]
 8000732:	ea47 2703 	orr.w	r7, r7, r3, lsl #8
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8000736:	1ca3      	adds	r3, r4, #2
 8000738:	5ceb      	ldrb	r3, [r5, r3]
 800073a:	ea47 4703 	orr.w	r7, r7, r3, lsl #16
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 800073e:	1ce3      	adds	r3, r4, #3
 8000740:	5ceb      	ldrb	r3, [r5, r3]
 8000742:	ea47 6703 	orr.w	r7, r7, r3, lsl #24
      offset += sizeof(this->floats_length);
 8000746:	3404      	adds	r4, #4
      if(floats_lengthT > floats_length)
 8000748:	6933      	ldr	r3, [r6, #16]
 800074a:	429f      	cmp	r7, r3
 800074c:	d818      	bhi.n	8000780 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xb4>
      floats_length = floats_lengthT;
 800074e:	6137      	str	r7, [r6, #16]
      for( uint32_t i = 0; i < floats_length; i++){
 8000750:	2200      	movs	r2, #0
 8000752:	6933      	ldr	r3, [r6, #16]
 8000754:	429a      	cmp	r2, r3
 8000756:	d219      	bcs.n	800078c <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xc0>
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8000758:	5d2b      	ldrb	r3, [r5, r4]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800075a:	1c61      	adds	r1, r4, #1
 800075c:	5c69      	ldrb	r1, [r5, r1]
 800075e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8000762:	1ca1      	adds	r1, r4, #2
 8000764:	5c69      	ldrb	r1, [r5, r1]
 8000766:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800076a:	1ce1      	adds	r1, r4, #3
 800076c:	5c69      	ldrb	r1, [r5, r1]
 800076e:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
      this->st_floats = u_st_floats.real;
 8000772:	6173      	str	r3, [r6, #20]
      offset += sizeof(this->st_floats);
 8000774:	3404      	adds	r4, #4
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
 8000776:	69b1      	ldr	r1, [r6, #24]
 8000778:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
      for( uint32_t i = 0; i < floats_length; i++){
 800077c:	3201      	adds	r2, #1
 800077e:	e7e8      	b.n	8000752 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x86>
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
 8000780:	00b9      	lsls	r1, r7, #2
 8000782:	69b0      	ldr	r0, [r6, #24]
 8000784:	f002 fb10 	bl	8002da8 <realloc>
 8000788:	61b0      	str	r0, [r6, #24]
 800078a:	e7e0      	b.n	800074e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x82>
      uint32_t strings_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 800078c:	5d2f      	ldrb	r7, [r5, r4]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 800078e:	1c63      	adds	r3, r4, #1
 8000790:	5ceb      	ldrb	r3, [r5, r3]
 8000792:	ea47 2703 	orr.w	r7, r7, r3, lsl #8
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8000796:	1ca3      	adds	r3, r4, #2
 8000798:	5ceb      	ldrb	r3, [r5, r3]
 800079a:	ea47 4703 	orr.w	r7, r7, r3, lsl #16
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 800079e:	1ce3      	adds	r3, r4, #3
 80007a0:	5ceb      	ldrb	r3, [r5, r3]
 80007a2:	ea47 6703 	orr.w	r7, r7, r3, lsl #24
      offset += sizeof(this->strings_length);
 80007a6:	3404      	adds	r4, #4
      if(strings_lengthT > strings_length)
 80007a8:	69f3      	ldr	r3, [r6, #28]
 80007aa:	429f      	cmp	r7, r3
 80007ac:	d803      	bhi.n	80007b6 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xea>
      strings_length = strings_lengthT;
 80007ae:	61f7      	str	r7, [r6, #28]
      for( uint32_t i = 0; i < strings_length; i++){
 80007b0:	f04f 0e00 	mov.w	lr, #0
 80007b4:	e01b      	b.n	80007ee <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x122>
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
 80007b6:	00b9      	lsls	r1, r7, #2
 80007b8:	6a70      	ldr	r0, [r6, #36]	; 0x24
 80007ba:	f002 faf5 	bl	8002da8 <realloc>
 80007be:	6270      	str	r0, [r6, #36]	; 0x24
 80007c0:	e7f5      	b.n	80007ae <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xe2>
      offset += 4;
 80007c2:	3404      	adds	r4, #4
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 80007c4:	4623      	mov	r3, r4
 80007c6:	18a0      	adds	r0, r4, r2
 80007c8:	4283      	cmp	r3, r0
 80007ca:	d204      	bcs.n	80007d6 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x10a>
          inbuffer[k-1]=inbuffer[k];
 80007cc:	1e59      	subs	r1, r3, #1
 80007ce:	5cef      	ldrb	r7, [r5, r3]
 80007d0:	546f      	strb	r7, [r5, r1]
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 80007d2:	3301      	adds	r3, #1
 80007d4:	e7f7      	b.n	80007c6 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xfa>
      inbuffer[offset+length_st_strings-1]=0;
 80007d6:	1e43      	subs	r3, r0, #1
 80007d8:	2200      	movs	r2, #0
 80007da:	54ea      	strb	r2, [r5, r3]
      this->st_strings = (char *)(inbuffer + offset-1);
 80007dc:	3c01      	subs	r4, #1
 80007de:	192b      	adds	r3, r5, r4
 80007e0:	6233      	str	r3, [r6, #32]
      offset += length_st_strings;
 80007e2:	4604      	mov	r4, r0
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
 80007e4:	6a72      	ldr	r2, [r6, #36]	; 0x24
 80007e6:	f842 302e 	str.w	r3, [r2, lr, lsl #2]
      for( uint32_t i = 0; i < strings_length; i++){
 80007ea:	f10e 0e01 	add.w	lr, lr, #1
 80007ee:	69f3      	ldr	r3, [r6, #28]
 80007f0:	459e      	cmp	lr, r3
 80007f2:	d20b      	bcs.n	800080c <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x140>
      arrToVar(length_st_strings, (inbuffer + offset));
 80007f4:	4627      	mov	r7, r4
    var = 0;
 80007f6:	2200      	movs	r2, #0
    for (size_t i = 0; i < sizeof(V); i++)
 80007f8:	4613      	mov	r3, r2
 80007fa:	2b03      	cmp	r3, #3
 80007fc:	d8e1      	bhi.n	80007c2 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xf6>
      var |= (arr[i] << (8 * i));
 80007fe:	19e9      	adds	r1, r5, r7
 8000800:	5cc9      	ldrb	r1, [r1, r3]
 8000802:	00d8      	lsls	r0, r3, #3
 8000804:	4081      	lsls	r1, r0
 8000806:	430a      	orrs	r2, r1
    for (size_t i = 0; i < sizeof(V); i++)
 8000808:	3301      	adds	r3, #1
 800080a:	e7f6      	b.n	80007fa <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x12e>
    }
 800080c:	4620      	mov	r0, r4
 800080e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08000810 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE7publishEiPKNS_3MsgE>:
      }
    }
    configured_ = true;
  }

  virtual int publish(int id, const Msg * msg)
 8000810:	b530      	push	{r4, r5, lr}
 8000812:	b085      	sub	sp, #20
  {
    if (id >= 100 && !configured_)
 8000814:	2963      	cmp	r1, #99	; 0x63
 8000816:	dd03      	ble.n	8000820 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE7publishEiPKNS_3MsgE+0x10>
 8000818:	f890 38f4 	ldrb.w	r3, [r0, #2292]	; 0x8f4
 800081c:	2b00      	cmp	r3, #0
 800081e:	d066      	beq.n	80008ee <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE7publishEiPKNS_3MsgE+0xde>
 8000820:	460d      	mov	r5, r1
 8000822:	4604      	mov	r4, r0
      return 0;

    /* serialize message */
    int l = msg->serialize(message_out + 7);
 8000824:	6813      	ldr	r3, [r2, #0]
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	f200 411f 	addw	r1, r0, #1055	; 0x41f
 800082c:	4610      	mov	r0, r2
 800082e:	4798      	blx	r3

    /* setup the header */
    message_out[0] = 0xff;
 8000830:	23ff      	movs	r3, #255	; 0xff
 8000832:	f884 3418 	strb.w	r3, [r4, #1048]	; 0x418
    message_out[1] = PROTOCOL_VER;
 8000836:	23fe      	movs	r3, #254	; 0xfe
 8000838:	f884 3419 	strb.w	r3, [r4, #1049]	; 0x419
    message_out[2] = (uint8_t)((uint16_t)l & 255);
 800083c:	b2c3      	uxtb	r3, r0
 800083e:	f884 341a 	strb.w	r3, [r4, #1050]	; 0x41a
    message_out[3] = (uint8_t)((uint16_t)l >> 8);
 8000842:	f3c0 2207 	ubfx	r2, r0, #8, #8
 8000846:	f884 241b 	strb.w	r2, [r4, #1051]	; 0x41b
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 800084a:	4413      	add	r3, r2
 800084c:	b2db      	uxtb	r3, r3
 800084e:	43db      	mvns	r3, r3
 8000850:	f884 341c 	strb.w	r3, [r4, #1052]	; 0x41c
    message_out[5] = (uint8_t)((int16_t)id & 255);
 8000854:	f884 541d 	strb.w	r5, [r4, #1053]	; 0x41d
    message_out[6] = (uint8_t)((int16_t)id >> 8);
 8000858:	f345 2307 	sbfx	r3, r5, #8, #8
 800085c:	f884 341e 	strb.w	r3, [r4, #1054]	; 0x41e

    /* calculate checksum */
    int chk = 0;
    for (int i = 5; i < l + 7; i++)
 8000860:	2305      	movs	r3, #5
    int chk = 0;
 8000862:	2200      	movs	r2, #0
    for (int i = 5; i < l + 7; i++)
 8000864:	1dc1      	adds	r1, r0, #7
 8000866:	428b      	cmp	r3, r1
 8000868:	da05      	bge.n	8000876 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE7publishEiPKNS_3MsgE+0x66>
      chk += message_out[i];
 800086a:	18e1      	adds	r1, r4, r3
 800086c:	f891 1418 	ldrb.w	r1, [r1, #1048]	; 0x418
 8000870:	440a      	add	r2, r1
    for (int i = 5; i < l + 7; i++)
 8000872:	3301      	adds	r3, #1
 8000874:	e7f6      	b.n	8000864 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE7publishEiPKNS_3MsgE+0x54>
    l += 7;
    message_out[l++] = 255 - (chk % 256);
 8000876:	f100 0508 	add.w	r5, r0, #8
 800087a:	4253      	negs	r3, r2
 800087c:	b2d2      	uxtb	r2, r2
 800087e:	b2db      	uxtb	r3, r3
 8000880:	bf58      	it	pl
 8000882:	425a      	negpl	r2, r3
 8000884:	43d2      	mvns	r2, r2
 8000886:	4421      	add	r1, r4
 8000888:	f881 2418 	strb.w	r2, [r1, #1048]	; 0x418

    if (l <= OUTPUT_SIZE)
 800088c:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 8000890:	dc1d      	bgt.n	80008ce <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE7publishEiPKNS_3MsgE+0xbe>
    {
      hardware_.write(message_out, l);
 8000892:	f504 6183 	add.w	r1, r4, #1048	; 0x418
		return com->read();
	}

	void write(uint8_t* data, int length)
	{
		com->write(data, length);
 8000896:	6860      	ldr	r0, [r4, #4]
		return c;
	}

	inline void write(const uint8_t * const c, const int length)
	{
		if (length > BUF_SIZE || length < 1)
 8000898:	1e6b      	subs	r3, r5, #1
 800089a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800089e:	d213      	bcs.n	80008c8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE7publishEiPKNS_3MsgE+0xb8>
		{
			return;
		}

		while(!tx_cplt)
 80008a0:	f890 3800 	ldrb.w	r3, [r0, #2048]	; 0x800
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d0fb      	beq.n	80008a0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE7publishEiPKNS_3MsgE+0x90>
 80008a8:	2300      	movs	r3, #0
		{

		}

		for (int i = 0; i < length; i++)
 80008aa:	429d      	cmp	r5, r3
 80008ac:	dd03      	ble.n	80008b6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE7publishEiPKNS_3MsgE+0xa6>
		{
			tx_buf[i] = c[i];
 80008ae:	5cca      	ldrb	r2, [r1, r3]
 80008b0:	54c2      	strb	r2, [r0, r3]
		for (int i = 0; i < length; i++)
 80008b2:	3301      	adds	r3, #1
 80008b4:	e7f9      	b.n	80008aa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE7publishEiPKNS_3MsgE+0x9a>
		}

		if(tx_cplt)
		{
			tx_cplt = false;
 80008b6:	2300      	movs	r3, #0
 80008b8:	f880 3800 	strb.w	r3, [r0, #2048]	; 0x800
			HAL_UART_Transmit_DMA(&huart, tx_buf, length);
 80008bc:	b2aa      	uxth	r2, r5
 80008be:	4601      	mov	r1, r0
 80008c0:	f8d0 0808 	ldr.w	r0, [r0, #2056]	; 0x808
 80008c4:	f002 f834 	bl	8002930 <HAL_UART_Transmit_DMA>
    else
    {
      logerror("Message from device dropped: message larger than buffer.");
      return -1;
    }
  }
 80008c8:	4628      	mov	r0, r5
 80008ca:	b005      	add	sp, #20
 80008cc:	bd30      	pop	{r4, r5, pc}
      msg("")
 80008ce:	4b09      	ldr	r3, [pc, #36]	; (80008f4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE7publishEiPKNS_3MsgE+0xe4>)
 80008d0:	9301      	str	r3, [sp, #4]

private:
  void log(char byte, const char * msg)
  {
    rosserial_msgs::Log l;
    l.level = byte;
 80008d2:	2303      	movs	r3, #3
 80008d4:	f88d 3008 	strb.w	r3, [sp, #8]
    l.msg = (char*)msg;
 80008d8:	4b07      	ldr	r3, [pc, #28]	; (80008f8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE7publishEiPKNS_3MsgE+0xe8>)
 80008da:	9303      	str	r3, [sp, #12]
    publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
 80008dc:	6823      	ldr	r3, [r4, #0]
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	aa01      	add	r2, sp, #4
 80008e2:	2107      	movs	r1, #7
 80008e4:	4620      	mov	r0, r4
 80008e6:	4798      	blx	r3
      return -1;
 80008e8:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80008ec:	e7ec      	b.n	80008c8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE7publishEiPKNS_3MsgE+0xb8>
      return 0;
 80008ee:	2500      	movs	r5, #0
 80008f0:	e7ea      	b.n	80008c8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE7publishEiPKNS_3MsgE+0xb8>
 80008f2:	bf00      	nop
 80008f4:	080037e4 	.word	0x080037e4
 80008f8:	08003910 	.word	0x08003910

080008fc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv>:
  virtual int spinOnce()
 80008fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000900:	b087      	sub	sp, #28
 8000902:	4604      	mov	r4, r0
	}

	unsigned long time()
	{
		return HAL_GetTick();
 8000904:	f001 f824 	bl	8001950 <HAL_GetTick>
 8000908:	4605      	mov	r5, r0
    if ((c_time - last_sync_receive_time) > (SYNC_SECONDS * 2200))
 800090a:	f8d4 38fc 	ldr.w	r3, [r4, #2300]	; 0x8fc
 800090e:	1ac3      	subs	r3, r0, r3
 8000910:	f642 22f8 	movw	r2, #11000	; 0x2af8
 8000914:	4293      	cmp	r3, r2
 8000916:	d902      	bls.n	800091e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x22>
      configured_ = false;
 8000918:	2300      	movs	r3, #0
 800091a:	f884 38f4 	strb.w	r3, [r4, #2292]	; 0x8f4
    if (mode_ != MODE_FIRST_FF)
 800091e:	f8d4 38e0 	ldr.w	r3, [r4, #2272]	; 0x8e0
 8000922:	b35b      	cbz	r3, 800097c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x80>
      if (c_time > last_msg_timeout_time)
 8000924:	f8d4 3900 	ldr.w	r3, [r4, #2304]	; 0x900
 8000928:	42ab      	cmp	r3, r5
 800092a:	d227      	bcs.n	800097c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x80>
        mode_ = MODE_FIRST_FF;
 800092c:	2300      	movs	r3, #0
 800092e:	f8c4 38e0 	str.w	r3, [r4, #2272]	; 0x8e0
 8000932:	e023      	b.n	800097c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x80>
 8000934:	f001 f80c 	bl	8001950 <HAL_GetTick>
        if ((hardware_.time() - c_time) > spin_timeout_)
 8000938:	1b40      	subs	r0, r0, r5
 800093a:	6963      	ldr	r3, [r4, #20]
 800093c:	4298      	cmp	r0, r3
 800093e:	d920      	bls.n	8000982 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x86>
          return SPIN_TIMEOUT;
 8000940:	f06f 0001 	mvn.w	r0, #1
 8000944:	e289      	b.n	8000e5a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x55e>
			return -1;
 8000946:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800094a:	e02f      	b.n	80009ac <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0xb0>
        message_in[index_++] = data;
 800094c:	f8d4 38ec 	ldr.w	r3, [r4, #2284]	; 0x8ec
 8000950:	1c5a      	adds	r2, r3, #1
 8000952:	f8c4 28ec 	str.w	r2, [r4, #2284]	; 0x8ec
 8000956:	4423      	add	r3, r4
 8000958:	7618      	strb	r0, [r3, #24]
        bytes_--;
 800095a:	f8d4 38e4 	ldr.w	r3, [r4, #2276]	; 0x8e4
 800095e:	3b01      	subs	r3, #1
 8000960:	f8c4 38e4 	str.w	r3, [r4, #2276]	; 0x8e4
        if (bytes_ == 0)                 /* is message complete? if so, checksum */
 8000964:	b953      	cbnz	r3, 800097c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x80>
          mode_ = MODE_MSG_CHECKSUM;
 8000966:	2308      	movs	r3, #8
 8000968:	f8c4 38e0 	str.w	r3, [r4, #2272]	; 0x8e0
 800096c:	e006      	b.n	800097c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x80>
          mode_++;
 800096e:	3301      	adds	r3, #1
 8000970:	f8c4 38e0 	str.w	r3, [r4, #2272]	; 0x8e0
          last_msg_timeout_time = c_time + SERIAL_MSG_TIMEOUT;
 8000974:	f105 0314 	add.w	r3, r5, #20
 8000978:	f8c4 3900 	str.w	r3, [r4, #2304]	; 0x900
      if (spin_timeout_ > 0)
 800097c:	6963      	ldr	r3, [r4, #20]
 800097e:	2b00      	cmp	r3, #0
 8000980:	d1d8      	bne.n	8000934 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x38>
		return com->read();
 8000982:	6861      	ldr	r1, [r4, #4]
		uint16_t rx_head = (BUF_SIZE - huart.hdmarx->Instance->CNDTR)
 8000984:	f8d1 3808 	ldr.w	r3, [r1, #2056]	; 0x808
 8000988:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	685b      	ldr	r3, [r3, #4]
				& buf_mask;
 800098e:	425b      	negs	r3, r3
 8000990:	f3c3 0309 	ubfx	r3, r3, #0, #10
		if (rx_tail == rx_head)
 8000994:	f8b1 2802 	ldrh.w	r2, [r1, #2050]	; 0x802
 8000998:	4293      	cmp	r3, r2
 800099a:	d0d4      	beq.n	8000946 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x4a>
		int c = (int) rx_buf[rx_tail++];
 800099c:	1c53      	adds	r3, r2, #1
 800099e:	440a      	add	r2, r1
 80009a0:	f892 0400 	ldrb.w	r0, [r2, #1024]	; 0x400
		rx_tail &= buf_mask;
 80009a4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80009a8:	f8a1 3802 	strh.w	r3, [r1, #2050]	; 0x802
      if (data < 0)
 80009ac:	2800      	cmp	r0, #0
 80009ae:	f2c0 8235 	blt.w	8000e1c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x520>
      checksum_ += data;
 80009b2:	f8d4 28f0 	ldr.w	r2, [r4, #2288]	; 0x8f0
 80009b6:	4402      	add	r2, r0
 80009b8:	f8c4 28f0 	str.w	r2, [r4, #2288]	; 0x8f0
      if (mode_ == MODE_MESSAGE)          /* message data being recieved */
 80009bc:	f8d4 38e0 	ldr.w	r3, [r4, #2272]	; 0x8e0
 80009c0:	2b07      	cmp	r3, #7
 80009c2:	d0c3      	beq.n	800094c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x50>
      else if (mode_ == MODE_FIRST_FF)
 80009c4:	b973      	cbnz	r3, 80009e4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0xe8>
        if (data == 0xff)
 80009c6:	28ff      	cmp	r0, #255	; 0xff
 80009c8:	d0d1      	beq.n	800096e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x72>
		return HAL_GetTick();
 80009ca:	f000 ffc1 	bl	8001950 <HAL_GetTick>
        else if (hardware_.time() - c_time > (SYNC_SECONDS * 1000))
 80009ce:	1b40      	subs	r0, r0, r5
 80009d0:	f241 3388 	movw	r3, #5000	; 0x1388
 80009d4:	4298      	cmp	r0, r3
 80009d6:	d9d1      	bls.n	800097c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x80>
          configured_ = false;
 80009d8:	2300      	movs	r3, #0
 80009da:	f884 38f4 	strb.w	r3, [r4, #2292]	; 0x8f4
          return SPIN_TIMEOUT;
 80009de:	f06f 0001 	mvn.w	r0, #1
 80009e2:	e23a      	b.n	8000e5a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x55e>
      else if (mode_ == MODE_PROTOCOL_VER)
 80009e4:	2b01      	cmp	r3, #1
 80009e6:	d034      	beq.n	8000a52 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x156>
      else if (mode_ == MODE_SIZE_L)      /* bottom half of message size */
 80009e8:	2b02      	cmp	r3, #2
 80009ea:	d04e      	beq.n	8000a8a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x18e>
      else if (mode_ == MODE_SIZE_H)      /* top half of message size */
 80009ec:	2b03      	cmp	r3, #3
 80009ee:	d057      	beq.n	8000aa0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x1a4>
      else if (mode_ == MODE_SIZE_CHECKSUM)
 80009f0:	2b04      	cmp	r3, #4
 80009f2:	d05f      	beq.n	8000ab4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x1b8>
      else if (mode_ == MODE_TOPIC_L)     /* bottom half of topic id */
 80009f4:	2b05      	cmp	r3, #5
 80009f6:	d06c      	beq.n	8000ad2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x1d6>
      else if (mode_ == MODE_TOPIC_H)     /* top half of topic id */
 80009f8:	2b06      	cmp	r3, #6
 80009fa:	d072      	beq.n	8000ae2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x1e6>
      else if (mode_ == MODE_MSG_CHECKSUM)    /* do checksum */
 80009fc:	2b08      	cmp	r3, #8
 80009fe:	d1bd      	bne.n	800097c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x80>
        mode_ = MODE_FIRST_FF;
 8000a00:	2300      	movs	r3, #0
 8000a02:	f8c4 38e0 	str.w	r3, [r4, #2272]	; 0x8e0
        if ((checksum_ % 256) == 255)
 8000a06:	1a9b      	subs	r3, r3, r2
 8000a08:	b2d2      	uxtb	r2, r2
 8000a0a:	b2db      	uxtb	r3, r3
 8000a0c:	bf58      	it	pl
 8000a0e:	425a      	negpl	r2, r3
 8000a10:	2aff      	cmp	r2, #255	; 0xff
 8000a12:	d1b3      	bne.n	800097c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x80>
          if (topic_ == TopicInfo::ID_PUBLISHER)
 8000a14:	f8d4 68e8 	ldr.w	r6, [r4, #2280]	; 0x8e8
 8000a18:	2e00      	cmp	r6, #0
 8000a1a:	d074      	beq.n	8000b06 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x20a>
          else if (topic_ == TopicInfo::ID_TIME)
 8000a1c:	2e0a      	cmp	r6, #10
 8000a1e:	f000 80e8 	beq.w	8000bf2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x2f6>
          else if (topic_ == TopicInfo::ID_PARAMETER_REQUEST)
 8000a22:	2e06      	cmp	r6, #6
 8000a24:	f000 812a 	beq.w	8000c7c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x380>
          else if (topic_ == TopicInfo::ID_TX_STOP)
 8000a28:	2e0b      	cmp	r6, #11
 8000a2a:	f000 81f3 	beq.w	8000e14 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x518>
            if (subscribers[topic_ - 100])
 8000a2e:	f506 73dd 	add.w	r3, r6, #442	; 0x1ba
 8000a32:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8000a36:	6858      	ldr	r0, [r3, #4]
 8000a38:	2800      	cmp	r0, #0
 8000a3a:	d09f      	beq.n	800097c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x80>
              subscribers[topic_ - 100]->callback(message_in);
 8000a3c:	f506 73dd 	add.w	r3, r6, #442	; 0x1ba
 8000a40:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8000a44:	685b      	ldr	r3, [r3, #4]
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	f104 0118 	add.w	r1, r4, #24
 8000a4e:	4798      	blx	r3
 8000a50:	e794      	b.n	800097c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x80>
        if (data == PROTOCOL_VER)
 8000a52:	28fe      	cmp	r0, #254	; 0xfe
 8000a54:	d015      	beq.n	8000a82 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x186>
          mode_ = MODE_FIRST_FF;
 8000a56:	2300      	movs	r3, #0
 8000a58:	f8c4 38e0 	str.w	r3, [r4, #2272]	; 0x8e0
          if (configured_ == false)
 8000a5c:	f894 38f4 	ldrb.w	r3, [r4, #2292]	; 0x8f4
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d18b      	bne.n	800097c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x80>
      data()
 8000a64:	4bbe      	ldr	r3, [pc, #760]	; (8000d60 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x464>)
 8000a66:	9300      	str	r3, [sp, #0]
class Time
{
public:
  uint32_t sec, nsec;

  Time() : sec(0), nsec(0) {}
 8000a68:	2300      	movs	r3, #0
 8000a6a:	9301      	str	r3, [sp, #4]
 8000a6c:	9302      	str	r3, [sp, #8]
    publish(TopicInfo::ID_TIME, &t);
 8000a6e:	6823      	ldr	r3, [r4, #0]
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	466a      	mov	r2, sp
 8000a74:	210a      	movs	r1, #10
 8000a76:	4620      	mov	r0, r4
 8000a78:	4798      	blx	r3
 8000a7a:	f000 ff69 	bl	8001950 <HAL_GetTick>
    rt_time = hardware_.time();
 8000a7e:	60a0      	str	r0, [r4, #8]
 8000a80:	e77c      	b.n	800097c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x80>
          mode_++;
 8000a82:	3301      	adds	r3, #1
 8000a84:	f8c4 38e0 	str.w	r3, [r4, #2272]	; 0x8e0
 8000a88:	e778      	b.n	800097c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x80>
        bytes_ = data;
 8000a8a:	f8c4 08e4 	str.w	r0, [r4, #2276]	; 0x8e4
        index_ = 0;
 8000a8e:	2200      	movs	r2, #0
 8000a90:	f8c4 28ec 	str.w	r2, [r4, #2284]	; 0x8ec
        mode_++;
 8000a94:	3301      	adds	r3, #1
 8000a96:	f8c4 38e0 	str.w	r3, [r4, #2272]	; 0x8e0
        checksum_ = data;               /* first byte for calculating size checksum */
 8000a9a:	f8c4 08f0 	str.w	r0, [r4, #2288]	; 0x8f0
 8000a9e:	e76d      	b.n	800097c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x80>
        bytes_ += data << 8;
 8000aa0:	f8d4 28e4 	ldr.w	r2, [r4, #2276]	; 0x8e4
 8000aa4:	eb02 2000 	add.w	r0, r2, r0, lsl #8
 8000aa8:	f8c4 08e4 	str.w	r0, [r4, #2276]	; 0x8e4
        mode_++;
 8000aac:	3301      	adds	r3, #1
 8000aae:	f8c4 38e0 	str.w	r3, [r4, #2272]	; 0x8e0
 8000ab2:	e763      	b.n	800097c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x80>
        if ((checksum_ % 256) == 255)
 8000ab4:	4251      	negs	r1, r2
 8000ab6:	b2d2      	uxtb	r2, r2
 8000ab8:	b2c9      	uxtb	r1, r1
 8000aba:	bf58      	it	pl
 8000abc:	424a      	negpl	r2, r1
 8000abe:	2aff      	cmp	r2, #255	; 0xff
 8000ac0:	d003      	beq.n	8000aca <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x1ce>
          mode_ = MODE_FIRST_FF;          /* Abandon the frame if the msg len is wrong */
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	f8c4 38e0 	str.w	r3, [r4, #2272]	; 0x8e0
 8000ac8:	e758      	b.n	800097c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x80>
          mode_++;
 8000aca:	3301      	adds	r3, #1
 8000acc:	f8c4 38e0 	str.w	r3, [r4, #2272]	; 0x8e0
 8000ad0:	e754      	b.n	800097c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x80>
        topic_ = data;
 8000ad2:	f8c4 08e8 	str.w	r0, [r4, #2280]	; 0x8e8
        mode_++;
 8000ad6:	3301      	adds	r3, #1
 8000ad8:	f8c4 38e0 	str.w	r3, [r4, #2272]	; 0x8e0
        checksum_ = data;               /* first byte included in checksum */
 8000adc:	f8c4 08f0 	str.w	r0, [r4, #2288]	; 0x8f0
 8000ae0:	e74c      	b.n	800097c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x80>
        topic_ += data << 8;
 8000ae2:	f8d4 38e8 	ldr.w	r3, [r4, #2280]	; 0x8e8
 8000ae6:	eb03 2000 	add.w	r0, r3, r0, lsl #8
 8000aea:	f8c4 08e8 	str.w	r0, [r4, #2280]	; 0x8e8
        mode_ = MODE_MESSAGE;
 8000aee:	2307      	movs	r3, #7
 8000af0:	f8c4 38e0 	str.w	r3, [r4, #2272]	; 0x8e0
        if (bytes_ == 0)
 8000af4:	f8d4 38e4 	ldr.w	r3, [r4, #2276]	; 0x8e4
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	f47f af3f 	bne.w	800097c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x80>
          mode_ = MODE_MSG_CHECKSUM;
 8000afe:	2308      	movs	r3, #8
 8000b00:	f8c4 38e0 	str.w	r3, [r4, #2272]	; 0x8e0
 8000b04:	e73a      	b.n	800097c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x80>
 8000b06:	4b96      	ldr	r3, [pc, #600]	; (8000d60 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x464>)
 8000b08:	9300      	str	r3, [sp, #0]
 8000b0a:	2700      	movs	r7, #0
 8000b0c:	9701      	str	r7, [sp, #4]
 8000b0e:	9702      	str	r7, [sp, #8]
    publish(TopicInfo::ID_TIME, &t);
 8000b10:	6823      	ldr	r3, [r4, #0]
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	466a      	mov	r2, sp
 8000b16:	210a      	movs	r1, #10
 8000b18:	4620      	mov	r0, r4
 8000b1a:	4798      	blx	r3
 8000b1c:	f000 ff18 	bl	8001950 <HAL_GetTick>
    rt_time = hardware_.time();
 8000b20:	60a0      	str	r0, [r4, #8]
      buffer_size(0)
 8000b22:	4b90      	ldr	r3, [pc, #576]	; (8000d64 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x468>)
 8000b24:	9300      	str	r3, [sp, #0]
 8000b26:	f8ad 7004 	strh.w	r7, [sp, #4]
 8000b2a:	4b8f      	ldr	r3, [pc, #572]	; (8000d68 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x46c>)
 8000b2c:	9302      	str	r3, [sp, #8]
 8000b2e:	9303      	str	r3, [sp, #12]
 8000b30:	9304      	str	r3, [sp, #16]
 8000b32:	9705      	str	r7, [sp, #20]
    for (i = 0; i < MAX_PUBLISHERS; i++)
 8000b34:	4637      	mov	r7, r6
 8000b36:	e000      	b.n	8000b3a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x23e>
 8000b38:	3701      	adds	r7, #1
 8000b3a:	2f18      	cmp	r7, #24
 8000b3c:	dc25      	bgt.n	8000b8a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x28e>
      if (publishers[i] != 0) // non-empty slot
 8000b3e:	f207 2306 	addw	r3, r7, #518	; 0x206
 8000b42:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d0f6      	beq.n	8000b38 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x23c>
        ti.topic_id = publishers[i]->id_;
 8000b4a:	689a      	ldr	r2, [r3, #8]
 8000b4c:	f8ad 2004 	strh.w	r2, [sp, #4]
        ti.topic_name = (char *) publishers[i]->topic_;
 8000b50:	681a      	ldr	r2, [r3, #0]
 8000b52:	9202      	str	r2, [sp, #8]
        ti.message_type = (char *) publishers[i]->msg_->getType();
 8000b54:	6858      	ldr	r0, [r3, #4]
 8000b56:	6803      	ldr	r3, [r0, #0]
 8000b58:	689b      	ldr	r3, [r3, #8]
 8000b5a:	4798      	blx	r3
 8000b5c:	9003      	str	r0, [sp, #12]
        ti.md5sum = (char *) publishers[i]->msg_->getMD5();
 8000b5e:	f207 2806 	addw	r8, r7, #518	; 0x206
 8000b62:	f854 3028 	ldr.w	r3, [r4, r8, lsl #2]
 8000b66:	6858      	ldr	r0, [r3, #4]
 8000b68:	6803      	ldr	r3, [r0, #0]
 8000b6a:	68db      	ldr	r3, [r3, #12]
 8000b6c:	4798      	blx	r3
 8000b6e:	9004      	str	r0, [sp, #16]
        ti.buffer_size = OUTPUT_SIZE;
 8000b70:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b74:	9305      	str	r3, [sp, #20]
        publish(publishers[i]->getEndpointType(), &ti);
 8000b76:	6823      	ldr	r3, [r4, #0]
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	f854 1028 	ldr.w	r1, [r4, r8, lsl #2]
 8000b7e:	466a      	mov	r2, sp
 8000b80:	6909      	ldr	r1, [r1, #16]
 8000b82:	4620      	mov	r0, r4
 8000b84:	4798      	blx	r3
 8000b86:	e7d7      	b.n	8000b38 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x23c>
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8000b88:	3601      	adds	r6, #1
 8000b8a:	2e18      	cmp	r6, #24
 8000b8c:	dc27      	bgt.n	8000bde <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x2e2>
      if (subscribers[i] != 0) // non-empty slot
 8000b8e:	f206 231e 	addw	r3, r6, #542	; 0x21e
 8000b92:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8000b96:	6858      	ldr	r0, [r3, #4]
 8000b98:	2800      	cmp	r0, #0
 8000b9a:	d0f5      	beq.n	8000b88 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x28c>
        ti.topic_id = subscribers[i]->id_;
 8000b9c:	6843      	ldr	r3, [r0, #4]
 8000b9e:	f8ad 3004 	strh.w	r3, [sp, #4]
        ti.topic_name = (char *) subscribers[i]->topic_;
 8000ba2:	6883      	ldr	r3, [r0, #8]
 8000ba4:	9302      	str	r3, [sp, #8]
        ti.message_type = (char *) subscribers[i]->getMsgType();
 8000ba6:	6803      	ldr	r3, [r0, #0]
 8000ba8:	689b      	ldr	r3, [r3, #8]
 8000baa:	4798      	blx	r3
 8000bac:	9003      	str	r0, [sp, #12]
        ti.md5sum = (char *) subscribers[i]->getMsgMD5();
 8000bae:	f206 271e 	addw	r7, r6, #542	; 0x21e
 8000bb2:	eb04 0787 	add.w	r7, r4, r7, lsl #2
 8000bb6:	6878      	ldr	r0, [r7, #4]
 8000bb8:	6803      	ldr	r3, [r0, #0]
 8000bba:	68db      	ldr	r3, [r3, #12]
 8000bbc:	4798      	blx	r3
 8000bbe:	9004      	str	r0, [sp, #16]
        ti.buffer_size = INPUT_SIZE;
 8000bc0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000bc4:	9305      	str	r3, [sp, #20]
        publish(subscribers[i]->getEndpointType(), &ti);
 8000bc6:	6823      	ldr	r3, [r4, #0]
 8000bc8:	f8d3 8000 	ldr.w	r8, [r3]
 8000bcc:	6878      	ldr	r0, [r7, #4]
 8000bce:	6803      	ldr	r3, [r0, #0]
 8000bd0:	685b      	ldr	r3, [r3, #4]
 8000bd2:	4798      	blx	r3
 8000bd4:	466a      	mov	r2, sp
 8000bd6:	4601      	mov	r1, r0
 8000bd8:	4620      	mov	r0, r4
 8000bda:	47c0      	blx	r8
 8000bdc:	e7d4      	b.n	8000b88 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x28c>
    configured_ = true;
 8000bde:	2301      	movs	r3, #1
 8000be0:	f884 38f4 	strb.w	r3, [r4, #2292]	; 0x8f4
            last_sync_time = c_time;
 8000be4:	f8c4 58f8 	str.w	r5, [r4, #2296]	; 0x8f8
            last_sync_receive_time = c_time;
 8000be8:	f8c4 58fc 	str.w	r5, [r4, #2300]	; 0x8fc
            return SPIN_ERR;
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000bf0:	e133      	b.n	8000e5a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x55e>
            syncTime(message_in);
 8000bf2:	f104 0618 	add.w	r6, r4, #24
 8000bf6:	f000 feab 	bl	8001950 <HAL_GetTick>
    uint32_t offset = hardware_.time() - rt_time;
 8000bfa:	68a3      	ldr	r3, [r4, #8]
 8000bfc:	1ac0      	subs	r0, r0, r3
      this->data.sec =  ((uint32_t) (*(inbuffer + offset)));
 8000bfe:	7e22      	ldrb	r2, [r4, #24]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8000c00:	4633      	mov	r3, r6
 8000c02:	7871      	ldrb	r1, [r6, #1]
 8000c04:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8000c08:	78b1      	ldrb	r1, [r6, #2]
 8000c0a:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8000c0e:	78f1      	ldrb	r1, [r6, #3]
 8000c10:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
      this->data.nsec =  ((uint32_t) (*(inbuffer + offset)));
 8000c14:	7932      	ldrb	r2, [r6, #4]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8000c16:	7976      	ldrb	r6, [r6, #5]
 8000c18:	ea42 2206 	orr.w	r2, r2, r6, lsl #8
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8000c1c:	799e      	ldrb	r6, [r3, #6]
 8000c1e:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8000c22:	79db      	ldrb	r3, [r3, #7]
 8000c24:	ea42 6203 	orr.w	r2, r2, r3, lsl #24
    t.data.sec += offset / 1000;
 8000c28:	4e50      	ldr	r6, [pc, #320]	; (8000d6c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x470>)
 8000c2a:	fba6 7300 	umull	r7, r3, r6, r0
 8000c2e:	099b      	lsrs	r3, r3, #6
 8000c30:	4419      	add	r1, r3
 8000c32:	9101      	str	r1, [sp, #4]
    t.data.nsec += (offset % 1000) * 1000000UL;
 8000c34:	f44f 787a 	mov.w	r8, #1000	; 0x3e8
 8000c38:	fb08 0313 	mls	r3, r8, r3, r0
 8000c3c:	4f4c      	ldr	r7, [pc, #304]	; (8000d70 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x474>)
 8000c3e:	fb07 2303 	mla	r3, r7, r3, r2
 8000c42:	9302      	str	r3, [sp, #8]
 8000c44:	f000 fe84 	bl	8001950 <HAL_GetTick>
    sec_offset = new_now.sec - ms / 1000 - 1;
 8000c48:	fba6 2300 	umull	r2, r3, r6, r0
 8000c4c:	099b      	lsrs	r3, r3, #6
 8000c4e:	9a01      	ldr	r2, [sp, #4]
 8000c50:	1ad2      	subs	r2, r2, r3
 8000c52:	3a01      	subs	r2, #1
 8000c54:	60e2      	str	r2, [r4, #12]
    nsec_offset = new_now.nsec - (ms % 1000) * 1000000UL + 1000000000UL;
 8000c56:	fb08 0313 	mls	r3, r8, r3, r0
 8000c5a:	9a02      	ldr	r2, [sp, #8]
 8000c5c:	fb07 2313 	mls	r3, r7, r3, r2
 8000c60:	4a44      	ldr	r2, [pc, #272]	; (8000d74 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x478>)
 8000c62:	441a      	add	r2, r3
 8000c64:	6122      	str	r2, [r4, #16]
    normalizeSecNSec(sec_offset, nsec_offset);
 8000c66:	f104 0110 	add.w	r1, r4, #16
 8000c6a:	f104 000c 	add.w	r0, r4, #12
 8000c6e:	f002 f82f 	bl	8002cd0 <_ZN3ros16normalizeSecNSecERmS0_>
 8000c72:	f000 fe6d 	bl	8001950 <HAL_GetTick>
    last_sync_receive_time = hardware_.time();
 8000c76:	f8c4 08fc 	str.w	r0, [r4, #2300]	; 0x8fc
 8000c7a:	e67f      	b.n	800097c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x80>
            req_param_resp.deserialize(message_in);
 8000c7c:	f604 1808 	addw	r8, r4, #2312	; 0x908
 8000c80:	f104 0718 	add.w	r7, r4, #24
      uint32_t ints_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8000c84:	7e26      	ldrb	r6, [r4, #24]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8000c86:	787b      	ldrb	r3, [r7, #1]
 8000c88:	ea46 2603 	orr.w	r6, r6, r3, lsl #8
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8000c8c:	78bb      	ldrb	r3, [r7, #2]
 8000c8e:	ea46 4603 	orr.w	r6, r6, r3, lsl #16
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8000c92:	78fb      	ldrb	r3, [r7, #3]
 8000c94:	ea46 6603 	orr.w	r6, r6, r3, lsl #24
      if(ints_lengthT > ints_length)
 8000c98:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8000c9c:	429e      	cmp	r6, r3
 8000c9e:	d81d      	bhi.n	8000cdc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x3e0>
      ints_length = ints_lengthT;
 8000ca0:	f8c8 6004 	str.w	r6, [r8, #4]
      for( uint32_t i = 0; i < ints_length; i++){
 8000ca4:	2200      	movs	r2, #0
      offset += sizeof(this->ints_length);
 8000ca6:	2604      	movs	r6, #4
      for( uint32_t i = 0; i < ints_length; i++){
 8000ca8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8000cac:	4293      	cmp	r3, r2
 8000cae:	d91d      	bls.n	8000cec <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x3f0>
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8000cb0:	5dbb      	ldrb	r3, [r7, r6]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8000cb2:	1c71      	adds	r1, r6, #1
 8000cb4:	5c79      	ldrb	r1, [r7, r1]
 8000cb6:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8000cba:	1cb1      	adds	r1, r6, #2
 8000cbc:	5c79      	ldrb	r1, [r7, r1]
 8000cbe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8000cc2:	1cf1      	adds	r1, r6, #3
 8000cc4:	5c79      	ldrb	r1, [r7, r1]
 8000cc6:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
      this->st_ints = u_st_ints.real;
 8000cca:	f8c8 3008 	str.w	r3, [r8, #8]
      offset += sizeof(this->st_ints);
 8000cce:	3604      	adds	r6, #4
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
 8000cd0:	f8d8 100c 	ldr.w	r1, [r8, #12]
 8000cd4:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
      for( uint32_t i = 0; i < ints_length; i++){
 8000cd8:	3201      	adds	r2, #1
 8000cda:	e7e5      	b.n	8000ca8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x3ac>
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
 8000cdc:	00b1      	lsls	r1, r6, #2
 8000cde:	f8d8 000c 	ldr.w	r0, [r8, #12]
 8000ce2:	f002 f861 	bl	8002da8 <realloc>
 8000ce6:	f8c8 000c 	str.w	r0, [r8, #12]
 8000cea:	e7d9      	b.n	8000ca0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x3a4>
      uint32_t floats_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8000cec:	f817 9006 	ldrb.w	r9, [r7, r6]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8000cf0:	1c73      	adds	r3, r6, #1
 8000cf2:	5cfb      	ldrb	r3, [r7, r3]
 8000cf4:	ea49 2903 	orr.w	r9, r9, r3, lsl #8
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8000cf8:	1cb3      	adds	r3, r6, #2
 8000cfa:	5cfb      	ldrb	r3, [r7, r3]
 8000cfc:	ea49 4903 	orr.w	r9, r9, r3, lsl #16
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8000d00:	1cf3      	adds	r3, r6, #3
 8000d02:	5cfb      	ldrb	r3, [r7, r3]
 8000d04:	ea49 6903 	orr.w	r9, r9, r3, lsl #24
      offset += sizeof(this->floats_length);
 8000d08:	3604      	adds	r6, #4
      if(floats_lengthT > floats_length)
 8000d0a:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8000d0e:	4599      	cmp	r9, r3
 8000d10:	d81c      	bhi.n	8000d4c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x450>
      floats_length = floats_lengthT;
 8000d12:	f8c8 9010 	str.w	r9, [r8, #16]
      for( uint32_t i = 0; i < floats_length; i++){
 8000d16:	2200      	movs	r2, #0
 8000d18:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8000d1c:	4293      	cmp	r3, r2
 8000d1e:	d92b      	bls.n	8000d78 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x47c>
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8000d20:	5dbb      	ldrb	r3, [r7, r6]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8000d22:	1c71      	adds	r1, r6, #1
 8000d24:	5c79      	ldrb	r1, [r7, r1]
 8000d26:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8000d2a:	1cb1      	adds	r1, r6, #2
 8000d2c:	5c79      	ldrb	r1, [r7, r1]
 8000d2e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8000d32:	1cf1      	adds	r1, r6, #3
 8000d34:	5c79      	ldrb	r1, [r7, r1]
 8000d36:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
      this->st_floats = u_st_floats.real;
 8000d3a:	f8c8 3014 	str.w	r3, [r8, #20]
      offset += sizeof(this->st_floats);
 8000d3e:	3604      	adds	r6, #4
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
 8000d40:	f8d8 1018 	ldr.w	r1, [r8, #24]
 8000d44:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
      for( uint32_t i = 0; i < floats_length; i++){
 8000d48:	3201      	adds	r2, #1
 8000d4a:	e7e5      	b.n	8000d18 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x41c>
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
 8000d4c:	ea4f 0189 	mov.w	r1, r9, lsl #2
 8000d50:	f8d8 0018 	ldr.w	r0, [r8, #24]
 8000d54:	f002 f828 	bl	8002da8 <realloc>
 8000d58:	f8c8 0018 	str.w	r0, [r8, #24]
 8000d5c:	e7d9      	b.n	8000d12 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x416>
 8000d5e:	bf00      	nop
 8000d60:	080037b4 	.word	0x080037b4
 8000d64:	080037cc 	.word	0x080037cc
 8000d68:	08003948 	.word	0x08003948
 8000d6c:	10624dd3 	.word	0x10624dd3
 8000d70:	000f4240 	.word	0x000f4240
 8000d74:	3b9aca00 	.word	0x3b9aca00
      uint32_t strings_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8000d78:	f817 9006 	ldrb.w	r9, [r7, r6]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8000d7c:	1c73      	adds	r3, r6, #1
 8000d7e:	5cfb      	ldrb	r3, [r7, r3]
 8000d80:	ea49 2903 	orr.w	r9, r9, r3, lsl #8
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8000d84:	1cb3      	adds	r3, r6, #2
 8000d86:	5cfb      	ldrb	r3, [r7, r3]
 8000d88:	ea49 4903 	orr.w	r9, r9, r3, lsl #16
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8000d8c:	1cf3      	adds	r3, r6, #3
 8000d8e:	5cfb      	ldrb	r3, [r7, r3]
 8000d90:	ea49 6903 	orr.w	r9, r9, r3, lsl #24
      offset += sizeof(this->strings_length);
 8000d94:	3604      	adds	r6, #4
      if(strings_lengthT > strings_length)
 8000d96:	f8d8 301c 	ldr.w	r3, [r8, #28]
 8000d9a:	4599      	cmp	r9, r3
 8000d9c:	d804      	bhi.n	8000da8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x4ac>
      strings_length = strings_lengthT;
 8000d9e:	f8c8 901c 	str.w	r9, [r8, #28]
      for( uint32_t i = 0; i < strings_length; i++){
 8000da2:	f04f 0e00 	mov.w	lr, #0
 8000da6:	e029      	b.n	8000dfc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x500>
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
 8000da8:	ea4f 0189 	mov.w	r1, r9, lsl #2
 8000dac:	f8d8 0024 	ldr.w	r0, [r8, #36]	; 0x24
 8000db0:	f001 fffa 	bl	8002da8 <realloc>
 8000db4:	f8c8 0024 	str.w	r0, [r8, #36]	; 0x24
 8000db8:	e7f1      	b.n	8000d9e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x4a2>
      var |= (arr[i] << (8 * i));
 8000dba:	eb07 020c 	add.w	r2, r7, ip
 8000dbe:	5cd2      	ldrb	r2, [r2, r3]
 8000dc0:	00d8      	lsls	r0, r3, #3
 8000dc2:	4082      	lsls	r2, r0
 8000dc4:	4311      	orrs	r1, r2
    for (size_t i = 0; i < sizeof(V); i++)
 8000dc6:	3301      	adds	r3, #1
 8000dc8:	2b03      	cmp	r3, #3
 8000dca:	d9f6      	bls.n	8000dba <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x4be>
      offset += 4;
 8000dcc:	3604      	adds	r6, #4
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8000dce:	4633      	mov	r3, r6
 8000dd0:	198a      	adds	r2, r1, r6
 8000dd2:	429a      	cmp	r2, r3
 8000dd4:	d904      	bls.n	8000de0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x4e4>
          inbuffer[k-1]=inbuffer[k];
 8000dd6:	1e5a      	subs	r2, r3, #1
 8000dd8:	5cf8      	ldrb	r0, [r7, r3]
 8000dda:	54b8      	strb	r0, [r7, r2]
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8000ddc:	3301      	adds	r3, #1
 8000dde:	e7f7      	b.n	8000dd0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x4d4>
      inbuffer[offset+length_st_strings-1]=0;
 8000de0:	1e53      	subs	r3, r2, #1
 8000de2:	2100      	movs	r1, #0
 8000de4:	54f9      	strb	r1, [r7, r3]
      this->st_strings = (char *)(inbuffer + offset-1);
 8000de6:	3e01      	subs	r6, #1
 8000de8:	19bb      	adds	r3, r7, r6
 8000dea:	f8c8 3020 	str.w	r3, [r8, #32]
      offset += length_st_strings;
 8000dee:	4616      	mov	r6, r2
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
 8000df0:	f8d8 2024 	ldr.w	r2, [r8, #36]	; 0x24
 8000df4:	f842 302e 	str.w	r3, [r2, lr, lsl #2]
      for( uint32_t i = 0; i < strings_length; i++){
 8000df8:	f10e 0e01 	add.w	lr, lr, #1
 8000dfc:	f8d8 301c 	ldr.w	r3, [r8, #28]
 8000e00:	4573      	cmp	r3, lr
 8000e02:	d903      	bls.n	8000e0c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x510>
      arrToVar(length_st_strings, (inbuffer + offset));
 8000e04:	46b4      	mov	ip, r6
    var = 0;
 8000e06:	2100      	movs	r1, #0
    for (size_t i = 0; i < sizeof(V); i++)
 8000e08:	460b      	mov	r3, r1
 8000e0a:	e7dd      	b.n	8000dc8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x4cc>
            param_recieved = true;
 8000e0c:	2301      	movs	r3, #1
 8000e0e:	f884 3904 	strb.w	r3, [r4, #2308]	; 0x904
 8000e12:	e5b3      	b.n	800097c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x80>
            configured_ = false;
 8000e14:	2300      	movs	r3, #0
 8000e16:	f884 38f4 	strb.w	r3, [r4, #2292]	; 0x8f4
 8000e1a:	e5af      	b.n	800097c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x80>
    if (configured_ && ((c_time - last_sync_time) > (SYNC_SECONDS * 500)))
 8000e1c:	f894 38f4 	ldrb.w	r3, [r4, #2292]	; 0x8f4
 8000e20:	b1d3      	cbz	r3, 8000e58 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x55c>
 8000e22:	f8d4 38f8 	ldr.w	r3, [r4, #2296]	; 0x8f8
 8000e26:	1aeb      	subs	r3, r5, r3
 8000e28:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8000e2c:	4293      	cmp	r3, r2
 8000e2e:	d801      	bhi.n	8000e34 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x538>
    return SPIN_OK;
 8000e30:	2000      	movs	r0, #0
 8000e32:	e012      	b.n	8000e5a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x55e>
      data()
 8000e34:	4b0a      	ldr	r3, [pc, #40]	; (8000e60 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x564>)
 8000e36:	9300      	str	r3, [sp, #0]
 8000e38:	2600      	movs	r6, #0
 8000e3a:	9601      	str	r6, [sp, #4]
 8000e3c:	9602      	str	r6, [sp, #8]
    publish(TopicInfo::ID_TIME, &t);
 8000e3e:	6823      	ldr	r3, [r4, #0]
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	466a      	mov	r2, sp
 8000e44:	210a      	movs	r1, #10
 8000e46:	4620      	mov	r0, r4
 8000e48:	4798      	blx	r3
 8000e4a:	f000 fd81 	bl	8001950 <HAL_GetTick>
    rt_time = hardware_.time();
 8000e4e:	60a0      	str	r0, [r4, #8]
      last_sync_time = c_time;
 8000e50:	f8c4 58f8 	str.w	r5, [r4, #2296]	; 0x8f8
    return SPIN_OK;
 8000e54:	4630      	mov	r0, r6
 8000e56:	e000      	b.n	8000e5a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x55e>
 8000e58:	2000      	movs	r0, #0
  }
 8000e5a:	b007      	add	sp, #28
 8000e5c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000e60:	080037b4 	.word	0x080037b4

08000e64 <HAL_UART_TxCpltCallback>:
SerialClass serial(huart1);

extern "C" void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
	// comparing pointer
	if (huart->Instance == serial.get_handle()->Instance)
 8000e64:	6802      	ldr	r2, [r0, #0]
		return &huart;
 8000e66:	4b06      	ldr	r3, [pc, #24]	; (8000e80 <HAL_UART_TxCpltCallback+0x1c>)
 8000e68:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
	if (huart->Instance == serial.get_handle()->Instance)
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	429a      	cmp	r2, r3
 8000e70:	d000      	beq.n	8000e74 <HAL_UART_TxCpltCallback+0x10>
 8000e72:	4770      	bx	lr
		tx_cplt = true;
 8000e74:	2201      	movs	r2, #1
 8000e76:	4b02      	ldr	r3, [pc, #8]	; (8000e80 <HAL_UART_TxCpltCallback+0x1c>)
 8000e78:	f883 2800 	strb.w	r2, [r3, #2048]	; 0x800
	{
		serial.tx_cplt_callback();
	}
}
 8000e7c:	e7f9      	b.n	8000e72 <HAL_UART_TxCpltCallback+0xe>
 8000e7e:	bf00      	nop
 8000e80:	20000f78 	.word	0x20000f78

08000e84 <_Error_Handler>:
{
 8000e84:	e7fe      	b.n	8000e84 <_Error_Handler>
	...

08000e88 <_ZL19MX_USART1_UART_Initv>:
{
 8000e88:	b508      	push	{r3, lr}
	huart1.Instance = USART1;
 8000e8a:	480b      	ldr	r0, [pc, #44]	; (8000eb8 <_ZL19MX_USART1_UART_Initv+0x30>)
 8000e8c:	4b0b      	ldr	r3, [pc, #44]	; (8000ebc <_ZL19MX_USART1_UART_Initv+0x34>)
 8000e8e:	6003      	str	r3, [r0, #0]
	huart1.Init.BaudRate = 460800;
 8000e90:	f44f 23e1 	mov.w	r3, #460800	; 0x70800
 8000e94:	6043      	str	r3, [r0, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000e96:	2300      	movs	r3, #0
 8000e98:	6083      	str	r3, [r0, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8000e9a:	60c3      	str	r3, [r0, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8000e9c:	6103      	str	r3, [r0, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8000e9e:	220c      	movs	r2, #12
 8000ea0:	6142      	str	r2, [r0, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ea2:	6183      	str	r3, [r0, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ea4:	61c3      	str	r3, [r0, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK)
 8000ea6:	f001 fd15 	bl	80028d4 <HAL_UART_Init>
 8000eaa:	b900      	cbnz	r0, 8000eae <_ZL19MX_USART1_UART_Initv+0x26>
 8000eac:	bd08      	pop	{r3, pc}
		_Error_Handler(__FILE__, __LINE__);
 8000eae:	21f3      	movs	r1, #243	; 0xf3
 8000eb0:	4803      	ldr	r0, [pc, #12]	; (8000ec0 <_ZL19MX_USART1_UART_Initv+0x38>)
 8000eb2:	f7ff ffe7 	bl	8000e84 <_Error_Handler>
 8000eb6:	bf00      	nop
 8000eb8:	20000608 	.word	0x20000608
 8000ebc:	40013800 	.word	0x40013800
 8000ec0:	08003840 	.word	0x08003840

08000ec4 <_ZL12MX_TIM3_Initv>:
{
 8000ec4:	b500      	push	{lr}
 8000ec6:	b087      	sub	sp, #28
	htim3.Instance = TIM3;
 8000ec8:	4817      	ldr	r0, [pc, #92]	; (8000f28 <_ZL12MX_TIM3_Initv+0x64>)
 8000eca:	4b18      	ldr	r3, [pc, #96]	; (8000f2c <_ZL12MX_TIM3_Initv+0x68>)
 8000ecc:	6003      	str	r3, [r0, #0]
	htim3.Init.Prescaler = 72 - 1;
 8000ece:	2347      	movs	r3, #71	; 0x47
 8000ed0:	6043      	str	r3, [r0, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	6083      	str	r3, [r0, #8]
	htim3.Init.Period = 2000 - 1;
 8000ed6:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8000eda:	60c2      	str	r2, [r0, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000edc:	6103      	str	r3, [r0, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ede:	6183      	str	r3, [r0, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000ee0:	f001 fc0e 	bl	8002700 <HAL_TIM_Base_Init>
 8000ee4:	b998      	cbnz	r0, 8000f0e <_ZL12MX_TIM3_Initv+0x4a>
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ee6:	a906      	add	r1, sp, #24
 8000ee8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000eec:	f841 3d10 	str.w	r3, [r1, #-16]!
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000ef0:	480d      	ldr	r0, [pc, #52]	; (8000f28 <_ZL12MX_TIM3_Initv+0x64>)
 8000ef2:	f001 fa6d 	bl	80023d0 <HAL_TIM_ConfigClockSource>
 8000ef6:	b970      	cbnz	r0, 8000f16 <_ZL12MX_TIM3_Initv+0x52>
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	9300      	str	r3, [sp, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000efc:	9301      	str	r3, [sp, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000efe:	4669      	mov	r1, sp
 8000f00:	4809      	ldr	r0, [pc, #36]	; (8000f28 <_ZL12MX_TIM3_Initv+0x64>)
 8000f02:	f001 fc17 	bl	8002734 <HAL_TIMEx_MasterConfigSynchronization>
 8000f06:	b950      	cbnz	r0, 8000f1e <_ZL12MX_TIM3_Initv+0x5a>
}
 8000f08:	b007      	add	sp, #28
 8000f0a:	f85d fb04 	ldr.w	pc, [sp], #4
		_Error_Handler(__FILE__, __LINE__);
 8000f0e:	21d3      	movs	r1, #211	; 0xd3
 8000f10:	4807      	ldr	r0, [pc, #28]	; (8000f30 <_ZL12MX_TIM3_Initv+0x6c>)
 8000f12:	f7ff ffb7 	bl	8000e84 <_Error_Handler>
		_Error_Handler(__FILE__, __LINE__);
 8000f16:	21d9      	movs	r1, #217	; 0xd9
 8000f18:	4805      	ldr	r0, [pc, #20]	; (8000f30 <_ZL12MX_TIM3_Initv+0x6c>)
 8000f1a:	f7ff ffb3 	bl	8000e84 <_Error_Handler>
		_Error_Handler(__FILE__, __LINE__);
 8000f1e:	21e0      	movs	r1, #224	; 0xe0
 8000f20:	4803      	ldr	r0, [pc, #12]	; (8000f30 <_ZL12MX_TIM3_Initv+0x6c>)
 8000f22:	f7ff ffaf 	bl	8000e84 <_Error_Handler>
 8000f26:	bf00      	nop
 8000f28:	200005c8 	.word	0x200005c8
 8000f2c:	40000400 	.word	0x40000400
 8000f30:	08003840 	.word	0x08003840

08000f34 <_Z18SystemClock_Configv>:
{
 8000f34:	b500      	push	{lr}
 8000f36:	b091      	sub	sp, #68	; 0x44
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000f38:	2201      	movs	r2, #1
 8000f3a:	9206      	str	r2, [sp, #24]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000f3c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f40:	9307      	str	r3, [sp, #28]
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000f42:	2100      	movs	r1, #0
 8000f44:	9108      	str	r1, [sp, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f46:	920a      	str	r2, [sp, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f48:	2202      	movs	r2, #2
 8000f4a:	920d      	str	r2, [sp, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f4c:	930e      	str	r3, [sp, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000f4e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000f52:	930f      	str	r3, [sp, #60]	; 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f54:	a806      	add	r0, sp, #24
 8000f56:	f000 ffa9 	bl	8001eac <HAL_RCC_OscConfig>
 8000f5a:	bb08      	cbnz	r0, 8000fa0 <_Z18SystemClock_Configv+0x6c>
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000f5c:	230f      	movs	r3, #15
 8000f5e:	9301      	str	r3, [sp, #4]
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f60:	2102      	movs	r1, #2
 8000f62:	9102      	str	r1, [sp, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f64:	2300      	movs	r3, #0
 8000f66:	9303      	str	r3, [sp, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000f68:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000f6c:	9204      	str	r2, [sp, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f6e:	9305      	str	r3, [sp, #20]
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000f70:	a801      	add	r0, sp, #4
 8000f72:	f001 f963 	bl	800223c <HAL_RCC_ClockConfig>
 8000f76:	b9b8      	cbnz	r0, 8000fa8 <_Z18SystemClock_Configv+0x74>
	HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / 1000);
 8000f78:	f001 fa04 	bl	8002384 <HAL_RCC_GetHCLKFreq>
 8000f7c:	4b0c      	ldr	r3, [pc, #48]	; (8000fb0 <_Z18SystemClock_Configv+0x7c>)
 8000f7e:	fba3 3000 	umull	r3, r0, r3, r0
 8000f82:	0980      	lsrs	r0, r0, #6
 8000f84:	f000 fd3c 	bl	8001a00 <HAL_SYSTICK_Config>
	HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8000f88:	2004      	movs	r0, #4
 8000f8a:	f000 fd4f 	bl	8001a2c <HAL_SYSTICK_CLKSourceConfig>
	HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8000f8e:	2200      	movs	r2, #0
 8000f90:	4611      	mov	r1, r2
 8000f92:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000f96:	f000 fcf3 	bl	8001980 <HAL_NVIC_SetPriority>
}
 8000f9a:	b011      	add	sp, #68	; 0x44
 8000f9c:	f85d fb04 	ldr.w	pc, [sp], #4
		_Error_Handler(__FILE__, __LINE__);
 8000fa0:	21a7      	movs	r1, #167	; 0xa7
 8000fa2:	4804      	ldr	r0, [pc, #16]	; (8000fb4 <_Z18SystemClock_Configv+0x80>)
 8000fa4:	f7ff ff6e 	bl	8000e84 <_Error_Handler>
		_Error_Handler(__FILE__, __LINE__);
 8000fa8:	21b5      	movs	r1, #181	; 0xb5
 8000faa:	4802      	ldr	r0, [pc, #8]	; (8000fb4 <_Z18SystemClock_Configv+0x80>)
 8000fac:	f7ff ff6a 	bl	8000e84 <_Error_Handler>
 8000fb0:	10624dd3 	.word	0x10624dd3
 8000fb4:	08003840 	.word	0x08003840

08000fb8 <main>:
{
 8000fb8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000fbc:	b087      	sub	sp, #28
	HAL_Init();
 8000fbe:	f000 fca9 	bl	8001914 <HAL_Init>
	SystemClock_Config();
 8000fc2:	f7ff ffb7 	bl	8000f34 <_Z18SystemClock_Configv>
	MX_GPIO_Init();
 8000fc6:	f7ff f9c3 	bl	8000350 <_ZL12MX_GPIO_Initv>
	MX_DMA_Init();
 8000fca:	f7ff fa5f 	bl	800048c <_ZL11MX_DMA_Initv>
	MX_USART1_UART_Init();
 8000fce:	f7ff ff5b 	bl	8000e88 <_ZL19MX_USART1_UART_Initv>
	MX_TIM3_Init();
 8000fd2:	f7ff ff77 	bl	8000ec4 <_ZL12MX_TIM3_Initv>
		com->start_dma();
 8000fd6:	4dab      	ldr	r5, [pc, #684]	; (8001284 <main+0x2cc>)
 8000fd8:	686b      	ldr	r3, [r5, #4]
		tx_cplt = true;
 8000fda:	2201      	movs	r2, #1
 8000fdc:	f883 2800 	strb.w	r2, [r3, #2048]	; 0x800
		rx_tail = 0;
 8000fe0:	2400      	movs	r4, #0
 8000fe2:	f8a3 4802 	strh.w	r4, [r3, #2050]	; 0x802
		HAL_UART_Receive_DMA(&huart, (uint8_t *) rx_buf, BUF_SIZE);
 8000fe6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000fea:	1899      	adds	r1, r3, r2
 8000fec:	f8d3 0808 	ldr.w	r0, [r3, #2056]	; 0x808
 8000ff0:	f001 fcd8 	bl	80029a4 <HAL_UART_Receive_DMA>
    mode_ = 0;
 8000ff4:	f8c5 48e0 	str.w	r4, [r5, #2272]	; 0x8e0
    bytes_ = 0;
 8000ff8:	f8c5 48e4 	str.w	r4, [r5, #2276]	; 0x8e4
    index_ = 0;
 8000ffc:	f8c5 48ec 	str.w	r4, [r5, #2284]	; 0x8ec
    topic_ = 0;
 8001000:	f8c5 48e8 	str.w	r4, [r5, #2280]	; 0x8e8
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 8001004:	2c18      	cmp	r4, #24
 8001006:	dc0d      	bgt.n	8001024 <main+0x6c>
      if (publishers[i] == 0) // empty slot
 8001008:	f204 2306 	addw	r3, r4, #518	; 0x206
 800100c:	4a9d      	ldr	r2, [pc, #628]	; (8001284 <main+0x2cc>)
 800100e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001012:	b95b      	cbnz	r3, 800102c <main+0x74>
        publishers[i] = &p;
 8001014:	f204 2106 	addw	r1, r4, #518	; 0x206
 8001018:	4b9b      	ldr	r3, [pc, #620]	; (8001288 <main+0x2d0>)
 800101a:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
        p.id_ = i + 100 + MAX_SUBSCRIBERS;
 800101e:	347d      	adds	r4, #125	; 0x7d
 8001020:	609c      	str	r4, [r3, #8]
        p.nh_ = this;
 8001022:	60da      	str	r2, [r3, #12]
	int chatter_last = HAL_GetTick();
 8001024:	f000 fc94 	bl	8001950 <HAL_GetTick>
 8001028:	4605      	mov	r5, r0
 800102a:	e2d1      	b.n	80015d0 <main+0x618>
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 800102c:	3401      	adds	r4, #1
 800102e:	e7e9      	b.n	8001004 <main+0x4c>
			if(HAL_GetTick() - chatter_last > chatter_interval)
 8001030:	f000 fc8e 	bl	8001950 <HAL_GetTick>
 8001034:	1b40      	subs	r0, r0, r5
 8001036:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
 800103a:	f240 82cf 	bls.w	80015dc <main+0x624>
				str_msg.data = hello;
 800103e:	4a93      	ldr	r2, [pc, #588]	; (800128c <main+0x2d4>)
 8001040:	4b93      	ldr	r3, [pc, #588]	; (8001290 <main+0x2d8>)
 8001042:	6053      	str	r3, [r2, #4]

  int publish(const Msg * msg)
  {
    return nh_->publish(id_, msg);
 8001044:	4b90      	ldr	r3, [pc, #576]	; (8001288 <main+0x2d0>)
 8001046:	68d8      	ldr	r0, [r3, #12]
 8001048:	6801      	ldr	r1, [r0, #0]
 800104a:	680c      	ldr	r4, [r1, #0]
 800104c:	6899      	ldr	r1, [r3, #8]
 800104e:	47a0      	blx	r4
				chatter_last = HAL_GetTick();
 8001050:	f000 fc7e 	bl	8001950 <HAL_GetTick>
 8001054:	4605      	mov	r5, r0
 8001056:	e2c1      	b.n	80015dc <main+0x624>
		return HAL_GetTick();
 8001058:	f000 fc7a 	bl	8001950 <HAL_GetTick>
        if ((hardware_.time() - c_time) > spin_timeout_)
 800105c:	1b00      	subs	r0, r0, r4
 800105e:	4b89      	ldr	r3, [pc, #548]	; (8001284 <main+0x2cc>)
 8001060:	695b      	ldr	r3, [r3, #20]
 8001062:	4298      	cmp	r0, r3
 8001064:	d921      	bls.n	80010aa <main+0xf2>
 8001066:	e2b3      	b.n	80015d0 <main+0x618>
			return -1;
 8001068:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800106c:	e033      	b.n	80010d6 <main+0x11e>
        message_in[index_++] = data;
 800106e:	4b85      	ldr	r3, [pc, #532]	; (8001284 <main+0x2cc>)
 8001070:	f8d3 28ec 	ldr.w	r2, [r3, #2284]	; 0x8ec
 8001074:	1c51      	adds	r1, r2, #1
 8001076:	f8c3 18ec 	str.w	r1, [r3, #2284]	; 0x8ec
 800107a:	441a      	add	r2, r3
 800107c:	7610      	strb	r0, [r2, #24]
        bytes_--;
 800107e:	f8d3 28e4 	ldr.w	r2, [r3, #2276]	; 0x8e4
 8001082:	3a01      	subs	r2, #1
 8001084:	f8c3 28e4 	str.w	r2, [r3, #2276]	; 0x8e4
        if (bytes_ == 0)                 /* is message complete? if so, checksum */
 8001088:	b95a      	cbnz	r2, 80010a2 <main+0xea>
          mode_ = MODE_MSG_CHECKSUM;
 800108a:	2208      	movs	r2, #8
 800108c:	f8c3 28e0 	str.w	r2, [r3, #2272]	; 0x8e0
 8001090:	e007      	b.n	80010a2 <main+0xea>
          mode_++;
 8001092:	4a7c      	ldr	r2, [pc, #496]	; (8001284 <main+0x2cc>)
 8001094:	3301      	adds	r3, #1
 8001096:	f8c2 38e0 	str.w	r3, [r2, #2272]	; 0x8e0
          last_msg_timeout_time = c_time + SERIAL_MSG_TIMEOUT;
 800109a:	f104 0314 	add.w	r3, r4, #20
 800109e:	f8c2 3900 	str.w	r3, [r2, #2304]	; 0x900
      if (spin_timeout_ > 0)
 80010a2:	4b78      	ldr	r3, [pc, #480]	; (8001284 <main+0x2cc>)
 80010a4:	695b      	ldr	r3, [r3, #20]
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d1d6      	bne.n	8001058 <main+0xa0>
		return com->read();
 80010aa:	4b76      	ldr	r3, [pc, #472]	; (8001284 <main+0x2cc>)
 80010ac:	6859      	ldr	r1, [r3, #4]
		uint16_t rx_head = (BUF_SIZE - huart.hdmarx->Instance->CNDTR)
 80010ae:	f8d1 3808 	ldr.w	r3, [r1, #2056]	; 0x808
 80010b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	685b      	ldr	r3, [r3, #4]
				& buf_mask;
 80010b8:	425b      	negs	r3, r3
 80010ba:	f3c3 0309 	ubfx	r3, r3, #0, #10
		if (rx_tail == rx_head)
 80010be:	f8b1 2802 	ldrh.w	r2, [r1, #2050]	; 0x802
 80010c2:	4293      	cmp	r3, r2
 80010c4:	d0d0      	beq.n	8001068 <main+0xb0>
		int c = (int) rx_buf[rx_tail++];
 80010c6:	1c53      	adds	r3, r2, #1
 80010c8:	440a      	add	r2, r1
 80010ca:	f892 0400 	ldrb.w	r0, [r2, #1024]	; 0x400
		rx_tail &= buf_mask;
 80010ce:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80010d2:	f8a1 3802 	strh.w	r3, [r1, #2050]	; 0x802
      if (data < 0)
 80010d6:	2800      	cmp	r0, #0
 80010d8:	f2c0 826e 	blt.w	80015b8 <main+0x600>
      checksum_ += data;
 80010dc:	4b69      	ldr	r3, [pc, #420]	; (8001284 <main+0x2cc>)
 80010de:	f8d3 28f0 	ldr.w	r2, [r3, #2288]	; 0x8f0
 80010e2:	4402      	add	r2, r0
 80010e4:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
      if (mode_ == MODE_MESSAGE)          /* message data being recieved */
 80010e8:	f8d3 38e0 	ldr.w	r3, [r3, #2272]	; 0x8e0
 80010ec:	2b07      	cmp	r3, #7
 80010ee:	d0be      	beq.n	800106e <main+0xb6>
      else if (mode_ == MODE_FIRST_FF)
 80010f0:	b96b      	cbnz	r3, 800110e <main+0x156>
        if (data == 0xff)
 80010f2:	28ff      	cmp	r0, #255	; 0xff
 80010f4:	d0cd      	beq.n	8001092 <main+0xda>
		return HAL_GetTick();
 80010f6:	f000 fc2b 	bl	8001950 <HAL_GetTick>
        else if (hardware_.time() - c_time > (SYNC_SECONDS * 1000))
 80010fa:	1b00      	subs	r0, r0, r4
 80010fc:	f241 3388 	movw	r3, #5000	; 0x1388
 8001100:	4298      	cmp	r0, r3
 8001102:	d9ce      	bls.n	80010a2 <main+0xea>
          configured_ = false;
 8001104:	2200      	movs	r2, #0
 8001106:	4b5f      	ldr	r3, [pc, #380]	; (8001284 <main+0x2cc>)
 8001108:	f883 28f4 	strb.w	r2, [r3, #2292]	; 0x8f4
 800110c:	e260      	b.n	80015d0 <main+0x618>
      else if (mode_ == MODE_PROTOCOL_VER)
 800110e:	2b01      	cmp	r3, #1
 8001110:	d03a      	beq.n	8001188 <main+0x1d0>
      else if (mode_ == MODE_SIZE_L)      /* bottom half of message size */
 8001112:	2b02      	cmp	r3, #2
 8001114:	d056      	beq.n	80011c4 <main+0x20c>
      else if (mode_ == MODE_SIZE_H)      /* top half of message size */
 8001116:	2b03      	cmp	r3, #3
 8001118:	d060      	beq.n	80011dc <main+0x224>
      else if (mode_ == MODE_SIZE_CHECKSUM)
 800111a:	2b04      	cmp	r3, #4
 800111c:	d069      	beq.n	80011f2 <main+0x23a>
      else if (mode_ == MODE_TOPIC_L)     /* bottom half of topic id */
 800111e:	2b05      	cmp	r3, #5
 8001120:	d078      	beq.n	8001214 <main+0x25c>
      else if (mode_ == MODE_TOPIC_H)     /* top half of topic id */
 8001122:	2b06      	cmp	r3, #6
 8001124:	d07f      	beq.n	8001226 <main+0x26e>
      else if (mode_ == MODE_MSG_CHECKSUM)    /* do checksum */
 8001126:	2b08      	cmp	r3, #8
 8001128:	d1bb      	bne.n	80010a2 <main+0xea>
        mode_ = MODE_FIRST_FF;
 800112a:	2100      	movs	r1, #0
 800112c:	4b55      	ldr	r3, [pc, #340]	; (8001284 <main+0x2cc>)
 800112e:	f8c3 18e0 	str.w	r1, [r3, #2272]	; 0x8e0
        if ((checksum_ % 256) == 255)
 8001132:	1a8b      	subs	r3, r1, r2
 8001134:	b2d2      	uxtb	r2, r2
 8001136:	b2db      	uxtb	r3, r3
 8001138:	bf58      	it	pl
 800113a:	425a      	negpl	r2, r3
 800113c:	2aff      	cmp	r2, #255	; 0xff
 800113e:	d1b0      	bne.n	80010a2 <main+0xea>
          if (topic_ == TopicInfo::ID_PUBLISHER)
 8001140:	4b50      	ldr	r3, [pc, #320]	; (8001284 <main+0x2cc>)
 8001142:	f8d3 68e8 	ldr.w	r6, [r3, #2280]	; 0x8e8
 8001146:	2e00      	cmp	r6, #0
 8001148:	f000 8081 	beq.w	800124e <main+0x296>
          else if (topic_ == TopicInfo::ID_TIME)
 800114c:	2e0a      	cmp	r6, #10
 800114e:	f000 810b 	beq.w	8001368 <main+0x3b0>
          else if (topic_ == TopicInfo::ID_PARAMETER_REQUEST)
 8001152:	2e06      	cmp	r6, #6
 8001154:	f000 814c 	beq.w	80013f0 <main+0x438>
          else if (topic_ == TopicInfo::ID_TX_STOP)
 8001158:	2e0b      	cmp	r6, #11
 800115a:	f000 8220 	beq.w	800159e <main+0x5e6>
            if (subscribers[topic_ - 100])
 800115e:	f1a6 0264 	sub.w	r2, r6, #100	; 0x64
 8001162:	f506 76dd 	add.w	r6, r6, #442	; 0x1ba
 8001166:	4b47      	ldr	r3, [pc, #284]	; (8001284 <main+0x2cc>)
 8001168:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 800116c:	6858      	ldr	r0, [r3, #4]
 800116e:	2800      	cmp	r0, #0
 8001170:	d097      	beq.n	80010a2 <main+0xea>
              subscribers[topic_ - 100]->callback(message_in);
 8001172:	4944      	ldr	r1, [pc, #272]	; (8001284 <main+0x2cc>)
 8001174:	f202 231e 	addw	r3, r2, #542	; 0x21e
 8001178:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800117c:	685b      	ldr	r3, [r3, #4]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	3118      	adds	r1, #24
 8001184:	4798      	blx	r3
 8001186:	e78c      	b.n	80010a2 <main+0xea>
        if (data == PROTOCOL_VER)
 8001188:	28fe      	cmp	r0, #254	; 0xfe
 800118a:	d016      	beq.n	80011ba <main+0x202>
          mode_ = MODE_FIRST_FF;
 800118c:	4b3d      	ldr	r3, [pc, #244]	; (8001284 <main+0x2cc>)
 800118e:	2200      	movs	r2, #0
 8001190:	f8c3 28e0 	str.w	r2, [r3, #2272]	; 0x8e0
          if (configured_ == false)
 8001194:	f893 38f4 	ldrb.w	r3, [r3, #2292]	; 0x8f4
 8001198:	2b00      	cmp	r3, #0
 800119a:	d182      	bne.n	80010a2 <main+0xea>
 800119c:	4b3d      	ldr	r3, [pc, #244]	; (8001294 <main+0x2dc>)
 800119e:	9300      	str	r3, [sp, #0]
 80011a0:	9201      	str	r2, [sp, #4]
 80011a2:	9202      	str	r2, [sp, #8]
    publish(TopicInfo::ID_TIME, &t);
 80011a4:	4e37      	ldr	r6, [pc, #220]	; (8001284 <main+0x2cc>)
 80011a6:	6833      	ldr	r3, [r6, #0]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	466a      	mov	r2, sp
 80011ac:	210a      	movs	r1, #10
 80011ae:	4630      	mov	r0, r6
 80011b0:	4798      	blx	r3
 80011b2:	f000 fbcd 	bl	8001950 <HAL_GetTick>
    rt_time = hardware_.time();
 80011b6:	60b0      	str	r0, [r6, #8]
 80011b8:	e773      	b.n	80010a2 <main+0xea>
          mode_++;
 80011ba:	3301      	adds	r3, #1
 80011bc:	4a31      	ldr	r2, [pc, #196]	; (8001284 <main+0x2cc>)
 80011be:	f8c2 38e0 	str.w	r3, [r2, #2272]	; 0x8e0
 80011c2:	e76e      	b.n	80010a2 <main+0xea>
        bytes_ = data;
 80011c4:	4a2f      	ldr	r2, [pc, #188]	; (8001284 <main+0x2cc>)
 80011c6:	f8c2 08e4 	str.w	r0, [r2, #2276]	; 0x8e4
        index_ = 0;
 80011ca:	2100      	movs	r1, #0
 80011cc:	f8c2 18ec 	str.w	r1, [r2, #2284]	; 0x8ec
        mode_++;
 80011d0:	3301      	adds	r3, #1
 80011d2:	f8c2 38e0 	str.w	r3, [r2, #2272]	; 0x8e0
        checksum_ = data;               /* first byte for calculating size checksum */
 80011d6:	f8c2 08f0 	str.w	r0, [r2, #2288]	; 0x8f0
 80011da:	e762      	b.n	80010a2 <main+0xea>
        bytes_ += data << 8;
 80011dc:	4a29      	ldr	r2, [pc, #164]	; (8001284 <main+0x2cc>)
 80011de:	f8d2 18e4 	ldr.w	r1, [r2, #2276]	; 0x8e4
 80011e2:	eb01 2000 	add.w	r0, r1, r0, lsl #8
 80011e6:	f8c2 08e4 	str.w	r0, [r2, #2276]	; 0x8e4
        mode_++;
 80011ea:	3301      	adds	r3, #1
 80011ec:	f8c2 38e0 	str.w	r3, [r2, #2272]	; 0x8e0
 80011f0:	e757      	b.n	80010a2 <main+0xea>
        if ((checksum_ % 256) == 255)
 80011f2:	4251      	negs	r1, r2
 80011f4:	b2d2      	uxtb	r2, r2
 80011f6:	b2c9      	uxtb	r1, r1
 80011f8:	bf58      	it	pl
 80011fa:	424a      	negpl	r2, r1
 80011fc:	2aff      	cmp	r2, #255	; 0xff
 80011fe:	d004      	beq.n	800120a <main+0x252>
          mode_ = MODE_FIRST_FF;          /* Abandon the frame if the msg len is wrong */
 8001200:	2200      	movs	r2, #0
 8001202:	4b20      	ldr	r3, [pc, #128]	; (8001284 <main+0x2cc>)
 8001204:	f8c3 28e0 	str.w	r2, [r3, #2272]	; 0x8e0
 8001208:	e74b      	b.n	80010a2 <main+0xea>
          mode_++;
 800120a:	3301      	adds	r3, #1
 800120c:	4a1d      	ldr	r2, [pc, #116]	; (8001284 <main+0x2cc>)
 800120e:	f8c2 38e0 	str.w	r3, [r2, #2272]	; 0x8e0
 8001212:	e746      	b.n	80010a2 <main+0xea>
        topic_ = data;
 8001214:	4a1b      	ldr	r2, [pc, #108]	; (8001284 <main+0x2cc>)
 8001216:	f8c2 08e8 	str.w	r0, [r2, #2280]	; 0x8e8
        mode_++;
 800121a:	3301      	adds	r3, #1
 800121c:	f8c2 38e0 	str.w	r3, [r2, #2272]	; 0x8e0
        checksum_ = data;               /* first byte included in checksum */
 8001220:	f8c2 08f0 	str.w	r0, [r2, #2288]	; 0x8f0
 8001224:	e73d      	b.n	80010a2 <main+0xea>
        topic_ += data << 8;
 8001226:	4b17      	ldr	r3, [pc, #92]	; (8001284 <main+0x2cc>)
 8001228:	f8d3 28e8 	ldr.w	r2, [r3, #2280]	; 0x8e8
 800122c:	eb02 2000 	add.w	r0, r2, r0, lsl #8
 8001230:	f8c3 08e8 	str.w	r0, [r3, #2280]	; 0x8e8
        mode_ = MODE_MESSAGE;
 8001234:	2207      	movs	r2, #7
 8001236:	f8c3 28e0 	str.w	r2, [r3, #2272]	; 0x8e0
        if (bytes_ == 0)
 800123a:	f8d3 38e4 	ldr.w	r3, [r3, #2276]	; 0x8e4
 800123e:	2b00      	cmp	r3, #0
 8001240:	f47f af2f 	bne.w	80010a2 <main+0xea>
          mode_ = MODE_MSG_CHECKSUM;
 8001244:	2208      	movs	r2, #8
 8001246:	4b0f      	ldr	r3, [pc, #60]	; (8001284 <main+0x2cc>)
 8001248:	f8c3 28e0 	str.w	r2, [r3, #2272]	; 0x8e0
 800124c:	e729      	b.n	80010a2 <main+0xea>
 800124e:	4b11      	ldr	r3, [pc, #68]	; (8001294 <main+0x2dc>)
 8001250:	9300      	str	r3, [sp, #0]
 8001252:	4688      	mov	r8, r1
 8001254:	9101      	str	r1, [sp, #4]
 8001256:	9102      	str	r1, [sp, #8]
    publish(TopicInfo::ID_TIME, &t);
 8001258:	4f0a      	ldr	r7, [pc, #40]	; (8001284 <main+0x2cc>)
 800125a:	683b      	ldr	r3, [r7, #0]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	466a      	mov	r2, sp
 8001260:	210a      	movs	r1, #10
 8001262:	4638      	mov	r0, r7
 8001264:	4798      	blx	r3
 8001266:	f000 fb73 	bl	8001950 <HAL_GetTick>
    rt_time = hardware_.time();
 800126a:	60b8      	str	r0, [r7, #8]
 800126c:	4b0a      	ldr	r3, [pc, #40]	; (8001298 <main+0x2e0>)
 800126e:	9300      	str	r3, [sp, #0]
 8001270:	f8ad 8004 	strh.w	r8, [sp, #4]
 8001274:	4b09      	ldr	r3, [pc, #36]	; (800129c <main+0x2e4>)
 8001276:	9302      	str	r3, [sp, #8]
 8001278:	9303      	str	r3, [sp, #12]
 800127a:	9304      	str	r3, [sp, #16]
 800127c:	f8cd 8014 	str.w	r8, [sp, #20]
    for (i = 0; i < MAX_PUBLISHERS; i++)
 8001280:	4637      	mov	r7, r6
 8001282:	e00e      	b.n	80012a2 <main+0x2ea>
 8001284:	20000648 	.word	0x20000648
 8001288:	2000052c 	.word	0x2000052c
 800128c:	20001784 	.word	0x20001784
 8001290:	080039b4 	.word	0x080039b4
 8001294:	080037b4 	.word	0x080037b4
 8001298:	080037cc 	.word	0x080037cc
 800129c:	08003948 	.word	0x08003948
 80012a0:	3701      	adds	r7, #1
 80012a2:	2f18      	cmp	r7, #24
 80012a4:	dc29      	bgt.n	80012fa <main+0x342>
      if (publishers[i] != 0) // non-empty slot
 80012a6:	f207 2306 	addw	r3, r7, #518	; 0x206
 80012aa:	4abf      	ldr	r2, [pc, #764]	; (80015a8 <main+0x5f0>)
 80012ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d0f5      	beq.n	80012a0 <main+0x2e8>
        ti.topic_id = publishers[i]->id_;
 80012b4:	689a      	ldr	r2, [r3, #8]
 80012b6:	f8ad 2004 	strh.w	r2, [sp, #4]
        ti.topic_name = (char *) publishers[i]->topic_;
 80012ba:	681a      	ldr	r2, [r3, #0]
 80012bc:	9202      	str	r2, [sp, #8]
        ti.message_type = (char *) publishers[i]->msg_->getType();
 80012be:	6858      	ldr	r0, [r3, #4]
 80012c0:	6803      	ldr	r3, [r0, #0]
 80012c2:	689b      	ldr	r3, [r3, #8]
 80012c4:	4798      	blx	r3
 80012c6:	9003      	str	r0, [sp, #12]
        ti.md5sum = (char *) publishers[i]->msg_->getMD5();
 80012c8:	f8df 82dc 	ldr.w	r8, [pc, #732]	; 80015a8 <main+0x5f0>
 80012cc:	f207 2906 	addw	r9, r7, #518	; 0x206
 80012d0:	f858 3029 	ldr.w	r3, [r8, r9, lsl #2]
 80012d4:	6858      	ldr	r0, [r3, #4]
 80012d6:	6803      	ldr	r3, [r0, #0]
 80012d8:	68db      	ldr	r3, [r3, #12]
 80012da:	4798      	blx	r3
 80012dc:	9004      	str	r0, [sp, #16]
        ti.buffer_size = OUTPUT_SIZE;
 80012de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80012e2:	9305      	str	r3, [sp, #20]
        publish(publishers[i]->getEndpointType(), &ti);
 80012e4:	f8d8 3000 	ldr.w	r3, [r8]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	f858 1029 	ldr.w	r1, [r8, r9, lsl #2]
 80012ee:	466a      	mov	r2, sp
 80012f0:	6909      	ldr	r1, [r1, #16]
 80012f2:	4640      	mov	r0, r8
 80012f4:	4798      	blx	r3
 80012f6:	e7d3      	b.n	80012a0 <main+0x2e8>
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 80012f8:	3601      	adds	r6, #1
 80012fa:	2e18      	cmp	r6, #24
 80012fc:	dc2b      	bgt.n	8001356 <main+0x39e>
      if (subscribers[i] != 0) // non-empty slot
 80012fe:	f206 221e 	addw	r2, r6, #542	; 0x21e
 8001302:	4ba9      	ldr	r3, [pc, #676]	; (80015a8 <main+0x5f0>)
 8001304:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8001308:	6858      	ldr	r0, [r3, #4]
 800130a:	2800      	cmp	r0, #0
 800130c:	d0f4      	beq.n	80012f8 <main+0x340>
        ti.topic_id = subscribers[i]->id_;
 800130e:	6843      	ldr	r3, [r0, #4]
 8001310:	f8ad 3004 	strh.w	r3, [sp, #4]
        ti.topic_name = (char *) subscribers[i]->topic_;
 8001314:	6883      	ldr	r3, [r0, #8]
 8001316:	9302      	str	r3, [sp, #8]
        ti.message_type = (char *) subscribers[i]->getMsgType();
 8001318:	6803      	ldr	r3, [r0, #0]
 800131a:	689b      	ldr	r3, [r3, #8]
 800131c:	4798      	blx	r3
 800131e:	9003      	str	r0, [sp, #12]
        ti.md5sum = (char *) subscribers[i]->getMsgMD5();
 8001320:	f8df 8284 	ldr.w	r8, [pc, #644]	; 80015a8 <main+0x5f0>
 8001324:	f206 271e 	addw	r7, r6, #542	; 0x21e
 8001328:	eb08 0787 	add.w	r7, r8, r7, lsl #2
 800132c:	6878      	ldr	r0, [r7, #4]
 800132e:	6803      	ldr	r3, [r0, #0]
 8001330:	68db      	ldr	r3, [r3, #12]
 8001332:	4798      	blx	r3
 8001334:	9004      	str	r0, [sp, #16]
        ti.buffer_size = INPUT_SIZE;
 8001336:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800133a:	9305      	str	r3, [sp, #20]
        publish(subscribers[i]->getEndpointType(), &ti);
 800133c:	f8d8 3000 	ldr.w	r3, [r8]
 8001340:	f8d3 9000 	ldr.w	r9, [r3]
 8001344:	6878      	ldr	r0, [r7, #4]
 8001346:	6803      	ldr	r3, [r0, #0]
 8001348:	685b      	ldr	r3, [r3, #4]
 800134a:	4798      	blx	r3
 800134c:	466a      	mov	r2, sp
 800134e:	4601      	mov	r1, r0
 8001350:	4640      	mov	r0, r8
 8001352:	47c8      	blx	r9
 8001354:	e7d0      	b.n	80012f8 <main+0x340>
    configured_ = true;
 8001356:	4b94      	ldr	r3, [pc, #592]	; (80015a8 <main+0x5f0>)
 8001358:	2201      	movs	r2, #1
 800135a:	f883 28f4 	strb.w	r2, [r3, #2292]	; 0x8f4
            last_sync_time = c_time;
 800135e:	f8c3 48f8 	str.w	r4, [r3, #2296]	; 0x8f8
            last_sync_receive_time = c_time;
 8001362:	f8c3 48fc 	str.w	r4, [r3, #2300]	; 0x8fc
 8001366:	e133      	b.n	80015d0 <main+0x618>
 8001368:	f000 faf2 	bl	8001950 <HAL_GetTick>
    uint32_t offset = hardware_.time() - rt_time;
 800136c:	4e8e      	ldr	r6, [pc, #568]	; (80015a8 <main+0x5f0>)
 800136e:	68b3      	ldr	r3, [r6, #8]
 8001370:	1ac0      	subs	r0, r0, r3
      this->data.sec =  ((uint32_t) (*(inbuffer + offset)));
 8001372:	7e33      	ldrb	r3, [r6, #24]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001374:	7e72      	ldrb	r2, [r6, #25]
 8001376:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800137a:	7eb2      	ldrb	r2, [r6, #26]
 800137c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001380:	7ef1      	ldrb	r1, [r6, #27]
 8001382:	ea43 6101 	orr.w	r1, r3, r1, lsl #24
      this->data.nsec =  ((uint32_t) (*(inbuffer + offset)));
 8001386:	7f33      	ldrb	r3, [r6, #28]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001388:	7f72      	ldrb	r2, [r6, #29]
 800138a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800138e:	7fb2      	ldrb	r2, [r6, #30]
 8001390:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001394:	7ff2      	ldrb	r2, [r6, #31]
 8001396:	ea43 6202 	orr.w	r2, r3, r2, lsl #24
    t.data.sec += offset / 1000;
 800139a:	4f84      	ldr	r7, [pc, #528]	; (80015ac <main+0x5f4>)
 800139c:	fba7 e300 	umull	lr, r3, r7, r0
 80013a0:	099b      	lsrs	r3, r3, #6
 80013a2:	4419      	add	r1, r3
 80013a4:	9101      	str	r1, [sp, #4]
    t.data.nsec += (offset % 1000) * 1000000UL;
 80013a6:	f44f 797a 	mov.w	r9, #1000	; 0x3e8
 80013aa:	fb09 0313 	mls	r3, r9, r3, r0
 80013ae:	f8df 8204 	ldr.w	r8, [pc, #516]	; 80015b4 <main+0x5fc>
 80013b2:	fb08 2303 	mla	r3, r8, r3, r2
 80013b6:	9302      	str	r3, [sp, #8]
 80013b8:	f000 faca 	bl	8001950 <HAL_GetTick>
    sec_offset = new_now.sec - ms / 1000 - 1;
 80013bc:	fba7 2300 	umull	r2, r3, r7, r0
 80013c0:	099b      	lsrs	r3, r3, #6
 80013c2:	9a01      	ldr	r2, [sp, #4]
 80013c4:	1ad2      	subs	r2, r2, r3
 80013c6:	3a01      	subs	r2, #1
 80013c8:	60f2      	str	r2, [r6, #12]
    nsec_offset = new_now.nsec - (ms % 1000) * 1000000UL + 1000000000UL;
 80013ca:	fb09 0313 	mls	r3, r9, r3, r0
 80013ce:	9a02      	ldr	r2, [sp, #8]
 80013d0:	fb08 2313 	mls	r3, r8, r3, r2
 80013d4:	4a76      	ldr	r2, [pc, #472]	; (80015b0 <main+0x5f8>)
 80013d6:	441a      	add	r2, r3
 80013d8:	4631      	mov	r1, r6
 80013da:	f841 2f10 	str.w	r2, [r1, #16]!
    normalizeSecNSec(sec_offset, nsec_offset);
 80013de:	f106 000c 	add.w	r0, r6, #12
 80013e2:	f001 fc75 	bl	8002cd0 <_ZN3ros16normalizeSecNSecERmS0_>
 80013e6:	f000 fab3 	bl	8001950 <HAL_GetTick>
    last_sync_receive_time = hardware_.time();
 80013ea:	f8c6 08fc 	str.w	r0, [r6, #2300]	; 0x8fc
 80013ee:	e658      	b.n	80010a2 <main+0xea>
      uint32_t ints_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 80013f0:	4b6d      	ldr	r3, [pc, #436]	; (80015a8 <main+0x5f0>)
 80013f2:	7e1e      	ldrb	r6, [r3, #24]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 80013f4:	7e5a      	ldrb	r2, [r3, #25]
 80013f6:	ea46 2602 	orr.w	r6, r6, r2, lsl #8
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 80013fa:	7e9a      	ldrb	r2, [r3, #26]
 80013fc:	ea46 4602 	orr.w	r6, r6, r2, lsl #16
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8001400:	7eda      	ldrb	r2, [r3, #27]
 8001402:	ea46 6602 	orr.w	r6, r6, r2, lsl #24
      if(ints_lengthT > ints_length)
 8001406:	f8d3 390c 	ldr.w	r3, [r3, #2316]	; 0x90c
 800140a:	429e      	cmp	r6, r3
 800140c:	d822      	bhi.n	8001454 <main+0x49c>
      ints_length = ints_lengthT;
 800140e:	4b66      	ldr	r3, [pc, #408]	; (80015a8 <main+0x5f0>)
 8001410:	f8c3 690c 	str.w	r6, [r3, #2316]	; 0x90c
      for( uint32_t i = 0; i < ints_length; i++){
 8001414:	2100      	movs	r1, #0
      offset += sizeof(this->ints_length);
 8001416:	2604      	movs	r6, #4
      for( uint32_t i = 0; i < ints_length; i++){
 8001418:	4b63      	ldr	r3, [pc, #396]	; (80015a8 <main+0x5f0>)
 800141a:	f8d3 390c 	ldr.w	r3, [r3, #2316]	; 0x90c
 800141e:	428b      	cmp	r3, r1
 8001420:	d921      	bls.n	8001466 <main+0x4ae>
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8001422:	4861      	ldr	r0, [pc, #388]	; (80015a8 <main+0x5f0>)
 8001424:	f100 0218 	add.w	r2, r0, #24
 8001428:	5d93      	ldrb	r3, [r2, r6]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800142a:	1c77      	adds	r7, r6, #1
 800142c:	5dd7      	ldrb	r7, [r2, r7]
 800142e:	ea43 2307 	orr.w	r3, r3, r7, lsl #8
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001432:	1cb7      	adds	r7, r6, #2
 8001434:	5dd7      	ldrb	r7, [r2, r7]
 8001436:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800143a:	1cf7      	adds	r7, r6, #3
 800143c:	5dd2      	ldrb	r2, [r2, r7]
 800143e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
      this->st_ints = u_st_ints.real;
 8001442:	f8c0 3910 	str.w	r3, [r0, #2320]	; 0x910
      offset += sizeof(this->st_ints);
 8001446:	3604      	adds	r6, #4
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
 8001448:	f8d0 2914 	ldr.w	r2, [r0, #2324]	; 0x914
 800144c:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
      for( uint32_t i = 0; i < ints_length; i++){
 8001450:	3101      	adds	r1, #1
 8001452:	e7e1      	b.n	8001418 <main+0x460>
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
 8001454:	4f54      	ldr	r7, [pc, #336]	; (80015a8 <main+0x5f0>)
 8001456:	00b1      	lsls	r1, r6, #2
 8001458:	f8d7 0914 	ldr.w	r0, [r7, #2324]	; 0x914
 800145c:	f001 fca4 	bl	8002da8 <realloc>
 8001460:	f8c7 0914 	str.w	r0, [r7, #2324]	; 0x914
 8001464:	e7d3      	b.n	800140e <main+0x456>
      uint32_t floats_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8001466:	4a50      	ldr	r2, [pc, #320]	; (80015a8 <main+0x5f0>)
 8001468:	f102 0318 	add.w	r3, r2, #24
 800146c:	5d9f      	ldrb	r7, [r3, r6]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 800146e:	1c71      	adds	r1, r6, #1
 8001470:	5c59      	ldrb	r1, [r3, r1]
 8001472:	ea47 2701 	orr.w	r7, r7, r1, lsl #8
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8001476:	1cb1      	adds	r1, r6, #2
 8001478:	5c59      	ldrb	r1, [r3, r1]
 800147a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 800147e:	1cf1      	adds	r1, r6, #3
 8001480:	5c5b      	ldrb	r3, [r3, r1]
 8001482:	ea47 6703 	orr.w	r7, r7, r3, lsl #24
      offset += sizeof(this->floats_length);
 8001486:	3604      	adds	r6, #4
      if(floats_lengthT > floats_length)
 8001488:	f8d2 3918 	ldr.w	r3, [r2, #2328]	; 0x918
 800148c:	429f      	cmp	r7, r3
 800148e:	d821      	bhi.n	80014d4 <main+0x51c>
      floats_length = floats_lengthT;
 8001490:	4b45      	ldr	r3, [pc, #276]	; (80015a8 <main+0x5f0>)
 8001492:	f8c3 7918 	str.w	r7, [r3, #2328]	; 0x918
      for( uint32_t i = 0; i < floats_length; i++){
 8001496:	2100      	movs	r1, #0
 8001498:	4b43      	ldr	r3, [pc, #268]	; (80015a8 <main+0x5f0>)
 800149a:	f8d3 3918 	ldr.w	r3, [r3, #2328]	; 0x918
 800149e:	428b      	cmp	r3, r1
 80014a0:	d921      	bls.n	80014e6 <main+0x52e>
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80014a2:	4841      	ldr	r0, [pc, #260]	; (80015a8 <main+0x5f0>)
 80014a4:	f100 0218 	add.w	r2, r0, #24
 80014a8:	5d93      	ldrb	r3, [r2, r6]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80014aa:	1c77      	adds	r7, r6, #1
 80014ac:	5dd7      	ldrb	r7, [r2, r7]
 80014ae:	ea43 2307 	orr.w	r3, r3, r7, lsl #8
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80014b2:	1cb7      	adds	r7, r6, #2
 80014b4:	5dd7      	ldrb	r7, [r2, r7]
 80014b6:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80014ba:	1cf7      	adds	r7, r6, #3
 80014bc:	5dd2      	ldrb	r2, [r2, r7]
 80014be:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
      this->st_floats = u_st_floats.real;
 80014c2:	f8c0 391c 	str.w	r3, [r0, #2332]	; 0x91c
      offset += sizeof(this->st_floats);
 80014c6:	3604      	adds	r6, #4
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
 80014c8:	f8d0 2920 	ldr.w	r2, [r0, #2336]	; 0x920
 80014cc:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
      for( uint32_t i = 0; i < floats_length; i++){
 80014d0:	3101      	adds	r1, #1
 80014d2:	e7e1      	b.n	8001498 <main+0x4e0>
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
 80014d4:	4690      	mov	r8, r2
 80014d6:	00b9      	lsls	r1, r7, #2
 80014d8:	f8d2 0920 	ldr.w	r0, [r2, #2336]	; 0x920
 80014dc:	f001 fc64 	bl	8002da8 <realloc>
 80014e0:	f8c8 0920 	str.w	r0, [r8, #2336]	; 0x920
 80014e4:	e7d4      	b.n	8001490 <main+0x4d8>
      uint32_t strings_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 80014e6:	4a30      	ldr	r2, [pc, #192]	; (80015a8 <main+0x5f0>)
 80014e8:	f102 0318 	add.w	r3, r2, #24
 80014ec:	5d9f      	ldrb	r7, [r3, r6]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 80014ee:	1c71      	adds	r1, r6, #1
 80014f0:	5c59      	ldrb	r1, [r3, r1]
 80014f2:	ea47 2701 	orr.w	r7, r7, r1, lsl #8
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 80014f6:	1cb1      	adds	r1, r6, #2
 80014f8:	5c59      	ldrb	r1, [r3, r1]
 80014fa:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 80014fe:	1cf1      	adds	r1, r6, #3
 8001500:	5c5b      	ldrb	r3, [r3, r1]
 8001502:	ea47 6703 	orr.w	r7, r7, r3, lsl #24
      offset += sizeof(this->strings_length);
 8001506:	3604      	adds	r6, #4
      if(strings_lengthT > strings_length)
 8001508:	f8d2 3924 	ldr.w	r3, [r2, #2340]	; 0x924
 800150c:	429f      	cmp	r7, r3
 800150e:	d804      	bhi.n	800151a <main+0x562>
      strings_length = strings_lengthT;
 8001510:	4b25      	ldr	r3, [pc, #148]	; (80015a8 <main+0x5f0>)
 8001512:	f8c3 7924 	str.w	r7, [r3, #2340]	; 0x924
      for( uint32_t i = 0; i < strings_length; i++){
 8001516:	2700      	movs	r7, #0
 8001518:	e033      	b.n	8001582 <main+0x5ca>
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
 800151a:	4690      	mov	r8, r2
 800151c:	00b9      	lsls	r1, r7, #2
 800151e:	f8d2 092c 	ldr.w	r0, [r2, #2348]	; 0x92c
 8001522:	f001 fc41 	bl	8002da8 <realloc>
 8001526:	f8c8 092c 	str.w	r0, [r8, #2348]	; 0x92c
 800152a:	e7f1      	b.n	8001510 <main+0x558>
      var |= (arr[i] << (8 * i));
 800152c:	4b1e      	ldr	r3, [pc, #120]	; (80015a8 <main+0x5f0>)
 800152e:	4473      	add	r3, lr
 8001530:	4413      	add	r3, r2
 8001532:	7e1b      	ldrb	r3, [r3, #24]
 8001534:	00d0      	lsls	r0, r2, #3
 8001536:	4083      	lsls	r3, r0
 8001538:	4319      	orrs	r1, r3
    for (size_t i = 0; i < sizeof(V); i++)
 800153a:	3201      	adds	r2, #1
 800153c:	2a03      	cmp	r2, #3
 800153e:	d9f5      	bls.n	800152c <main+0x574>
      offset += 4;
 8001540:	f106 0e04 	add.w	lr, r6, #4
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8001544:	4673      	mov	r3, lr
 8001546:	eb01 020e 	add.w	r2, r1, lr
 800154a:	429a      	cmp	r2, r3
 800154c:	d908      	bls.n	8001560 <main+0x5a8>
          inbuffer[k-1]=inbuffer[k];
 800154e:	4a16      	ldr	r2, [pc, #88]	; (80015a8 <main+0x5f0>)
 8001550:	f102 0618 	add.w	r6, r2, #24
 8001554:	1e58      	subs	r0, r3, #1
 8001556:	441a      	add	r2, r3
 8001558:	7e12      	ldrb	r2, [r2, #24]
 800155a:	5432      	strb	r2, [r6, r0]
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 800155c:	3301      	adds	r3, #1
 800155e:	e7f2      	b.n	8001546 <main+0x58e>
      inbuffer[offset+length_st_strings-1]=0;
 8001560:	4911      	ldr	r1, [pc, #68]	; (80015a8 <main+0x5f0>)
 8001562:	f101 0318 	add.w	r3, r1, #24
 8001566:	1e50      	subs	r0, r2, #1
 8001568:	2600      	movs	r6, #0
 800156a:	541e      	strb	r6, [r3, r0]
      this->st_strings = (char *)(inbuffer + offset-1);
 800156c:	f10e 36ff 	add.w	r6, lr, #4294967295	; 0xffffffff
 8001570:	4433      	add	r3, r6
 8001572:	f8c1 3928 	str.w	r3, [r1, #2344]	; 0x928
      offset += length_st_strings;
 8001576:	4616      	mov	r6, r2
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
 8001578:	f8d1 292c 	ldr.w	r2, [r1, #2348]	; 0x92c
 800157c:	f842 3027 	str.w	r3, [r2, r7, lsl #2]
      for( uint32_t i = 0; i < strings_length; i++){
 8001580:	3701      	adds	r7, #1
 8001582:	4b09      	ldr	r3, [pc, #36]	; (80015a8 <main+0x5f0>)
 8001584:	f8d3 3924 	ldr.w	r3, [r3, #2340]	; 0x924
 8001588:	42bb      	cmp	r3, r7
 800158a:	d903      	bls.n	8001594 <main+0x5dc>
      arrToVar(length_st_strings, (inbuffer + offset));
 800158c:	46b6      	mov	lr, r6
    var = 0;
 800158e:	2100      	movs	r1, #0
    for (size_t i = 0; i < sizeof(V); i++)
 8001590:	460a      	mov	r2, r1
 8001592:	e7d3      	b.n	800153c <main+0x584>
            param_recieved = true;
 8001594:	2201      	movs	r2, #1
 8001596:	4b04      	ldr	r3, [pc, #16]	; (80015a8 <main+0x5f0>)
 8001598:	f883 2904 	strb.w	r2, [r3, #2308]	; 0x904
 800159c:	e581      	b.n	80010a2 <main+0xea>
            configured_ = false;
 800159e:	2200      	movs	r2, #0
 80015a0:	4b01      	ldr	r3, [pc, #4]	; (80015a8 <main+0x5f0>)
 80015a2:	f883 28f4 	strb.w	r2, [r3, #2292]	; 0x8f4
 80015a6:	e57c      	b.n	80010a2 <main+0xea>
 80015a8:	20000648 	.word	0x20000648
 80015ac:	10624dd3 	.word	0x10624dd3
 80015b0:	3b9aca00 	.word	0x3b9aca00
 80015b4:	000f4240 	.word	0x000f4240
    if (configured_ && ((c_time - last_sync_time) > (SYNC_SECONDS * 500)))
 80015b8:	4b21      	ldr	r3, [pc, #132]	; (8001640 <main+0x688>)
 80015ba:	f893 38f4 	ldrb.w	r3, [r3, #2292]	; 0x8f4
 80015be:	b13b      	cbz	r3, 80015d0 <main+0x618>
 80015c0:	4b1f      	ldr	r3, [pc, #124]	; (8001640 <main+0x688>)
 80015c2:	f8d3 38f8 	ldr.w	r3, [r3, #2296]	; 0x8f8
 80015c6:	1ae3      	subs	r3, r4, r3
 80015c8:	f640 12c4 	movw	r2, #2500	; 0x9c4
 80015cc:	4293      	cmp	r3, r2
 80015ce:	d825      	bhi.n	800161c <main+0x664>
    return configured_;
 80015d0:	4b1b      	ldr	r3, [pc, #108]	; (8001640 <main+0x688>)
 80015d2:	f893 38f4 	ldrb.w	r3, [r3, #2292]	; 0x8f4
		if (nh.connected())
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	f47f ad2a 	bne.w	8001030 <main+0x78>
 80015dc:	f000 f9b8 	bl	8001950 <HAL_GetTick>
 80015e0:	4604      	mov	r4, r0
    if ((c_time - last_sync_receive_time) > (SYNC_SECONDS * 2200))
 80015e2:	4b17      	ldr	r3, [pc, #92]	; (8001640 <main+0x688>)
 80015e4:	f8d3 38fc 	ldr.w	r3, [r3, #2300]	; 0x8fc
 80015e8:	1ac3      	subs	r3, r0, r3
 80015ea:	f642 22f8 	movw	r2, #11000	; 0x2af8
 80015ee:	4293      	cmp	r3, r2
 80015f0:	d903      	bls.n	80015fa <main+0x642>
      configured_ = false;
 80015f2:	2200      	movs	r2, #0
 80015f4:	4b12      	ldr	r3, [pc, #72]	; (8001640 <main+0x688>)
 80015f6:	f883 28f4 	strb.w	r2, [r3, #2292]	; 0x8f4
    if (mode_ != MODE_FIRST_FF)
 80015fa:	4b11      	ldr	r3, [pc, #68]	; (8001640 <main+0x688>)
 80015fc:	f8d3 38e0 	ldr.w	r3, [r3, #2272]	; 0x8e0
 8001600:	2b00      	cmp	r3, #0
 8001602:	f43f ad4e 	beq.w	80010a2 <main+0xea>
      if (c_time > last_msg_timeout_time)
 8001606:	4b0e      	ldr	r3, [pc, #56]	; (8001640 <main+0x688>)
 8001608:	f8d3 3900 	ldr.w	r3, [r3, #2304]	; 0x900
 800160c:	429c      	cmp	r4, r3
 800160e:	f67f ad48 	bls.w	80010a2 <main+0xea>
        mode_ = MODE_FIRST_FF;
 8001612:	2200      	movs	r2, #0
 8001614:	4b0a      	ldr	r3, [pc, #40]	; (8001640 <main+0x688>)
 8001616:	f8c3 28e0 	str.w	r2, [r3, #2272]	; 0x8e0
 800161a:	e542      	b.n	80010a2 <main+0xea>
      data()
 800161c:	4b09      	ldr	r3, [pc, #36]	; (8001644 <main+0x68c>)
 800161e:	9300      	str	r3, [sp, #0]
 8001620:	2300      	movs	r3, #0
 8001622:	9301      	str	r3, [sp, #4]
 8001624:	9302      	str	r3, [sp, #8]
    publish(TopicInfo::ID_TIME, &t);
 8001626:	4e06      	ldr	r6, [pc, #24]	; (8001640 <main+0x688>)
 8001628:	6833      	ldr	r3, [r6, #0]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	466a      	mov	r2, sp
 800162e:	210a      	movs	r1, #10
 8001630:	4630      	mov	r0, r6
 8001632:	4798      	blx	r3
 8001634:	f000 f98c 	bl	8001950 <HAL_GetTick>
    rt_time = hardware_.time();
 8001638:	60b0      	str	r0, [r6, #8]
      last_sync_time = c_time;
 800163a:	f8c6 48f8 	str.w	r4, [r6, #2296]	; 0x8f8
 800163e:	e7c7      	b.n	80015d0 <main+0x618>
 8001640:	20000648 	.word	0x20000648
 8001644:	080037b4 	.word	0x080037b4

08001648 <_GLOBAL__sub_I_serial>:
}
 8001648:	b508      	push	{r3, lr}
 800164a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800164e:	2001      	movs	r0, #1
 8001650:	f7fe fea4 	bl	800039c <_Z41__static_initialization_and_destruction_0ii>
 8001654:	bd08      	pop	{r3, pc}
	...

08001658 <HAL_MspInit>:
/* USER CODE END 0 */
/**
 * Initializes the Global MSP.
 */
void HAL_MspInit(void)
{
 8001658:	b500      	push	{lr}
 800165a:	b083      	sub	sp, #12
	/* USER CODE BEGIN MspInit 0 */

	/* USER CODE END MspInit 0 */

	__HAL_RCC_AFIO_CLK_ENABLE()
 800165c:	4b24      	ldr	r3, [pc, #144]	; (80016f0 <HAL_MspInit+0x98>)
 800165e:	699a      	ldr	r2, [r3, #24]
 8001660:	f042 0201 	orr.w	r2, r2, #1
 8001664:	619a      	str	r2, [r3, #24]
 8001666:	699a      	ldr	r2, [r3, #24]
 8001668:	f002 0201 	and.w	r2, r2, #1
 800166c:	9200      	str	r2, [sp, #0]
 800166e:	9a00      	ldr	r2, [sp, #0]
	;
	__HAL_RCC_PWR_CLK_ENABLE()
 8001670:	69da      	ldr	r2, [r3, #28]
 8001672:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001676:	61da      	str	r2, [r3, #28]
 8001678:	69db      	ldr	r3, [r3, #28]
 800167a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800167e:	9301      	str	r3, [sp, #4]
 8001680:	9b01      	ldr	r3, [sp, #4]
	;

	HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001682:	2003      	movs	r0, #3
 8001684:	f000 f96a 	bl	800195c <HAL_NVIC_SetPriorityGrouping>

	/* System interrupt init*/
	/* MemoryManagement_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8001688:	2200      	movs	r2, #0
 800168a:	4611      	mov	r1, r2
 800168c:	f06f 000b 	mvn.w	r0, #11
 8001690:	f000 f976 	bl	8001980 <HAL_NVIC_SetPriority>
	/* BusFault_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8001694:	2200      	movs	r2, #0
 8001696:	4611      	mov	r1, r2
 8001698:	f06f 000a 	mvn.w	r0, #10
 800169c:	f000 f970 	bl	8001980 <HAL_NVIC_SetPriority>
	/* UsageFault_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 80016a0:	2200      	movs	r2, #0
 80016a2:	4611      	mov	r1, r2
 80016a4:	f06f 0009 	mvn.w	r0, #9
 80016a8:	f000 f96a 	bl	8001980 <HAL_NVIC_SetPriority>
	/* SVCall_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 80016ac:	2200      	movs	r2, #0
 80016ae:	4611      	mov	r1, r2
 80016b0:	f06f 0004 	mvn.w	r0, #4
 80016b4:	f000 f964 	bl	8001980 <HAL_NVIC_SetPriority>
	/* DebugMonitor_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 80016b8:	2200      	movs	r2, #0
 80016ba:	4611      	mov	r1, r2
 80016bc:	f06f 0003 	mvn.w	r0, #3
 80016c0:	f000 f95e 	bl	8001980 <HAL_NVIC_SetPriority>
	/* PendSV_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 80016c4:	2200      	movs	r2, #0
 80016c6:	4611      	mov	r1, r2
 80016c8:	f06f 0001 	mvn.w	r0, #1
 80016cc:	f000 f958 	bl	8001980 <HAL_NVIC_SetPriority>
	/* SysTick_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80016d0:	2200      	movs	r2, #0
 80016d2:	4611      	mov	r1, r2
 80016d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80016d8:	f000 f952 	bl	8001980 <HAL_NVIC_SetPriority>

	/**NOJTAG: JTAG-DP Disabled and SW-DP Enabled
	 */
	__HAL_AFIO_REMAP_SWJ_NOJTAG()
 80016dc:	4a05      	ldr	r2, [pc, #20]	; (80016f4 <HAL_MspInit+0x9c>)
 80016de:	6853      	ldr	r3, [r2, #4]
 80016e0:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80016e4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80016e8:	6053      	str	r3, [r2, #4]
	;

	/* USER CODE BEGIN MspInit 1 */

	/* USER CODE END MspInit 1 */
}
 80016ea:	b003      	add	sp, #12
 80016ec:	f85d fb04 	ldr.w	pc, [sp], #4
 80016f0:	40021000 	.word	0x40021000
 80016f4:	40010000 	.word	0x40010000

080016f8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
	if (htim_base->Instance == TIM3)
 80016f8:	6802      	ldr	r2, [r0, #0]
 80016fa:	4b0e      	ldr	r3, [pc, #56]	; (8001734 <HAL_TIM_Base_MspInit+0x3c>)
 80016fc:	429a      	cmp	r2, r3
 80016fe:	d000      	beq.n	8001702 <HAL_TIM_Base_MspInit+0xa>
 8001700:	4770      	bx	lr
{
 8001702:	b500      	push	{lr}
 8001704:	b083      	sub	sp, #12
	{
		/* USER CODE BEGIN TIM3_MspInit 0 */

		/* USER CODE END TIM3_MspInit 0 */
		/* Peripheral clock enable */
		__HAL_RCC_TIM3_CLK_ENABLE()
 8001706:	f503 3303 	add.w	r3, r3, #134144	; 0x20c00
 800170a:	69da      	ldr	r2, [r3, #28]
 800170c:	f042 0202 	orr.w	r2, r2, #2
 8001710:	61da      	str	r2, [r3, #28]
 8001712:	69db      	ldr	r3, [r3, #28]
 8001714:	f003 0302 	and.w	r3, r3, #2
 8001718:	9301      	str	r3, [sp, #4]
 800171a:	9b01      	ldr	r3, [sp, #4]
		;
		/* TIM3 interrupt Init */
		HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800171c:	2200      	movs	r2, #0
 800171e:	4611      	mov	r1, r2
 8001720:	201d      	movs	r0, #29
 8001722:	f000 f92d 	bl	8001980 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001726:	201d      	movs	r0, #29
 8001728:	f000 f95e 	bl	80019e8 <HAL_NVIC_EnableIRQ>
		/* USER CODE BEGIN TIM3_MspInit 1 */

		/* USER CODE END TIM3_MspInit 1 */
	}
}
 800172c:	b003      	add	sp, #12
 800172e:	f85d fb04 	ldr.w	pc, [sp], #4
 8001732:	bf00      	nop
 8001734:	40000400 	.word	0x40000400

08001738 <HAL_UART_MspInit>:
}

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
	GPIO_InitTypeDef GPIO_InitStruct;
	if (huart->Instance == USART1)
 8001738:	6802      	ldr	r2, [r0, #0]
 800173a:	4b33      	ldr	r3, [pc, #204]	; (8001808 <HAL_UART_MspInit+0xd0>)
 800173c:	429a      	cmp	r2, r3
 800173e:	d000      	beq.n	8001742 <HAL_UART_MspInit+0xa>
 8001740:	4770      	bx	lr
{
 8001742:	b570      	push	{r4, r5, r6, lr}
 8001744:	b086      	sub	sp, #24
 8001746:	4604      	mov	r4, r0
	{
		/* USER CODE BEGIN USART1_MspInit 0 */

		/* USER CODE END USART1_MspInit 0 */
		/* Peripheral clock enable */
		__HAL_RCC_USART1_CLK_ENABLE();
 8001748:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 800174c:	699a      	ldr	r2, [r3, #24]
 800174e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001752:	619a      	str	r2, [r3, #24]
 8001754:	699b      	ldr	r3, [r3, #24]
 8001756:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800175a:	9301      	str	r3, [sp, #4]
 800175c:	9b01      	ldr	r3, [sp, #4]

		/**USART1 GPIO Configuration
		 PA9     ------> USART1_TX
		 PA10     ------> USART1_RX
		 */
		GPIO_InitStruct.Pin = GPIO_PIN_9;
 800175e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001762:	9302      	str	r3, [sp, #8]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001764:	2302      	movs	r3, #2
 8001766:	9303      	str	r3, [sp, #12]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001768:	2303      	movs	r3, #3
 800176a:	9305      	str	r3, [sp, #20]
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800176c:	4e27      	ldr	r6, [pc, #156]	; (800180c <HAL_UART_MspInit+0xd4>)
 800176e:	a902      	add	r1, sp, #8
 8001770:	4630      	mov	r0, r6
 8001772:	f000 fabb 	bl	8001cec <HAL_GPIO_Init>

		GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001776:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800177a:	9302      	str	r3, [sp, #8]
		GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800177c:	2500      	movs	r5, #0
 800177e:	9503      	str	r5, [sp, #12]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001780:	9504      	str	r5, [sp, #16]
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001782:	a902      	add	r1, sp, #8
 8001784:	4630      	mov	r0, r6
 8001786:	f000 fab1 	bl	8001cec <HAL_GPIO_Init>

		/* USART1 DMA Init */
		/* USART1_RX Init */
		hdma_usart1_rx.Instance = DMA1_Channel5;
 800178a:	4821      	ldr	r0, [pc, #132]	; (8001810 <HAL_UART_MspInit+0xd8>)
 800178c:	4b21      	ldr	r3, [pc, #132]	; (8001814 <HAL_UART_MspInit+0xdc>)
 800178e:	6003      	str	r3, [r0, #0]
		hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001790:	6045      	str	r5, [r0, #4]
		hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001792:	6085      	str	r5, [r0, #8]
		hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001794:	2380      	movs	r3, #128	; 0x80
 8001796:	60c3      	str	r3, [r0, #12]
		hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001798:	6105      	str	r5, [r0, #16]
		hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800179a:	6145      	str	r5, [r0, #20]
		hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 800179c:	2320      	movs	r3, #32
 800179e:	6183      	str	r3, [r0, #24]
		hdma_usart1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 80017a0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80017a4:	61c3      	str	r3, [r0, #28]
		if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80017a6:	f000 f953 	bl	8001a50 <HAL_DMA_Init>
 80017aa:	bb18      	cbnz	r0, 80017f4 <HAL_UART_MspInit+0xbc>
		{
			_Error_Handler(__FILE__, __LINE__);
		}

		__HAL_LINKDMA(huart, hdmarx, hdma_usart1_rx);
 80017ac:	4b18      	ldr	r3, [pc, #96]	; (8001810 <HAL_UART_MspInit+0xd8>)
 80017ae:	6363      	str	r3, [r4, #52]	; 0x34
 80017b0:	625c      	str	r4, [r3, #36]	; 0x24

		/* USART1_TX Init */
		hdma_usart1_tx.Instance = DMA1_Channel4;
 80017b2:	4819      	ldr	r0, [pc, #100]	; (8001818 <HAL_UART_MspInit+0xe0>)
 80017b4:	4b19      	ldr	r3, [pc, #100]	; (800181c <HAL_UART_MspInit+0xe4>)
 80017b6:	6003      	str	r3, [r0, #0]
		hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80017b8:	2310      	movs	r3, #16
 80017ba:	6043      	str	r3, [r0, #4]
		hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80017bc:	2300      	movs	r3, #0
 80017be:	6083      	str	r3, [r0, #8]
		hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80017c0:	2280      	movs	r2, #128	; 0x80
 80017c2:	60c2      	str	r2, [r0, #12]
		hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80017c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80017c8:	6102      	str	r2, [r0, #16]
		hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80017ca:	6143      	str	r3, [r0, #20]
		hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80017cc:	6183      	str	r3, [r0, #24]
		hdma_usart1_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 80017ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017d2:	61c3      	str	r3, [r0, #28]
		if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80017d4:	f000 f93c 	bl	8001a50 <HAL_DMA_Init>
 80017d8:	b988      	cbnz	r0, 80017fe <HAL_UART_MspInit+0xc6>
		{
			_Error_Handler(__FILE__, __LINE__);
		}

		__HAL_LINKDMA(huart, hdmatx, hdma_usart1_tx);
 80017da:	4b0f      	ldr	r3, [pc, #60]	; (8001818 <HAL_UART_MspInit+0xe0>)
 80017dc:	6323      	str	r3, [r4, #48]	; 0x30
 80017de:	625c      	str	r4, [r3, #36]	; 0x24

		/* USER CODE BEGIN USART1_MspInit 1 */

		HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80017e0:	2200      	movs	r2, #0
 80017e2:	4611      	mov	r1, r2
 80017e4:	2025      	movs	r0, #37	; 0x25
 80017e6:	f000 f8cb 	bl	8001980 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(USART1_IRQn);
 80017ea:	2025      	movs	r0, #37	; 0x25
 80017ec:	f000 f8fc 	bl	80019e8 <HAL_NVIC_EnableIRQ>

		/* USER CODE END USART1_MspInit 1 */
	}
}
 80017f0:	b006      	add	sp, #24
 80017f2:	bd70      	pop	{r4, r5, r6, pc}
			_Error_Handler(__FILE__, __LINE__);
 80017f4:	21a6      	movs	r1, #166	; 0xa6
 80017f6:	480a      	ldr	r0, [pc, #40]	; (8001820 <HAL_UART_MspInit+0xe8>)
 80017f8:	f7ff fb44 	bl	8000e84 <_Error_Handler>
 80017fc:	e7d6      	b.n	80017ac <HAL_UART_MspInit+0x74>
			_Error_Handler(__FILE__, __LINE__);
 80017fe:	21b6      	movs	r1, #182	; 0xb6
 8001800:	4807      	ldr	r0, [pc, #28]	; (8001820 <HAL_UART_MspInit+0xe8>)
 8001802:	f7ff fb3f 	bl	8000e84 <_Error_Handler>
 8001806:	e7e8      	b.n	80017da <HAL_UART_MspInit+0xa2>
 8001808:	40013800 	.word	0x40013800
 800180c:	40010800 	.word	0x40010800
 8001810:	20000540 	.word	0x20000540
 8001814:	40020058 	.word	0x40020058
 8001818:	20000584 	.word	0x20000584
 800181c:	40020044 	.word	0x40020044
 8001820:	080039c4 	.word	0x080039c4

08001824 <NMI_Handler>:

/**
* @brief This function handles Non maskable interrupt.
*/
void NMI_Handler(void)
{
 8001824:	4770      	bx	lr

08001826 <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 8001826:	e7fe      	b.n	8001826 <HardFault_Handler>

08001828 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 8001828:	e7fe      	b.n	8001828 <MemManage_Handler>

0800182a <BusFault_Handler>:

/**
* @brief This function handles Prefetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 800182a:	e7fe      	b.n	800182a <BusFault_Handler>

0800182c <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 800182c:	e7fe      	b.n	800182c <UsageFault_Handler>

0800182e <SVC_Handler>:

/**
* @brief This function handles System service call via SWI instruction.
*/
void SVC_Handler(void)
{
 800182e:	4770      	bx	lr

08001830 <DebugMon_Handler>:

/**
* @brief This function handles Debug monitor.
*/
void DebugMon_Handler(void)
{
 8001830:	4770      	bx	lr

08001832 <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 8001832:	4770      	bx	lr

08001834 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8001834:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001836:	f000 f87f 	bl	8001938 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
 800183a:	f000 f904 	bl	8001a46 <HAL_SYSTICK_IRQHandler>
 800183e:	bd08      	pop	{r3, pc}

08001840 <DMA1_Channel4_IRQHandler>:

/**
* @brief This function handles DMA1 channel4 global interrupt.
*/
void DMA1_Channel4_IRQHandler(void)
{
 8001840:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001842:	4802      	ldr	r0, [pc, #8]	; (800184c <DMA1_Channel4_IRQHandler+0xc>)
 8001844:	f000 f9be 	bl	8001bc4 <HAL_DMA_IRQHandler>
 8001848:	bd08      	pop	{r3, pc}
 800184a:	bf00      	nop
 800184c:	20000584 	.word	0x20000584

08001850 <DMA1_Channel5_IRQHandler>:

/**
* @brief This function handles DMA1 channel5 global interrupt.
*/
void DMA1_Channel5_IRQHandler(void)
{
 8001850:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001852:	4802      	ldr	r0, [pc, #8]	; (800185c <DMA1_Channel5_IRQHandler+0xc>)
 8001854:	f000 f9b6 	bl	8001bc4 <HAL_DMA_IRQHandler>
 8001858:	bd08      	pop	{r3, pc}
 800185a:	bf00      	nop
 800185c:	20000540 	.word	0x20000540

08001860 <TIM3_IRQHandler>:

/**
* @brief This function handles TIM3 global interrupt.
*/
void TIM3_IRQHandler(void)
{
 8001860:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001862:	4802      	ldr	r0, [pc, #8]	; (800186c <TIM3_IRQHandler+0xc>)
 8001864:	f000 fe72 	bl	800254c <HAL_TIM_IRQHandler>
 8001868:	bd08      	pop	{r3, pc}
 800186a:	bf00      	nop
 800186c:	200005c8 	.word	0x200005c8

08001870 <USART1_IRQHandler>:
}

/* USER CODE BEGIN 1 */

void USART1_IRQHandler(void)
{
 8001870:	b508      	push	{r3, lr}
	HAL_UART_IRQHandler(&huart1);
 8001872:	4802      	ldr	r0, [pc, #8]	; (800187c <USART1_IRQHandler+0xc>)
 8001874:	f001 f984 	bl	8002b80 <HAL_UART_IRQHandler>
 8001878:	bd08      	pop	{r3, pc}
 800187a:	bf00      	nop
 800187c:	20000608 	.word	0x20000608

08001880 <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8001880:	4b0f      	ldr	r3, [pc, #60]	; (80018c0 <SystemInit+0x40>)
 8001882:	681a      	ldr	r2, [r3, #0]
 8001884:	f042 0201 	orr.w	r2, r2, #1
 8001888:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 800188a:	6859      	ldr	r1, [r3, #4]
 800188c:	4a0d      	ldr	r2, [pc, #52]	; (80018c4 <SystemInit+0x44>)
 800188e:	400a      	ands	r2, r1
 8001890:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8001892:	681a      	ldr	r2, [r3, #0]
 8001894:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8001898:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800189c:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800189e:	681a      	ldr	r2, [r3, #0]
 80018a0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80018a4:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80018a6:	685a      	ldr	r2, [r3, #4]
 80018a8:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 80018ac:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 80018ae:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80018b2:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80018b4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80018b8:	4b03      	ldr	r3, [pc, #12]	; (80018c8 <SystemInit+0x48>)
 80018ba:	609a      	str	r2, [r3, #8]
 80018bc:	4770      	bx	lr
 80018be:	bf00      	nop
 80018c0:	40021000 	.word	0x40021000
 80018c4:	f8ff0000 	.word	0xf8ff0000
 80018c8:	e000ed00 	.word	0xe000ed00

080018cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018cc:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80018ce:	4b0e      	ldr	r3, [pc, #56]	; (8001908 <HAL_InitTick+0x3c>)
{
 80018d0:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80018d2:	7818      	ldrb	r0, [r3, #0]
 80018d4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018d8:	fbb3 f3f0 	udiv	r3, r3, r0
 80018dc:	4a0b      	ldr	r2, [pc, #44]	; (800190c <HAL_InitTick+0x40>)
 80018de:	6810      	ldr	r0, [r2, #0]
 80018e0:	fbb0 f0f3 	udiv	r0, r0, r3
 80018e4:	f000 f88c 	bl	8001a00 <HAL_SYSTICK_Config>
 80018e8:	4604      	mov	r4, r0
 80018ea:	b958      	cbnz	r0, 8001904 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018ec:	2d0f      	cmp	r5, #15
 80018ee:	d809      	bhi.n	8001904 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018f0:	4602      	mov	r2, r0
 80018f2:	4629      	mov	r1, r5
 80018f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80018f8:	f000 f842 	bl	8001980 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80018fc:	4b04      	ldr	r3, [pc, #16]	; (8001910 <HAL_InitTick+0x44>)
 80018fe:	4620      	mov	r0, r4
 8001900:	601d      	str	r5, [r3, #0]
 8001902:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8001904:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8001906:	bd38      	pop	{r3, r4, r5, pc}
 8001908:	20000004 	.word	0x20000004
 800190c:	20000000 	.word	0x20000000
 8001910:	20000008 	.word	0x20000008

08001914 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001914:	4a07      	ldr	r2, [pc, #28]	; (8001934 <HAL_Init+0x20>)
{
 8001916:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001918:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800191a:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800191c:	f043 0310 	orr.w	r3, r3, #16
 8001920:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001922:	f000 f81b 	bl	800195c <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8001926:	2000      	movs	r0, #0
 8001928:	f7ff ffd0 	bl	80018cc <HAL_InitTick>
  HAL_MspInit();
 800192c:	f7ff fe94 	bl	8001658 <HAL_MspInit>
}
 8001930:	2000      	movs	r0, #0
 8001932:	bd08      	pop	{r3, pc}
 8001934:	40022000 	.word	0x40022000

08001938 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8001938:	4a03      	ldr	r2, [pc, #12]	; (8001948 <HAL_IncTick+0x10>)
 800193a:	4b04      	ldr	r3, [pc, #16]	; (800194c <HAL_IncTick+0x14>)
 800193c:	6811      	ldr	r1, [r2, #0]
 800193e:	781b      	ldrb	r3, [r3, #0]
 8001940:	440b      	add	r3, r1
 8001942:	6013      	str	r3, [r2, #0]
 8001944:	4770      	bx	lr
 8001946:	bf00      	nop
 8001948:	200017c4 	.word	0x200017c4
 800194c:	20000004 	.word	0x20000004

08001950 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001950:	4b01      	ldr	r3, [pc, #4]	; (8001958 <HAL_GetTick+0x8>)
 8001952:	6818      	ldr	r0, [r3, #0]
}
 8001954:	4770      	bx	lr
 8001956:	bf00      	nop
 8001958:	200017c4 	.word	0x200017c4

0800195c <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800195c:	4a07      	ldr	r2, [pc, #28]	; (800197c <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 800195e:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001960:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8001962:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001966:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800196a:	041b      	lsls	r3, r3, #16
 800196c:	0c1b      	lsrs	r3, r3, #16
 800196e:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001972:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 8001976:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8001978:	60d3      	str	r3, [r2, #12]
 800197a:	4770      	bx	lr
 800197c:	e000ed00 	.word	0xe000ed00

08001980 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001980:	4b17      	ldr	r3, [pc, #92]	; (80019e0 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001982:	b530      	push	{r4, r5, lr}
 8001984:	68dc      	ldr	r4, [r3, #12]
 8001986:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800198a:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800198e:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001990:	2b04      	cmp	r3, #4
 8001992:	bf28      	it	cs
 8001994:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001996:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001998:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800199c:	bf98      	it	ls
 800199e:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019a0:	fa05 f303 	lsl.w	r3, r5, r3
 80019a4:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019a8:	bf88      	it	hi
 80019aa:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019ac:	4019      	ands	r1, r3
 80019ae:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019b0:	fa05 f404 	lsl.w	r4, r5, r4
 80019b4:	3c01      	subs	r4, #1
 80019b6:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 80019b8:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019ba:	ea42 0201 	orr.w	r2, r2, r1
 80019be:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019c2:	bfaf      	iteee	ge
 80019c4:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019c8:	4b06      	ldrlt	r3, [pc, #24]	; (80019e4 <HAL_NVIC_SetPriority+0x64>)
 80019ca:	f000 000f 	andlt.w	r0, r0, #15
 80019ce:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019d0:	bfa5      	ittet	ge
 80019d2:	b2d2      	uxtbge	r2, r2
 80019d4:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019d8:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019da:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 80019de:	bd30      	pop	{r4, r5, pc}
 80019e0:	e000ed00 	.word	0xe000ed00
 80019e4:	e000ed14 	.word	0xe000ed14

080019e8 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80019e8:	2301      	movs	r3, #1
 80019ea:	0942      	lsrs	r2, r0, #5
 80019ec:	f000 001f 	and.w	r0, r0, #31
 80019f0:	fa03 f000 	lsl.w	r0, r3, r0
 80019f4:	4b01      	ldr	r3, [pc, #4]	; (80019fc <HAL_NVIC_EnableIRQ+0x14>)
 80019f6:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80019fa:	4770      	bx	lr
 80019fc:	e000e100 	.word	0xe000e100

08001a00 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a00:	3801      	subs	r0, #1
 8001a02:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8001a06:	d20a      	bcs.n	8001a1e <HAL_SYSTICK_Config+0x1e>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a08:	21f0      	movs	r1, #240	; 0xf0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a0a:	4b06      	ldr	r3, [pc, #24]	; (8001a24 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a0c:	4a06      	ldr	r2, [pc, #24]	; (8001a28 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a0e:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a10:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a14:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a16:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a18:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a1a:	601a      	str	r2, [r3, #0]
 8001a1c:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8001a1e:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001a20:	4770      	bx	lr
 8001a22:	bf00      	nop
 8001a24:	e000e010 	.word	0xe000e010
 8001a28:	e000ed00 	.word	0xe000ed00

08001a2c <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8001a2c:	4b04      	ldr	r3, [pc, #16]	; (8001a40 <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8001a2e:	2804      	cmp	r0, #4
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8001a30:	681a      	ldr	r2, [r3, #0]
 8001a32:	bf0c      	ite	eq
 8001a34:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8001a38:	f022 0204 	bicne.w	r2, r2, #4
 8001a3c:	601a      	str	r2, [r3, #0]
 8001a3e:	4770      	bx	lr
 8001a40:	e000e010 	.word	0xe000e010

08001a44 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8001a44:	4770      	bx	lr

08001a46 <HAL_SYSTICK_IRQHandler>:
{
 8001a46:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 8001a48:	f7ff fffc 	bl	8001a44 <HAL_SYSTICK_Callback>
 8001a4c:	bd08      	pop	{r3, pc}
	...

08001a50 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001a50:	b510      	push	{r4, lr}
  uint32_t tmp = 0U;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001a52:	b350      	cbz	r0, 8001aaa <HAL_DMA_Init+0x5a>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001a54:	2214      	movs	r2, #20
 8001a56:	6801      	ldr	r1, [r0, #0]
 8001a58:	4b15      	ldr	r3, [pc, #84]	; (8001ab0 <HAL_DMA_Init+0x60>)
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001a5a:	6884      	ldr	r4, [r0, #8]
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001a5c:	440b      	add	r3, r1
 8001a5e:	fbb3 f3f2 	udiv	r3, r3, r2
 8001a62:	009b      	lsls	r3, r3, #2
 8001a64:	6403      	str	r3, [r0, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8001a66:	4b13      	ldr	r3, [pc, #76]	; (8001ab4 <HAL_DMA_Init+0x64>)
  tmp = hdma->Instance->CCR;
 8001a68:	680a      	ldr	r2, [r1, #0]
  hdma->DmaBaseAddress = DMA1;
 8001a6a:	63c3      	str	r3, [r0, #60]	; 0x3c
  tmp |=  hdma->Init.Direction        |
 8001a6c:	6843      	ldr	r3, [r0, #4]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001a6e:	f422 527f 	bic.w	r2, r2, #16320	; 0x3fc0
  tmp |=  hdma->Init.Direction        |
 8001a72:	4323      	orrs	r3, r4
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a74:	68c4      	ldr	r4, [r0, #12]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001a76:	f022 0230 	bic.w	r2, r2, #48	; 0x30
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a7a:	4323      	orrs	r3, r4
 8001a7c:	6904      	ldr	r4, [r0, #16]
 8001a7e:	4323      	orrs	r3, r4
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a80:	6944      	ldr	r4, [r0, #20]
 8001a82:	4323      	orrs	r3, r4
 8001a84:	6984      	ldr	r4, [r0, #24]
 8001a86:	4323      	orrs	r3, r4
          hdma->Init.Mode                | hdma->Init.Priority;
 8001a88:	69c4      	ldr	r4, [r0, #28]
 8001a8a:	4323      	orrs	r3, r4
  tmp |=  hdma->Init.Direction        |
 8001a8c:	4313      	orrs	r3, r2

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001a8e:	600b      	str	r3, [r1, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001a90:	2201      	movs	r2, #1
  hdma->XferCpltCallback = NULL;
 8001a92:	2300      	movs	r3, #0
  hdma->State = HAL_DMA_STATE_READY;
 8001a94:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
  hdma->XferCpltCallback = NULL;
 8001a98:	6283      	str	r3, [r0, #40]	; 0x28
  hdma->XferHalfCpltCallback = NULL;
 8001a9a:	62c3      	str	r3, [r0, #44]	; 0x2c
  hdma->XferErrorCallback = NULL;
 8001a9c:	6303      	str	r3, [r0, #48]	; 0x30
  hdma->XferAbortCallback = NULL;
 8001a9e:	6343      	str	r3, [r0, #52]	; 0x34
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001aa0:	6383      	str	r3, [r0, #56]	; 0x38
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001aa2:	f880 3020 	strb.w	r3, [r0, #32]
  
  return HAL_OK;
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001aaa:	2001      	movs	r0, #1
}
 8001aac:	bd10      	pop	{r4, pc}
 8001aae:	bf00      	nop
 8001ab0:	bffdfff8 	.word	0xbffdfff8
 8001ab4:	40020000 	.word	0x40020000

08001ab8 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001ab8:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001aba:	f890 4020 	ldrb.w	r4, [r0, #32]
 8001abe:	2c01      	cmp	r4, #1
 8001ac0:	d035      	beq.n	8001b2e <HAL_DMA_Start_IT+0x76>
 8001ac2:	2401      	movs	r4, #1
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001ac4:	f890 5021 	ldrb.w	r5, [r0, #33]	; 0x21
  __HAL_LOCK(hdma);
 8001ac8:	f880 4020 	strb.w	r4, [r0, #32]
  if(HAL_DMA_STATE_READY == hdma->State)
 8001acc:	42a5      	cmp	r5, r4
 8001ace:	f04f 0600 	mov.w	r6, #0
 8001ad2:	f04f 0402 	mov.w	r4, #2
 8001ad6:	d128      	bne.n	8001b2a <HAL_DMA_Start_IT+0x72>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001ad8:	f880 4021 	strb.w	r4, [r0, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001adc:	6804      	ldr	r4, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001ade:	6386      	str	r6, [r0, #56]	; 0x38
    __HAL_DMA_DISABLE(hdma);
 8001ae0:	6826      	ldr	r6, [r4, #0]
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001ae2:	6c07      	ldr	r7, [r0, #64]	; 0x40
    __HAL_DMA_DISABLE(hdma);
 8001ae4:	f026 0601 	bic.w	r6, r6, #1
 8001ae8:	6026      	str	r6, [r4, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001aea:	6bc6      	ldr	r6, [r0, #60]	; 0x3c
 8001aec:	40bd      	lsls	r5, r7
 8001aee:	6075      	str	r5, [r6, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001af0:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001af2:	6843      	ldr	r3, [r0, #4]
 8001af4:	6805      	ldr	r5, [r0, #0]
 8001af6:	2b10      	cmp	r3, #16
    if(NULL != hdma->XferHalfCpltCallback)
 8001af8:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001afa:	bf0b      	itete	eq
 8001afc:	60a2      	streq	r2, [r4, #8]
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8001afe:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 8001b00:	60e1      	streq	r1, [r4, #12]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8001b02:	60e2      	strne	r2, [r4, #12]
    if(NULL != hdma->XferHalfCpltCallback)
 8001b04:	b14b      	cbz	r3, 8001b1a <HAL_DMA_Start_IT+0x62>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001b06:	6823      	ldr	r3, [r4, #0]
 8001b08:	f043 030e 	orr.w	r3, r3, #14
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001b0c:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 8001b0e:	682b      	ldr	r3, [r5, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001b10:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 8001b12:	f043 0301 	orr.w	r3, r3, #1
 8001b16:	602b      	str	r3, [r5, #0]
 8001b18:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001b1a:	6823      	ldr	r3, [r4, #0]
 8001b1c:	f023 0304 	bic.w	r3, r3, #4
 8001b20:	6023      	str	r3, [r4, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001b22:	6823      	ldr	r3, [r4, #0]
 8001b24:	f043 030a 	orr.w	r3, r3, #10
 8001b28:	e7f0      	b.n	8001b0c <HAL_DMA_Start_IT+0x54>
    __HAL_UNLOCK(hdma); 
 8001b2a:	f880 6020 	strb.w	r6, [r0, #32]
  __HAL_LOCK(hdma);
 8001b2e:	2002      	movs	r0, #2
}
 8001b30:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08001b34 <HAL_DMA_Abort_IT>:
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001b34:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
{  
 8001b38:	b510      	push	{r4, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001b3a:	2b02      	cmp	r3, #2
 8001b3c:	d003      	beq.n	8001b46 <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b3e:	2304      	movs	r3, #4
 8001b40:	6383      	str	r3, [r0, #56]	; 0x38
    status = HAL_ERROR;
 8001b42:	2001      	movs	r0, #1
 8001b44:	bd10      	pop	{r4, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001b46:	6803      	ldr	r3, [r0, #0]
 8001b48:	681a      	ldr	r2, [r3, #0]
 8001b4a:	f022 020e 	bic.w	r2, r2, #14
 8001b4e:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 8001b50:	681a      	ldr	r2, [r3, #0]
 8001b52:	f022 0201 	bic.w	r2, r2, #1
 8001b56:	601a      	str	r2, [r3, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001b58:	4a18      	ldr	r2, [pc, #96]	; (8001bbc <HAL_DMA_Abort_IT+0x88>)
 8001b5a:	4293      	cmp	r3, r2
 8001b5c:	d01f      	beq.n	8001b9e <HAL_DMA_Abort_IT+0x6a>
 8001b5e:	3214      	adds	r2, #20
 8001b60:	4293      	cmp	r3, r2
 8001b62:	d01e      	beq.n	8001ba2 <HAL_DMA_Abort_IT+0x6e>
 8001b64:	3214      	adds	r2, #20
 8001b66:	4293      	cmp	r3, r2
 8001b68:	d01d      	beq.n	8001ba6 <HAL_DMA_Abort_IT+0x72>
 8001b6a:	3214      	adds	r2, #20
 8001b6c:	4293      	cmp	r3, r2
 8001b6e:	d01d      	beq.n	8001bac <HAL_DMA_Abort_IT+0x78>
 8001b70:	3214      	adds	r2, #20
 8001b72:	4293      	cmp	r3, r2
 8001b74:	d01d      	beq.n	8001bb2 <HAL_DMA_Abort_IT+0x7e>
 8001b76:	3214      	adds	r2, #20
 8001b78:	4293      	cmp	r3, r2
 8001b7a:	bf0c      	ite	eq
 8001b7c:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
 8001b80:	f04f 7380 	movne.w	r3, #16777216	; 0x1000000
 8001b84:	4a0e      	ldr	r2, [pc, #56]	; (8001bc0 <HAL_DMA_Abort_IT+0x8c>)
    __HAL_UNLOCK(hdma);
 8001b86:	2400      	movs	r4, #0
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001b88:	6053      	str	r3, [r2, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8001b8a:	2301      	movs	r3, #1
 8001b8c:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    if(hdma->XferAbortCallback != NULL)
 8001b90:	6b43      	ldr	r3, [r0, #52]	; 0x34
    __HAL_UNLOCK(hdma);
 8001b92:	f880 4020 	strb.w	r4, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 8001b96:	b17b      	cbz	r3, 8001bb8 <HAL_DMA_Abort_IT+0x84>
      hdma->XferAbortCallback(hdma);
 8001b98:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8001b9a:	4620      	mov	r0, r4
 8001b9c:	bd10      	pop	{r4, pc}
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001b9e:	2301      	movs	r3, #1
 8001ba0:	e7f0      	b.n	8001b84 <HAL_DMA_Abort_IT+0x50>
 8001ba2:	2310      	movs	r3, #16
 8001ba4:	e7ee      	b.n	8001b84 <HAL_DMA_Abort_IT+0x50>
 8001ba6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001baa:	e7eb      	b.n	8001b84 <HAL_DMA_Abort_IT+0x50>
 8001bac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001bb0:	e7e8      	b.n	8001b84 <HAL_DMA_Abort_IT+0x50>
 8001bb2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001bb6:	e7e5      	b.n	8001b84 <HAL_DMA_Abort_IT+0x50>
  HAL_StatusTypeDef status = HAL_OK;
 8001bb8:	4618      	mov	r0, r3
}
 8001bba:	bd10      	pop	{r4, pc}
 8001bbc:	40020008 	.word	0x40020008
 8001bc0:	40020000 	.word	0x40020000

08001bc4 <HAL_DMA_IRQHandler>:
{
 8001bc4:	b470      	push	{r4, r5, r6}
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001bc6:	2504      	movs	r5, #4
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001bc8:	6bc6      	ldr	r6, [r0, #60]	; 0x3c
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001bca:	6c02      	ldr	r2, [r0, #64]	; 0x40
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001bcc:	6834      	ldr	r4, [r6, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8001bce:	6803      	ldr	r3, [r0, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001bd0:	4095      	lsls	r5, r2
 8001bd2:	4225      	tst	r5, r4
  uint32_t source_it = hdma->Instance->CCR;
 8001bd4:	6819      	ldr	r1, [r3, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001bd6:	d032      	beq.n	8001c3e <HAL_DMA_IRQHandler+0x7a>
 8001bd8:	074d      	lsls	r5, r1, #29
 8001bda:	d530      	bpl.n	8001c3e <HAL_DMA_IRQHandler+0x7a>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001bdc:	681a      	ldr	r2, [r3, #0]
 8001bde:	0696      	lsls	r6, r2, #26
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001be0:	bf5e      	ittt	pl
 8001be2:	681a      	ldrpl	r2, [r3, #0]
 8001be4:	f022 0204 	bicpl.w	r2, r2, #4
 8001be8:	601a      	strpl	r2, [r3, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001bea:	4a3e      	ldr	r2, [pc, #248]	; (8001ce4 <HAL_DMA_IRQHandler+0x120>)
 8001bec:	4293      	cmp	r3, r2
 8001bee:	d019      	beq.n	8001c24 <HAL_DMA_IRQHandler+0x60>
 8001bf0:	3214      	adds	r2, #20
 8001bf2:	4293      	cmp	r3, r2
 8001bf4:	d018      	beq.n	8001c28 <HAL_DMA_IRQHandler+0x64>
 8001bf6:	3214      	adds	r2, #20
 8001bf8:	4293      	cmp	r3, r2
 8001bfa:	d017      	beq.n	8001c2c <HAL_DMA_IRQHandler+0x68>
 8001bfc:	3214      	adds	r2, #20
 8001bfe:	4293      	cmp	r3, r2
 8001c00:	d017      	beq.n	8001c32 <HAL_DMA_IRQHandler+0x6e>
 8001c02:	3214      	adds	r2, #20
 8001c04:	4293      	cmp	r3, r2
 8001c06:	d017      	beq.n	8001c38 <HAL_DMA_IRQHandler+0x74>
 8001c08:	3214      	adds	r2, #20
 8001c0a:	4293      	cmp	r3, r2
 8001c0c:	bf0c      	ite	eq
 8001c0e:	f44f 0380 	moveq.w	r3, #4194304	; 0x400000
 8001c12:	f04f 6380 	movne.w	r3, #67108864	; 0x4000000
 8001c16:	4a34      	ldr	r2, [pc, #208]	; (8001ce8 <HAL_DMA_IRQHandler+0x124>)
 8001c18:	6053      	str	r3, [r2, #4]
    if(hdma->XferHalfCpltCallback != NULL)
 8001c1a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    if (hdma->XferErrorCallback != NULL)
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d05e      	beq.n	8001cde <HAL_DMA_IRQHandler+0x11a>
}
 8001c20:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 8001c22:	4718      	bx	r3
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001c24:	2304      	movs	r3, #4
 8001c26:	e7f6      	b.n	8001c16 <HAL_DMA_IRQHandler+0x52>
 8001c28:	2340      	movs	r3, #64	; 0x40
 8001c2a:	e7f4      	b.n	8001c16 <HAL_DMA_IRQHandler+0x52>
 8001c2c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001c30:	e7f1      	b.n	8001c16 <HAL_DMA_IRQHandler+0x52>
 8001c32:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001c36:	e7ee      	b.n	8001c16 <HAL_DMA_IRQHandler+0x52>
 8001c38:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001c3c:	e7eb      	b.n	8001c16 <HAL_DMA_IRQHandler+0x52>
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001c3e:	2502      	movs	r5, #2
 8001c40:	4095      	lsls	r5, r2
 8001c42:	4225      	tst	r5, r4
 8001c44:	d035      	beq.n	8001cb2 <HAL_DMA_IRQHandler+0xee>
 8001c46:	078d      	lsls	r5, r1, #30
 8001c48:	d533      	bpl.n	8001cb2 <HAL_DMA_IRQHandler+0xee>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001c4a:	681a      	ldr	r2, [r3, #0]
 8001c4c:	0694      	lsls	r4, r2, #26
 8001c4e:	d406      	bmi.n	8001c5e <HAL_DMA_IRQHandler+0x9a>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001c50:	681a      	ldr	r2, [r3, #0]
 8001c52:	f022 020a 	bic.w	r2, r2, #10
 8001c56:	601a      	str	r2, [r3, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8001c58:	2201      	movs	r2, #1
 8001c5a:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001c5e:	4a21      	ldr	r2, [pc, #132]	; (8001ce4 <HAL_DMA_IRQHandler+0x120>)
 8001c60:	4293      	cmp	r3, r2
 8001c62:	d019      	beq.n	8001c98 <HAL_DMA_IRQHandler+0xd4>
 8001c64:	3214      	adds	r2, #20
 8001c66:	4293      	cmp	r3, r2
 8001c68:	d018      	beq.n	8001c9c <HAL_DMA_IRQHandler+0xd8>
 8001c6a:	3214      	adds	r2, #20
 8001c6c:	4293      	cmp	r3, r2
 8001c6e:	d017      	beq.n	8001ca0 <HAL_DMA_IRQHandler+0xdc>
 8001c70:	3214      	adds	r2, #20
 8001c72:	4293      	cmp	r3, r2
 8001c74:	d017      	beq.n	8001ca6 <HAL_DMA_IRQHandler+0xe2>
 8001c76:	3214      	adds	r2, #20
 8001c78:	4293      	cmp	r3, r2
 8001c7a:	d017      	beq.n	8001cac <HAL_DMA_IRQHandler+0xe8>
 8001c7c:	3214      	adds	r2, #20
 8001c7e:	4293      	cmp	r3, r2
 8001c80:	bf0c      	ite	eq
 8001c82:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
 8001c86:	f04f 7300 	movne.w	r3, #33554432	; 0x2000000
 8001c8a:	4a17      	ldr	r2, [pc, #92]	; (8001ce8 <HAL_DMA_IRQHandler+0x124>)
 8001c8c:	6053      	str	r3, [r2, #4]
    __HAL_UNLOCK(hdma);
 8001c8e:	2300      	movs	r3, #0
 8001c90:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferCpltCallback != NULL)
 8001c94:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8001c96:	e7c1      	b.n	8001c1c <HAL_DMA_IRQHandler+0x58>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001c98:	2302      	movs	r3, #2
 8001c9a:	e7f6      	b.n	8001c8a <HAL_DMA_IRQHandler+0xc6>
 8001c9c:	2320      	movs	r3, #32
 8001c9e:	e7f4      	b.n	8001c8a <HAL_DMA_IRQHandler+0xc6>
 8001ca0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001ca4:	e7f1      	b.n	8001c8a <HAL_DMA_IRQHandler+0xc6>
 8001ca6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001caa:	e7ee      	b.n	8001c8a <HAL_DMA_IRQHandler+0xc6>
 8001cac:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001cb0:	e7eb      	b.n	8001c8a <HAL_DMA_IRQHandler+0xc6>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001cb2:	2508      	movs	r5, #8
 8001cb4:	4095      	lsls	r5, r2
 8001cb6:	4225      	tst	r5, r4
 8001cb8:	d011      	beq.n	8001cde <HAL_DMA_IRQHandler+0x11a>
 8001cba:	0709      	lsls	r1, r1, #28
 8001cbc:	d50f      	bpl.n	8001cde <HAL_DMA_IRQHandler+0x11a>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001cbe:	6819      	ldr	r1, [r3, #0]
 8001cc0:	f021 010e 	bic.w	r1, r1, #14
 8001cc4:	6019      	str	r1, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	fa03 f202 	lsl.w	r2, r3, r2
 8001ccc:	6072      	str	r2, [r6, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001cce:	6383      	str	r3, [r0, #56]	; 0x38
    hdma->State = HAL_DMA_STATE_READY;
 8001cd0:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	f880 3020 	strb.w	r3, [r0, #32]
    if (hdma->XferErrorCallback != NULL)
 8001cda:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8001cdc:	e79e      	b.n	8001c1c <HAL_DMA_IRQHandler+0x58>
}
 8001cde:	bc70      	pop	{r4, r5, r6}
 8001ce0:	4770      	bx	lr
 8001ce2:	bf00      	nop
 8001ce4:	40020008 	.word	0x40020008
 8001ce8:	40020000 	.word	0x40020000

08001cec <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001cec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position;
  uint32_t ioposition = 0x00U;
  uint32_t iocurrent = 0x00U;
  uint32_t temp = 0x00U;
  uint32_t config = 0x00U;
 8001cf0:	2200      	movs	r2, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 8001cf2:	4616      	mov	r6, r2
 8001cf4:	4b65      	ldr	r3, [pc, #404]	; (8001e8c <HAL_GPIO_Init+0x1a0>)
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001cf6:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 8001e9c <HAL_GPIO_Init+0x1b0>
 8001cfa:	f8df c1a4 	ldr.w	ip, [pc, #420]	; 8001ea0 <HAL_GPIO_Init+0x1b4>
    ioposition = (0x01U << position);
 8001cfe:	f04f 0801 	mov.w	r8, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d02:	680c      	ldr	r4, [r1, #0]
    ioposition = (0x01U << position);
 8001d04:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d08:	ea08 0404 	and.w	r4, r8, r4
    if (iocurrent == ioposition)
 8001d0c:	45a0      	cmp	r8, r4
 8001d0e:	d17f      	bne.n	8001e10 <HAL_GPIO_Init+0x124>
      switch (GPIO_Init->Mode)
 8001d10:	684d      	ldr	r5, [r1, #4]
 8001d12:	2d12      	cmp	r5, #18
 8001d14:	f000 80af 	beq.w	8001e76 <HAL_GPIO_Init+0x18a>
 8001d18:	f200 8088 	bhi.w	8001e2c <HAL_GPIO_Init+0x140>
 8001d1c:	2d02      	cmp	r5, #2
 8001d1e:	f000 80a7 	beq.w	8001e70 <HAL_GPIO_Init+0x184>
 8001d22:	d87c      	bhi.n	8001e1e <HAL_GPIO_Init+0x132>
 8001d24:	2d00      	cmp	r5, #0
 8001d26:	f000 808e 	beq.w	8001e46 <HAL_GPIO_Init+0x15a>
 8001d2a:	2d01      	cmp	r5, #1
 8001d2c:	f000 809e 	beq.w	8001e6c <HAL_GPIO_Init+0x180>
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001d30:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001d34:	2cff      	cmp	r4, #255	; 0xff
 8001d36:	bf93      	iteet	ls
 8001d38:	4682      	movls	sl, r0
 8001d3a:	f106 4580 	addhi.w	r5, r6, #1073741824	; 0x40000000
 8001d3e:	3d08      	subhi	r5, #8
 8001d40:	f8d0 b000 	ldrls.w	fp, [r0]
 8001d44:	bf92      	itee	ls
 8001d46:	00b5      	lslls	r5, r6, #2
 8001d48:	f8d0 b004 	ldrhi.w	fp, [r0, #4]
 8001d4c:	00ad      	lslhi	r5, r5, #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001d4e:	fa09 f805 	lsl.w	r8, r9, r5
 8001d52:	ea2b 0808 	bic.w	r8, fp, r8
 8001d56:	fa02 f505 	lsl.w	r5, r2, r5
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001d5a:	bf88      	it	hi
 8001d5c:	f100 0a04 	addhi.w	sl, r0, #4
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001d60:	ea48 0505 	orr.w	r5, r8, r5
 8001d64:	f8ca 5000 	str.w	r5, [sl]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001d68:	f8d1 a004 	ldr.w	sl, [r1, #4]
 8001d6c:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 8001d70:	d04e      	beq.n	8001e10 <HAL_GPIO_Init+0x124>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001d72:	4d47      	ldr	r5, [pc, #284]	; (8001e90 <HAL_GPIO_Init+0x1a4>)
 8001d74:	4f46      	ldr	r7, [pc, #280]	; (8001e90 <HAL_GPIO_Init+0x1a4>)
 8001d76:	69ad      	ldr	r5, [r5, #24]
 8001d78:	f026 0803 	bic.w	r8, r6, #3
 8001d7c:	f045 0501 	orr.w	r5, r5, #1
 8001d80:	61bd      	str	r5, [r7, #24]
 8001d82:	69bd      	ldr	r5, [r7, #24]
 8001d84:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 8001d88:	f005 0501 	and.w	r5, r5, #1
 8001d8c:	9501      	str	r5, [sp, #4]
 8001d8e:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
        temp = AFIO->EXTICR[position >> 2U];
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8001d92:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001d96:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8001d98:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2U];
 8001d9c:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8001da0:	fa09 f90b 	lsl.w	r9, r9, fp
 8001da4:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001da8:	4d3a      	ldr	r5, [pc, #232]	; (8001e94 <HAL_GPIO_Init+0x1a8>)
 8001daa:	42a8      	cmp	r0, r5
 8001dac:	d068      	beq.n	8001e80 <HAL_GPIO_Init+0x194>
 8001dae:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001db2:	42a8      	cmp	r0, r5
 8001db4:	d066      	beq.n	8001e84 <HAL_GPIO_Init+0x198>
 8001db6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001dba:	42a8      	cmp	r0, r5
 8001dbc:	d064      	beq.n	8001e88 <HAL_GPIO_Init+0x19c>
 8001dbe:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001dc2:	42a8      	cmp	r0, r5
 8001dc4:	bf0c      	ite	eq
 8001dc6:	2503      	moveq	r5, #3
 8001dc8:	2504      	movne	r5, #4
 8001dca:	fa05 f50b 	lsl.w	r5, r5, fp
 8001dce:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2U] = temp;
 8001dd2:	f8c8 5008 	str.w	r5, [r8, #8]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001dd6:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001dd8:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 8001ddc:	bf14      	ite	ne
 8001dde:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001de0:	43a5      	biceq	r5, r4
 8001de2:	601d      	str	r5, [r3, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001de4:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001de6:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 8001dea:	bf14      	ite	ne
 8001dec:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001dee:	43a5      	biceq	r5, r4
 8001df0:	605d      	str	r5, [r3, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001df2:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001df4:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 8001df8:	bf14      	ite	ne
 8001dfa:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001dfc:	43a5      	biceq	r5, r4
 8001dfe:	609d      	str	r5, [r3, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001e00:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001e02:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 8001e06:	bf14      	ite	ne
 8001e08:	432c      	orrne	r4, r5
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001e0a:	ea25 0404 	biceq.w	r4, r5, r4
 8001e0e:	60dc      	str	r4, [r3, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 8001e10:	3601      	adds	r6, #1
 8001e12:	2e10      	cmp	r6, #16
 8001e14:	f47f af73 	bne.w	8001cfe <HAL_GPIO_Init+0x12>
        }
      }
    }
  }
}
 8001e18:	b003      	add	sp, #12
 8001e1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      switch (GPIO_Init->Mode)
 8001e1e:	2d03      	cmp	r5, #3
 8001e20:	d022      	beq.n	8001e68 <HAL_GPIO_Init+0x17c>
 8001e22:	2d11      	cmp	r5, #17
 8001e24:	d184      	bne.n	8001d30 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001e26:	68ca      	ldr	r2, [r1, #12]
 8001e28:	3204      	adds	r2, #4
          break;
 8001e2a:	e781      	b.n	8001d30 <HAL_GPIO_Init+0x44>
      switch (GPIO_Init->Mode)
 8001e2c:	4f1a      	ldr	r7, [pc, #104]	; (8001e98 <HAL_GPIO_Init+0x1ac>)
 8001e2e:	42bd      	cmp	r5, r7
 8001e30:	d009      	beq.n	8001e46 <HAL_GPIO_Init+0x15a>
 8001e32:	d812      	bhi.n	8001e5a <HAL_GPIO_Init+0x16e>
 8001e34:	f8df 906c 	ldr.w	r9, [pc, #108]	; 8001ea4 <HAL_GPIO_Init+0x1b8>
 8001e38:	454d      	cmp	r5, r9
 8001e3a:	d004      	beq.n	8001e46 <HAL_GPIO_Init+0x15a>
 8001e3c:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 8001e40:	454d      	cmp	r5, r9
 8001e42:	f47f af75 	bne.w	8001d30 <HAL_GPIO_Init+0x44>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001e46:	688a      	ldr	r2, [r1, #8]
 8001e48:	b1c2      	cbz	r2, 8001e7c <HAL_GPIO_Init+0x190>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001e4a:	2a01      	cmp	r2, #1
            GPIOx->BSRR = ioposition;
 8001e4c:	bf0c      	ite	eq
 8001e4e:	f8c0 8010 	streq.w	r8, [r0, #16]
            GPIOx->BRR = ioposition;
 8001e52:	f8c0 8014 	strne.w	r8, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001e56:	2208      	movs	r2, #8
 8001e58:	e76a      	b.n	8001d30 <HAL_GPIO_Init+0x44>
      switch (GPIO_Init->Mode)
 8001e5a:	4575      	cmp	r5, lr
 8001e5c:	d0f3      	beq.n	8001e46 <HAL_GPIO_Init+0x15a>
 8001e5e:	4565      	cmp	r5, ip
 8001e60:	d0f1      	beq.n	8001e46 <HAL_GPIO_Init+0x15a>
 8001e62:	f8df 9044 	ldr.w	r9, [pc, #68]	; 8001ea8 <HAL_GPIO_Init+0x1bc>
 8001e66:	e7eb      	b.n	8001e40 <HAL_GPIO_Init+0x154>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001e68:	2200      	movs	r2, #0
 8001e6a:	e761      	b.n	8001d30 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001e6c:	68ca      	ldr	r2, [r1, #12]
          break;
 8001e6e:	e75f      	b.n	8001d30 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001e70:	68ca      	ldr	r2, [r1, #12]
 8001e72:	3208      	adds	r2, #8
          break;
 8001e74:	e75c      	b.n	8001d30 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001e76:	68ca      	ldr	r2, [r1, #12]
 8001e78:	320c      	adds	r2, #12
          break;
 8001e7a:	e759      	b.n	8001d30 <HAL_GPIO_Init+0x44>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001e7c:	2204      	movs	r2, #4
 8001e7e:	e757      	b.n	8001d30 <HAL_GPIO_Init+0x44>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001e80:	2500      	movs	r5, #0
 8001e82:	e7a2      	b.n	8001dca <HAL_GPIO_Init+0xde>
 8001e84:	2501      	movs	r5, #1
 8001e86:	e7a0      	b.n	8001dca <HAL_GPIO_Init+0xde>
 8001e88:	2502      	movs	r5, #2
 8001e8a:	e79e      	b.n	8001dca <HAL_GPIO_Init+0xde>
 8001e8c:	40010400 	.word	0x40010400
 8001e90:	40021000 	.word	0x40021000
 8001e94:	40010800 	.word	0x40010800
 8001e98:	10210000 	.word	0x10210000
 8001e9c:	10310000 	.word	0x10310000
 8001ea0:	10320000 	.word	0x10320000
 8001ea4:	10110000 	.word	0x10110000
 8001ea8:	10220000 	.word	0x10220000

08001eac <HAL_RCC_OscConfig>:
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001eac:	6803      	ldr	r3, [r0, #0]
{
 8001eae:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001eb2:	07db      	lsls	r3, r3, #31
{
 8001eb4:	4605      	mov	r5, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001eb6:	d410      	bmi.n	8001eda <HAL_RCC_OscConfig+0x2e>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001eb8:	682b      	ldr	r3, [r5, #0]
 8001eba:	079f      	lsls	r7, r3, #30
 8001ebc:	d45e      	bmi.n	8001f7c <HAL_RCC_OscConfig+0xd0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ebe:	682b      	ldr	r3, [r5, #0]
 8001ec0:	0719      	lsls	r1, r3, #28
 8001ec2:	f100 8095 	bmi.w	8001ff0 <HAL_RCC_OscConfig+0x144>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ec6:	682b      	ldr	r3, [r5, #0]
 8001ec8:	075a      	lsls	r2, r3, #29
 8001eca:	f100 80bf 	bmi.w	800204c <HAL_RCC_OscConfig+0x1a0>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ece:	69ea      	ldr	r2, [r5, #28]
 8001ed0:	2a00      	cmp	r2, #0
 8001ed2:	f040 812d 	bne.w	8002130 <HAL_RCC_OscConfig+0x284>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 8001ed6:	2000      	movs	r0, #0
 8001ed8:	e014      	b.n	8001f04 <HAL_RCC_OscConfig+0x58>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001eda:	4c90      	ldr	r4, [pc, #576]	; (800211c <HAL_RCC_OscConfig+0x270>)
 8001edc:	6863      	ldr	r3, [r4, #4]
 8001ede:	f003 030c 	and.w	r3, r3, #12
 8001ee2:	2b04      	cmp	r3, #4
 8001ee4:	d007      	beq.n	8001ef6 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001ee6:	6863      	ldr	r3, [r4, #4]
 8001ee8:	f003 030c 	and.w	r3, r3, #12
 8001eec:	2b08      	cmp	r3, #8
 8001eee:	d10c      	bne.n	8001f0a <HAL_RCC_OscConfig+0x5e>
 8001ef0:	6863      	ldr	r3, [r4, #4]
 8001ef2:	03de      	lsls	r6, r3, #15
 8001ef4:	d509      	bpl.n	8001f0a <HAL_RCC_OscConfig+0x5e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ef6:	6823      	ldr	r3, [r4, #0]
 8001ef8:	039c      	lsls	r4, r3, #14
 8001efa:	d5dd      	bpl.n	8001eb8 <HAL_RCC_OscConfig+0xc>
 8001efc:	686b      	ldr	r3, [r5, #4]
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d1da      	bne.n	8001eb8 <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 8001f02:	2001      	movs	r0, #1
}
 8001f04:	b002      	add	sp, #8
 8001f06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f0a:	686b      	ldr	r3, [r5, #4]
 8001f0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f10:	d110      	bne.n	8001f34 <HAL_RCC_OscConfig+0x88>
 8001f12:	6823      	ldr	r3, [r4, #0]
 8001f14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f18:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001f1a:	f7ff fd19 	bl	8001950 <HAL_GetTick>
 8001f1e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f20:	6823      	ldr	r3, [r4, #0]
 8001f22:	0398      	lsls	r0, r3, #14
 8001f24:	d4c8      	bmi.n	8001eb8 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f26:	f7ff fd13 	bl	8001950 <HAL_GetTick>
 8001f2a:	1b80      	subs	r0, r0, r6
 8001f2c:	2864      	cmp	r0, #100	; 0x64
 8001f2e:	d9f7      	bls.n	8001f20 <HAL_RCC_OscConfig+0x74>
            return HAL_TIMEOUT;
 8001f30:	2003      	movs	r0, #3
 8001f32:	e7e7      	b.n	8001f04 <HAL_RCC_OscConfig+0x58>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f34:	b99b      	cbnz	r3, 8001f5e <HAL_RCC_OscConfig+0xb2>
 8001f36:	6823      	ldr	r3, [r4, #0]
 8001f38:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f3c:	6023      	str	r3, [r4, #0]
 8001f3e:	6823      	ldr	r3, [r4, #0]
 8001f40:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f44:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001f46:	f7ff fd03 	bl	8001950 <HAL_GetTick>
 8001f4a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f4c:	6823      	ldr	r3, [r4, #0]
 8001f4e:	0399      	lsls	r1, r3, #14
 8001f50:	d5b2      	bpl.n	8001eb8 <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f52:	f7ff fcfd 	bl	8001950 <HAL_GetTick>
 8001f56:	1b80      	subs	r0, r0, r6
 8001f58:	2864      	cmp	r0, #100	; 0x64
 8001f5a:	d9f7      	bls.n	8001f4c <HAL_RCC_OscConfig+0xa0>
 8001f5c:	e7e8      	b.n	8001f30 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f5e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001f62:	6823      	ldr	r3, [r4, #0]
 8001f64:	d103      	bne.n	8001f6e <HAL_RCC_OscConfig+0xc2>
 8001f66:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f6a:	6023      	str	r3, [r4, #0]
 8001f6c:	e7d1      	b.n	8001f12 <HAL_RCC_OscConfig+0x66>
 8001f6e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f72:	6023      	str	r3, [r4, #0]
 8001f74:	6823      	ldr	r3, [r4, #0]
 8001f76:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f7a:	e7cd      	b.n	8001f18 <HAL_RCC_OscConfig+0x6c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001f7c:	4c67      	ldr	r4, [pc, #412]	; (800211c <HAL_RCC_OscConfig+0x270>)
 8001f7e:	6863      	ldr	r3, [r4, #4]
 8001f80:	f013 0f0c 	tst.w	r3, #12
 8001f84:	d007      	beq.n	8001f96 <HAL_RCC_OscConfig+0xea>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001f86:	6863      	ldr	r3, [r4, #4]
 8001f88:	f003 030c 	and.w	r3, r3, #12
 8001f8c:	2b08      	cmp	r3, #8
 8001f8e:	d110      	bne.n	8001fb2 <HAL_RCC_OscConfig+0x106>
 8001f90:	6863      	ldr	r3, [r4, #4]
 8001f92:	03da      	lsls	r2, r3, #15
 8001f94:	d40d      	bmi.n	8001fb2 <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f96:	6823      	ldr	r3, [r4, #0]
 8001f98:	079b      	lsls	r3, r3, #30
 8001f9a:	d502      	bpl.n	8001fa2 <HAL_RCC_OscConfig+0xf6>
 8001f9c:	692b      	ldr	r3, [r5, #16]
 8001f9e:	2b01      	cmp	r3, #1
 8001fa0:	d1af      	bne.n	8001f02 <HAL_RCC_OscConfig+0x56>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fa2:	6823      	ldr	r3, [r4, #0]
 8001fa4:	696a      	ldr	r2, [r5, #20]
 8001fa6:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001faa:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001fae:	6023      	str	r3, [r4, #0]
 8001fb0:	e785      	b.n	8001ebe <HAL_RCC_OscConfig+0x12>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001fb2:	692a      	ldr	r2, [r5, #16]
 8001fb4:	4b5a      	ldr	r3, [pc, #360]	; (8002120 <HAL_RCC_OscConfig+0x274>)
 8001fb6:	b16a      	cbz	r2, 8001fd4 <HAL_RCC_OscConfig+0x128>
        __HAL_RCC_HSI_ENABLE();
 8001fb8:	2201      	movs	r2, #1
 8001fba:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001fbc:	f7ff fcc8 	bl	8001950 <HAL_GetTick>
 8001fc0:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fc2:	6823      	ldr	r3, [r4, #0]
 8001fc4:	079f      	lsls	r7, r3, #30
 8001fc6:	d4ec      	bmi.n	8001fa2 <HAL_RCC_OscConfig+0xf6>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001fc8:	f7ff fcc2 	bl	8001950 <HAL_GetTick>
 8001fcc:	1b80      	subs	r0, r0, r6
 8001fce:	2802      	cmp	r0, #2
 8001fd0:	d9f7      	bls.n	8001fc2 <HAL_RCC_OscConfig+0x116>
 8001fd2:	e7ad      	b.n	8001f30 <HAL_RCC_OscConfig+0x84>
        __HAL_RCC_HSI_DISABLE();
 8001fd4:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001fd6:	f7ff fcbb 	bl	8001950 <HAL_GetTick>
 8001fda:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fdc:	6823      	ldr	r3, [r4, #0]
 8001fde:	0798      	lsls	r0, r3, #30
 8001fe0:	f57f af6d 	bpl.w	8001ebe <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001fe4:	f7ff fcb4 	bl	8001950 <HAL_GetTick>
 8001fe8:	1b80      	subs	r0, r0, r6
 8001fea:	2802      	cmp	r0, #2
 8001fec:	d9f6      	bls.n	8001fdc <HAL_RCC_OscConfig+0x130>
 8001fee:	e79f      	b.n	8001f30 <HAL_RCC_OscConfig+0x84>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001ff0:	69aa      	ldr	r2, [r5, #24]
 8001ff2:	4c4a      	ldr	r4, [pc, #296]	; (800211c <HAL_RCC_OscConfig+0x270>)
 8001ff4:	4b4b      	ldr	r3, [pc, #300]	; (8002124 <HAL_RCC_OscConfig+0x278>)
 8001ff6:	b1da      	cbz	r2, 8002030 <HAL_RCC_OscConfig+0x184>
      __HAL_RCC_LSI_ENABLE();
 8001ff8:	2201      	movs	r2, #1
 8001ffa:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001ffc:	f7ff fca8 	bl	8001950 <HAL_GetTick>
 8002000:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002002:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002004:	079b      	lsls	r3, r3, #30
 8002006:	d50d      	bpl.n	8002024 <HAL_RCC_OscConfig+0x178>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002008:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 800200c:	4b46      	ldr	r3, [pc, #280]	; (8002128 <HAL_RCC_OscConfig+0x27c>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	fbb3 f3f2 	udiv	r3, r3, r2
 8002014:	9301      	str	r3, [sp, #4]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 8002016:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 8002018:	9b01      	ldr	r3, [sp, #4]
 800201a:	1e5a      	subs	r2, r3, #1
 800201c:	9201      	str	r2, [sp, #4]
 800201e:	2b00      	cmp	r3, #0
 8002020:	d1f9      	bne.n	8002016 <HAL_RCC_OscConfig+0x16a>
 8002022:	e750      	b.n	8001ec6 <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002024:	f7ff fc94 	bl	8001950 <HAL_GetTick>
 8002028:	1b80      	subs	r0, r0, r6
 800202a:	2802      	cmp	r0, #2
 800202c:	d9e9      	bls.n	8002002 <HAL_RCC_OscConfig+0x156>
 800202e:	e77f      	b.n	8001f30 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_LSI_DISABLE();
 8002030:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8002032:	f7ff fc8d 	bl	8001950 <HAL_GetTick>
 8002036:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002038:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800203a:	079f      	lsls	r7, r3, #30
 800203c:	f57f af43 	bpl.w	8001ec6 <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002040:	f7ff fc86 	bl	8001950 <HAL_GetTick>
 8002044:	1b80      	subs	r0, r0, r6
 8002046:	2802      	cmp	r0, #2
 8002048:	d9f6      	bls.n	8002038 <HAL_RCC_OscConfig+0x18c>
 800204a:	e771      	b.n	8001f30 <HAL_RCC_OscConfig+0x84>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800204c:	4c33      	ldr	r4, [pc, #204]	; (800211c <HAL_RCC_OscConfig+0x270>)
 800204e:	69e3      	ldr	r3, [r4, #28]
 8002050:	00d8      	lsls	r0, r3, #3
 8002052:	d424      	bmi.n	800209e <HAL_RCC_OscConfig+0x1f2>
      pwrclkchanged = SET;
 8002054:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8002056:	69e3      	ldr	r3, [r4, #28]
 8002058:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800205c:	61e3      	str	r3, [r4, #28]
 800205e:	69e3      	ldr	r3, [r4, #28]
 8002060:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002064:	9300      	str	r3, [sp, #0]
 8002066:	9b00      	ldr	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002068:	4e30      	ldr	r6, [pc, #192]	; (800212c <HAL_RCC_OscConfig+0x280>)
 800206a:	6833      	ldr	r3, [r6, #0]
 800206c:	05d9      	lsls	r1, r3, #23
 800206e:	d518      	bpl.n	80020a2 <HAL_RCC_OscConfig+0x1f6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002070:	68eb      	ldr	r3, [r5, #12]
 8002072:	2b01      	cmp	r3, #1
 8002074:	d126      	bne.n	80020c4 <HAL_RCC_OscConfig+0x218>
 8002076:	6a23      	ldr	r3, [r4, #32]
 8002078:	f043 0301 	orr.w	r3, r3, #1
 800207c:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 800207e:	f7ff fc67 	bl	8001950 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002082:	f241 3688 	movw	r6, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8002086:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002088:	6a23      	ldr	r3, [r4, #32]
 800208a:	079b      	lsls	r3, r3, #30
 800208c:	d53f      	bpl.n	800210e <HAL_RCC_OscConfig+0x262>
    if(pwrclkchanged == SET)
 800208e:	2f00      	cmp	r7, #0
 8002090:	f43f af1d 	beq.w	8001ece <HAL_RCC_OscConfig+0x22>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002094:	69e3      	ldr	r3, [r4, #28]
 8002096:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800209a:	61e3      	str	r3, [r4, #28]
 800209c:	e717      	b.n	8001ece <HAL_RCC_OscConfig+0x22>
    FlagStatus       pwrclkchanged = RESET;
 800209e:	2700      	movs	r7, #0
 80020a0:	e7e2      	b.n	8002068 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80020a2:	6833      	ldr	r3, [r6, #0]
 80020a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020a8:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 80020aa:	f7ff fc51 	bl	8001950 <HAL_GetTick>
 80020ae:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020b0:	6833      	ldr	r3, [r6, #0]
 80020b2:	05da      	lsls	r2, r3, #23
 80020b4:	d4dc      	bmi.n	8002070 <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020b6:	f7ff fc4b 	bl	8001950 <HAL_GetTick>
 80020ba:	eba0 0008 	sub.w	r0, r0, r8
 80020be:	2864      	cmp	r0, #100	; 0x64
 80020c0:	d9f6      	bls.n	80020b0 <HAL_RCC_OscConfig+0x204>
 80020c2:	e735      	b.n	8001f30 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80020c4:	b9ab      	cbnz	r3, 80020f2 <HAL_RCC_OscConfig+0x246>
 80020c6:	6a23      	ldr	r3, [r4, #32]
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80020c8:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80020cc:	f023 0301 	bic.w	r3, r3, #1
 80020d0:	6223      	str	r3, [r4, #32]
 80020d2:	6a23      	ldr	r3, [r4, #32]
 80020d4:	f023 0304 	bic.w	r3, r3, #4
 80020d8:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 80020da:	f7ff fc39 	bl	8001950 <HAL_GetTick>
 80020de:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020e0:	6a23      	ldr	r3, [r4, #32]
 80020e2:	0798      	lsls	r0, r3, #30
 80020e4:	d5d3      	bpl.n	800208e <HAL_RCC_OscConfig+0x1e2>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80020e6:	f7ff fc33 	bl	8001950 <HAL_GetTick>
 80020ea:	1b80      	subs	r0, r0, r6
 80020ec:	4540      	cmp	r0, r8
 80020ee:	d9f7      	bls.n	80020e0 <HAL_RCC_OscConfig+0x234>
 80020f0:	e71e      	b.n	8001f30 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80020f2:	2b05      	cmp	r3, #5
 80020f4:	6a23      	ldr	r3, [r4, #32]
 80020f6:	d103      	bne.n	8002100 <HAL_RCC_OscConfig+0x254>
 80020f8:	f043 0304 	orr.w	r3, r3, #4
 80020fc:	6223      	str	r3, [r4, #32]
 80020fe:	e7ba      	b.n	8002076 <HAL_RCC_OscConfig+0x1ca>
 8002100:	f023 0301 	bic.w	r3, r3, #1
 8002104:	6223      	str	r3, [r4, #32]
 8002106:	6a23      	ldr	r3, [r4, #32]
 8002108:	f023 0304 	bic.w	r3, r3, #4
 800210c:	e7b6      	b.n	800207c <HAL_RCC_OscConfig+0x1d0>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800210e:	f7ff fc1f 	bl	8001950 <HAL_GetTick>
 8002112:	eba0 0008 	sub.w	r0, r0, r8
 8002116:	42b0      	cmp	r0, r6
 8002118:	d9b6      	bls.n	8002088 <HAL_RCC_OscConfig+0x1dc>
 800211a:	e709      	b.n	8001f30 <HAL_RCC_OscConfig+0x84>
 800211c:	40021000 	.word	0x40021000
 8002120:	42420000 	.word	0x42420000
 8002124:	42420480 	.word	0x42420480
 8002128:	20000000 	.word	0x20000000
 800212c:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002130:	4c22      	ldr	r4, [pc, #136]	; (80021bc <HAL_RCC_OscConfig+0x310>)
 8002132:	6863      	ldr	r3, [r4, #4]
 8002134:	f003 030c 	and.w	r3, r3, #12
 8002138:	2b08      	cmp	r3, #8
 800213a:	f43f aee2 	beq.w	8001f02 <HAL_RCC_OscConfig+0x56>
 800213e:	2300      	movs	r3, #0
 8002140:	4e1f      	ldr	r6, [pc, #124]	; (80021c0 <HAL_RCC_OscConfig+0x314>)
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002142:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8002144:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002146:	d12b      	bne.n	80021a0 <HAL_RCC_OscConfig+0x2f4>
        tickstart = HAL_GetTick();
 8002148:	f7ff fc02 	bl	8001950 <HAL_GetTick>
 800214c:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800214e:	6823      	ldr	r3, [r4, #0]
 8002150:	0199      	lsls	r1, r3, #6
 8002152:	d41f      	bmi.n	8002194 <HAL_RCC_OscConfig+0x2e8>
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002154:	6a2b      	ldr	r3, [r5, #32]
 8002156:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800215a:	d105      	bne.n	8002168 <HAL_RCC_OscConfig+0x2bc>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800215c:	6862      	ldr	r2, [r4, #4]
 800215e:	68a9      	ldr	r1, [r5, #8]
 8002160:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8002164:	430a      	orrs	r2, r1
 8002166:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002168:	6a69      	ldr	r1, [r5, #36]	; 0x24
 800216a:	6862      	ldr	r2, [r4, #4]
 800216c:	430b      	orrs	r3, r1
 800216e:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8002172:	4313      	orrs	r3, r2
 8002174:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 8002176:	2301      	movs	r3, #1
 8002178:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 800217a:	f7ff fbe9 	bl	8001950 <HAL_GetTick>
 800217e:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002180:	6823      	ldr	r3, [r4, #0]
 8002182:	019a      	lsls	r2, r3, #6
 8002184:	f53f aea7 	bmi.w	8001ed6 <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002188:	f7ff fbe2 	bl	8001950 <HAL_GetTick>
 800218c:	1b40      	subs	r0, r0, r5
 800218e:	2802      	cmp	r0, #2
 8002190:	d9f6      	bls.n	8002180 <HAL_RCC_OscConfig+0x2d4>
 8002192:	e6cd      	b.n	8001f30 <HAL_RCC_OscConfig+0x84>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002194:	f7ff fbdc 	bl	8001950 <HAL_GetTick>
 8002198:	1bc0      	subs	r0, r0, r7
 800219a:	2802      	cmp	r0, #2
 800219c:	d9d7      	bls.n	800214e <HAL_RCC_OscConfig+0x2a2>
 800219e:	e6c7      	b.n	8001f30 <HAL_RCC_OscConfig+0x84>
        tickstart = HAL_GetTick();
 80021a0:	f7ff fbd6 	bl	8001950 <HAL_GetTick>
 80021a4:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021a6:	6823      	ldr	r3, [r4, #0]
 80021a8:	019b      	lsls	r3, r3, #6
 80021aa:	f57f ae94 	bpl.w	8001ed6 <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021ae:	f7ff fbcf 	bl	8001950 <HAL_GetTick>
 80021b2:	1b40      	subs	r0, r0, r5
 80021b4:	2802      	cmp	r0, #2
 80021b6:	d9f6      	bls.n	80021a6 <HAL_RCC_OscConfig+0x2fa>
 80021b8:	e6ba      	b.n	8001f30 <HAL_RCC_OscConfig+0x84>
 80021ba:	bf00      	nop
 80021bc:	40021000 	.word	0x40021000
 80021c0:	42420060 	.word	0x42420060

080021c4 <HAL_RCC_GetSysClockFreq>:
{
 80021c4:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80021c6:	4b19      	ldr	r3, [pc, #100]	; (800222c <HAL_RCC_GetSysClockFreq+0x68>)
{
 80021c8:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80021ca:	ac02      	add	r4, sp, #8
 80021cc:	f103 0510 	add.w	r5, r3, #16
 80021d0:	4622      	mov	r2, r4
 80021d2:	6818      	ldr	r0, [r3, #0]
 80021d4:	6859      	ldr	r1, [r3, #4]
 80021d6:	3308      	adds	r3, #8
 80021d8:	c203      	stmia	r2!, {r0, r1}
 80021da:	42ab      	cmp	r3, r5
 80021dc:	4614      	mov	r4, r2
 80021de:	d1f7      	bne.n	80021d0 <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80021e0:	2301      	movs	r3, #1
 80021e2:	f88d 3004 	strb.w	r3, [sp, #4]
 80021e6:	2302      	movs	r3, #2
  tmpreg = RCC->CFGR;
 80021e8:	4911      	ldr	r1, [pc, #68]	; (8002230 <HAL_RCC_GetSysClockFreq+0x6c>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80021ea:	f88d 3005 	strb.w	r3, [sp, #5]
  tmpreg = RCC->CFGR;
 80021ee:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 80021f0:	f003 020c 	and.w	r2, r3, #12
 80021f4:	2a08      	cmp	r2, #8
 80021f6:	d117      	bne.n	8002228 <HAL_RCC_GetSysClockFreq+0x64>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80021f8:	f3c3 4283 	ubfx	r2, r3, #18, #4
 80021fc:	a806      	add	r0, sp, #24
 80021fe:	4402      	add	r2, r0
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002200:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002202:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002206:	d50c      	bpl.n	8002222 <HAL_RCC_GetSysClockFreq+0x5e>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002208:	684b      	ldr	r3, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800220a:	480a      	ldr	r0, [pc, #40]	; (8002234 <HAL_RCC_GetSysClockFreq+0x70>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800220c:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002210:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002212:	aa06      	add	r2, sp, #24
 8002214:	4413      	add	r3, r2
 8002216:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800221a:	fbb0 f0f3 	udiv	r0, r0, r3
}
 800221e:	b007      	add	sp, #28
 8002220:	bd30      	pop	{r4, r5, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002222:	4805      	ldr	r0, [pc, #20]	; (8002238 <HAL_RCC_GetSysClockFreq+0x74>)
 8002224:	4350      	muls	r0, r2
 8002226:	e7fa      	b.n	800221e <HAL_RCC_GetSysClockFreq+0x5a>
      sysclockfreq = HSE_VALUE;
 8002228:	4802      	ldr	r0, [pc, #8]	; (8002234 <HAL_RCC_GetSysClockFreq+0x70>)
  return sysclockfreq;
 800222a:	e7f8      	b.n	800221e <HAL_RCC_GetSysClockFreq+0x5a>
 800222c:	0800379c 	.word	0x0800379c
 8002230:	40021000 	.word	0x40021000
 8002234:	007a1200 	.word	0x007a1200
 8002238:	003d0900 	.word	0x003d0900

0800223c <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 800223c:	4a4d      	ldr	r2, [pc, #308]	; (8002374 <HAL_RCC_ClockConfig+0x138>)
{
 800223e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8002242:	6813      	ldr	r3, [r2, #0]
{
 8002244:	4605      	mov	r5, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8002246:	f003 0307 	and.w	r3, r3, #7
 800224a:	428b      	cmp	r3, r1
{
 800224c:	460e      	mov	r6, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 800224e:	d328      	bcc.n	80022a2 <HAL_RCC_ClockConfig+0x66>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002250:	682a      	ldr	r2, [r5, #0]
 8002252:	0791      	lsls	r1, r2, #30
 8002254:	d432      	bmi.n	80022bc <HAL_RCC_ClockConfig+0x80>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002256:	07d2      	lsls	r2, r2, #31
 8002258:	d438      	bmi.n	80022cc <HAL_RCC_ClockConfig+0x90>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 800225a:	4a46      	ldr	r2, [pc, #280]	; (8002374 <HAL_RCC_ClockConfig+0x138>)
 800225c:	6813      	ldr	r3, [r2, #0]
 800225e:	f003 0307 	and.w	r3, r3, #7
 8002262:	429e      	cmp	r6, r3
 8002264:	d373      	bcc.n	800234e <HAL_RCC_ClockConfig+0x112>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002266:	682a      	ldr	r2, [r5, #0]
 8002268:	4c43      	ldr	r4, [pc, #268]	; (8002378 <HAL_RCC_ClockConfig+0x13c>)
 800226a:	f012 0f04 	tst.w	r2, #4
 800226e:	d179      	bne.n	8002364 <HAL_RCC_ClockConfig+0x128>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002270:	0713      	lsls	r3, r2, #28
 8002272:	d506      	bpl.n	8002282 <HAL_RCC_ClockConfig+0x46>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002274:	6863      	ldr	r3, [r4, #4]
 8002276:	692a      	ldr	r2, [r5, #16]
 8002278:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 800227c:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8002280:	6063      	str	r3, [r4, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002282:	f7ff ff9f 	bl	80021c4 <HAL_RCC_GetSysClockFreq>
 8002286:	6863      	ldr	r3, [r4, #4]
 8002288:	4a3c      	ldr	r2, [pc, #240]	; (800237c <HAL_RCC_ClockConfig+0x140>)
 800228a:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800228e:	5cd3      	ldrb	r3, [r2, r3]
 8002290:	40d8      	lsrs	r0, r3
 8002292:	4b3b      	ldr	r3, [pc, #236]	; (8002380 <HAL_RCC_ClockConfig+0x144>)
 8002294:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8002296:	2000      	movs	r0, #0
 8002298:	f7ff fb18 	bl	80018cc <HAL_InitTick>
  return HAL_OK;
 800229c:	2000      	movs	r0, #0
}
 800229e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022a2:	6813      	ldr	r3, [r2, #0]
 80022a4:	f023 0307 	bic.w	r3, r3, #7
 80022a8:	430b      	orrs	r3, r1
 80022aa:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80022ac:	6813      	ldr	r3, [r2, #0]
 80022ae:	f003 0307 	and.w	r3, r3, #7
 80022b2:	4299      	cmp	r1, r3
 80022b4:	d0cc      	beq.n	8002250 <HAL_RCC_ClockConfig+0x14>
      return HAL_ERROR;
 80022b6:	2001      	movs	r0, #1
 80022b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80022bc:	492e      	ldr	r1, [pc, #184]	; (8002378 <HAL_RCC_ClockConfig+0x13c>)
 80022be:	68a8      	ldr	r0, [r5, #8]
 80022c0:	684b      	ldr	r3, [r1, #4]
 80022c2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80022c6:	4303      	orrs	r3, r0
 80022c8:	604b      	str	r3, [r1, #4]
 80022ca:	e7c4      	b.n	8002256 <HAL_RCC_ClockConfig+0x1a>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80022cc:	686a      	ldr	r2, [r5, #4]
 80022ce:	4c2a      	ldr	r4, [pc, #168]	; (8002378 <HAL_RCC_ClockConfig+0x13c>)
 80022d0:	2a01      	cmp	r2, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022d2:	6823      	ldr	r3, [r4, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80022d4:	d11c      	bne.n	8002310 <HAL_RCC_ClockConfig+0xd4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022d6:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022da:	d0ec      	beq.n	80022b6 <HAL_RCC_ClockConfig+0x7a>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80022dc:	6863      	ldr	r3, [r4, #4]
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022de:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80022e2:	f023 0303 	bic.w	r3, r3, #3
 80022e6:	4313      	orrs	r3, r2
 80022e8:	6063      	str	r3, [r4, #4]
    tickstart = HAL_GetTick();
 80022ea:	f7ff fb31 	bl	8001950 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80022ee:	686b      	ldr	r3, [r5, #4]
    tickstart = HAL_GetTick();
 80022f0:	4607      	mov	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80022f2:	2b01      	cmp	r3, #1
 80022f4:	d114      	bne.n	8002320 <HAL_RCC_ClockConfig+0xe4>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80022f6:	6863      	ldr	r3, [r4, #4]
 80022f8:	f003 030c 	and.w	r3, r3, #12
 80022fc:	2b04      	cmp	r3, #4
 80022fe:	d0ac      	beq.n	800225a <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002300:	f7ff fb26 	bl	8001950 <HAL_GetTick>
 8002304:	1bc0      	subs	r0, r0, r7
 8002306:	4540      	cmp	r0, r8
 8002308:	d9f5      	bls.n	80022f6 <HAL_RCC_ClockConfig+0xba>
          return HAL_TIMEOUT;
 800230a:	2003      	movs	r0, #3
 800230c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002310:	2a02      	cmp	r2, #2
 8002312:	d102      	bne.n	800231a <HAL_RCC_ClockConfig+0xde>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002314:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002318:	e7df      	b.n	80022da <HAL_RCC_ClockConfig+0x9e>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800231a:	f013 0f02 	tst.w	r3, #2
 800231e:	e7dc      	b.n	80022da <HAL_RCC_ClockConfig+0x9e>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002320:	2b02      	cmp	r3, #2
 8002322:	d10f      	bne.n	8002344 <HAL_RCC_ClockConfig+0x108>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002324:	6863      	ldr	r3, [r4, #4]
 8002326:	f003 030c 	and.w	r3, r3, #12
 800232a:	2b08      	cmp	r3, #8
 800232c:	d095      	beq.n	800225a <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800232e:	f7ff fb0f 	bl	8001950 <HAL_GetTick>
 8002332:	1bc0      	subs	r0, r0, r7
 8002334:	4540      	cmp	r0, r8
 8002336:	d9f5      	bls.n	8002324 <HAL_RCC_ClockConfig+0xe8>
 8002338:	e7e7      	b.n	800230a <HAL_RCC_ClockConfig+0xce>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800233a:	f7ff fb09 	bl	8001950 <HAL_GetTick>
 800233e:	1bc0      	subs	r0, r0, r7
 8002340:	4540      	cmp	r0, r8
 8002342:	d8e2      	bhi.n	800230a <HAL_RCC_ClockConfig+0xce>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002344:	6863      	ldr	r3, [r4, #4]
 8002346:	f013 0f0c 	tst.w	r3, #12
 800234a:	d1f6      	bne.n	800233a <HAL_RCC_ClockConfig+0xfe>
 800234c:	e785      	b.n	800225a <HAL_RCC_ClockConfig+0x1e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800234e:	6813      	ldr	r3, [r2, #0]
 8002350:	f023 0307 	bic.w	r3, r3, #7
 8002354:	4333      	orrs	r3, r6
 8002356:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002358:	6813      	ldr	r3, [r2, #0]
 800235a:	f003 0307 	and.w	r3, r3, #7
 800235e:	429e      	cmp	r6, r3
 8002360:	d1a9      	bne.n	80022b6 <HAL_RCC_ClockConfig+0x7a>
 8002362:	e780      	b.n	8002266 <HAL_RCC_ClockConfig+0x2a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002364:	6863      	ldr	r3, [r4, #4]
 8002366:	68e9      	ldr	r1, [r5, #12]
 8002368:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800236c:	430b      	orrs	r3, r1
 800236e:	6063      	str	r3, [r4, #4]
 8002370:	e77e      	b.n	8002270 <HAL_RCC_ClockConfig+0x34>
 8002372:	bf00      	nop
 8002374:	40022000 	.word	0x40022000
 8002378:	40021000 	.word	0x40021000
 800237c:	080039e8 	.word	0x080039e8
 8002380:	20000000 	.word	0x20000000

08002384 <HAL_RCC_GetHCLKFreq>:
}
 8002384:	4b01      	ldr	r3, [pc, #4]	; (800238c <HAL_RCC_GetHCLKFreq+0x8>)
 8002386:	6818      	ldr	r0, [r3, #0]
 8002388:	4770      	bx	lr
 800238a:	bf00      	nop
 800238c:	20000000 	.word	0x20000000

08002390 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002390:	4b04      	ldr	r3, [pc, #16]	; (80023a4 <HAL_RCC_GetPCLK1Freq+0x14>)
 8002392:	4a05      	ldr	r2, [pc, #20]	; (80023a8 <HAL_RCC_GetPCLK1Freq+0x18>)
 8002394:	685b      	ldr	r3, [r3, #4]
 8002396:	f3c3 2302 	ubfx	r3, r3, #8, #3
 800239a:	5cd3      	ldrb	r3, [r2, r3]
 800239c:	4a03      	ldr	r2, [pc, #12]	; (80023ac <HAL_RCC_GetPCLK1Freq+0x1c>)
 800239e:	6810      	ldr	r0, [r2, #0]
}    
 80023a0:	40d8      	lsrs	r0, r3
 80023a2:	4770      	bx	lr
 80023a4:	40021000 	.word	0x40021000
 80023a8:	080039f8 	.word	0x080039f8
 80023ac:	20000000 	.word	0x20000000

080023b0 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80023b0:	4b04      	ldr	r3, [pc, #16]	; (80023c4 <HAL_RCC_GetPCLK2Freq+0x14>)
 80023b2:	4a05      	ldr	r2, [pc, #20]	; (80023c8 <HAL_RCC_GetPCLK2Freq+0x18>)
 80023b4:	685b      	ldr	r3, [r3, #4]
 80023b6:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 80023ba:	5cd3      	ldrb	r3, [r2, r3]
 80023bc:	4a03      	ldr	r2, [pc, #12]	; (80023cc <HAL_RCC_GetPCLK2Freq+0x1c>)
 80023be:	6810      	ldr	r0, [r2, #0]
} 
 80023c0:	40d8      	lsrs	r0, r3
 80023c2:	4770      	bx	lr
 80023c4:	40021000 	.word	0x40021000
 80023c8:	080039f8 	.word	0x080039f8
 80023cc:	20000000 	.word	0x20000000

080023d0 <HAL_TIM_ConfigClockSource>:
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef * sClockSourceConfig)
{
  uint32_t tmpsmcr = 0U;

  /* Process Locked */
  __HAL_LOCK(htim);
 80023d0:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 80023d4:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 80023d6:	2b01      	cmp	r3, #1
 80023d8:	f04f 0302 	mov.w	r3, #2
 80023dc:	d01c      	beq.n	8002418 <HAL_TIM_ConfigClockSource+0x48>
 80023de:	2201      	movs	r2, #1

  htim->State = HAL_TIM_STATE_BUSY;
 80023e0:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80023e4:	6803      	ldr	r3, [r0, #0]
  __HAL_LOCK(htim);
 80023e6:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 80023ea:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80023ec:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 80023f0:	f022 0277 	bic.w	r2, r2, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 80023f4:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80023f6:	680a      	ldr	r2, [r1, #0]
 80023f8:	2a40      	cmp	r2, #64	; 0x40
 80023fa:	d079      	beq.n	80024f0 <HAL_TIM_ConfigClockSource+0x120>
 80023fc:	d819      	bhi.n	8002432 <HAL_TIM_ConfigClockSource+0x62>
 80023fe:	2a10      	cmp	r2, #16
 8002400:	f000 8093 	beq.w	800252a <HAL_TIM_ConfigClockSource+0x15a>
 8002404:	d80a      	bhi.n	800241c <HAL_TIM_ConfigClockSource+0x4c>
 8002406:	2a00      	cmp	r2, #0
 8002408:	f000 8089 	beq.w	800251e <HAL_TIM_ConfigClockSource+0x14e>
    break;

  default:
    break;
  }
  htim->State = HAL_TIM_STATE_READY;
 800240c:	2301      	movs	r3, #1
 800240e:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002412:	2300      	movs	r3, #0
 8002414:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 8002418:	4618      	mov	r0, r3

  return HAL_OK;
}
 800241a:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 800241c:	2a20      	cmp	r2, #32
 800241e:	f000 808a 	beq.w	8002536 <HAL_TIM_ConfigClockSource+0x166>
 8002422:	2a30      	cmp	r2, #48	; 0x30
 8002424:	d1f2      	bne.n	800240c <HAL_TIM_ConfigClockSource+0x3c>
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t InputTriggerSource)
{
  uint32_t tmpsmcr = 0U;

   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 8002426:	689a      	ldr	r2, [r3, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 8002428:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 800242c:	f042 0237 	orr.w	r2, r2, #55	; 0x37
 8002430:	e036      	b.n	80024a0 <HAL_TIM_ConfigClockSource+0xd0>
  switch (sClockSourceConfig->ClockSource)
 8002432:	2a70      	cmp	r2, #112	; 0x70
 8002434:	d036      	beq.n	80024a4 <HAL_TIM_ConfigClockSource+0xd4>
 8002436:	d81b      	bhi.n	8002470 <HAL_TIM_ConfigClockSource+0xa0>
 8002438:	2a50      	cmp	r2, #80	; 0x50
 800243a:	d042      	beq.n	80024c2 <HAL_TIM_ConfigClockSource+0xf2>
 800243c:	2a60      	cmp	r2, #96	; 0x60
 800243e:	d1e5      	bne.n	800240c <HAL_TIM_ConfigClockSource+0x3c>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002440:	6a1c      	ldr	r4, [r3, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002442:	684d      	ldr	r5, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002444:	f024 0410 	bic.w	r4, r4, #16
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002448:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800244a:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800244c:	6999      	ldr	r1, [r3, #24]
  tmpccer = TIMx->CCER;
 800244e:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002450:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002454:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8002458:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800245c:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8002460:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 8002462:	621a      	str	r2, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 8002464:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8002466:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 800246a:	f042 0267 	orr.w	r2, r2, #103	; 0x67
 800246e:	e017      	b.n	80024a0 <HAL_TIM_ConfigClockSource+0xd0>
  switch (sClockSourceConfig->ClockSource)
 8002470:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8002474:	d011      	beq.n	800249a <HAL_TIM_ConfigClockSource+0xca>
 8002476:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 800247a:	d1c7      	bne.n	800240c <HAL_TIM_ConfigClockSource+0x3c>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800247c:	688a      	ldr	r2, [r1, #8]
 800247e:	684d      	ldr	r5, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8002480:	689c      	ldr	r4, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002482:	68c9      	ldr	r1, [r1, #12]
 8002484:	432a      	orrs	r2, r5
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002486:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800248a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800248e:	4322      	orrs	r2, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002490:	609a      	str	r2, [r3, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002492:	689a      	ldr	r2, [r3, #8]
 8002494:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002498:	e002      	b.n	80024a0 <HAL_TIM_ConfigClockSource+0xd0>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 800249a:	689a      	ldr	r2, [r3, #8]
 800249c:	f022 0207 	bic.w	r2, r2, #7
   TIMx->SMCR = tmpsmcr;
 80024a0:	609a      	str	r2, [r3, #8]
 80024a2:	e7b3      	b.n	800240c <HAL_TIM_ConfigClockSource+0x3c>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80024a4:	688a      	ldr	r2, [r1, #8]
 80024a6:	684d      	ldr	r5, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 80024a8:	689c      	ldr	r4, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80024aa:	68c9      	ldr	r1, [r1, #12]
 80024ac:	432a      	orrs	r2, r5
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80024ae:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80024b2:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80024b6:	4322      	orrs	r2, r4
  TIMx->SMCR = tmpsmcr;
 80024b8:	609a      	str	r2, [r3, #8]
      tmpsmcr = htim->Instance->SMCR;
 80024ba:	689a      	ldr	r2, [r3, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80024bc:	f042 0277 	orr.w	r2, r2, #119	; 0x77
 80024c0:	e7ee      	b.n	80024a0 <HAL_TIM_ConfigClockSource+0xd0>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80024c2:	684c      	ldr	r4, [r1, #4]
 80024c4:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 80024c6:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80024c8:	6a1d      	ldr	r5, [r3, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80024ca:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80024ce:	f025 0501 	bic.w	r5, r5, #1
 80024d2:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80024d4:	699a      	ldr	r2, [r3, #24]
  tmpccer |= TIM_ICPolarity;
 80024d6:	4321      	orrs	r1, r4
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80024d8:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80024dc:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 80024e0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80024e2:	6219      	str	r1, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 80024e4:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 80024e6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 80024ea:	f042 0257 	orr.w	r2, r2, #87	; 0x57
 80024ee:	e7d7      	b.n	80024a0 <HAL_TIM_ConfigClockSource+0xd0>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80024f0:	684c      	ldr	r4, [r1, #4]
 80024f2:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 80024f4:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80024f6:	6a1d      	ldr	r5, [r3, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80024f8:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80024fc:	f025 0501 	bic.w	r5, r5, #1
 8002500:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002502:	699a      	ldr	r2, [r3, #24]
  tmpccer |= TIM_ICPolarity;
 8002504:	4321      	orrs	r1, r4
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002506:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800250a:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 800250e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002510:	6219      	str	r1, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 8002512:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8002514:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8002518:	f042 0247 	orr.w	r2, r2, #71	; 0x47
 800251c:	e7c0      	b.n	80024a0 <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 800251e:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8002520:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8002524:	f042 0207 	orr.w	r2, r2, #7
 8002528:	e7ba      	b.n	80024a0 <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 800252a:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 800252c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8002530:	f042 0217 	orr.w	r2, r2, #23
 8002534:	e7b4      	b.n	80024a0 <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 8002536:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8002538:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 800253c:	f042 0227 	orr.w	r2, r2, #39	; 0x27
 8002540:	e7ae      	b.n	80024a0 <HAL_TIM_ConfigClockSource+0xd0>

08002542 <HAL_TIM_PeriodElapsedCallback>:
 8002542:	4770      	bx	lr

08002544 <HAL_TIM_OC_DelayElapsedCallback>:
 8002544:	4770      	bx	lr

08002546 <HAL_TIM_IC_CaptureCallback>:
 8002546:	4770      	bx	lr

08002548 <HAL_TIM_PWM_PulseFinishedCallback>:
 8002548:	4770      	bx	lr

0800254a <HAL_TIM_TriggerCallback>:
 800254a:	4770      	bx	lr

0800254c <HAL_TIM_IRQHandler>:
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800254c:	6803      	ldr	r3, [r0, #0]
{
 800254e:	b510      	push	{r4, lr}
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002550:	691a      	ldr	r2, [r3, #16]
{
 8002552:	4604      	mov	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002554:	0791      	lsls	r1, r2, #30
 8002556:	d50e      	bpl.n	8002576 <HAL_TIM_IRQHandler+0x2a>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8002558:	68da      	ldr	r2, [r3, #12]
 800255a:	0792      	lsls	r2, r2, #30
 800255c:	d50b      	bpl.n	8002576 <HAL_TIM_IRQHandler+0x2a>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800255e:	f06f 0202 	mvn.w	r2, #2
 8002562:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002564:	2201      	movs	r2, #1
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002566:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002568:	7702      	strb	r2, [r0, #28]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800256a:	079b      	lsls	r3, r3, #30
 800256c:	d077      	beq.n	800265e <HAL_TIM_IRQHandler+0x112>
          HAL_TIM_IC_CaptureCallback(htim);
 800256e:	f7ff ffea 	bl	8002546 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002572:	2300      	movs	r3, #0
 8002574:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002576:	6823      	ldr	r3, [r4, #0]
 8002578:	691a      	ldr	r2, [r3, #16]
 800257a:	0750      	lsls	r0, r2, #29
 800257c:	d510      	bpl.n	80025a0 <HAL_TIM_IRQHandler+0x54>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 800257e:	68da      	ldr	r2, [r3, #12]
 8002580:	0751      	lsls	r1, r2, #29
 8002582:	d50d      	bpl.n	80025a0 <HAL_TIM_IRQHandler+0x54>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002584:	f06f 0204 	mvn.w	r2, #4
 8002588:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800258a:	2202      	movs	r2, #2
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800258c:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800258e:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002590:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 8002594:	4620      	mov	r0, r4
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002596:	d068      	beq.n	800266a <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 8002598:	f7ff ffd5 	bl	8002546 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800259c:	2300      	movs	r3, #0
 800259e:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80025a0:	6823      	ldr	r3, [r4, #0]
 80025a2:	691a      	ldr	r2, [r3, #16]
 80025a4:	0712      	lsls	r2, r2, #28
 80025a6:	d50f      	bpl.n	80025c8 <HAL_TIM_IRQHandler+0x7c>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 80025a8:	68da      	ldr	r2, [r3, #12]
 80025aa:	0710      	lsls	r0, r2, #28
 80025ac:	d50c      	bpl.n	80025c8 <HAL_TIM_IRQHandler+0x7c>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80025ae:	f06f 0208 	mvn.w	r2, #8
 80025b2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80025b4:	2204      	movs	r2, #4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80025b6:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80025b8:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80025ba:	0799      	lsls	r1, r3, #30
        HAL_TIM_IC_CaptureCallback(htim);
 80025bc:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80025be:	d05a      	beq.n	8002676 <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 80025c0:	f7ff ffc1 	bl	8002546 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025c4:	2300      	movs	r3, #0
 80025c6:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80025c8:	6823      	ldr	r3, [r4, #0]
 80025ca:	691a      	ldr	r2, [r3, #16]
 80025cc:	06d2      	lsls	r2, r2, #27
 80025ce:	d510      	bpl.n	80025f2 <HAL_TIM_IRQHandler+0xa6>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 80025d0:	68da      	ldr	r2, [r3, #12]
 80025d2:	06d0      	lsls	r0, r2, #27
 80025d4:	d50d      	bpl.n	80025f2 <HAL_TIM_IRQHandler+0xa6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80025d6:	f06f 0210 	mvn.w	r2, #16
 80025da:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80025dc:	2208      	movs	r2, #8
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80025de:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80025e0:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80025e2:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 80025e6:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80025e8:	d04b      	beq.n	8002682 <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 80025ea:	f7ff ffac 	bl	8002546 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025ee:	2300      	movs	r3, #0
 80025f0:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80025f2:	6823      	ldr	r3, [r4, #0]
 80025f4:	691a      	ldr	r2, [r3, #16]
 80025f6:	07d1      	lsls	r1, r2, #31
 80025f8:	d508      	bpl.n	800260c <HAL_TIM_IRQHandler+0xc0>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 80025fa:	68da      	ldr	r2, [r3, #12]
 80025fc:	07d2      	lsls	r2, r2, #31
 80025fe:	d505      	bpl.n	800260c <HAL_TIM_IRQHandler+0xc0>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002600:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 8002604:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002606:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8002608:	f7ff ff9b 	bl	8002542 <HAL_TIM_PeriodElapsedCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800260c:	6823      	ldr	r3, [r4, #0]
 800260e:	691a      	ldr	r2, [r3, #16]
 8002610:	0610      	lsls	r0, r2, #24
 8002612:	d508      	bpl.n	8002626 <HAL_TIM_IRQHandler+0xda>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8002614:	68da      	ldr	r2, [r3, #12]
 8002616:	0611      	lsls	r1, r2, #24
 8002618:	d505      	bpl.n	8002626 <HAL_TIM_IRQHandler+0xda>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800261a:	f06f 0280 	mvn.w	r2, #128	; 0x80
      HAL_TIMEx_BreakCallback(htim);
 800261e:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002620:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8002622:	f000 f8aa 	bl	800277a <HAL_TIMEx_BreakCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002626:	6823      	ldr	r3, [r4, #0]
 8002628:	691a      	ldr	r2, [r3, #16]
 800262a:	0652      	lsls	r2, r2, #25
 800262c:	d508      	bpl.n	8002640 <HAL_TIM_IRQHandler+0xf4>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 800262e:	68da      	ldr	r2, [r3, #12]
 8002630:	0650      	lsls	r0, r2, #25
 8002632:	d505      	bpl.n	8002640 <HAL_TIM_IRQHandler+0xf4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002634:	f06f 0240 	mvn.w	r2, #64	; 0x40
      HAL_TIM_TriggerCallback(htim);
 8002638:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800263a:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 800263c:	f7ff ff85 	bl	800254a <HAL_TIM_TriggerCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002640:	6823      	ldr	r3, [r4, #0]
 8002642:	691a      	ldr	r2, [r3, #16]
 8002644:	0691      	lsls	r1, r2, #26
 8002646:	d522      	bpl.n	800268e <HAL_TIM_IRQHandler+0x142>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8002648:	68da      	ldr	r2, [r3, #12]
 800264a:	0692      	lsls	r2, r2, #26
 800264c:	d51f      	bpl.n	800268e <HAL_TIM_IRQHandler+0x142>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800264e:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutationCallback(htim);
 8002652:	4620      	mov	r0, r4
}
 8002654:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002658:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 800265a:	f000 b88d 	b.w	8002778 <HAL_TIMEx_CommutationCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800265e:	f7ff ff71 	bl	8002544 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002662:	4620      	mov	r0, r4
 8002664:	f7ff ff70 	bl	8002548 <HAL_TIM_PWM_PulseFinishedCallback>
 8002668:	e783      	b.n	8002572 <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800266a:	f7ff ff6b 	bl	8002544 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800266e:	4620      	mov	r0, r4
 8002670:	f7ff ff6a 	bl	8002548 <HAL_TIM_PWM_PulseFinishedCallback>
 8002674:	e792      	b.n	800259c <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002676:	f7ff ff65 	bl	8002544 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800267a:	4620      	mov	r0, r4
 800267c:	f7ff ff64 	bl	8002548 <HAL_TIM_PWM_PulseFinishedCallback>
 8002680:	e7a0      	b.n	80025c4 <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002682:	f7ff ff5f 	bl	8002544 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002686:	4620      	mov	r0, r4
 8002688:	f7ff ff5e 	bl	8002548 <HAL_TIM_PWM_PulseFinishedCallback>
 800268c:	e7af      	b.n	80025ee <HAL_TIM_IRQHandler+0xa2>
 800268e:	bd10      	pop	{r4, pc}

08002690 <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002690:	4a1a      	ldr	r2, [pc, #104]	; (80026fc <TIM_Base_SetConfig+0x6c>)
  tmpcr1 = TIMx->CR1;
 8002692:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002694:	4290      	cmp	r0, r2
 8002696:	d00a      	beq.n	80026ae <TIM_Base_SetConfig+0x1e>
 8002698:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800269c:	d007      	beq.n	80026ae <TIM_Base_SetConfig+0x1e>
 800269e:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80026a2:	4290      	cmp	r0, r2
 80026a4:	d003      	beq.n	80026ae <TIM_Base_SetConfig+0x1e>
 80026a6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80026aa:	4290      	cmp	r0, r2
 80026ac:	d115      	bne.n	80026da <TIM_Base_SetConfig+0x4a>
    tmpcr1 |= Structure->CounterMode;
 80026ae:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80026b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80026b4:	4313      	orrs	r3, r2
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80026b6:	4a11      	ldr	r2, [pc, #68]	; (80026fc <TIM_Base_SetConfig+0x6c>)
 80026b8:	4290      	cmp	r0, r2
 80026ba:	d00a      	beq.n	80026d2 <TIM_Base_SetConfig+0x42>
 80026bc:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80026c0:	d007      	beq.n	80026d2 <TIM_Base_SetConfig+0x42>
 80026c2:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80026c6:	4290      	cmp	r0, r2
 80026c8:	d003      	beq.n	80026d2 <TIM_Base_SetConfig+0x42>
 80026ca:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80026ce:	4290      	cmp	r0, r2
 80026d0:	d103      	bne.n	80026da <TIM_Base_SetConfig+0x4a>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80026d2:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 80026d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80026d8:	4313      	orrs	r3, r2
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 80026da:	694a      	ldr	r2, [r1, #20]
  tmpcr1 &= ~TIM_CR1_ARPE;
 80026dc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 80026e0:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 80026e2:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80026e4:	688b      	ldr	r3, [r1, #8]
 80026e6:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 80026e8:	680b      	ldr	r3, [r1, #0]
 80026ea:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80026ec:	4b03      	ldr	r3, [pc, #12]	; (80026fc <TIM_Base_SetConfig+0x6c>)
 80026ee:	4298      	cmp	r0, r3
    TIMx->RCR = Structure->RepetitionCounter;
 80026f0:	bf04      	itt	eq
 80026f2:	690b      	ldreq	r3, [r1, #16]
 80026f4:	6303      	streq	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 80026f6:	2301      	movs	r3, #1
 80026f8:	6143      	str	r3, [r0, #20]
 80026fa:	4770      	bx	lr
 80026fc:	40012c00 	.word	0x40012c00

08002700 <HAL_TIM_Base_Init>:
{
 8002700:	b510      	push	{r4, lr}
  if(htim == NULL)
 8002702:	4604      	mov	r4, r0
 8002704:	b1a0      	cbz	r0, 8002730 <HAL_TIM_Base_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 8002706:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800270a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800270e:	b91b      	cbnz	r3, 8002718 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8002710:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8002714:	f7fe fff0 	bl	80016f8 <HAL_TIM_Base_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 8002718:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800271a:	6820      	ldr	r0, [r4, #0]
  htim->State= HAL_TIM_STATE_BUSY;
 800271c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002720:	1d21      	adds	r1, r4, #4
 8002722:	f7ff ffb5 	bl	8002690 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8002726:	2301      	movs	r3, #1
  return HAL_OK;
 8002728:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 800272a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800272e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002730:	2001      	movs	r0, #1
}
 8002732:	bd10      	pop	{r4, pc}

08002734 <HAL_TIMEx_MasterConfigSynchronization>:
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  __HAL_LOCK(htim);
 8002734:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8002738:	b510      	push	{r4, lr}
  __HAL_LOCK(htim);
 800273a:	2b01      	cmp	r3, #1
 800273c:	f04f 0302 	mov.w	r3, #2
 8002740:	d018      	beq.n	8002774 <HAL_TIMEx_MasterConfigSynchronization+0x40>

  htim->State = HAL_TIM_STATE_BUSY;
 8002742:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8002746:	6803      	ldr	r3, [r0, #0]
  /* Select the TRGO source */
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 8002748:	680c      	ldr	r4, [r1, #0]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 800274a:	685a      	ldr	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 800274c:	6849      	ldr	r1, [r1, #4]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 800274e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002752:	605a      	str	r2, [r3, #4]
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 8002754:	685a      	ldr	r2, [r3, #4]
 8002756:	4322      	orrs	r2, r4
 8002758:	605a      	str	r2, [r3, #4]
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 800275a:	689a      	ldr	r2, [r3, #8]
 800275c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002760:	609a      	str	r2, [r3, #8]
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8002762:	689a      	ldr	r2, [r3, #8]
 8002764:	430a      	orrs	r2, r1
 8002766:	609a      	str	r2, [r3, #8]

  htim->State = HAL_TIM_STATE_READY;
 8002768:	2301      	movs	r3, #1
 800276a:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800276e:	2300      	movs	r3, #0
 8002770:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 8002774:	4618      	mov	r0, r3

  return HAL_OK;
}
 8002776:	bd10      	pop	{r4, pc}

08002778 <HAL_TIMEx_CommutationCallback>:
 8002778:	4770      	bx	lr

0800277a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non blocking mode
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800277a:	4770      	bx	lr

0800277c <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800277c:	6803      	ldr	r3, [r0, #0]
 800277e:	68da      	ldr	r2, [r3, #12]
 8002780:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002784:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002786:	695a      	ldr	r2, [r3, #20]
 8002788:	f022 0201 	bic.w	r2, r2, #1
 800278c:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800278e:	2320      	movs	r3, #32
 8002790:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
 8002794:	4770      	bx	lr
	...

08002798 <UART_SetConfig>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002798:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*------- UART-associated USART registers setting : CR2 Configuration ------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according 
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800279c:	6805      	ldr	r5, [r0, #0]
 800279e:	68c2      	ldr	r2, [r0, #12]
 80027a0:	692b      	ldr	r3, [r5, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1, 
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8), 
             tmpreg);
#else
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80027a2:	6901      	ldr	r1, [r0, #16]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80027a4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80027a8:	4313      	orrs	r3, r2
 80027aa:	612b      	str	r3, [r5, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80027ac:	6883      	ldr	r3, [r0, #8]
  MODIFY_REG(huart->Instance->CR1, 
 80027ae:	68ea      	ldr	r2, [r5, #12]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80027b0:	430b      	orrs	r3, r1
 80027b2:	6941      	ldr	r1, [r0, #20]
  MODIFY_REG(huart->Instance->CR1, 
 80027b4:	f422 52b0 	bic.w	r2, r2, #5632	; 0x1600
 80027b8:	f022 020c 	bic.w	r2, r2, #12
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80027bc:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, 
 80027be:	4313      	orrs	r3, r2
 80027c0:	60eb      	str	r3, [r5, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*------- UART-associated USART registers setting : CR3 Configuration ------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80027c2:	696b      	ldr	r3, [r5, #20]
 80027c4:	6982      	ldr	r2, [r0, #24]
 80027c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80027ca:	4313      	orrs	r3, r2
 80027cc:	616b      	str	r3, [r5, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 80027ce:	4b40      	ldr	r3, [pc, #256]	; (80028d0 <UART_SetConfig+0x138>)
{
 80027d0:	4681      	mov	r9, r0
  if(huart->Instance == USART1)
 80027d2:	429d      	cmp	r5, r3
 80027d4:	f04f 0419 	mov.w	r4, #25
 80027d8:	d146      	bne.n	8002868 <UART_SetConfig+0xd0>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80027da:	f7ff fde9 	bl	80023b0 <HAL_RCC_GetPCLK2Freq>
 80027de:	fb04 f300 	mul.w	r3, r4, r0
 80027e2:	f8d9 6004 	ldr.w	r6, [r9, #4]
 80027e6:	f04f 0864 	mov.w	r8, #100	; 0x64
 80027ea:	00b6      	lsls	r6, r6, #2
 80027ec:	fbb3 f3f6 	udiv	r3, r3, r6
 80027f0:	fbb3 f3f8 	udiv	r3, r3, r8
 80027f4:	011e      	lsls	r6, r3, #4
 80027f6:	f7ff fddb 	bl	80023b0 <HAL_RCC_GetPCLK2Freq>
 80027fa:	4360      	muls	r0, r4
 80027fc:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8002800:	009b      	lsls	r3, r3, #2
 8002802:	fbb0 f7f3 	udiv	r7, r0, r3
 8002806:	f7ff fdd3 	bl	80023b0 <HAL_RCC_GetPCLK2Freq>
 800280a:	4360      	muls	r0, r4
 800280c:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8002810:	009b      	lsls	r3, r3, #2
 8002812:	fbb0 f3f3 	udiv	r3, r0, r3
 8002816:	fbb3 f3f8 	udiv	r3, r3, r8
 800281a:	fb08 7313 	mls	r3, r8, r3, r7
 800281e:	011b      	lsls	r3, r3, #4
 8002820:	3332      	adds	r3, #50	; 0x32
 8002822:	fbb3 f3f8 	udiv	r3, r3, r8
 8002826:	f003 07f0 	and.w	r7, r3, #240	; 0xf0
 800282a:	f7ff fdc1 	bl	80023b0 <HAL_RCC_GetPCLK2Freq>
 800282e:	4360      	muls	r0, r4
 8002830:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8002834:	0092      	lsls	r2, r2, #2
 8002836:	fbb0 faf2 	udiv	sl, r0, r2
 800283a:	f7ff fdb9 	bl	80023b0 <HAL_RCC_GetPCLK2Freq>
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800283e:	4360      	muls	r0, r4
 8002840:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8002844:	009b      	lsls	r3, r3, #2
 8002846:	fbb0 f3f3 	udiv	r3, r0, r3
 800284a:	fbb3 f3f8 	udiv	r3, r3, r8
 800284e:	fb08 a313 	mls	r3, r8, r3, sl
 8002852:	011b      	lsls	r3, r3, #4
 8002854:	3332      	adds	r3, #50	; 0x32
 8002856:	fbb3 f3f8 	udiv	r3, r3, r8
 800285a:	f003 030f 	and.w	r3, r3, #15
 800285e:	433b      	orrs	r3, r7
 8002860:	4433      	add	r3, r6
 8002862:	60ab      	str	r3, [r5, #8]
 8002864:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002868:	f7ff fd92 	bl	8002390 <HAL_RCC_GetPCLK1Freq>
 800286c:	fb04 f300 	mul.w	r3, r4, r0
 8002870:	f8d9 6004 	ldr.w	r6, [r9, #4]
 8002874:	f04f 0864 	mov.w	r8, #100	; 0x64
 8002878:	00b6      	lsls	r6, r6, #2
 800287a:	fbb3 f3f6 	udiv	r3, r3, r6
 800287e:	fbb3 f3f8 	udiv	r3, r3, r8
 8002882:	011e      	lsls	r6, r3, #4
 8002884:	f7ff fd84 	bl	8002390 <HAL_RCC_GetPCLK1Freq>
 8002888:	4360      	muls	r0, r4
 800288a:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800288e:	009b      	lsls	r3, r3, #2
 8002890:	fbb0 f7f3 	udiv	r7, r0, r3
 8002894:	f7ff fd7c 	bl	8002390 <HAL_RCC_GetPCLK1Freq>
 8002898:	4360      	muls	r0, r4
 800289a:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800289e:	009b      	lsls	r3, r3, #2
 80028a0:	fbb0 f3f3 	udiv	r3, r0, r3
 80028a4:	fbb3 f3f8 	udiv	r3, r3, r8
 80028a8:	fb08 7313 	mls	r3, r8, r3, r7
 80028ac:	011b      	lsls	r3, r3, #4
 80028ae:	3332      	adds	r3, #50	; 0x32
 80028b0:	fbb3 f3f8 	udiv	r3, r3, r8
 80028b4:	f003 07f0 	and.w	r7, r3, #240	; 0xf0
 80028b8:	f7ff fd6a 	bl	8002390 <HAL_RCC_GetPCLK1Freq>
 80028bc:	4360      	muls	r0, r4
 80028be:	f8d9 2004 	ldr.w	r2, [r9, #4]
 80028c2:	0092      	lsls	r2, r2, #2
 80028c4:	fbb0 faf2 	udiv	sl, r0, r2
 80028c8:	f7ff fd62 	bl	8002390 <HAL_RCC_GetPCLK1Freq>
 80028cc:	e7b7      	b.n	800283e <UART_SetConfig+0xa6>
 80028ce:	bf00      	nop
 80028d0:	40013800 	.word	0x40013800

080028d4 <HAL_UART_Init>:
{
 80028d4:	b510      	push	{r4, lr}
  if(huart == NULL)
 80028d6:	4604      	mov	r4, r0
 80028d8:	b340      	cbz	r0, 800292c <HAL_UART_Init+0x58>
  if(huart->gState == HAL_UART_STATE_RESET)
 80028da:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80028de:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80028e2:	b91b      	cbnz	r3, 80028ec <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 80028e4:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 80028e8:	f7fe ff26 	bl	8001738 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 80028ec:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 80028ee:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80028f0:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 80028f4:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 80028f6:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 80028f8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80028fc:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 80028fe:	f7ff ff4b 	bl	8002798 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002902:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002904:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002906:	691a      	ldr	r2, [r3, #16]
 8002908:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800290c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800290e:	695a      	ldr	r2, [r3, #20]
 8002910:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002914:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8002916:	68da      	ldr	r2, [r3, #12]
 8002918:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800291c:	60da      	str	r2, [r3, #12]
  huart->gState= HAL_UART_STATE_READY;
 800291e:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002920:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 8002922:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 8002926:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 800292a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800292c:	2001      	movs	r0, #1
}
 800292e:	bd10      	pop	{r4, pc}

08002930 <HAL_UART_Transmit_DMA>:
{
 8002930:	b538      	push	{r3, r4, r5, lr}
 8002932:	4604      	mov	r4, r0
 8002934:	4613      	mov	r3, r2
  if(huart->gState == HAL_UART_STATE_READY)
 8002936:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 800293a:	2a20      	cmp	r2, #32
 800293c:	d12a      	bne.n	8002994 <HAL_UART_Transmit_DMA+0x64>
    if((pData == NULL) || (Size == 0U))
 800293e:	b339      	cbz	r1, 8002990 <HAL_UART_Transmit_DMA+0x60>
 8002940:	b333      	cbz	r3, 8002990 <HAL_UART_Transmit_DMA+0x60>
    __HAL_LOCK(huart);
 8002942:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
 8002946:	2a01      	cmp	r2, #1
 8002948:	d024      	beq.n	8002994 <HAL_UART_Transmit_DMA+0x64>
 800294a:	2201      	movs	r2, #1
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800294c:	2500      	movs	r5, #0
    __HAL_LOCK(huart);
 800294e:	f884 2038 	strb.w	r2, [r4, #56]	; 0x38
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002952:	2221      	movs	r2, #33	; 0x21
    huart->TxXferCount = Size;
 8002954:	84e3      	strh	r3, [r4, #38]	; 0x26
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8002956:	6b20      	ldr	r0, [r4, #48]	; 0x30
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002958:	63e5      	str	r5, [r4, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800295a:	f884 2039 	strb.w	r2, [r4, #57]	; 0x39
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800295e:	4a0e      	ldr	r2, [pc, #56]	; (8002998 <HAL_UART_Transmit_DMA+0x68>)
    huart->TxXferSize = Size;
 8002960:	84a3      	strh	r3, [r4, #36]	; 0x24
    huart->pTxBuffPtr = pData;
 8002962:	6221      	str	r1, [r4, #32]
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8002964:	6282      	str	r2, [r0, #40]	; 0x28
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8002966:	4a0d      	ldr	r2, [pc, #52]	; (800299c <HAL_UART_Transmit_DMA+0x6c>)
    huart->hdmatx->XferAbortCallback = NULL;
 8002968:	6345      	str	r5, [r0, #52]	; 0x34
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800296a:	62c2      	str	r2, [r0, #44]	; 0x2c
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800296c:	4a0c      	ldr	r2, [pc, #48]	; (80029a0 <HAL_UART_Transmit_DMA+0x70>)
 800296e:	6302      	str	r2, [r0, #48]	; 0x30
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t*)tmp, (uint32_t)&huart->Instance->DR, Size);
 8002970:	6822      	ldr	r2, [r4, #0]
 8002972:	3204      	adds	r2, #4
 8002974:	f7ff f8a0 	bl	8001ab8 <HAL_DMA_Start_IT>
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8002978:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800297c:	6823      	ldr	r3, [r4, #0]
    return HAL_OK;
 800297e:	4628      	mov	r0, r5
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8002980:	601a      	str	r2, [r3, #0]
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8002982:	695a      	ldr	r2, [r3, #20]
    __HAL_UNLOCK(huart);
 8002984:	f884 5038 	strb.w	r5, [r4, #56]	; 0x38
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8002988:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800298c:	615a      	str	r2, [r3, #20]
    return HAL_OK;
 800298e:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_ERROR;
 8002990:	2001      	movs	r0, #1
 8002992:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_BUSY;
 8002994:	2002      	movs	r0, #2
}
 8002996:	bd38      	pop	{r3, r4, r5, pc}
 8002998:	08002a35 	.word	0x08002a35
 800299c:	08002a63 	.word	0x08002a63
 80029a0:	08002b31 	.word	0x08002b31

080029a4 <HAL_UART_Receive_DMA>:
{
 80029a4:	4613      	mov	r3, r2
  if(huart->RxState == HAL_UART_STATE_READY) 
 80029a6:	f890 203a 	ldrb.w	r2, [r0, #58]	; 0x3a
{
 80029aa:	b573      	push	{r0, r1, r4, r5, r6, lr}
  if(huart->RxState == HAL_UART_STATE_READY) 
 80029ac:	2a20      	cmp	r2, #32
{
 80029ae:	4605      	mov	r5, r0
  if(huart->RxState == HAL_UART_STATE_READY) 
 80029b0:	d138      	bne.n	8002a24 <HAL_UART_Receive_DMA+0x80>
    if((pData == NULL) || (Size == 0U))
 80029b2:	2900      	cmp	r1, #0
 80029b4:	d034      	beq.n	8002a20 <HAL_UART_Receive_DMA+0x7c>
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d032      	beq.n	8002a20 <HAL_UART_Receive_DMA+0x7c>
    __HAL_LOCK(huart);
 80029ba:	f890 2038 	ldrb.w	r2, [r0, #56]	; 0x38
 80029be:	2a01      	cmp	r2, #1
 80029c0:	d030      	beq.n	8002a24 <HAL_UART_Receive_DMA+0x80>
 80029c2:	2201      	movs	r2, #1
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029c4:	2400      	movs	r4, #0
    __HAL_LOCK(huart);
 80029c6:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80029ca:	2222      	movs	r2, #34	; 0x22
    huart->pRxBuffPtr = pData;
 80029cc:	6281      	str	r1, [r0, #40]	; 0x28
    huart->RxXferSize = Size;
 80029ce:	8583      	strh	r3, [r0, #44]	; 0x2c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029d0:	63c4      	str	r4, [r0, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80029d2:	f880 203a 	strb.w	r2, [r0, #58]	; 0x3a
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80029d6:	6b40      	ldr	r0, [r0, #52]	; 0x34
 80029d8:	4a13      	ldr	r2, [pc, #76]	; (8002a28 <HAL_UART_Receive_DMA+0x84>)
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t*)tmp, Size);
 80029da:	682e      	ldr	r6, [r5, #0]
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80029dc:	6282      	str	r2, [r0, #40]	; 0x28
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80029de:	4a13      	ldr	r2, [pc, #76]	; (8002a2c <HAL_UART_Receive_DMA+0x88>)
    huart->hdmarx->XferAbortCallback = NULL;
 80029e0:	6344      	str	r4, [r0, #52]	; 0x34
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80029e2:	62c2      	str	r2, [r0, #44]	; 0x2c
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80029e4:	4a12      	ldr	r2, [pc, #72]	; (8002a30 <HAL_UART_Receive_DMA+0x8c>)
 80029e6:	6302      	str	r2, [r0, #48]	; 0x30
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t*)tmp, Size);
 80029e8:	460a      	mov	r2, r1
 80029ea:	1d31      	adds	r1, r6, #4
 80029ec:	f7ff f864 	bl	8001ab8 <HAL_DMA_Start_IT>
    return HAL_OK;
 80029f0:	4620      	mov	r0, r4
    __HAL_UART_CLEAR_OREFLAG(huart);
 80029f2:	682b      	ldr	r3, [r5, #0]
 80029f4:	9401      	str	r4, [sp, #4]
 80029f6:	681a      	ldr	r2, [r3, #0]
 80029f8:	9201      	str	r2, [sp, #4]
 80029fa:	685a      	ldr	r2, [r3, #4]
    __HAL_UNLOCK(huart);
 80029fc:	f885 4038 	strb.w	r4, [r5, #56]	; 0x38
    __HAL_UART_CLEAR_OREFLAG(huart);
 8002a00:	9201      	str	r2, [sp, #4]
 8002a02:	9a01      	ldr	r2, [sp, #4]
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002a04:	68da      	ldr	r2, [r3, #12]
 8002a06:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002a0a:	60da      	str	r2, [r3, #12]
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a0c:	695a      	ldr	r2, [r3, #20]
 8002a0e:	f042 0201 	orr.w	r2, r2, #1
 8002a12:	615a      	str	r2, [r3, #20]
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002a14:	695a      	ldr	r2, [r3, #20]
 8002a16:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002a1a:	615a      	str	r2, [r3, #20]
}
 8002a1c:	b002      	add	sp, #8
 8002a1e:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8002a20:	2001      	movs	r0, #1
 8002a22:	e7fb      	b.n	8002a1c <HAL_UART_Receive_DMA+0x78>
    return HAL_BUSY;
 8002a24:	2002      	movs	r0, #2
 8002a26:	e7f9      	b.n	8002a1c <HAL_UART_Receive_DMA+0x78>
 8002a28:	08002a6f 	.word	0x08002a6f
 8002a2c:	08002b25 	.word	0x08002b25
 8002a30:	08002b31 	.word	0x08002b31

08002a34 <UART_DMATransmitCplt>:
{
 8002a34:	b508      	push	{r3, lr}
  if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002a36:	6803      	ldr	r3, [r0, #0]
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002a38:	6a42      	ldr	r2, [r0, #36]	; 0x24
  if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f013 0320 	ands.w	r3, r3, #32
 8002a40:	d10a      	bne.n	8002a58 <UART_DMATransmitCplt+0x24>
    huart->TxXferCount = 0U;
 8002a42:	84d3      	strh	r3, [r2, #38]	; 0x26
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8002a44:	6813      	ldr	r3, [r2, #0]
 8002a46:	695a      	ldr	r2, [r3, #20]
 8002a48:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002a4c:	615a      	str	r2, [r3, #20]
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8002a4e:	68da      	ldr	r2, [r3, #12]
 8002a50:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002a54:	60da      	str	r2, [r3, #12]
 8002a56:	bd08      	pop	{r3, pc}
    HAL_UART_TxCpltCallback(huart);
 8002a58:	4610      	mov	r0, r2
 8002a5a:	f7fe fa03 	bl	8000e64 <HAL_UART_TxCpltCallback>
 8002a5e:	bd08      	pop	{r3, pc}

08002a60 <HAL_UART_TxHalfCpltCallback>:
 8002a60:	4770      	bx	lr

08002a62 <UART_DMATxHalfCplt>:
{
 8002a62:	b508      	push	{r3, lr}
  HAL_UART_TxHalfCpltCallback(huart);
 8002a64:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8002a66:	f7ff fffb 	bl	8002a60 <HAL_UART_TxHalfCpltCallback>
 8002a6a:	bd08      	pop	{r3, pc}

08002a6c <HAL_UART_RxCpltCallback>:
 8002a6c:	4770      	bx	lr

08002a6e <UART_DMAReceiveCplt>:
{
 8002a6e:	b508      	push	{r3, lr}
  if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002a70:	6803      	ldr	r3, [r0, #0]
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002a72:	6a42      	ldr	r2, [r0, #36]	; 0x24
  if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f013 0320 	ands.w	r3, r3, #32
 8002a7a:	d110      	bne.n	8002a9e <UART_DMAReceiveCplt+0x30>
    huart->RxXferCount = 0U;
 8002a7c:	85d3      	strh	r3, [r2, #46]	; 0x2e
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002a7e:	6813      	ldr	r3, [r2, #0]
 8002a80:	68d9      	ldr	r1, [r3, #12]
 8002a82:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8002a86:	60d9      	str	r1, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a88:	6959      	ldr	r1, [r3, #20]
 8002a8a:	f021 0101 	bic.w	r1, r1, #1
 8002a8e:	6159      	str	r1, [r3, #20]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002a90:	6959      	ldr	r1, [r3, #20]
 8002a92:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 8002a96:	6159      	str	r1, [r3, #20]
    huart->RxState = HAL_UART_STATE_READY;
 8002a98:	2320      	movs	r3, #32
 8002a9a:	f882 303a 	strb.w	r3, [r2, #58]	; 0x3a
  HAL_UART_RxCpltCallback(huart);
 8002a9e:	4610      	mov	r0, r2
 8002aa0:	f7ff ffe4 	bl	8002a6c <HAL_UART_RxCpltCallback>
 8002aa4:	bd08      	pop	{r3, pc}

08002aa6 <UART_Receive_IT>:
  if(huart->RxState == HAL_UART_STATE_BUSY_RX) 
 8002aa6:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
{
 8002aaa:	b510      	push	{r4, lr}
  if(huart->RxState == HAL_UART_STATE_BUSY_RX) 
 8002aac:	2b22      	cmp	r3, #34	; 0x22
 8002aae:	d136      	bne.n	8002b1e <UART_Receive_IT+0x78>
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002ab0:	6883      	ldr	r3, [r0, #8]
 8002ab2:	6901      	ldr	r1, [r0, #16]
 8002ab4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ab8:	6802      	ldr	r2, [r0, #0]
 8002aba:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8002abc:	d123      	bne.n	8002b06 <UART_Receive_IT+0x60>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002abe:	6852      	ldr	r2, [r2, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 8002ac0:	b9e9      	cbnz	r1, 8002afe <UART_Receive_IT+0x58>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002ac2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002ac6:	f823 2b02 	strh.w	r2, [r3], #2
        huart->pRxBuffPtr += 1U;
 8002aca:	6283      	str	r3, [r0, #40]	; 0x28
    if(--huart->RxXferCount == 0U)
 8002acc:	8dc4      	ldrh	r4, [r0, #46]	; 0x2e
 8002ace:	3c01      	subs	r4, #1
 8002ad0:	b2a4      	uxth	r4, r4
 8002ad2:	85c4      	strh	r4, [r0, #46]	; 0x2e
 8002ad4:	b98c      	cbnz	r4, 8002afa <UART_Receive_IT+0x54>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002ad6:	6803      	ldr	r3, [r0, #0]
 8002ad8:	68da      	ldr	r2, [r3, #12]
 8002ada:	f022 0220 	bic.w	r2, r2, #32
 8002ade:	60da      	str	r2, [r3, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002ae0:	68da      	ldr	r2, [r3, #12]
 8002ae2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002ae6:	60da      	str	r2, [r3, #12]
        __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002ae8:	695a      	ldr	r2, [r3, #20]
 8002aea:	f022 0201 	bic.w	r2, r2, #1
 8002aee:	615a      	str	r2, [r3, #20]
      huart->RxState = HAL_UART_STATE_READY;
 8002af0:	2320      	movs	r3, #32
 8002af2:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
      HAL_UART_RxCpltCallback(huart);
 8002af6:	f7ff ffb9 	bl	8002a6c <HAL_UART_RxCpltCallback>
    if(--huart->RxXferCount == 0U)
 8002afa:	2000      	movs	r0, #0
}
 8002afc:	bd10      	pop	{r4, pc}
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8002afe:	b2d2      	uxtb	r2, r2
 8002b00:	f823 2b01 	strh.w	r2, [r3], #1
 8002b04:	e7e1      	b.n	8002aca <UART_Receive_IT+0x24>
      if(huart->Init.Parity == UART_PARITY_NONE)
 8002b06:	b921      	cbnz	r1, 8002b12 <UART_Receive_IT+0x6c>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002b08:	1c59      	adds	r1, r3, #1
 8002b0a:	6852      	ldr	r2, [r2, #4]
 8002b0c:	6281      	str	r1, [r0, #40]	; 0x28
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002b0e:	701a      	strb	r2, [r3, #0]
 8002b10:	e7dc      	b.n	8002acc <UART_Receive_IT+0x26>
 8002b12:	6852      	ldr	r2, [r2, #4]
 8002b14:	1c59      	adds	r1, r3, #1
 8002b16:	6281      	str	r1, [r0, #40]	; 0x28
 8002b18:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002b1c:	e7f7      	b.n	8002b0e <UART_Receive_IT+0x68>
    return HAL_BUSY;
 8002b1e:	2002      	movs	r0, #2
 8002b20:	bd10      	pop	{r4, pc}

08002b22 <HAL_UART_RxHalfCpltCallback>:
 8002b22:	4770      	bx	lr

08002b24 <UART_DMARxHalfCplt>:
{
 8002b24:	b508      	push	{r3, lr}
  HAL_UART_RxHalfCpltCallback(huart); 
 8002b26:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8002b28:	f7ff fffb 	bl	8002b22 <HAL_UART_RxHalfCpltCallback>
 8002b2c:	bd08      	pop	{r3, pc}

08002b2e <HAL_UART_ErrorCallback>:
 8002b2e:	4770      	bx	lr

08002b30 <UART_DMAError>:
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002b30:	6a41      	ldr	r1, [r0, #36]	; 0x24
{
 8002b32:	b508      	push	{r3, lr}
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8002b34:	680b      	ldr	r3, [r1, #0]
 8002b36:	695a      	ldr	r2, [r3, #20]
  if((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8002b38:	f891 0039 	ldrb.w	r0, [r1, #57]	; 0x39
 8002b3c:	2821      	cmp	r0, #33	; 0x21
 8002b3e:	d10a      	bne.n	8002b56 <UART_DMAError+0x26>
 8002b40:	0612      	lsls	r2, r2, #24
 8002b42:	d508      	bpl.n	8002b56 <UART_DMAError+0x26>
    huart->TxXferCount = 0U;
 8002b44:	2200      	movs	r2, #0
 8002b46:	84ca      	strh	r2, [r1, #38]	; 0x26
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8002b48:	68da      	ldr	r2, [r3, #12]
 8002b4a:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8002b4e:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 8002b50:	2220      	movs	r2, #32
 8002b52:	f881 2039 	strb.w	r2, [r1, #57]	; 0x39
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR); 
 8002b56:	695b      	ldr	r3, [r3, #20]
  if((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8002b58:	f891 203a 	ldrb.w	r2, [r1, #58]	; 0x3a
 8002b5c:	2a22      	cmp	r2, #34	; 0x22
 8002b5e:	d106      	bne.n	8002b6e <UART_DMAError+0x3e>
 8002b60:	065b      	lsls	r3, r3, #25
 8002b62:	d504      	bpl.n	8002b6e <UART_DMAError+0x3e>
    huart->RxXferCount = 0U;
 8002b64:	2300      	movs	r3, #0
    UART_EndRxTransfer(huart);
 8002b66:	4608      	mov	r0, r1
    huart->RxXferCount = 0U;
 8002b68:	85cb      	strh	r3, [r1, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8002b6a:	f7ff fe07 	bl	800277c <UART_EndRxTransfer>
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8002b6e:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
  HAL_UART_ErrorCallback(huart);
 8002b70:	4608      	mov	r0, r1
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8002b72:	f043 0310 	orr.w	r3, r3, #16
 8002b76:	63cb      	str	r3, [r1, #60]	; 0x3c
  HAL_UART_ErrorCallback(huart);
 8002b78:	f7ff ffd9 	bl	8002b2e <HAL_UART_ErrorCallback>
 8002b7c:	bd08      	pop	{r3, pc}
	...

08002b80 <HAL_UART_IRQHandler>:
   uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002b80:	6803      	ldr	r3, [r0, #0]
{
 8002b82:	b570      	push	{r4, r5, r6, lr}
   uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002b84:	681a      	ldr	r2, [r3, #0]
{
 8002b86:	4604      	mov	r4, r0
  if(errorflags == RESET)
 8002b88:	0716      	lsls	r6, r2, #28
   uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002b8a:	68d9      	ldr	r1, [r3, #12]
   uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002b8c:	695d      	ldr	r5, [r3, #20]
  if(errorflags == RESET)
 8002b8e:	d107      	bne.n	8002ba0 <HAL_UART_IRQHandler+0x20>
    if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002b90:	0696      	lsls	r6, r2, #26
 8002b92:	d55a      	bpl.n	8002c4a <HAL_UART_IRQHandler+0xca>
 8002b94:	068d      	lsls	r5, r1, #26
 8002b96:	d558      	bpl.n	8002c4a <HAL_UART_IRQHandler+0xca>
}
 8002b98:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      UART_Receive_IT(huart);
 8002b9c:	f7ff bf83 	b.w	8002aa6 <UART_Receive_IT>
  if((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002ba0:	f015 0501 	ands.w	r5, r5, #1
 8002ba4:	d102      	bne.n	8002bac <HAL_UART_IRQHandler+0x2c>
 8002ba6:	f411 7f90 	tst.w	r1, #288	; 0x120
 8002baa:	d04e      	beq.n	8002c4a <HAL_UART_IRQHandler+0xca>
    if(((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002bac:	07d3      	lsls	r3, r2, #31
 8002bae:	d505      	bpl.n	8002bbc <HAL_UART_IRQHandler+0x3c>
 8002bb0:	05ce      	lsls	r6, r1, #23
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002bb2:	bf42      	ittt	mi
 8002bb4:	6be3      	ldrmi	r3, [r4, #60]	; 0x3c
 8002bb6:	f043 0301 	orrmi.w	r3, r3, #1
 8002bba:	63e3      	strmi	r3, [r4, #60]	; 0x3c
    if(((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002bbc:	0750      	lsls	r0, r2, #29
 8002bbe:	d504      	bpl.n	8002bca <HAL_UART_IRQHandler+0x4a>
 8002bc0:	b11d      	cbz	r5, 8002bca <HAL_UART_IRQHandler+0x4a>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002bc2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002bc4:	f043 0302 	orr.w	r3, r3, #2
 8002bc8:	63e3      	str	r3, [r4, #60]	; 0x3c
    if(((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002bca:	0793      	lsls	r3, r2, #30
 8002bcc:	d504      	bpl.n	8002bd8 <HAL_UART_IRQHandler+0x58>
 8002bce:	b11d      	cbz	r5, 8002bd8 <HAL_UART_IRQHandler+0x58>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002bd0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002bd2:	f043 0304 	orr.w	r3, r3, #4
 8002bd6:	63e3      	str	r3, [r4, #60]	; 0x3c
    if(((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002bd8:	0716      	lsls	r6, r2, #28
 8002bda:	d504      	bpl.n	8002be6 <HAL_UART_IRQHandler+0x66>
 8002bdc:	b11d      	cbz	r5, 8002be6 <HAL_UART_IRQHandler+0x66>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002bde:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002be0:	f043 0308 	orr.w	r3, r3, #8
 8002be4:	63e3      	str	r3, [r4, #60]	; 0x3c
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002be6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d066      	beq.n	8002cba <HAL_UART_IRQHandler+0x13a>
      if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002bec:	0695      	lsls	r5, r2, #26
 8002bee:	d504      	bpl.n	8002bfa <HAL_UART_IRQHandler+0x7a>
 8002bf0:	0688      	lsls	r0, r1, #26
 8002bf2:	d502      	bpl.n	8002bfa <HAL_UART_IRQHandler+0x7a>
        UART_Receive_IT(huart);
 8002bf4:	4620      	mov	r0, r4
 8002bf6:	f7ff ff56 	bl	8002aa6 <UART_Receive_IT>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002bfa:	6823      	ldr	r3, [r4, #0]
        UART_EndRxTransfer(huart);
 8002bfc:	4620      	mov	r0, r4
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002bfe:	695d      	ldr	r5, [r3, #20]
      if(((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002c00:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8002c02:	0711      	lsls	r1, r2, #28
 8002c04:	d402      	bmi.n	8002c0c <HAL_UART_IRQHandler+0x8c>
 8002c06:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 8002c0a:	d01a      	beq.n	8002c42 <HAL_UART_IRQHandler+0xc2>
        UART_EndRxTransfer(huart);
 8002c0c:	f7ff fdb6 	bl	800277c <UART_EndRxTransfer>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c10:	6823      	ldr	r3, [r4, #0]
 8002c12:	695a      	ldr	r2, [r3, #20]
 8002c14:	0652      	lsls	r2, r2, #25
 8002c16:	d510      	bpl.n	8002c3a <HAL_UART_IRQHandler+0xba>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002c18:	695a      	ldr	r2, [r3, #20]
          if(huart->hdmarx != NULL)
 8002c1a:	6b60      	ldr	r0, [r4, #52]	; 0x34
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002c1c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002c20:	615a      	str	r2, [r3, #20]
          if(huart->hdmarx != NULL)
 8002c22:	b150      	cbz	r0, 8002c3a <HAL_UART_IRQHandler+0xba>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002c24:	4b25      	ldr	r3, [pc, #148]	; (8002cbc <HAL_UART_IRQHandler+0x13c>)
 8002c26:	6343      	str	r3, [r0, #52]	; 0x34
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002c28:	f7fe ff84 	bl	8001b34 <HAL_DMA_Abort_IT>
 8002c2c:	2800      	cmp	r0, #0
 8002c2e:	d044      	beq.n	8002cba <HAL_UART_IRQHandler+0x13a>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002c30:	6b60      	ldr	r0, [r4, #52]	; 0x34
}
 8002c32:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002c36:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002c38:	4718      	bx	r3
            HAL_UART_ErrorCallback(huart);
 8002c3a:	4620      	mov	r0, r4
 8002c3c:	f7ff ff77 	bl	8002b2e <HAL_UART_ErrorCallback>
 8002c40:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_ErrorCallback(huart);
 8002c42:	f7ff ff74 	bl	8002b2e <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c46:	63e5      	str	r5, [r4, #60]	; 0x3c
 8002c48:	bd70      	pop	{r4, r5, r6, pc}
  if(((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002c4a:	0616      	lsls	r6, r2, #24
 8002c4c:	d527      	bpl.n	8002c9e <HAL_UART_IRQHandler+0x11e>
 8002c4e:	060d      	lsls	r5, r1, #24
 8002c50:	d525      	bpl.n	8002c9e <HAL_UART_IRQHandler+0x11e>
  if(huart->gState == HAL_UART_STATE_BUSY_TX)
 8002c52:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 8002c56:	2a21      	cmp	r2, #33	; 0x21
 8002c58:	d12f      	bne.n	8002cba <HAL_UART_IRQHandler+0x13a>
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002c5a:	68a2      	ldr	r2, [r4, #8]
 8002c5c:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8002c60:	6a22      	ldr	r2, [r4, #32]
 8002c62:	d117      	bne.n	8002c94 <HAL_UART_IRQHandler+0x114>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002c64:	8811      	ldrh	r1, [r2, #0]
 8002c66:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8002c6a:	6059      	str	r1, [r3, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 8002c6c:	6921      	ldr	r1, [r4, #16]
 8002c6e:	b979      	cbnz	r1, 8002c90 <HAL_UART_IRQHandler+0x110>
        huart->pTxBuffPtr += 2U;
 8002c70:	3202      	adds	r2, #2
        huart->pTxBuffPtr += 1U;
 8002c72:	6222      	str	r2, [r4, #32]
    if(--huart->TxXferCount == 0U)
 8002c74:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 8002c76:	3a01      	subs	r2, #1
 8002c78:	b292      	uxth	r2, r2
 8002c7a:	84e2      	strh	r2, [r4, #38]	; 0x26
 8002c7c:	b9ea      	cbnz	r2, 8002cba <HAL_UART_IRQHandler+0x13a>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002c7e:	68da      	ldr	r2, [r3, #12]
 8002c80:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002c84:	60da      	str	r2, [r3, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002c86:	68da      	ldr	r2, [r3, #12]
 8002c88:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002c8c:	60da      	str	r2, [r3, #12]
 8002c8e:	bd70      	pop	{r4, r5, r6, pc}
        huart->pTxBuffPtr += 1U;
 8002c90:	3201      	adds	r2, #1
 8002c92:	e7ee      	b.n	8002c72 <HAL_UART_IRQHandler+0xf2>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002c94:	1c51      	adds	r1, r2, #1
 8002c96:	6221      	str	r1, [r4, #32]
 8002c98:	7812      	ldrb	r2, [r2, #0]
 8002c9a:	605a      	str	r2, [r3, #4]
 8002c9c:	e7ea      	b.n	8002c74 <HAL_UART_IRQHandler+0xf4>
  if(((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002c9e:	0650      	lsls	r0, r2, #25
 8002ca0:	d50b      	bpl.n	8002cba <HAL_UART_IRQHandler+0x13a>
 8002ca2:	064a      	lsls	r2, r1, #25
 8002ca4:	d509      	bpl.n	8002cba <HAL_UART_IRQHandler+0x13a>
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002ca6:	68da      	ldr	r2, [r3, #12]
  HAL_UART_TxCpltCallback(huart);
 8002ca8:	4620      	mov	r0, r4
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002caa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002cae:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 8002cb0:	2320      	movs	r3, #32
 8002cb2:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 8002cb6:	f7fe f8d5 	bl	8000e64 <HAL_UART_TxCpltCallback>
 8002cba:	bd70      	pop	{r4, r5, r6, pc}
 8002cbc:	08002cc1 	.word	0x08002cc1

08002cc0 <UART_DMAAbortOnError>:
{
 8002cc0:	b508      	push	{r3, lr}
  huart->RxXferCount = 0x00U;
 8002cc2:	2300      	movs	r3, #0
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002cc4:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0x00U;
 8002cc6:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002cc8:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 8002cca:	f7ff ff30 	bl	8002b2e <HAL_UART_ErrorCallback>
 8002cce:	bd08      	pop	{r3, pc}

08002cd0 <_ZN3ros16normalizeSecNSecERmS0_>:
#include "ros/time.h"

namespace ros
{
void normalizeSecNSec(uint32_t& sec, uint32_t& nsec)
{
 8002cd0:	b430      	push	{r4, r5}
  uint32_t nsec_part = nsec % 1000000000UL;
 8002cd2:	680c      	ldr	r4, [r1, #0]
 8002cd4:	0a63      	lsrs	r3, r4, #9
 8002cd6:	4a07      	ldr	r2, [pc, #28]	; (8002cf4 <_ZN3ros16normalizeSecNSecERmS0_+0x24>)
 8002cd8:	fba2 2303 	umull	r2, r3, r2, r3
 8002cdc:	09da      	lsrs	r2, r3, #7
 8002cde:	4d06      	ldr	r5, [pc, #24]	; (8002cf8 <_ZN3ros16normalizeSecNSecERmS0_+0x28>)
 8002ce0:	fb05 4212 	mls	r2, r5, r2, r4
  uint32_t sec_part = nsec / 1000000000UL;
  sec += sec_part;
 8002ce4:	6804      	ldr	r4, [r0, #0]
 8002ce6:	eb04 13d3 	add.w	r3, r4, r3, lsr #7
 8002cea:	6003      	str	r3, [r0, #0]
  nsec = nsec_part;
 8002cec:	600a      	str	r2, [r1, #0]
}
 8002cee:	bc30      	pop	{r4, r5}
 8002cf0:	4770      	bx	lr
 8002cf2:	bf00      	nop
 8002cf4:	00044b83 	.word	0x00044b83
 8002cf8:	3b9aca00 	.word	0x3b9aca00

08002cfc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8002cfc:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8002cfe:	e003      	b.n	8002d08 <LoopCopyDataInit>

08002d00 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8002d00:	4b0b      	ldr	r3, [pc, #44]	; (8002d30 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8002d02:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8002d04:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8002d06:	3104      	adds	r1, #4

08002d08 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8002d08:	480a      	ldr	r0, [pc, #40]	; (8002d34 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8002d0a:	4b0b      	ldr	r3, [pc, #44]	; (8002d38 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8002d0c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8002d0e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8002d10:	d3f6      	bcc.n	8002d00 <CopyDataInit>
  ldr r2, =_sbss
 8002d12:	4a0a      	ldr	r2, [pc, #40]	; (8002d3c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8002d14:	e002      	b.n	8002d1c <LoopFillZerobss>

08002d16 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8002d16:	2300      	movs	r3, #0
  str r3, [r2], #4
 8002d18:	f842 3b04 	str.w	r3, [r2], #4

08002d1c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8002d1c:	4b08      	ldr	r3, [pc, #32]	; (8002d40 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8002d1e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8002d20:	d3f9      	bcc.n	8002d16 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002d22:	f7fe fdad 	bl	8001880 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002d26:	f000 f80f 	bl	8002d48 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002d2a:	f7fe f945 	bl	8000fb8 <main>
  bx lr
 8002d2e:	4770      	bx	lr
  ldr r3, =_sidata
 8002d30:	08003a0c 	.word	0x08003a0c
  ldr r0, =_sdata
 8002d34:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8002d38:	20000510 	.word	0x20000510
  ldr r2, =_sbss
 8002d3c:	20000510 	.word	0x20000510
  ldr r3, = _ebss
 8002d40:	200017d8 	.word	0x200017d8

08002d44 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002d44:	e7fe      	b.n	8002d44 <ADC1_2_IRQHandler>
	...

08002d48 <__libc_init_array>:
 8002d48:	b570      	push	{r4, r5, r6, lr}
 8002d4a:	2500      	movs	r5, #0
 8002d4c:	4e0c      	ldr	r6, [pc, #48]	; (8002d80 <__libc_init_array+0x38>)
 8002d4e:	4c0d      	ldr	r4, [pc, #52]	; (8002d84 <__libc_init_array+0x3c>)
 8002d50:	1ba4      	subs	r4, r4, r6
 8002d52:	10a4      	asrs	r4, r4, #2
 8002d54:	42a5      	cmp	r5, r4
 8002d56:	d109      	bne.n	8002d6c <__libc_init_array+0x24>
 8002d58:	f000 fd14 	bl	8003784 <_init>
 8002d5c:	2500      	movs	r5, #0
 8002d5e:	4e0a      	ldr	r6, [pc, #40]	; (8002d88 <__libc_init_array+0x40>)
 8002d60:	4c0a      	ldr	r4, [pc, #40]	; (8002d8c <__libc_init_array+0x44>)
 8002d62:	1ba4      	subs	r4, r4, r6
 8002d64:	10a4      	asrs	r4, r4, #2
 8002d66:	42a5      	cmp	r5, r4
 8002d68:	d105      	bne.n	8002d76 <__libc_init_array+0x2e>
 8002d6a:	bd70      	pop	{r4, r5, r6, pc}
 8002d6c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002d70:	4798      	blx	r3
 8002d72:	3501      	adds	r5, #1
 8002d74:	e7ee      	b.n	8002d54 <__libc_init_array+0xc>
 8002d76:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002d7a:	4798      	blx	r3
 8002d7c:	3501      	adds	r5, #1
 8002d7e:	e7f2      	b.n	8002d66 <__libc_init_array+0x1e>
 8002d80:	08003a00 	.word	0x08003a00
 8002d84:	08003a00 	.word	0x08003a00
 8002d88:	08003a00 	.word	0x08003a00
 8002d8c:	08003a08 	.word	0x08003a08

08002d90 <memcpy>:
 8002d90:	b510      	push	{r4, lr}
 8002d92:	1e43      	subs	r3, r0, #1
 8002d94:	440a      	add	r2, r1
 8002d96:	4291      	cmp	r1, r2
 8002d98:	d100      	bne.n	8002d9c <memcpy+0xc>
 8002d9a:	bd10      	pop	{r4, pc}
 8002d9c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002da0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002da4:	e7f7      	b.n	8002d96 <memcpy+0x6>
	...

08002da8 <realloc>:
 8002da8:	4b02      	ldr	r3, [pc, #8]	; (8002db4 <realloc+0xc>)
 8002daa:	460a      	mov	r2, r1
 8002dac:	4601      	mov	r1, r0
 8002dae:	6818      	ldr	r0, [r3, #0]
 8002db0:	f000 b802 	b.w	8002db8 <_realloc_r>
 8002db4:	2000000c 	.word	0x2000000c

08002db8 <_realloc_r>:
 8002db8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002dbc:	4682      	mov	sl, r0
 8002dbe:	460c      	mov	r4, r1
 8002dc0:	b929      	cbnz	r1, 8002dce <_realloc_r+0x16>
 8002dc2:	4611      	mov	r1, r2
 8002dc4:	b003      	add	sp, #12
 8002dc6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002dca:	f000 ba89 	b.w	80032e0 <_malloc_r>
 8002dce:	9201      	str	r2, [sp, #4]
 8002dd0:	f000 fcac 	bl	800372c <__malloc_lock>
 8002dd4:	9a01      	ldr	r2, [sp, #4]
 8002dd6:	f854 5c04 	ldr.w	r5, [r4, #-4]
 8002dda:	f102 080b 	add.w	r8, r2, #11
 8002dde:	f1b8 0f16 	cmp.w	r8, #22
 8002de2:	f1a4 0908 	sub.w	r9, r4, #8
 8002de6:	f025 0603 	bic.w	r6, r5, #3
 8002dea:	d90a      	bls.n	8002e02 <_realloc_r+0x4a>
 8002dec:	f038 0807 	bics.w	r8, r8, #7
 8002df0:	d509      	bpl.n	8002e06 <_realloc_r+0x4e>
 8002df2:	230c      	movs	r3, #12
 8002df4:	2700      	movs	r7, #0
 8002df6:	f8ca 3000 	str.w	r3, [sl]
 8002dfa:	4638      	mov	r0, r7
 8002dfc:	b003      	add	sp, #12
 8002dfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002e02:	f04f 0810 	mov.w	r8, #16
 8002e06:	4590      	cmp	r8, r2
 8002e08:	d3f3      	bcc.n	8002df2 <_realloc_r+0x3a>
 8002e0a:	45b0      	cmp	r8, r6
 8002e0c:	f340 8148 	ble.w	80030a0 <_realloc_r+0x2e8>
 8002e10:	4ba9      	ldr	r3, [pc, #676]	; (80030b8 <_realloc_r+0x300>)
 8002e12:	eb09 0106 	add.w	r1, r9, r6
 8002e16:	f8d3 e008 	ldr.w	lr, [r3, #8]
 8002e1a:	469b      	mov	fp, r3
 8002e1c:	4571      	cmp	r1, lr
 8002e1e:	684b      	ldr	r3, [r1, #4]
 8002e20:	d005      	beq.n	8002e2e <_realloc_r+0x76>
 8002e22:	f023 0001 	bic.w	r0, r3, #1
 8002e26:	4408      	add	r0, r1
 8002e28:	6840      	ldr	r0, [r0, #4]
 8002e2a:	07c7      	lsls	r7, r0, #31
 8002e2c:	d447      	bmi.n	8002ebe <_realloc_r+0x106>
 8002e2e:	f023 0303 	bic.w	r3, r3, #3
 8002e32:	4571      	cmp	r1, lr
 8002e34:	eb06 0703 	add.w	r7, r6, r3
 8002e38:	d119      	bne.n	8002e6e <_realloc_r+0xb6>
 8002e3a:	f108 0010 	add.w	r0, r8, #16
 8002e3e:	4287      	cmp	r7, r0
 8002e40:	db3f      	blt.n	8002ec2 <_realloc_r+0x10a>
 8002e42:	eba7 0708 	sub.w	r7, r7, r8
 8002e46:	eb09 0308 	add.w	r3, r9, r8
 8002e4a:	f047 0701 	orr.w	r7, r7, #1
 8002e4e:	f8cb 3008 	str.w	r3, [fp, #8]
 8002e52:	605f      	str	r7, [r3, #4]
 8002e54:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8002e58:	4650      	mov	r0, sl
 8002e5a:	f003 0301 	and.w	r3, r3, #1
 8002e5e:	ea43 0308 	orr.w	r3, r3, r8
 8002e62:	f844 3c04 	str.w	r3, [r4, #-4]
 8002e66:	f000 fc67 	bl	8003738 <__malloc_unlock>
 8002e6a:	4627      	mov	r7, r4
 8002e6c:	e7c5      	b.n	8002dfa <_realloc_r+0x42>
 8002e6e:	45b8      	cmp	r8, r7
 8002e70:	dc27      	bgt.n	8002ec2 <_realloc_r+0x10a>
 8002e72:	68cb      	ldr	r3, [r1, #12]
 8002e74:	688a      	ldr	r2, [r1, #8]
 8002e76:	60d3      	str	r3, [r2, #12]
 8002e78:	609a      	str	r2, [r3, #8]
 8002e7a:	eba7 0008 	sub.w	r0, r7, r8
 8002e7e:	280f      	cmp	r0, #15
 8002e80:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8002e84:	eb09 0207 	add.w	r2, r9, r7
 8002e88:	f240 810c 	bls.w	80030a4 <_realloc_r+0x2ec>
 8002e8c:	f003 0301 	and.w	r3, r3, #1
 8002e90:	eb09 0108 	add.w	r1, r9, r8
 8002e94:	ea43 0308 	orr.w	r3, r3, r8
 8002e98:	f040 0001 	orr.w	r0, r0, #1
 8002e9c:	f8c9 3004 	str.w	r3, [r9, #4]
 8002ea0:	6048      	str	r0, [r1, #4]
 8002ea2:	6853      	ldr	r3, [r2, #4]
 8002ea4:	3108      	adds	r1, #8
 8002ea6:	f043 0301 	orr.w	r3, r3, #1
 8002eaa:	6053      	str	r3, [r2, #4]
 8002eac:	4650      	mov	r0, sl
 8002eae:	f000 f95b 	bl	8003168 <_free_r>
 8002eb2:	4650      	mov	r0, sl
 8002eb4:	f000 fc40 	bl	8003738 <__malloc_unlock>
 8002eb8:	f109 0708 	add.w	r7, r9, #8
 8002ebc:	e79d      	b.n	8002dfa <_realloc_r+0x42>
 8002ebe:	2300      	movs	r3, #0
 8002ec0:	4619      	mov	r1, r3
 8002ec2:	07e8      	lsls	r0, r5, #31
 8002ec4:	f100 8085 	bmi.w	8002fd2 <_realloc_r+0x21a>
 8002ec8:	f854 5c08 	ldr.w	r5, [r4, #-8]
 8002ecc:	eba9 0505 	sub.w	r5, r9, r5
 8002ed0:	6868      	ldr	r0, [r5, #4]
 8002ed2:	f020 0003 	bic.w	r0, r0, #3
 8002ed6:	4430      	add	r0, r6
 8002ed8:	2900      	cmp	r1, #0
 8002eda:	d077      	beq.n	8002fcc <_realloc_r+0x214>
 8002edc:	4571      	cmp	r1, lr
 8002ede:	d151      	bne.n	8002f84 <_realloc_r+0x1cc>
 8002ee0:	4403      	add	r3, r0
 8002ee2:	f108 0110 	add.w	r1, r8, #16
 8002ee6:	428b      	cmp	r3, r1
 8002ee8:	db70      	blt.n	8002fcc <_realloc_r+0x214>
 8002eea:	462f      	mov	r7, r5
 8002eec:	68ea      	ldr	r2, [r5, #12]
 8002eee:	f857 1f08 	ldr.w	r1, [r7, #8]!
 8002ef2:	60ca      	str	r2, [r1, #12]
 8002ef4:	6091      	str	r1, [r2, #8]
 8002ef6:	1f32      	subs	r2, r6, #4
 8002ef8:	2a24      	cmp	r2, #36	; 0x24
 8002efa:	d83c      	bhi.n	8002f76 <_realloc_r+0x1be>
 8002efc:	2a13      	cmp	r2, #19
 8002efe:	d937      	bls.n	8002f70 <_realloc_r+0x1b8>
 8002f00:	6821      	ldr	r1, [r4, #0]
 8002f02:	2a1b      	cmp	r2, #27
 8002f04:	60a9      	str	r1, [r5, #8]
 8002f06:	6861      	ldr	r1, [r4, #4]
 8002f08:	60e9      	str	r1, [r5, #12]
 8002f0a:	d81c      	bhi.n	8002f46 <_realloc_r+0x18e>
 8002f0c:	f105 0210 	add.w	r2, r5, #16
 8002f10:	f104 0108 	add.w	r1, r4, #8
 8002f14:	6808      	ldr	r0, [r1, #0]
 8002f16:	6010      	str	r0, [r2, #0]
 8002f18:	6848      	ldr	r0, [r1, #4]
 8002f1a:	6050      	str	r0, [r2, #4]
 8002f1c:	6889      	ldr	r1, [r1, #8]
 8002f1e:	6091      	str	r1, [r2, #8]
 8002f20:	eba3 0308 	sub.w	r3, r3, r8
 8002f24:	eb05 0208 	add.w	r2, r5, r8
 8002f28:	f043 0301 	orr.w	r3, r3, #1
 8002f2c:	f8cb 2008 	str.w	r2, [fp, #8]
 8002f30:	6053      	str	r3, [r2, #4]
 8002f32:	686b      	ldr	r3, [r5, #4]
 8002f34:	f003 0301 	and.w	r3, r3, #1
 8002f38:	ea43 0308 	orr.w	r3, r3, r8
 8002f3c:	606b      	str	r3, [r5, #4]
 8002f3e:	4650      	mov	r0, sl
 8002f40:	f000 fbfa 	bl	8003738 <__malloc_unlock>
 8002f44:	e759      	b.n	8002dfa <_realloc_r+0x42>
 8002f46:	68a1      	ldr	r1, [r4, #8]
 8002f48:	2a24      	cmp	r2, #36	; 0x24
 8002f4a:	6129      	str	r1, [r5, #16]
 8002f4c:	68e1      	ldr	r1, [r4, #12]
 8002f4e:	bf18      	it	ne
 8002f50:	f105 0218 	addne.w	r2, r5, #24
 8002f54:	6169      	str	r1, [r5, #20]
 8002f56:	bf09      	itett	eq
 8002f58:	6922      	ldreq	r2, [r4, #16]
 8002f5a:	f104 0110 	addne.w	r1, r4, #16
 8002f5e:	61aa      	streq	r2, [r5, #24]
 8002f60:	6960      	ldreq	r0, [r4, #20]
 8002f62:	bf02      	ittt	eq
 8002f64:	f105 0220 	addeq.w	r2, r5, #32
 8002f68:	f104 0118 	addeq.w	r1, r4, #24
 8002f6c:	61e8      	streq	r0, [r5, #28]
 8002f6e:	e7d1      	b.n	8002f14 <_realloc_r+0x15c>
 8002f70:	463a      	mov	r2, r7
 8002f72:	4621      	mov	r1, r4
 8002f74:	e7ce      	b.n	8002f14 <_realloc_r+0x15c>
 8002f76:	4621      	mov	r1, r4
 8002f78:	4638      	mov	r0, r7
 8002f7a:	9301      	str	r3, [sp, #4]
 8002f7c:	f000 fbbc 	bl	80036f8 <memmove>
 8002f80:	9b01      	ldr	r3, [sp, #4]
 8002f82:	e7cd      	b.n	8002f20 <_realloc_r+0x168>
 8002f84:	18c7      	adds	r7, r0, r3
 8002f86:	45b8      	cmp	r8, r7
 8002f88:	dc20      	bgt.n	8002fcc <_realloc_r+0x214>
 8002f8a:	68cb      	ldr	r3, [r1, #12]
 8002f8c:	688a      	ldr	r2, [r1, #8]
 8002f8e:	60d3      	str	r3, [r2, #12]
 8002f90:	609a      	str	r2, [r3, #8]
 8002f92:	4628      	mov	r0, r5
 8002f94:	68eb      	ldr	r3, [r5, #12]
 8002f96:	f850 2f08 	ldr.w	r2, [r0, #8]!
 8002f9a:	60d3      	str	r3, [r2, #12]
 8002f9c:	609a      	str	r2, [r3, #8]
 8002f9e:	1f32      	subs	r2, r6, #4
 8002fa0:	2a24      	cmp	r2, #36	; 0x24
 8002fa2:	d843      	bhi.n	800302c <_realloc_r+0x274>
 8002fa4:	2a13      	cmp	r2, #19
 8002fa6:	d93f      	bls.n	8003028 <_realloc_r+0x270>
 8002fa8:	6823      	ldr	r3, [r4, #0]
 8002faa:	2a1b      	cmp	r2, #27
 8002fac:	60ab      	str	r3, [r5, #8]
 8002fae:	6863      	ldr	r3, [r4, #4]
 8002fb0:	60eb      	str	r3, [r5, #12]
 8002fb2:	d824      	bhi.n	8002ffe <_realloc_r+0x246>
 8002fb4:	f105 0010 	add.w	r0, r5, #16
 8002fb8:	f104 0308 	add.w	r3, r4, #8
 8002fbc:	681a      	ldr	r2, [r3, #0]
 8002fbe:	6002      	str	r2, [r0, #0]
 8002fc0:	685a      	ldr	r2, [r3, #4]
 8002fc2:	6042      	str	r2, [r0, #4]
 8002fc4:	689b      	ldr	r3, [r3, #8]
 8002fc6:	6083      	str	r3, [r0, #8]
 8002fc8:	46a9      	mov	r9, r5
 8002fca:	e756      	b.n	8002e7a <_realloc_r+0xc2>
 8002fcc:	4580      	cmp	r8, r0
 8002fce:	4607      	mov	r7, r0
 8002fd0:	dddf      	ble.n	8002f92 <_realloc_r+0x1da>
 8002fd2:	4611      	mov	r1, r2
 8002fd4:	4650      	mov	r0, sl
 8002fd6:	f000 f983 	bl	80032e0 <_malloc_r>
 8002fda:	4607      	mov	r7, r0
 8002fdc:	2800      	cmp	r0, #0
 8002fde:	d0ae      	beq.n	8002f3e <_realloc_r+0x186>
 8002fe0:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8002fe4:	f1a0 0208 	sub.w	r2, r0, #8
 8002fe8:	f023 0301 	bic.w	r3, r3, #1
 8002fec:	444b      	add	r3, r9
 8002fee:	429a      	cmp	r2, r3
 8002ff0:	d120      	bne.n	8003034 <_realloc_r+0x27c>
 8002ff2:	f850 7c04 	ldr.w	r7, [r0, #-4]
 8002ff6:	f027 0703 	bic.w	r7, r7, #3
 8002ffa:	4437      	add	r7, r6
 8002ffc:	e73d      	b.n	8002e7a <_realloc_r+0xc2>
 8002ffe:	68a3      	ldr	r3, [r4, #8]
 8003000:	2a24      	cmp	r2, #36	; 0x24
 8003002:	612b      	str	r3, [r5, #16]
 8003004:	68e3      	ldr	r3, [r4, #12]
 8003006:	bf18      	it	ne
 8003008:	f105 0018 	addne.w	r0, r5, #24
 800300c:	616b      	str	r3, [r5, #20]
 800300e:	bf09      	itett	eq
 8003010:	6923      	ldreq	r3, [r4, #16]
 8003012:	f104 0310 	addne.w	r3, r4, #16
 8003016:	61ab      	streq	r3, [r5, #24]
 8003018:	6962      	ldreq	r2, [r4, #20]
 800301a:	bf02      	ittt	eq
 800301c:	f105 0020 	addeq.w	r0, r5, #32
 8003020:	f104 0318 	addeq.w	r3, r4, #24
 8003024:	61ea      	streq	r2, [r5, #28]
 8003026:	e7c9      	b.n	8002fbc <_realloc_r+0x204>
 8003028:	4623      	mov	r3, r4
 800302a:	e7c7      	b.n	8002fbc <_realloc_r+0x204>
 800302c:	4621      	mov	r1, r4
 800302e:	f000 fb63 	bl	80036f8 <memmove>
 8003032:	e7c9      	b.n	8002fc8 <_realloc_r+0x210>
 8003034:	1f32      	subs	r2, r6, #4
 8003036:	2a24      	cmp	r2, #36	; 0x24
 8003038:	d82e      	bhi.n	8003098 <_realloc_r+0x2e0>
 800303a:	2a13      	cmp	r2, #19
 800303c:	d929      	bls.n	8003092 <_realloc_r+0x2da>
 800303e:	6823      	ldr	r3, [r4, #0]
 8003040:	2a1b      	cmp	r2, #27
 8003042:	6003      	str	r3, [r0, #0]
 8003044:	6863      	ldr	r3, [r4, #4]
 8003046:	6043      	str	r3, [r0, #4]
 8003048:	d80e      	bhi.n	8003068 <_realloc_r+0x2b0>
 800304a:	f100 0308 	add.w	r3, r0, #8
 800304e:	f104 0208 	add.w	r2, r4, #8
 8003052:	6811      	ldr	r1, [r2, #0]
 8003054:	6019      	str	r1, [r3, #0]
 8003056:	6851      	ldr	r1, [r2, #4]
 8003058:	6059      	str	r1, [r3, #4]
 800305a:	6892      	ldr	r2, [r2, #8]
 800305c:	609a      	str	r2, [r3, #8]
 800305e:	4621      	mov	r1, r4
 8003060:	4650      	mov	r0, sl
 8003062:	f000 f881 	bl	8003168 <_free_r>
 8003066:	e76a      	b.n	8002f3e <_realloc_r+0x186>
 8003068:	68a3      	ldr	r3, [r4, #8]
 800306a:	2a24      	cmp	r2, #36	; 0x24
 800306c:	6083      	str	r3, [r0, #8]
 800306e:	68e3      	ldr	r3, [r4, #12]
 8003070:	bf18      	it	ne
 8003072:	f104 0210 	addne.w	r2, r4, #16
 8003076:	60c3      	str	r3, [r0, #12]
 8003078:	bf09      	itett	eq
 800307a:	6923      	ldreq	r3, [r4, #16]
 800307c:	f100 0310 	addne.w	r3, r0, #16
 8003080:	6103      	streq	r3, [r0, #16]
 8003082:	6961      	ldreq	r1, [r4, #20]
 8003084:	bf02      	ittt	eq
 8003086:	f100 0318 	addeq.w	r3, r0, #24
 800308a:	f104 0218 	addeq.w	r2, r4, #24
 800308e:	6141      	streq	r1, [r0, #20]
 8003090:	e7df      	b.n	8003052 <_realloc_r+0x29a>
 8003092:	4603      	mov	r3, r0
 8003094:	4622      	mov	r2, r4
 8003096:	e7dc      	b.n	8003052 <_realloc_r+0x29a>
 8003098:	4621      	mov	r1, r4
 800309a:	f000 fb2d 	bl	80036f8 <memmove>
 800309e:	e7de      	b.n	800305e <_realloc_r+0x2a6>
 80030a0:	4637      	mov	r7, r6
 80030a2:	e6ea      	b.n	8002e7a <_realloc_r+0xc2>
 80030a4:	f003 0301 	and.w	r3, r3, #1
 80030a8:	431f      	orrs	r7, r3
 80030aa:	f8c9 7004 	str.w	r7, [r9, #4]
 80030ae:	6853      	ldr	r3, [r2, #4]
 80030b0:	f043 0301 	orr.w	r3, r3, #1
 80030b4:	6053      	str	r3, [r2, #4]
 80030b6:	e6fc      	b.n	8002eb2 <_realloc_r+0xfa>
 80030b8:	20000100 	.word	0x20000100

080030bc <_malloc_trim_r>:
 80030bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80030c0:	4689      	mov	r9, r1
 80030c2:	4f25      	ldr	r7, [pc, #148]	; (8003158 <_malloc_trim_r+0x9c>)
 80030c4:	4606      	mov	r6, r0
 80030c6:	f000 fb31 	bl	800372c <__malloc_lock>
 80030ca:	68bb      	ldr	r3, [r7, #8]
 80030cc:	f8df 8094 	ldr.w	r8, [pc, #148]	; 8003164 <_malloc_trim_r+0xa8>
 80030d0:	685d      	ldr	r5, [r3, #4]
 80030d2:	f1a8 0411 	sub.w	r4, r8, #17
 80030d6:	f025 0503 	bic.w	r5, r5, #3
 80030da:	eba4 0409 	sub.w	r4, r4, r9
 80030de:	442c      	add	r4, r5
 80030e0:	fbb4 f4f8 	udiv	r4, r4, r8
 80030e4:	3c01      	subs	r4, #1
 80030e6:	fb08 f404 	mul.w	r4, r8, r4
 80030ea:	4544      	cmp	r4, r8
 80030ec:	da05      	bge.n	80030fa <_malloc_trim_r+0x3e>
 80030ee:	4630      	mov	r0, r6
 80030f0:	f000 fb22 	bl	8003738 <__malloc_unlock>
 80030f4:	2000      	movs	r0, #0
 80030f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80030fa:	2100      	movs	r1, #0
 80030fc:	4630      	mov	r0, r6
 80030fe:	f000 fb21 	bl	8003744 <_sbrk_r>
 8003102:	68bb      	ldr	r3, [r7, #8]
 8003104:	442b      	add	r3, r5
 8003106:	4298      	cmp	r0, r3
 8003108:	d1f1      	bne.n	80030ee <_malloc_trim_r+0x32>
 800310a:	4261      	negs	r1, r4
 800310c:	4630      	mov	r0, r6
 800310e:	f000 fb19 	bl	8003744 <_sbrk_r>
 8003112:	3001      	adds	r0, #1
 8003114:	d110      	bne.n	8003138 <_malloc_trim_r+0x7c>
 8003116:	2100      	movs	r1, #0
 8003118:	4630      	mov	r0, r6
 800311a:	f000 fb13 	bl	8003744 <_sbrk_r>
 800311e:	68ba      	ldr	r2, [r7, #8]
 8003120:	1a83      	subs	r3, r0, r2
 8003122:	2b0f      	cmp	r3, #15
 8003124:	dde3      	ble.n	80030ee <_malloc_trim_r+0x32>
 8003126:	490d      	ldr	r1, [pc, #52]	; (800315c <_malloc_trim_r+0xa0>)
 8003128:	f043 0301 	orr.w	r3, r3, #1
 800312c:	6809      	ldr	r1, [r1, #0]
 800312e:	6053      	str	r3, [r2, #4]
 8003130:	1a40      	subs	r0, r0, r1
 8003132:	490b      	ldr	r1, [pc, #44]	; (8003160 <_malloc_trim_r+0xa4>)
 8003134:	6008      	str	r0, [r1, #0]
 8003136:	e7da      	b.n	80030ee <_malloc_trim_r+0x32>
 8003138:	68bb      	ldr	r3, [r7, #8]
 800313a:	4a09      	ldr	r2, [pc, #36]	; (8003160 <_malloc_trim_r+0xa4>)
 800313c:	1b2d      	subs	r5, r5, r4
 800313e:	f045 0501 	orr.w	r5, r5, #1
 8003142:	605d      	str	r5, [r3, #4]
 8003144:	6813      	ldr	r3, [r2, #0]
 8003146:	4630      	mov	r0, r6
 8003148:	1b1c      	subs	r4, r3, r4
 800314a:	6014      	str	r4, [r2, #0]
 800314c:	f000 faf4 	bl	8003738 <__malloc_unlock>
 8003150:	2001      	movs	r0, #1
 8003152:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003156:	bf00      	nop
 8003158:	20000100 	.word	0x20000100
 800315c:	20000508 	.word	0x20000508
 8003160:	2000178c 	.word	0x2000178c
 8003164:	00001000 	.word	0x00001000

08003168 <_free_r>:
 8003168:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800316c:	4604      	mov	r4, r0
 800316e:	4688      	mov	r8, r1
 8003170:	2900      	cmp	r1, #0
 8003172:	f000 80ab 	beq.w	80032cc <_free_r+0x164>
 8003176:	f000 fad9 	bl	800372c <__malloc_lock>
 800317a:	f858 2c04 	ldr.w	r2, [r8, #-4]
 800317e:	4d54      	ldr	r5, [pc, #336]	; (80032d0 <_free_r+0x168>)
 8003180:	f022 0001 	bic.w	r0, r2, #1
 8003184:	f1a8 0308 	sub.w	r3, r8, #8
 8003188:	181f      	adds	r7, r3, r0
 800318a:	68a9      	ldr	r1, [r5, #8]
 800318c:	687e      	ldr	r6, [r7, #4]
 800318e:	428f      	cmp	r7, r1
 8003190:	f026 0603 	bic.w	r6, r6, #3
 8003194:	f002 0201 	and.w	r2, r2, #1
 8003198:	d11b      	bne.n	80031d2 <_free_r+0x6a>
 800319a:	4430      	add	r0, r6
 800319c:	b93a      	cbnz	r2, 80031ae <_free_r+0x46>
 800319e:	f858 2c08 	ldr.w	r2, [r8, #-8]
 80031a2:	1a9b      	subs	r3, r3, r2
 80031a4:	6899      	ldr	r1, [r3, #8]
 80031a6:	4410      	add	r0, r2
 80031a8:	68da      	ldr	r2, [r3, #12]
 80031aa:	60ca      	str	r2, [r1, #12]
 80031ac:	6091      	str	r1, [r2, #8]
 80031ae:	f040 0201 	orr.w	r2, r0, #1
 80031b2:	605a      	str	r2, [r3, #4]
 80031b4:	60ab      	str	r3, [r5, #8]
 80031b6:	4b47      	ldr	r3, [pc, #284]	; (80032d4 <_free_r+0x16c>)
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	4298      	cmp	r0, r3
 80031bc:	d304      	bcc.n	80031c8 <_free_r+0x60>
 80031be:	4b46      	ldr	r3, [pc, #280]	; (80032d8 <_free_r+0x170>)
 80031c0:	4620      	mov	r0, r4
 80031c2:	6819      	ldr	r1, [r3, #0]
 80031c4:	f7ff ff7a 	bl	80030bc <_malloc_trim_r>
 80031c8:	4620      	mov	r0, r4
 80031ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80031ce:	f000 bab3 	b.w	8003738 <__malloc_unlock>
 80031d2:	607e      	str	r6, [r7, #4]
 80031d4:	2a00      	cmp	r2, #0
 80031d6:	d139      	bne.n	800324c <_free_r+0xe4>
 80031d8:	f858 1c08 	ldr.w	r1, [r8, #-8]
 80031dc:	f105 0e08 	add.w	lr, r5, #8
 80031e0:	1a5b      	subs	r3, r3, r1
 80031e2:	4408      	add	r0, r1
 80031e4:	6899      	ldr	r1, [r3, #8]
 80031e6:	4571      	cmp	r1, lr
 80031e8:	d032      	beq.n	8003250 <_free_r+0xe8>
 80031ea:	f8d3 e00c 	ldr.w	lr, [r3, #12]
 80031ee:	f8c1 e00c 	str.w	lr, [r1, #12]
 80031f2:	f8ce 1008 	str.w	r1, [lr, #8]
 80031f6:	19b9      	adds	r1, r7, r6
 80031f8:	6849      	ldr	r1, [r1, #4]
 80031fa:	07c9      	lsls	r1, r1, #31
 80031fc:	d40a      	bmi.n	8003214 <_free_r+0xac>
 80031fe:	4430      	add	r0, r6
 8003200:	68b9      	ldr	r1, [r7, #8]
 8003202:	bb3a      	cbnz	r2, 8003254 <_free_r+0xec>
 8003204:	4e35      	ldr	r6, [pc, #212]	; (80032dc <_free_r+0x174>)
 8003206:	42b1      	cmp	r1, r6
 8003208:	d124      	bne.n	8003254 <_free_r+0xec>
 800320a:	2201      	movs	r2, #1
 800320c:	616b      	str	r3, [r5, #20]
 800320e:	612b      	str	r3, [r5, #16]
 8003210:	60d9      	str	r1, [r3, #12]
 8003212:	6099      	str	r1, [r3, #8]
 8003214:	f040 0101 	orr.w	r1, r0, #1
 8003218:	6059      	str	r1, [r3, #4]
 800321a:	5018      	str	r0, [r3, r0]
 800321c:	2a00      	cmp	r2, #0
 800321e:	d1d3      	bne.n	80031c8 <_free_r+0x60>
 8003220:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8003224:	d21a      	bcs.n	800325c <_free_r+0xf4>
 8003226:	2201      	movs	r2, #1
 8003228:	08c0      	lsrs	r0, r0, #3
 800322a:	1081      	asrs	r1, r0, #2
 800322c:	408a      	lsls	r2, r1
 800322e:	6869      	ldr	r1, [r5, #4]
 8003230:	3001      	adds	r0, #1
 8003232:	430a      	orrs	r2, r1
 8003234:	606a      	str	r2, [r5, #4]
 8003236:	f855 1030 	ldr.w	r1, [r5, r0, lsl #3]
 800323a:	eb05 02c0 	add.w	r2, r5, r0, lsl #3
 800323e:	3a08      	subs	r2, #8
 8003240:	60da      	str	r2, [r3, #12]
 8003242:	6099      	str	r1, [r3, #8]
 8003244:	f845 3030 	str.w	r3, [r5, r0, lsl #3]
 8003248:	60cb      	str	r3, [r1, #12]
 800324a:	e7bd      	b.n	80031c8 <_free_r+0x60>
 800324c:	2200      	movs	r2, #0
 800324e:	e7d2      	b.n	80031f6 <_free_r+0x8e>
 8003250:	2201      	movs	r2, #1
 8003252:	e7d0      	b.n	80031f6 <_free_r+0x8e>
 8003254:	68fe      	ldr	r6, [r7, #12]
 8003256:	60ce      	str	r6, [r1, #12]
 8003258:	60b1      	str	r1, [r6, #8]
 800325a:	e7db      	b.n	8003214 <_free_r+0xac>
 800325c:	0a42      	lsrs	r2, r0, #9
 800325e:	2a04      	cmp	r2, #4
 8003260:	d813      	bhi.n	800328a <_free_r+0x122>
 8003262:	0982      	lsrs	r2, r0, #6
 8003264:	3238      	adds	r2, #56	; 0x38
 8003266:	1c51      	adds	r1, r2, #1
 8003268:	f855 1031 	ldr.w	r1, [r5, r1, lsl #3]
 800326c:	eb05 06c2 	add.w	r6, r5, r2, lsl #3
 8003270:	428e      	cmp	r6, r1
 8003272:	d124      	bne.n	80032be <_free_r+0x156>
 8003274:	2001      	movs	r0, #1
 8003276:	1092      	asrs	r2, r2, #2
 8003278:	fa00 f202 	lsl.w	r2, r0, r2
 800327c:	6868      	ldr	r0, [r5, #4]
 800327e:	4302      	orrs	r2, r0
 8003280:	606a      	str	r2, [r5, #4]
 8003282:	60de      	str	r6, [r3, #12]
 8003284:	6099      	str	r1, [r3, #8]
 8003286:	60b3      	str	r3, [r6, #8]
 8003288:	e7de      	b.n	8003248 <_free_r+0xe0>
 800328a:	2a14      	cmp	r2, #20
 800328c:	d801      	bhi.n	8003292 <_free_r+0x12a>
 800328e:	325b      	adds	r2, #91	; 0x5b
 8003290:	e7e9      	b.n	8003266 <_free_r+0xfe>
 8003292:	2a54      	cmp	r2, #84	; 0x54
 8003294:	d802      	bhi.n	800329c <_free_r+0x134>
 8003296:	0b02      	lsrs	r2, r0, #12
 8003298:	326e      	adds	r2, #110	; 0x6e
 800329a:	e7e4      	b.n	8003266 <_free_r+0xfe>
 800329c:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 80032a0:	d802      	bhi.n	80032a8 <_free_r+0x140>
 80032a2:	0bc2      	lsrs	r2, r0, #15
 80032a4:	3277      	adds	r2, #119	; 0x77
 80032a6:	e7de      	b.n	8003266 <_free_r+0xfe>
 80032a8:	f240 5154 	movw	r1, #1364	; 0x554
 80032ac:	428a      	cmp	r2, r1
 80032ae:	bf9a      	itte	ls
 80032b0:	0c82      	lsrls	r2, r0, #18
 80032b2:	327c      	addls	r2, #124	; 0x7c
 80032b4:	227e      	movhi	r2, #126	; 0x7e
 80032b6:	e7d6      	b.n	8003266 <_free_r+0xfe>
 80032b8:	6889      	ldr	r1, [r1, #8]
 80032ba:	428e      	cmp	r6, r1
 80032bc:	d004      	beq.n	80032c8 <_free_r+0x160>
 80032be:	684a      	ldr	r2, [r1, #4]
 80032c0:	f022 0203 	bic.w	r2, r2, #3
 80032c4:	4290      	cmp	r0, r2
 80032c6:	d3f7      	bcc.n	80032b8 <_free_r+0x150>
 80032c8:	68ce      	ldr	r6, [r1, #12]
 80032ca:	e7da      	b.n	8003282 <_free_r+0x11a>
 80032cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80032d0:	20000100 	.word	0x20000100
 80032d4:	2000050c 	.word	0x2000050c
 80032d8:	200017bc 	.word	0x200017bc
 80032dc:	20000108 	.word	0x20000108

080032e0 <_malloc_r>:
 80032e0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80032e4:	f101 040b 	add.w	r4, r1, #11
 80032e8:	2c16      	cmp	r4, #22
 80032ea:	4681      	mov	r9, r0
 80032ec:	d907      	bls.n	80032fe <_malloc_r+0x1e>
 80032ee:	f034 0407 	bics.w	r4, r4, #7
 80032f2:	d505      	bpl.n	8003300 <_malloc_r+0x20>
 80032f4:	230c      	movs	r3, #12
 80032f6:	f8c9 3000 	str.w	r3, [r9]
 80032fa:	2600      	movs	r6, #0
 80032fc:	e131      	b.n	8003562 <_malloc_r+0x282>
 80032fe:	2410      	movs	r4, #16
 8003300:	428c      	cmp	r4, r1
 8003302:	d3f7      	bcc.n	80032f4 <_malloc_r+0x14>
 8003304:	4648      	mov	r0, r9
 8003306:	f000 fa11 	bl	800372c <__malloc_lock>
 800330a:	f5b4 7ffc 	cmp.w	r4, #504	; 0x1f8
 800330e:	4d9b      	ldr	r5, [pc, #620]	; (800357c <_malloc_r+0x29c>)
 8003310:	d236      	bcs.n	8003380 <_malloc_r+0xa0>
 8003312:	f104 0208 	add.w	r2, r4, #8
 8003316:	442a      	add	r2, r5
 8003318:	6856      	ldr	r6, [r2, #4]
 800331a:	f1a2 0108 	sub.w	r1, r2, #8
 800331e:	428e      	cmp	r6, r1
 8003320:	ea4f 03d4 	mov.w	r3, r4, lsr #3
 8003324:	d102      	bne.n	800332c <_malloc_r+0x4c>
 8003326:	68d6      	ldr	r6, [r2, #12]
 8003328:	42b2      	cmp	r2, r6
 800332a:	d010      	beq.n	800334e <_malloc_r+0x6e>
 800332c:	6873      	ldr	r3, [r6, #4]
 800332e:	68f2      	ldr	r2, [r6, #12]
 8003330:	68b1      	ldr	r1, [r6, #8]
 8003332:	f023 0303 	bic.w	r3, r3, #3
 8003336:	60ca      	str	r2, [r1, #12]
 8003338:	4433      	add	r3, r6
 800333a:	6091      	str	r1, [r2, #8]
 800333c:	685a      	ldr	r2, [r3, #4]
 800333e:	f042 0201 	orr.w	r2, r2, #1
 8003342:	605a      	str	r2, [r3, #4]
 8003344:	4648      	mov	r0, r9
 8003346:	f000 f9f7 	bl	8003738 <__malloc_unlock>
 800334a:	3608      	adds	r6, #8
 800334c:	e109      	b.n	8003562 <_malloc_r+0x282>
 800334e:	3302      	adds	r3, #2
 8003350:	4a8b      	ldr	r2, [pc, #556]	; (8003580 <_malloc_r+0x2a0>)
 8003352:	692e      	ldr	r6, [r5, #16]
 8003354:	4611      	mov	r1, r2
 8003356:	4296      	cmp	r6, r2
 8003358:	d06d      	beq.n	8003436 <_malloc_r+0x156>
 800335a:	6870      	ldr	r0, [r6, #4]
 800335c:	f020 0003 	bic.w	r0, r0, #3
 8003360:	1b07      	subs	r7, r0, r4
 8003362:	2f0f      	cmp	r7, #15
 8003364:	dd47      	ble.n	80033f6 <_malloc_r+0x116>
 8003366:	1933      	adds	r3, r6, r4
 8003368:	f044 0401 	orr.w	r4, r4, #1
 800336c:	6074      	str	r4, [r6, #4]
 800336e:	616b      	str	r3, [r5, #20]
 8003370:	612b      	str	r3, [r5, #16]
 8003372:	60da      	str	r2, [r3, #12]
 8003374:	609a      	str	r2, [r3, #8]
 8003376:	f047 0201 	orr.w	r2, r7, #1
 800337a:	605a      	str	r2, [r3, #4]
 800337c:	5037      	str	r7, [r6, r0]
 800337e:	e7e1      	b.n	8003344 <_malloc_r+0x64>
 8003380:	0a63      	lsrs	r3, r4, #9
 8003382:	d02a      	beq.n	80033da <_malloc_r+0xfa>
 8003384:	2b04      	cmp	r3, #4
 8003386:	d812      	bhi.n	80033ae <_malloc_r+0xce>
 8003388:	09a3      	lsrs	r3, r4, #6
 800338a:	3338      	adds	r3, #56	; 0x38
 800338c:	1c5a      	adds	r2, r3, #1
 800338e:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 8003392:	6856      	ldr	r6, [r2, #4]
 8003394:	f1a2 0008 	sub.w	r0, r2, #8
 8003398:	4286      	cmp	r6, r0
 800339a:	d006      	beq.n	80033aa <_malloc_r+0xca>
 800339c:	6872      	ldr	r2, [r6, #4]
 800339e:	f022 0203 	bic.w	r2, r2, #3
 80033a2:	1b11      	subs	r1, r2, r4
 80033a4:	290f      	cmp	r1, #15
 80033a6:	dd1c      	ble.n	80033e2 <_malloc_r+0x102>
 80033a8:	3b01      	subs	r3, #1
 80033aa:	3301      	adds	r3, #1
 80033ac:	e7d0      	b.n	8003350 <_malloc_r+0x70>
 80033ae:	2b14      	cmp	r3, #20
 80033b0:	d801      	bhi.n	80033b6 <_malloc_r+0xd6>
 80033b2:	335b      	adds	r3, #91	; 0x5b
 80033b4:	e7ea      	b.n	800338c <_malloc_r+0xac>
 80033b6:	2b54      	cmp	r3, #84	; 0x54
 80033b8:	d802      	bhi.n	80033c0 <_malloc_r+0xe0>
 80033ba:	0b23      	lsrs	r3, r4, #12
 80033bc:	336e      	adds	r3, #110	; 0x6e
 80033be:	e7e5      	b.n	800338c <_malloc_r+0xac>
 80033c0:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 80033c4:	d802      	bhi.n	80033cc <_malloc_r+0xec>
 80033c6:	0be3      	lsrs	r3, r4, #15
 80033c8:	3377      	adds	r3, #119	; 0x77
 80033ca:	e7df      	b.n	800338c <_malloc_r+0xac>
 80033cc:	f240 5254 	movw	r2, #1364	; 0x554
 80033d0:	4293      	cmp	r3, r2
 80033d2:	d804      	bhi.n	80033de <_malloc_r+0xfe>
 80033d4:	0ca3      	lsrs	r3, r4, #18
 80033d6:	337c      	adds	r3, #124	; 0x7c
 80033d8:	e7d8      	b.n	800338c <_malloc_r+0xac>
 80033da:	233f      	movs	r3, #63	; 0x3f
 80033dc:	e7d6      	b.n	800338c <_malloc_r+0xac>
 80033de:	237e      	movs	r3, #126	; 0x7e
 80033e0:	e7d4      	b.n	800338c <_malloc_r+0xac>
 80033e2:	2900      	cmp	r1, #0
 80033e4:	68f1      	ldr	r1, [r6, #12]
 80033e6:	db04      	blt.n	80033f2 <_malloc_r+0x112>
 80033e8:	68b3      	ldr	r3, [r6, #8]
 80033ea:	60d9      	str	r1, [r3, #12]
 80033ec:	608b      	str	r3, [r1, #8]
 80033ee:	18b3      	adds	r3, r6, r2
 80033f0:	e7a4      	b.n	800333c <_malloc_r+0x5c>
 80033f2:	460e      	mov	r6, r1
 80033f4:	e7d0      	b.n	8003398 <_malloc_r+0xb8>
 80033f6:	2f00      	cmp	r7, #0
 80033f8:	616a      	str	r2, [r5, #20]
 80033fa:	612a      	str	r2, [r5, #16]
 80033fc:	db05      	blt.n	800340a <_malloc_r+0x12a>
 80033fe:	4430      	add	r0, r6
 8003400:	6843      	ldr	r3, [r0, #4]
 8003402:	f043 0301 	orr.w	r3, r3, #1
 8003406:	6043      	str	r3, [r0, #4]
 8003408:	e79c      	b.n	8003344 <_malloc_r+0x64>
 800340a:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 800340e:	d244      	bcs.n	800349a <_malloc_r+0x1ba>
 8003410:	2201      	movs	r2, #1
 8003412:	08c0      	lsrs	r0, r0, #3
 8003414:	1087      	asrs	r7, r0, #2
 8003416:	fa02 f707 	lsl.w	r7, r2, r7
 800341a:	686a      	ldr	r2, [r5, #4]
 800341c:	3001      	adds	r0, #1
 800341e:	433a      	orrs	r2, r7
 8003420:	606a      	str	r2, [r5, #4]
 8003422:	f855 7030 	ldr.w	r7, [r5, r0, lsl #3]
 8003426:	eb05 02c0 	add.w	r2, r5, r0, lsl #3
 800342a:	3a08      	subs	r2, #8
 800342c:	60f2      	str	r2, [r6, #12]
 800342e:	60b7      	str	r7, [r6, #8]
 8003430:	f845 6030 	str.w	r6, [r5, r0, lsl #3]
 8003434:	60fe      	str	r6, [r7, #12]
 8003436:	2001      	movs	r0, #1
 8003438:	109a      	asrs	r2, r3, #2
 800343a:	fa00 f202 	lsl.w	r2, r0, r2
 800343e:	6868      	ldr	r0, [r5, #4]
 8003440:	4282      	cmp	r2, r0
 8003442:	f200 809f 	bhi.w	8003584 <_malloc_r+0x2a4>
 8003446:	4202      	tst	r2, r0
 8003448:	d106      	bne.n	8003458 <_malloc_r+0x178>
 800344a:	f023 0303 	bic.w	r3, r3, #3
 800344e:	0052      	lsls	r2, r2, #1
 8003450:	4202      	tst	r2, r0
 8003452:	f103 0304 	add.w	r3, r3, #4
 8003456:	d0fa      	beq.n	800344e <_malloc_r+0x16e>
 8003458:	eb05 0cc3 	add.w	ip, r5, r3, lsl #3
 800345c:	46e0      	mov	r8, ip
 800345e:	469e      	mov	lr, r3
 8003460:	f8d8 600c 	ldr.w	r6, [r8, #12]
 8003464:	4546      	cmp	r6, r8
 8003466:	d153      	bne.n	8003510 <_malloc_r+0x230>
 8003468:	f10e 0e01 	add.w	lr, lr, #1
 800346c:	f01e 0f03 	tst.w	lr, #3
 8003470:	f108 0808 	add.w	r8, r8, #8
 8003474:	d1f4      	bne.n	8003460 <_malloc_r+0x180>
 8003476:	0798      	lsls	r0, r3, #30
 8003478:	d179      	bne.n	800356e <_malloc_r+0x28e>
 800347a:	686b      	ldr	r3, [r5, #4]
 800347c:	ea23 0302 	bic.w	r3, r3, r2
 8003480:	606b      	str	r3, [r5, #4]
 8003482:	6868      	ldr	r0, [r5, #4]
 8003484:	0052      	lsls	r2, r2, #1
 8003486:	4282      	cmp	r2, r0
 8003488:	d87c      	bhi.n	8003584 <_malloc_r+0x2a4>
 800348a:	2a00      	cmp	r2, #0
 800348c:	d07a      	beq.n	8003584 <_malloc_r+0x2a4>
 800348e:	4673      	mov	r3, lr
 8003490:	4202      	tst	r2, r0
 8003492:	d1e1      	bne.n	8003458 <_malloc_r+0x178>
 8003494:	3304      	adds	r3, #4
 8003496:	0052      	lsls	r2, r2, #1
 8003498:	e7fa      	b.n	8003490 <_malloc_r+0x1b0>
 800349a:	0a42      	lsrs	r2, r0, #9
 800349c:	2a04      	cmp	r2, #4
 800349e:	d815      	bhi.n	80034cc <_malloc_r+0x1ec>
 80034a0:	0982      	lsrs	r2, r0, #6
 80034a2:	3238      	adds	r2, #56	; 0x38
 80034a4:	1c57      	adds	r7, r2, #1
 80034a6:	f855 7037 	ldr.w	r7, [r5, r7, lsl #3]
 80034aa:	eb05 0ec2 	add.w	lr, r5, r2, lsl #3
 80034ae:	45be      	cmp	lr, r7
 80034b0:	d126      	bne.n	8003500 <_malloc_r+0x220>
 80034b2:	2001      	movs	r0, #1
 80034b4:	1092      	asrs	r2, r2, #2
 80034b6:	fa00 f202 	lsl.w	r2, r0, r2
 80034ba:	6868      	ldr	r0, [r5, #4]
 80034bc:	4310      	orrs	r0, r2
 80034be:	6068      	str	r0, [r5, #4]
 80034c0:	f8c6 e00c 	str.w	lr, [r6, #12]
 80034c4:	60b7      	str	r7, [r6, #8]
 80034c6:	f8ce 6008 	str.w	r6, [lr, #8]
 80034ca:	e7b3      	b.n	8003434 <_malloc_r+0x154>
 80034cc:	2a14      	cmp	r2, #20
 80034ce:	d801      	bhi.n	80034d4 <_malloc_r+0x1f4>
 80034d0:	325b      	adds	r2, #91	; 0x5b
 80034d2:	e7e7      	b.n	80034a4 <_malloc_r+0x1c4>
 80034d4:	2a54      	cmp	r2, #84	; 0x54
 80034d6:	d802      	bhi.n	80034de <_malloc_r+0x1fe>
 80034d8:	0b02      	lsrs	r2, r0, #12
 80034da:	326e      	adds	r2, #110	; 0x6e
 80034dc:	e7e2      	b.n	80034a4 <_malloc_r+0x1c4>
 80034de:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 80034e2:	d802      	bhi.n	80034ea <_malloc_r+0x20a>
 80034e4:	0bc2      	lsrs	r2, r0, #15
 80034e6:	3277      	adds	r2, #119	; 0x77
 80034e8:	e7dc      	b.n	80034a4 <_malloc_r+0x1c4>
 80034ea:	f240 5754 	movw	r7, #1364	; 0x554
 80034ee:	42ba      	cmp	r2, r7
 80034f0:	bf9a      	itte	ls
 80034f2:	0c82      	lsrls	r2, r0, #18
 80034f4:	327c      	addls	r2, #124	; 0x7c
 80034f6:	227e      	movhi	r2, #126	; 0x7e
 80034f8:	e7d4      	b.n	80034a4 <_malloc_r+0x1c4>
 80034fa:	68bf      	ldr	r7, [r7, #8]
 80034fc:	45be      	cmp	lr, r7
 80034fe:	d004      	beq.n	800350a <_malloc_r+0x22a>
 8003500:	687a      	ldr	r2, [r7, #4]
 8003502:	f022 0203 	bic.w	r2, r2, #3
 8003506:	4290      	cmp	r0, r2
 8003508:	d3f7      	bcc.n	80034fa <_malloc_r+0x21a>
 800350a:	f8d7 e00c 	ldr.w	lr, [r7, #12]
 800350e:	e7d7      	b.n	80034c0 <_malloc_r+0x1e0>
 8003510:	6870      	ldr	r0, [r6, #4]
 8003512:	68f7      	ldr	r7, [r6, #12]
 8003514:	f020 0003 	bic.w	r0, r0, #3
 8003518:	eba0 0a04 	sub.w	sl, r0, r4
 800351c:	f1ba 0f0f 	cmp.w	sl, #15
 8003520:	dd10      	ble.n	8003544 <_malloc_r+0x264>
 8003522:	68b2      	ldr	r2, [r6, #8]
 8003524:	1933      	adds	r3, r6, r4
 8003526:	f044 0401 	orr.w	r4, r4, #1
 800352a:	6074      	str	r4, [r6, #4]
 800352c:	60d7      	str	r7, [r2, #12]
 800352e:	60ba      	str	r2, [r7, #8]
 8003530:	f04a 0201 	orr.w	r2, sl, #1
 8003534:	616b      	str	r3, [r5, #20]
 8003536:	612b      	str	r3, [r5, #16]
 8003538:	60d9      	str	r1, [r3, #12]
 800353a:	6099      	str	r1, [r3, #8]
 800353c:	605a      	str	r2, [r3, #4]
 800353e:	f846 a000 	str.w	sl, [r6, r0]
 8003542:	e6ff      	b.n	8003344 <_malloc_r+0x64>
 8003544:	f1ba 0f00 	cmp.w	sl, #0
 8003548:	db0f      	blt.n	800356a <_malloc_r+0x28a>
 800354a:	4430      	add	r0, r6
 800354c:	6843      	ldr	r3, [r0, #4]
 800354e:	f043 0301 	orr.w	r3, r3, #1
 8003552:	6043      	str	r3, [r0, #4]
 8003554:	f856 3f08 	ldr.w	r3, [r6, #8]!
 8003558:	4648      	mov	r0, r9
 800355a:	60df      	str	r7, [r3, #12]
 800355c:	60bb      	str	r3, [r7, #8]
 800355e:	f000 f8eb 	bl	8003738 <__malloc_unlock>
 8003562:	4630      	mov	r0, r6
 8003564:	b003      	add	sp, #12
 8003566:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800356a:	463e      	mov	r6, r7
 800356c:	e77a      	b.n	8003464 <_malloc_r+0x184>
 800356e:	f85c 0908 	ldr.w	r0, [ip], #-8
 8003572:	3b01      	subs	r3, #1
 8003574:	4584      	cmp	ip, r0
 8003576:	f43f af7e 	beq.w	8003476 <_malloc_r+0x196>
 800357a:	e782      	b.n	8003482 <_malloc_r+0x1a2>
 800357c:	20000100 	.word	0x20000100
 8003580:	20000108 	.word	0x20000108
 8003584:	f8d5 b008 	ldr.w	fp, [r5, #8]
 8003588:	f8db 6004 	ldr.w	r6, [fp, #4]
 800358c:	f026 0603 	bic.w	r6, r6, #3
 8003590:	42b4      	cmp	r4, r6
 8003592:	d803      	bhi.n	800359c <_malloc_r+0x2bc>
 8003594:	1b33      	subs	r3, r6, r4
 8003596:	2b0f      	cmp	r3, #15
 8003598:	f300 8095 	bgt.w	80036c6 <_malloc_r+0x3e6>
 800359c:	4a4f      	ldr	r2, [pc, #316]	; (80036dc <_malloc_r+0x3fc>)
 800359e:	eb0b 0306 	add.w	r3, fp, r6
 80035a2:	6817      	ldr	r7, [r2, #0]
 80035a4:	4a4e      	ldr	r2, [pc, #312]	; (80036e0 <_malloc_r+0x400>)
 80035a6:	3710      	adds	r7, #16
 80035a8:	6811      	ldr	r1, [r2, #0]
 80035aa:	4427      	add	r7, r4
 80035ac:	3101      	adds	r1, #1
 80035ae:	d005      	beq.n	80035bc <_malloc_r+0x2dc>
 80035b0:	494c      	ldr	r1, [pc, #304]	; (80036e4 <_malloc_r+0x404>)
 80035b2:	3901      	subs	r1, #1
 80035b4:	440f      	add	r7, r1
 80035b6:	3101      	adds	r1, #1
 80035b8:	4249      	negs	r1, r1
 80035ba:	400f      	ands	r7, r1
 80035bc:	4639      	mov	r1, r7
 80035be:	4648      	mov	r0, r9
 80035c0:	9201      	str	r2, [sp, #4]
 80035c2:	9300      	str	r3, [sp, #0]
 80035c4:	f000 f8be 	bl	8003744 <_sbrk_r>
 80035c8:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 80035cc:	4680      	mov	r8, r0
 80035ce:	d055      	beq.n	800367c <_malloc_r+0x39c>
 80035d0:	9b00      	ldr	r3, [sp, #0]
 80035d2:	9a01      	ldr	r2, [sp, #4]
 80035d4:	4283      	cmp	r3, r0
 80035d6:	d901      	bls.n	80035dc <_malloc_r+0x2fc>
 80035d8:	45ab      	cmp	fp, r5
 80035da:	d14f      	bne.n	800367c <_malloc_r+0x39c>
 80035dc:	4842      	ldr	r0, [pc, #264]	; (80036e8 <_malloc_r+0x408>)
 80035de:	4543      	cmp	r3, r8
 80035e0:	6801      	ldr	r1, [r0, #0]
 80035e2:	4682      	mov	sl, r0
 80035e4:	eb07 0e01 	add.w	lr, r7, r1
 80035e8:	f8c0 e000 	str.w	lr, [r0]
 80035ec:	493f      	ldr	r1, [pc, #252]	; (80036ec <_malloc_r+0x40c>)
 80035ee:	d113      	bne.n	8003618 <_malloc_r+0x338>
 80035f0:	420b      	tst	r3, r1
 80035f2:	d111      	bne.n	8003618 <_malloc_r+0x338>
 80035f4:	68ab      	ldr	r3, [r5, #8]
 80035f6:	443e      	add	r6, r7
 80035f8:	f046 0601 	orr.w	r6, r6, #1
 80035fc:	605e      	str	r6, [r3, #4]
 80035fe:	4a3c      	ldr	r2, [pc, #240]	; (80036f0 <_malloc_r+0x410>)
 8003600:	f8da 3000 	ldr.w	r3, [sl]
 8003604:	6811      	ldr	r1, [r2, #0]
 8003606:	428b      	cmp	r3, r1
 8003608:	bf88      	it	hi
 800360a:	6013      	strhi	r3, [r2, #0]
 800360c:	4a39      	ldr	r2, [pc, #228]	; (80036f4 <_malloc_r+0x414>)
 800360e:	6811      	ldr	r1, [r2, #0]
 8003610:	428b      	cmp	r3, r1
 8003612:	bf88      	it	hi
 8003614:	6013      	strhi	r3, [r2, #0]
 8003616:	e031      	b.n	800367c <_malloc_r+0x39c>
 8003618:	6810      	ldr	r0, [r2, #0]
 800361a:	3001      	adds	r0, #1
 800361c:	bf1b      	ittet	ne
 800361e:	eba8 0303 	subne.w	r3, r8, r3
 8003622:	4473      	addne	r3, lr
 8003624:	f8c2 8000 	streq.w	r8, [r2]
 8003628:	f8ca 3000 	strne.w	r3, [sl]
 800362c:	f018 0007 	ands.w	r0, r8, #7
 8003630:	bf1c      	itt	ne
 8003632:	f1c0 0008 	rsbne	r0, r0, #8
 8003636:	4480      	addne	r8, r0
 8003638:	4b2a      	ldr	r3, [pc, #168]	; (80036e4 <_malloc_r+0x404>)
 800363a:	4447      	add	r7, r8
 800363c:	4418      	add	r0, r3
 800363e:	400f      	ands	r7, r1
 8003640:	1bc7      	subs	r7, r0, r7
 8003642:	4639      	mov	r1, r7
 8003644:	4648      	mov	r0, r9
 8003646:	f000 f87d 	bl	8003744 <_sbrk_r>
 800364a:	1c43      	adds	r3, r0, #1
 800364c:	bf04      	itt	eq
 800364e:	4640      	moveq	r0, r8
 8003650:	2700      	moveq	r7, #0
 8003652:	f8da 3000 	ldr.w	r3, [sl]
 8003656:	eba0 0008 	sub.w	r0, r0, r8
 800365a:	443b      	add	r3, r7
 800365c:	4407      	add	r7, r0
 800365e:	f047 0701 	orr.w	r7, r7, #1
 8003662:	45ab      	cmp	fp, r5
 8003664:	f8c5 8008 	str.w	r8, [r5, #8]
 8003668:	f8ca 3000 	str.w	r3, [sl]
 800366c:	f8c8 7004 	str.w	r7, [r8, #4]
 8003670:	d0c5      	beq.n	80035fe <_malloc_r+0x31e>
 8003672:	2e0f      	cmp	r6, #15
 8003674:	d810      	bhi.n	8003698 <_malloc_r+0x3b8>
 8003676:	2301      	movs	r3, #1
 8003678:	f8c8 3004 	str.w	r3, [r8, #4]
 800367c:	68ab      	ldr	r3, [r5, #8]
 800367e:	685a      	ldr	r2, [r3, #4]
 8003680:	f022 0203 	bic.w	r2, r2, #3
 8003684:	4294      	cmp	r4, r2
 8003686:	eba2 0304 	sub.w	r3, r2, r4
 800368a:	d801      	bhi.n	8003690 <_malloc_r+0x3b0>
 800368c:	2b0f      	cmp	r3, #15
 800368e:	dc1a      	bgt.n	80036c6 <_malloc_r+0x3e6>
 8003690:	4648      	mov	r0, r9
 8003692:	f000 f851 	bl	8003738 <__malloc_unlock>
 8003696:	e630      	b.n	80032fa <_malloc_r+0x1a>
 8003698:	2205      	movs	r2, #5
 800369a:	f8db 3004 	ldr.w	r3, [fp, #4]
 800369e:	3e0c      	subs	r6, #12
 80036a0:	f026 0607 	bic.w	r6, r6, #7
 80036a4:	f003 0301 	and.w	r3, r3, #1
 80036a8:	4333      	orrs	r3, r6
 80036aa:	f8cb 3004 	str.w	r3, [fp, #4]
 80036ae:	2e0f      	cmp	r6, #15
 80036b0:	eb0b 0306 	add.w	r3, fp, r6
 80036b4:	605a      	str	r2, [r3, #4]
 80036b6:	609a      	str	r2, [r3, #8]
 80036b8:	d9a1      	bls.n	80035fe <_malloc_r+0x31e>
 80036ba:	f10b 0108 	add.w	r1, fp, #8
 80036be:	4648      	mov	r0, r9
 80036c0:	f7ff fd52 	bl	8003168 <_free_r>
 80036c4:	e79b      	b.n	80035fe <_malloc_r+0x31e>
 80036c6:	68ae      	ldr	r6, [r5, #8]
 80036c8:	f044 0201 	orr.w	r2, r4, #1
 80036cc:	f043 0301 	orr.w	r3, r3, #1
 80036d0:	4434      	add	r4, r6
 80036d2:	6072      	str	r2, [r6, #4]
 80036d4:	60ac      	str	r4, [r5, #8]
 80036d6:	6063      	str	r3, [r4, #4]
 80036d8:	e634      	b.n	8003344 <_malloc_r+0x64>
 80036da:	bf00      	nop
 80036dc:	200017bc 	.word	0x200017bc
 80036e0:	20000508 	.word	0x20000508
 80036e4:	00001000 	.word	0x00001000
 80036e8:	2000178c 	.word	0x2000178c
 80036ec:	00000fff 	.word	0x00000fff
 80036f0:	200017b4 	.word	0x200017b4
 80036f4:	200017b8 	.word	0x200017b8

080036f8 <memmove>:
 80036f8:	4288      	cmp	r0, r1
 80036fa:	b510      	push	{r4, lr}
 80036fc:	eb01 0302 	add.w	r3, r1, r2
 8003700:	d803      	bhi.n	800370a <memmove+0x12>
 8003702:	1e42      	subs	r2, r0, #1
 8003704:	4299      	cmp	r1, r3
 8003706:	d10c      	bne.n	8003722 <memmove+0x2a>
 8003708:	bd10      	pop	{r4, pc}
 800370a:	4298      	cmp	r0, r3
 800370c:	d2f9      	bcs.n	8003702 <memmove+0xa>
 800370e:	1881      	adds	r1, r0, r2
 8003710:	1ad2      	subs	r2, r2, r3
 8003712:	42d3      	cmn	r3, r2
 8003714:	d100      	bne.n	8003718 <memmove+0x20>
 8003716:	bd10      	pop	{r4, pc}
 8003718:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800371c:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8003720:	e7f7      	b.n	8003712 <memmove+0x1a>
 8003722:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003726:	f802 4f01 	strb.w	r4, [r2, #1]!
 800372a:	e7eb      	b.n	8003704 <memmove+0xc>

0800372c <__malloc_lock>:
 800372c:	4801      	ldr	r0, [pc, #4]	; (8003734 <__malloc_lock+0x8>)
 800372e:	f000 b819 	b.w	8003764 <__retarget_lock_acquire_recursive>
 8003732:	bf00      	nop
 8003734:	200017cc 	.word	0x200017cc

08003738 <__malloc_unlock>:
 8003738:	4801      	ldr	r0, [pc, #4]	; (8003740 <__malloc_unlock+0x8>)
 800373a:	f000 b814 	b.w	8003766 <__retarget_lock_release_recursive>
 800373e:	bf00      	nop
 8003740:	200017cc 	.word	0x200017cc

08003744 <_sbrk_r>:
 8003744:	b538      	push	{r3, r4, r5, lr}
 8003746:	2300      	movs	r3, #0
 8003748:	4c05      	ldr	r4, [pc, #20]	; (8003760 <_sbrk_r+0x1c>)
 800374a:	4605      	mov	r5, r0
 800374c:	4608      	mov	r0, r1
 800374e:	6023      	str	r3, [r4, #0]
 8003750:	f000 f80a 	bl	8003768 <_sbrk>
 8003754:	1c43      	adds	r3, r0, #1
 8003756:	d102      	bne.n	800375e <_sbrk_r+0x1a>
 8003758:	6823      	ldr	r3, [r4, #0]
 800375a:	b103      	cbz	r3, 800375e <_sbrk_r+0x1a>
 800375c:	602b      	str	r3, [r5, #0]
 800375e:	bd38      	pop	{r3, r4, r5, pc}
 8003760:	200017d4 	.word	0x200017d4

08003764 <__retarget_lock_acquire_recursive>:
 8003764:	4770      	bx	lr

08003766 <__retarget_lock_release_recursive>:
 8003766:	4770      	bx	lr

08003768 <_sbrk>:
 8003768:	4b04      	ldr	r3, [pc, #16]	; (800377c <_sbrk+0x14>)
 800376a:	4602      	mov	r2, r0
 800376c:	6819      	ldr	r1, [r3, #0]
 800376e:	b909      	cbnz	r1, 8003774 <_sbrk+0xc>
 8003770:	4903      	ldr	r1, [pc, #12]	; (8003780 <_sbrk+0x18>)
 8003772:	6019      	str	r1, [r3, #0]
 8003774:	6818      	ldr	r0, [r3, #0]
 8003776:	4402      	add	r2, r0
 8003778:	601a      	str	r2, [r3, #0]
 800377a:	4770      	bx	lr
 800377c:	200017c0 	.word	0x200017c0
 8003780:	200017d8 	.word	0x200017d8

08003784 <_init>:
 8003784:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003786:	bf00      	nop
 8003788:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800378a:	bc08      	pop	{r3}
 800378c:	469e      	mov	lr, r3
 800378e:	4770      	bx	lr

08003790 <_fini>:
 8003790:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003792:	bf00      	nop
 8003794:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003796:	bc08      	pop	{r3}
 8003798:	469e      	mov	lr, r3
 800379a:	4770      	bx	lr
